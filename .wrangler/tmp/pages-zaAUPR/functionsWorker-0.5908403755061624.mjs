// [[path]].js
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse3;
    exports.serialize = serialize2;
    var __toString = Object.prototype.toString, fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse3(str, options) {
      if (typeof str != "string")
        throw new TypeError("argument str must be a string");
      for (var obj = {}, opt = options || {}, dec = opt.decode || decode3, index = 0; index < str.length; ) {
        var eqIdx = str.indexOf("=", index);
        if (eqIdx === -1)
          break;
        var endIdx = str.indexOf(";", index);
        if (endIdx === -1)
          endIdx = str.length;
        else if (endIdx < eqIdx) {
          index = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        var key = str.slice(index, eqIdx).trim();
        if (obj[key] === void 0) {
          var val = str.slice(eqIdx + 1, endIdx).trim();
          val.charCodeAt(0) === 34 && (val = val.slice(1, -1)), obj[key] = tryDecode(val, dec);
        }
        index = endIdx + 1;
      }
      return obj;
    }
    function serialize2(name, val, options) {
      var opt = options || {}, enc = opt.encode || encode3;
      if (typeof enc != "function")
        throw new TypeError("option encode is invalid");
      if (!fieldContentRegExp.test(name))
        throw new TypeError("argument name is invalid");
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value))
        throw new TypeError("argument val is invalid");
      var str = name + "=" + value;
      if (opt.maxAge != null) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge))
          throw new TypeError("option maxAge is invalid");
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain))
          throw new TypeError("option domain is invalid");
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path))
          throw new TypeError("option path is invalid");
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        var expires = opt.expires;
        if (!isDate(expires) || isNaN(expires.valueOf()))
          throw new TypeError("option expires is invalid");
        str += "; Expires=" + expires.toUTCString();
      }
      if (opt.httpOnly && (str += "; HttpOnly"), opt.secure && (str += "; Secure"), opt.priority) {
        var priority = typeof opt.priority == "string" ? opt.priority.toLowerCase() : opt.priority;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError("option priority is invalid");
        }
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite == "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function decode3(str) {
      return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
    }
    function encode3(val) {
      return encodeURIComponent(val);
    }
    function isDate(val) {
      return __toString.call(val) === "[object Date]" || val instanceof Date;
    }
    function tryDecode(str, decode4) {
      try {
        return decode4(str);
      } catch {
        return str;
      }
    }
  }
});
function warnOnce(condition, message2) {
  !condition && !alreadyWarned[message2] && (alreadyWarned[message2] = true, console.warn(message2));
}
var alreadyWarned;
var init_warnings = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/warnings.js"() {
    alreadyWarned = {};
  }
});
async function encodeCookieValue(sign2, value, secrets) {
  let encoded = encodeData(value);
  return secrets.length > 0 && (encoded = await sign2(encoded, secrets[0])), encoded;
}
async function decodeCookieValue(unsign, value, secrets) {
  if (secrets.length > 0) {
    for (let secret of secrets) {
      let unsignedValue = await unsign(value, secret);
      if (unsignedValue !== false)
        return decodeData(unsignedValue);
    }
    return null;
  }
  return decodeData(value);
}
function encodeData(value) {
  return btoa(myUnescape(encodeURIComponent(JSON.stringify(value))));
}
function decodeData(value) {
  try {
    return JSON.parse(decodeURIComponent(myEscape(atob(value))));
  } catch {
    return {};
  }
}
function myEscape(value) {
  let str = value.toString(), result = "", index = 0, chr, code;
  for (; index < str.length; )
    chr = str.charAt(index++), /[\w*+\-./@]/.exec(chr) ? result += chr : (code = chr.charCodeAt(0), code < 256 ? result += "%" + hex(code, 2) : result += "%u" + hex(code, 4).toUpperCase());
  return result;
}
function hex(code, length) {
  let result = code.toString(16);
  for (; result.length < length; )
    result = "0" + result;
  return result;
}
function myUnescape(value) {
  let str = value.toString(), result = "", index = 0, chr, part;
  for (; index < str.length; ) {
    if (chr = str.charAt(index++), chr === "%") {
      if (str.charAt(index) === "u") {
        if (part = str.slice(index + 1, index + 5), /^[\da-f]{4}$/i.exec(part)) {
          result += String.fromCharCode(parseInt(part, 16)), index += 5;
          continue;
        }
      } else if (part = str.slice(index, index + 2), /^[\da-f]{2}$/i.exec(part)) {
        result += String.fromCharCode(parseInt(part, 16)), index += 2;
        continue;
      }
    }
    result += chr;
  }
  return result;
}
function warnOnceAboutExpiresCookie(name, expires) {
  warnOnce(!expires, `The "${name}" cookie has an "expires" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use \`commitSession(session, { expires })\` if using a session storage object, or \`cookie.serialize("value", { expires })\` if you're using the cookie directly.`);
}
var import_cookie;
var createCookieFactory;
var isCookie;
var init_cookies = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/cookies.js"() {
    import_cookie = __toESM(require_cookie());
    init_warnings();
    createCookieFactory = ({
      sign: sign2,
      unsign
    }) => (name, cookieOptions = {}) => {
      let {
        secrets = [],
        ...options
      } = {
        path: "/",
        sameSite: "lax",
        ...cookieOptions
      };
      return warnOnceAboutExpiresCookie(name, options.expires), {
        get name() {
          return name;
        },
        get isSigned() {
          return secrets.length > 0;
        },
        get expires() {
          return typeof options.maxAge < "u" ? new Date(Date.now() + options.maxAge * 1e3) : options.expires;
        },
        async parse(cookieHeader, parseOptions) {
          if (!cookieHeader)
            return null;
          let cookies = (0, import_cookie.parse)(cookieHeader, {
            ...options,
            ...parseOptions
          });
          return name in cookies ? cookies[name] === "" ? "" : await decodeCookieValue(unsign, cookies[name], secrets) : null;
        },
        async serialize(value, serializeOptions) {
          return (0, import_cookie.serialize)(name, value === "" ? "" : await encodeCookieValue(sign2, value, secrets), {
            ...options,
            ...serializeOptions
          });
        }
      };
    }, isCookie = (object) => object != null && typeof object.name == "string" && typeof object.isSigned == "boolean" && typeof object.parse == "function" && typeof object.serialize == "function";
  }
});
function stringToArray(s) {
  let utf8 = unescape(encodeURIComponent(s));
  return Uint8Array.from(utf8, (_, i) => utf8.charCodeAt(i));
}
function arrayToString(a) {
  let utf8 = String.fromCharCode.apply(null, a);
  return decodeURIComponent(escape(utf8));
}
function mergeArrays(...arrays) {
  let out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0)), offset = 0;
  for (let arr of arrays)
    out.set(arr, offset), offset += arr.length;
  return out;
}
function arraysEqual(a, b) {
  if (a.length !== b.length)
    return false;
  for (let i = 0; i < a.length; i++)
    if (a[i] !== b[i])
      return false;
  return true;
}
var init_utils = __esm({
  "node_modules/@web3-storage/multipart-parser/esm/src/utils.js"() {
  }
});
function coerce(a) {
  return a instanceof Uint8Array ? (index) => a[index] : a;
}
function jsmemcmp(buf1, pos1, buf2, pos2, len) {
  let fn1 = coerce(buf1), fn2 = coerce(buf2);
  for (let i = 0; i < len; ++i)
    if (fn1(pos1 + i) !== fn2(pos2 + i))
      return false;
  return true;
}
function createOccurenceTable(s) {
  let table = new Array(256).fill(s.length);
  if (s.length > 1)
    for (let i = 0; i < s.length - 1; i++)
      table[s[i]] = s.length - 1 - i;
  return table;
}
var MATCH;
var StreamSearch;
var ReadableStreamSearch;
var EOQ;
var QueueableStreamSearch;
var init_search = __esm({
  "node_modules/@web3-storage/multipart-parser/esm/src/search.js"() {
    init_utils();
    MATCH = Symbol("Match"), StreamSearch = class {
      constructor(needle) {
        this._lookbehind = new Uint8Array(), typeof needle == "string" ? this._needle = needle = stringToArray(needle) : this._needle = needle, this._lastChar = needle[needle.length - 1], this._occ = createOccurenceTable(needle);
      }
      feed(chunk) {
        let pos = 0, tokens, allTokens = [];
        for (; pos !== chunk.length; )
          [pos, ...tokens] = this._feed(chunk, pos), allTokens.push(...tokens);
        return allTokens;
      }
      end() {
        let tail = this._lookbehind;
        return this._lookbehind = new Uint8Array(), tail;
      }
      _feed(data, bufPos) {
        let tokens = [], pos = -this._lookbehind.length;
        if (pos < 0) {
          for (; pos < 0 && pos <= data.length - this._needle.length; ) {
            let ch = this._charAt(data, pos + this._needle.length - 1);
            if (ch === this._lastChar && this._memcmp(data, pos, this._needle.length - 1))
              return pos > -this._lookbehind.length && tokens.push(this._lookbehind.slice(0, this._lookbehind.length + pos)), tokens.push(MATCH), this._lookbehind = new Uint8Array(), [
                pos + this._needle.length,
                ...tokens
              ];
            pos += this._occ[ch];
          }
          if (pos < 0)
            for (; pos < 0 && !this._memcmp(data, pos, data.length - pos); )
              pos++;
          if (pos >= 0)
            tokens.push(this._lookbehind), this._lookbehind = new Uint8Array();
          else {
            let bytesToCutOff = this._lookbehind.length + pos;
            return bytesToCutOff > 0 && (tokens.push(this._lookbehind.slice(0, bytesToCutOff)), this._lookbehind = this._lookbehind.slice(bytesToCutOff)), this._lookbehind = Uint8Array.from(new Array(this._lookbehind.length + data.length), (_, i) => this._charAt(data, i - this._lookbehind.length)), [
              data.length,
              ...tokens
            ];
          }
        }
        for (pos += bufPos; pos <= data.length - this._needle.length; ) {
          let ch = data[pos + this._needle.length - 1];
          if (ch === this._lastChar && data[pos] === this._needle[0] && jsmemcmp(this._needle, 0, data, pos, this._needle.length - 1))
            return pos > bufPos && tokens.push(data.slice(bufPos, pos)), tokens.push(MATCH), [
              pos + this._needle.length,
              ...tokens
            ];
          pos += this._occ[ch];
        }
        if (pos < data.length) {
          for (; pos < data.length && (data[pos] !== this._needle[0] || !jsmemcmp(data, pos, this._needle, 0, data.length - pos)); )
            ++pos;
          pos < data.length && (this._lookbehind = data.slice(pos));
        }
        return pos > 0 && tokens.push(data.slice(bufPos, pos < data.length ? pos : data.length)), [
          data.length,
          ...tokens
        ];
      }
      _charAt(data, pos) {
        return pos < 0 ? this._lookbehind[this._lookbehind.length + pos] : data[pos];
      }
      _memcmp(data, pos, len) {
        return jsmemcmp(this._charAt.bind(this, data), pos, this._needle, 0, len);
      }
    }, ReadableStreamSearch = class {
      constructor(needle, _readableStream) {
        this._readableStream = _readableStream, this._search = new StreamSearch(needle);
      }
      async *[Symbol.asyncIterator]() {
        let reader = this._readableStream.getReader();
        try {
          for (; ; ) {
            let result = await reader.read();
            if (result.done)
              break;
            yield* this._search.feed(result.value);
          }
          let tail = this._search.end();
          tail.length && (yield tail);
        } finally {
          reader.releaseLock();
        }
      }
    }, EOQ = Symbol("End of Queue"), QueueableStreamSearch = class {
      constructor(needle) {
        this._chunksQueue = [], this._closed = false, this._search = new StreamSearch(needle);
      }
      push(...chunks) {
        if (this._closed)
          throw new Error("cannot call push after close");
        this._chunksQueue.push(...chunks), this._notify && this._notify();
      }
      close() {
        if (this._closed)
          throw new Error("close was already called");
        this._closed = true, this._chunksQueue.push(EOQ), this._notify && this._notify();
      }
      async *[Symbol.asyncIterator]() {
        for (; ; ) {
          let chunk;
          for (; !(chunk = this._chunksQueue.shift()); )
            await new Promise((resolve) => this._notify = resolve), this._notify = void 0;
          if (chunk === EOQ)
            break;
          yield* this._search.feed(chunk);
        }
        let tail = this._search.end();
        tail.length && (yield tail);
      }
    };
  }
});
function parseContentDisposition(header) {
  let parts = header.split(";").map((part) => part.trim());
  if (parts.shift() !== "form-data")
    throw new Error('malformed content-disposition header: missing "form-data" in `' + JSON.stringify(parts) + "`");
  let out = {};
  for (let part of parts) {
    let kv = part.split("=", 2);
    if (kv.length !== 2)
      throw new Error("malformed content-disposition header: key-value pair not found - " + part + " in `" + header + "`");
    let [name, value] = kv;
    if (value[0] === '"' && value[value.length - 1] === '"')
      out[name] = value.slice(1, -1).replace(/\\"/g, '"');
    else if (value[0] !== '"' && value[value.length - 1] !== '"')
      out[name] = value;
    else if (value[0] === '"' && value[value.length - 1] !== '"' || value[0] !== '"' && value[value.length - 1] === '"')
      throw new Error("malformed content-disposition header: mismatched quotations in `" + header + "`");
  }
  if (!out.name)
    throw new Error("malformed content-disposition header: missing field name in `" + header + "`");
  return out;
}
function parsePartHeaders(lines) {
  let entries = [], disposition = false, line;
  for (; typeof (line = lines.shift()) < "u"; ) {
    let colon = line.indexOf(":");
    if (colon === -1)
      throw new Error("malformed multipart-form header: missing colon");
    let header = line.slice(0, colon).trim().toLowerCase(), value = line.slice(colon + 1).trim();
    switch (header) {
      case "content-disposition":
        disposition = true, entries.push(...Object.entries(parseContentDisposition(value)));
        break;
      case "content-type":
        entries.push([
          "contentType",
          value
        ]);
    }
  }
  if (!disposition)
    throw new Error("malformed multipart-form header: missing content-disposition");
  return Object.fromEntries(entries);
}
async function readHeaderLines(it, needle) {
  let firstChunk = true, lastTokenWasMatch = false, headerLines = [[]], crlfSearch = new StreamSearch(CRLF);
  for (; ; ) {
    let result = await it.next();
    if (result.done)
      throw new Error("malformed multipart-form data: unexpected end of stream");
    if (firstChunk && result.value !== MATCH && arraysEqual(result.value.slice(0, 2), dash))
      return [
        void 0,
        new Uint8Array()
      ];
    let chunk;
    if (result.value !== MATCH)
      chunk = result.value;
    else if (!lastTokenWasMatch)
      chunk = needle;
    else
      throw new Error("malformed multipart-form data: unexpected boundary");
    if (!chunk.length)
      continue;
    firstChunk && (firstChunk = false);
    let tokens = crlfSearch.feed(chunk);
    for (let [i, token] of tokens.entries()) {
      let isMatch = token === MATCH;
      if (!(!isMatch && !token.length)) {
        if (lastTokenWasMatch && isMatch)
          return tokens.push(crlfSearch.end()), [
            headerLines.filter((chunks) => chunks.length).map(mergeArrays2).map(arrayToString),
            mergeArrays(...tokens.slice(i + 1).map((token2) => token2 === MATCH ? CRLF : token2))
          ];
        (lastTokenWasMatch = isMatch) ? headerLines.push([]) : headerLines[headerLines.length - 1].push(token);
      }
    }
  }
}
async function* streamMultipart(body, boundary2) {
  let needle = mergeArrays(dash, stringToArray(boundary2)), it = new ReadableStreamSearch(needle, body)[Symbol.asyncIterator]();
  for (; ; ) {
    let result = await it.next();
    if (result.done)
      return;
    if (result.value === MATCH)
      break;
  }
  let crlfSearch = new StreamSearch(CRLF);
  for (; ; ) {
    let feedChunk = function(chunk) {
      let chunks = [];
      for (let token of crlfSearch.feed(chunk))
        trailingCRLF && chunks.push(CRLF), (trailingCRLF = token === MATCH) || chunks.push(token);
      return mergeArrays(...chunks);
    }, [headerLines, tail] = await readHeaderLines(it, needle);
    if (!headerLines)
      return;
    async function nextToken() {
      let result = await it.next();
      if (result.done)
        throw new Error("malformed multipart-form data: unexpected end of stream");
      return result;
    }
    let trailingCRLF = false, done = false;
    async function nextChunk() {
      let result = await nextToken(), chunk;
      if (result.value !== MATCH)
        chunk = result.value;
      else if (!trailingCRLF)
        chunk = CRLF;
      else
        return done = true, { value: crlfSearch.end() };
      return { value: feedChunk(chunk) };
    }
    let bufferedChunks = [{ value: feedChunk(tail) }];
    for (yield {
      ...parsePartHeaders(headerLines),
      data: {
        [Symbol.asyncIterator]() {
          return this;
        },
        async next() {
          for (; ; ) {
            let result = bufferedChunks.shift();
            if (!result)
              break;
            if (result.value.length > 0)
              return result;
          }
          for (; ; ) {
            if (done)
              return {
                done,
                value: void 0
              };
            let result = await nextChunk();
            if (result.value.length > 0)
              return result;
          }
        }
      }
    }; !done; )
      bufferedChunks.push(await nextChunk());
  }
}
var mergeArrays2;
var dash;
var CRLF;
var init_src = __esm({
  "node_modules/@web3-storage/multipart-parser/esm/src/index.js"() {
    init_search();
    init_utils();
    mergeArrays2 = Function.prototype.apply.bind(mergeArrays, void 0), dash = stringToArray("--"), CRLF = stringToArray(`\r
`);
  }
});
function composeUploadHandlers(...handlers) {
  return async (part) => {
    for (let handler of handlers) {
      let value = await handler(part);
      if (typeof value < "u" && value !== null)
        return value;
    }
  };
}
async function parseMultipartFormData(request, uploadHandler) {
  let contentType = request.headers.get("Content-Type") || "", [type, boundary2] = contentType.split(/\s*;\s*boundary=/);
  if (!request.body || !boundary2 || type !== "multipart/form-data")
    throw new TypeError("Could not parse content as FormData.");
  let formData = new FormData(), parts = streamMultipart(request.body, boundary2);
  for await (let part of parts) {
    if (part.done)
      break;
    typeof part.filename == "string" && (part.filename = part.filename.split(/[/\\]/).pop());
    let value = await uploadHandler(part);
    typeof value < "u" && value !== null && formData.append(part.name, value);
  }
  return formData;
}
var init_formData = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/formData.js"() {
    init_src();
  }
});
var router_exports = {};
__export(router_exports, {
  AbortedDeferredError: () => AbortedDeferredError,
  Action: () => Action,
  IDLE_BLOCKER: () => IDLE_BLOCKER,
  IDLE_FETCHER: () => IDLE_FETCHER,
  IDLE_NAVIGATION: () => IDLE_NAVIGATION,
  UNSAFE_DEFERRED_SYMBOL: () => UNSAFE_DEFERRED_SYMBOL,
  UNSAFE_DeferredData: () => DeferredData,
  UNSAFE_ErrorResponseImpl: () => ErrorResponseImpl,
  UNSAFE_convertRouteMatchToUiMatch: () => convertRouteMatchToUiMatch,
  UNSAFE_convertRoutesToDataRoutes: () => convertRoutesToDataRoutes,
  UNSAFE_getResolveToMatches: () => getResolveToMatches,
  UNSAFE_invariant: () => invariant,
  UNSAFE_warning: () => warning,
  createBrowserHistory: () => createBrowserHistory,
  createHashHistory: () => createHashHistory,
  createMemoryHistory: () => createMemoryHistory,
  createPath: () => createPath,
  createRouter: () => createRouter,
  createStaticHandler: () => createStaticHandler,
  defer: () => defer,
  generatePath: () => generatePath,
  getStaticContextFromError: () => getStaticContextFromError,
  getToPathname: () => getToPathname,
  isDeferredData: () => isDeferredData,
  isRouteErrorResponse: () => isRouteErrorResponse,
  joinPaths: () => joinPaths,
  json: () => json,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  normalizePathname: () => normalizePathname,
  parsePath: () => parsePath,
  redirect: () => redirect,
  redirectDocument: () => redirectDocument,
  resolvePath: () => resolvePath,
  resolveTo: () => resolveTo,
  stripBasename: () => stripBasename
});
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends.apply(this, arguments);
}
function createMemoryHistory(options) {
  options === void 0 && (options = {});
  let {
    initialEntries = ["/"],
    initialIndex,
    v5Compat = false
  } = options, entries;
  entries = initialEntries.map((entry2, index2) => createMemoryLocation(entry2, typeof entry2 == "string" ? null : entry2.state, index2 === 0 ? "default" : void 0));
  let index = clampIndex(initialIndex ?? entries.length - 1), action4 = Action.Pop, listener = null;
  function clampIndex(n) {
    return Math.min(Math.max(n, 0), entries.length - 1);
  }
  function getCurrentLocation() {
    return entries[index];
  }
  function createMemoryLocation(to, state, key) {
    state === void 0 && (state = null);
    let location = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
    return warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to)), location;
  }
  function createHref(to) {
    return typeof to == "string" ? to : createPath(to);
  }
  return {
    get index() {
      return index;
    },
    get action() {
      return action4;
    },
    get location() {
      return getCurrentLocation();
    },
    createHref,
    createURL(to) {
      return new URL(createHref(to), "http://localhost");
    },
    encodeLocation(to) {
      let path = typeof to == "string" ? parsePath(to) : to;
      return {
        pathname: path.pathname || "",
        search: path.search || "",
        hash: path.hash || ""
      };
    },
    push(to, state) {
      action4 = Action.Push;
      let nextLocation = createMemoryLocation(to, state);
      index += 1, entries.splice(index, entries.length, nextLocation), v5Compat && listener && listener({
        action: action4,
        location: nextLocation,
        delta: 1
      });
    },
    replace(to, state) {
      action4 = Action.Replace;
      let nextLocation = createMemoryLocation(to, state);
      entries[index] = nextLocation, v5Compat && listener && listener({
        action: action4,
        location: nextLocation,
        delta: 0
      });
    },
    go(delta) {
      action4 = Action.Pop;
      let nextIndex = clampIndex(index + delta), nextLocation = entries[nextIndex];
      index = nextIndex, listener && listener({
        action: action4,
        location: nextLocation,
        delta
      });
    },
    listen(fn) {
      return listener = fn, () => {
        listener = null;
      };
    }
  };
}
function createBrowserHistory(options) {
  options === void 0 && (options = {});
  function createBrowserLocation(window2, globalHistory) {
    let {
      pathname,
      search,
      hash
    } = window2.location;
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to == "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
function createHashHistory(options) {
  options === void 0 && (options = {});
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substr(1));
    return !pathname.startsWith("/") && !pathname.startsWith(".") && (pathname = "/" + pathname), createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base"), href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href, hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to == "string" ? to : createPath(to));
  }
  function validateHashLocation(location, to) {
    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value, message2) {
  if (value === false || value === null || typeof value > "u")
    throw new Error(message2);
}
function warning(cond, message2) {
  if (!cond) {
    typeof console < "u" && console.warn(message2);
    try {
      throw new Error(message2);
    } catch {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index) {
  return {
    usr: location.state,
    key: location.key,
    idx: index
  };
}
function createLocation(current, to, state, key) {
  return state === void 0 && (state = null), _extends({
    pathname: typeof current == "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to == "string" ? parsePath(to) : to, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  });
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash = ""
  } = _ref;
  return search && search !== "?" && (pathname += search.charAt(0) === "?" ? search : "?" + search), hash && hash !== "#" && (pathname += hash.charAt(0) === "#" ? hash : "#" + hash), pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    hashIndex >= 0 && (parsedPath.hash = path.substr(hashIndex), path = path.substr(0, hashIndex));
    let searchIndex = path.indexOf("?");
    searchIndex >= 0 && (parsedPath.search = path.substr(searchIndex), path = path.substr(0, searchIndex)), path && (parsedPath.pathname = path);
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  options === void 0 && (options = {});
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options, globalHistory = window2.history, action4 = Action.Pop, listener = null, index = getIndex();
  index == null && (index = 0, globalHistory.replaceState(_extends({}, globalHistory.state, {
    idx: index
  }), ""));
  function getIndex() {
    return (globalHistory.state || {
      idx: null
    }).idx;
  }
  function handlePop() {
    action4 = Action.Pop;
    let nextIndex = getIndex(), delta = nextIndex == null ? null : nextIndex - index;
    index = nextIndex, listener && listener({
      action: action4,
      location: history.location,
      delta
    });
  }
  function push(to, state) {
    action4 = Action.Push;
    let location = createLocation(history.location, to, state);
    validateLocation && validateLocation(location, to), index = getIndex() + 1;
    let historyState = getHistoryState(location, index), url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError")
        throw error;
      window2.location.assign(url);
    }
    v5Compat && listener && listener({
      action: action4,
      location: history.location,
      delta: 1
    });
  }
  function replace(to, state) {
    action4 = Action.Replace;
    let location = createLocation(history.location, to, state);
    validateLocation && validateLocation(location, to), index = getIndex();
    let historyState = getHistoryState(location, index), url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url), v5Compat && listener && listener({
      action: action4,
      location: history.location,
      delta: 0
    });
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href, href = typeof to == "string" ? to : createPath(to);
    return invariant(base, "No window.location.(origin|href) available to create URL for href: " + href), new URL(href, base);
  }
  let history = {
    get action() {
      return action4;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener)
        throw new Error("A history only accepts one active listener");
      return window2.addEventListener(PopStateEventType, handlePop), listener = fn, () => {
        window2.removeEventListener(PopStateEventType, handlePop), listener = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace,
    go(n) {
      return globalHistory.go(n);
    }
  };
  return history;
}
function isIndexRoute(route) {
  return route.index === true;
}
function convertRoutesToDataRoutes(routes22, mapRouteProperties2, parentPath, manifest) {
  return parentPath === void 0 && (parentPath = []), manifest === void 0 && (manifest = {}), routes22.map((route, index) => {
    let treePath = [...parentPath, index], id = typeof route.id == "string" ? route.id : treePath.join("-");
    if (invariant(route.index !== true || !route.children, "Cannot specify children on an index route"), invariant(!manifest[id], 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`), isIndexRoute(route)) {
      let indexRoute = _extends({}, route, mapRouteProperties2(route), {
        id
      });
      return manifest[id] = indexRoute, indexRoute;
    } else {
      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties2(route), {
        id,
        children: void 0
      });
      return manifest[id] = pathOrLayoutRoute, route.children && (pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties2, treePath, manifest)), pathOrLayoutRoute;
    }
  });
}
function matchRoutes(routes22, locationArg, basename) {
  basename === void 0 && (basename = "/");
  let location = typeof locationArg == "string" ? parsePath(locationArg) : locationArg, pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null)
    return null;
  let branches = flattenRoutes(routes22);
  rankRouteBranches(branches);
  let matches2 = null;
  for (let i = 0; matches2 == null && i < branches.length; ++i)
    matches2 = matchRouteBranch(
      branches[i],
      // Incoming pathnames are generally encoded from either window.location
      // or from router.navigate, but we want to match against the unencoded
      // paths in the route definitions.  Memory router locations won't be
      // encoded here but there also shouldn't be anything to decode so this
      // should be a safe operation.  This avoids needing matchRoutes to be
      // history-aware.
      safelyDecodeURI(pathname)
    );
  return matches2;
}
function convertRouteMatchToUiMatch(match2, loaderData) {
  let {
    route,
    pathname,
    params
  } = match2;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function flattenRoutes(routes22, branches, parentsMeta, parentPath) {
  branches === void 0 && (branches = []), parentsMeta === void 0 && (parentsMeta = []), parentPath === void 0 && (parentPath = "");
  let flattenRoute = (route, index, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index,
      route
    };
    meta.relativePath.startsWith("/") && (invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes."), meta.relativePath = meta.relativePath.slice(parentPath.length));
    let path = joinPaths([parentPath, meta.relativePath]), routesMeta = parentsMeta.concat(meta);
    route.children && route.children.length > 0 && (invariant(
      // Our types know better, but runtime JS may not!
      // @ts-expect-error
      route.index !== true,
      "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
    ), flattenRoutes(route.children, branches, routesMeta, path)), !(route.path == null && !route.index) && branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  return routes22.forEach((route, index) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?")))
      flattenRoute(route, index);
    else
      for (let exploded of explodeOptionalSegments(route.path))
        flattenRoute(route, index, exploded);
  }), branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments, isOptional = first.endsWith("?"), required = first.replace(/\?$/, "");
  if (rest.length === 0)
    return isOptional ? [required, ""] : [required];
  let restExploded = explodeOptionalSegments(rest.join("/")), result = [];
  return result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/"))), isOptional && result.push(...restExploded), result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
}
function computeScore(path, index) {
  let segments = path.split("/"), initialScore = segments.length;
  return segments.some(isSplat) && (initialScore += splatPenalty), index && (initialScore += indexRouteValue), segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b) {
  return a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]) ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch, matchedParams = {}, matchedPathname = "/", matches2 = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i], end = i === routesMeta.length - 1, remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/", match2 = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    if (!match2)
      return null;
    Object.assign(matchedParams, match2.params);
    let route = meta.route;
    matches2.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    }), match2.pathnameBase !== "/" && (matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]));
  }
  return matches2;
}
function generatePath(originalPath, params) {
  params === void 0 && (params = {});
  let path = originalPath;
  path.endsWith("*") && path !== "*" && !path.endsWith("/*") && (warning(false, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".')), path = path.replace(/\*$/, "/*"));
  let prefix = path.startsWith("/") ? "/" : "", stringify = (p) => p == null ? "" : typeof p == "string" ? p : String(p), segments = path.split(/\/+/).map((segment, index, array) => {
    if (index === array.length - 1 && segment === "*")
      return stringify(params["*"]);
    let keyMatch = segment.match(/^:(\w+)(\??)$/);
    if (keyMatch) {
      let [, key, optional] = keyMatch, param = params[key];
      return invariant(optional === "?" || param != null, 'Missing ":' + key + '" param'), stringify(param);
    }
    return segment.replace(/\?$/g, "");
  }).filter((segment) => !!segment);
  return prefix + segments.join("/");
}
function matchPath(pattern, pathname) {
  typeof pattern == "string" && (pattern = {
    path: pattern,
    caseSensitive: false,
    end: true
  });
  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end), match2 = pathname.match(matcher);
  if (!match2)
    return null;
  let matchedPathname = match2[0], pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1"), captureGroups = match2.slice(1);
  return {
    params: compiledParams.reduce((memo21, _ref, index) => {
      let {
        paramName,
        isOptional
      } = _ref;
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      let value = captureGroups[index];
      return isOptional && !value ? memo21[paramName] = void 0 : memo21[paramName] = safelyDecodeURIComponent(value || "", paramName), memo21;
    }, {}),
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  caseSensitive === void 0 && (caseSensitive = false), end === void 0 && (end = true), warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let params = [], regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:(\w+)(\?)?/g, (_, paramName, isOptional) => (params.push({
    paramName,
    isOptional: isOptional != null
  }), isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)"));
  return path.endsWith("*") ? (params.push({
    paramName: "*"
  }), regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : end ? regexpSource += "\\/*$" : path !== "" && path !== "/" && (regexpSource += "(?:(?=\\/|$))"), [new RegExp(regexpSource, caseSensitive ? void 0 : "i"), params];
}
function safelyDecodeURI(value) {
  try {
    return decodeURI(value);
  } catch (error) {
    return warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ").")), value;
  }
}
function safelyDecodeURIComponent(value, paramName) {
  try {
    return decodeURIComponent(value);
  } catch (error) {
    return warning(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ").")), value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase()))
    return null;
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length, nextChar = pathname.charAt(startIndex);
  return nextChar && nextChar !== "/" ? null : pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname) {
  fromPathname === void 0 && (fromPathname = "/");
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to == "string" ? parsePath(to) : to;
  return {
    pathname: toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  return relativePath.split("/").forEach((segment) => {
    segment === ".." ? segments.length > 1 && segments.pop() : segment !== "." && segments.push(segment);
  }), segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches2) {
  return matches2.filter((match2, index) => index === 0 || match2.route.path && match2.route.path.length > 0);
}
function getResolveToMatches(matches2, v7_relativeSplatPath) {
  let pathMatches = getPathContributingMatches(matches2);
  return v7_relativeSplatPath ? pathMatches.map((match2, idx) => idx === matches2.length - 1 ? match2.pathname : match2.pathnameBase) : pathMatches.map((match2) => match2.pathnameBase);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  isPathRelative === void 0 && (isPathRelative = false);
  let to;
  typeof toArg == "string" ? to = parsePath(toArg) : (to = _extends({}, toArg), invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to)), invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to)), invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to)));
  let isEmptyPath = toArg === "" || to.pathname === "", toPathname = isEmptyPath ? "/" : to.pathname, from;
  if (toPathname == null)
    from = locationPathname;
  else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      for (; toSegments[0] === ".."; )
        toSegments.shift(), routePathnameIndex -= 1;
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from), hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/"), hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  return !path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash) && (path.pathname += "/"), path;
}
function getToPathname(to) {
  return to === "" || to.pathname === "" ? "/" : typeof to == "string" ? parsePath(to).pathname : to.pathname;
}
function isTrackedPromise(value) {
  return value instanceof Promise && value._tracked === true;
}
function unwrapTrackedPromise(value) {
  if (!isTrackedPromise(value))
    return value;
  if (value._error)
    throw value._error;
  return value._data;
}
function isRouteErrorResponse(error) {
  return error != null && typeof error.status == "number" && typeof error.statusText == "string" && typeof error.internal == "boolean" && "data" in error;
}
function createRouter(init) {
  let routerWindow = init.window ? init.window : typeof window < "u" ? window : void 0, isBrowser2 = typeof routerWindow < "u" && typeof routerWindow.document < "u" && typeof routerWindow.document.createElement < "u", isServer2 = !isBrowser2;
  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
  let mapRouteProperties2;
  if (init.mapRouteProperties)
    mapRouteProperties2 = init.mapRouteProperties;
  else if (init.detectErrorBoundary) {
    let detectErrorBoundary = init.detectErrorBoundary;
    mapRouteProperties2 = (route) => ({
      hasErrorBoundary: detectErrorBoundary(route)
    });
  } else
    mapRouteProperties2 = defaultMapRouteProperties;
  let manifest = {}, dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties2, void 0, manifest), inFlightDataRoutes, basename = init.basename || "/", future2 = _extends({
    v7_fetcherPersist: false,
    v7_normalizeFormMethod: false,
    v7_partialHydration: false,
    v7_prependBasename: false,
    v7_relativeSplatPath: false
  }, init.future), unlistenHistory = null, subscribers = /* @__PURE__ */ new Set(), savedScrollPositions2 = null, getScrollRestorationKey = null, getScrollPosition = null, initialScrollRestored = init.hydrationData != null, initialMatches = matchRoutes(dataRoutes, init.history.location, basename), initialErrors = null;
  if (initialMatches == null) {
    let error = getInternalRouterError(404, {
      pathname: init.history.location.pathname
    }), {
      matches: matches2,
      route
    } = getShortCircuitMatches(dataRoutes);
    initialMatches = matches2, initialErrors = {
      [route.id]: error
    };
  }
  let initialized, hasLazyRoutes = initialMatches.some((m) => m.route.lazy), hasLoaders = initialMatches.some((m) => m.route.loader);
  if (hasLazyRoutes)
    initialized = false;
  else if (!hasLoaders)
    initialized = true;
  else if (future2.v7_partialHydration) {
    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null, errors = init.hydrationData ? init.hydrationData.errors : null;
    initialized = initialMatches.every((m) => m.route.loader && m.route.loader.hydrate !== true && (loaderData && loaderData[m.route.id] !== void 0 || errors && errors[m.route.id] !== void 0));
  } else
    initialized = init.hydrationData != null;
  let router2, state = {
    historyAction: init.history.action,
    location: init.history.location,
    matches: initialMatches,
    initialized,
    navigation: IDLE_NAVIGATION,
    // Don't restore on initial updateState() if we were SSR'd
    restoreScrollPosition: init.hydrationData != null ? false : null,
    preventScrollReset: false,
    revalidation: "idle",
    loaderData: init.hydrationData && init.hydrationData.loaderData || {},
    actionData: init.hydrationData && init.hydrationData.actionData || null,
    errors: init.hydrationData && init.hydrationData.errors || initialErrors,
    fetchers: /* @__PURE__ */ new Map(),
    blockers: /* @__PURE__ */ new Map()
  }, pendingAction = Action.Pop, pendingPreventScrollReset = false, pendingNavigationController, pendingViewTransitionEnabled = false, appliedViewTransitions = /* @__PURE__ */ new Map(), removePageHideEventListener = null, isUninterruptedRevalidation = false, isRevalidationRequired = false, cancelledDeferredRoutes = [], cancelledFetcherLoads = [], fetchControllers = /* @__PURE__ */ new Map(), incrementingLoadId = 0, pendingNavigationLoadId = -1, fetchReloadIds = /* @__PURE__ */ new Map(), fetchRedirectIds = /* @__PURE__ */ new Set(), fetchLoadMatches = /* @__PURE__ */ new Map(), activeFetchers = /* @__PURE__ */ new Map(), deletedFetchers = /* @__PURE__ */ new Set(), activeDeferreds = /* @__PURE__ */ new Map(), blockerFunctions = /* @__PURE__ */ new Map(), ignoreNextHistoryUpdate = false;
  function initialize() {
    if (unlistenHistory = init.history.listen((_ref) => {
      let {
        action: historyAction,
        location,
        delta
      } = _ref;
      if (ignoreNextHistoryUpdate) {
        ignoreNextHistoryUpdate = false;
        return;
      }
      warning(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
      let blockerKey = shouldBlockNavigation({
        currentLocation: state.location,
        nextLocation: location,
        historyAction
      });
      if (blockerKey && delta != null) {
        ignoreNextHistoryUpdate = true, init.history.go(delta * -1), updateBlocker(blockerKey, {
          state: "blocked",
          location,
          proceed() {
            updateBlocker(blockerKey, {
              state: "proceeding",
              proceed: void 0,
              reset: void 0,
              location
            }), init.history.go(delta);
          },
          reset() {
            let blockers = new Map(state.blockers);
            blockers.set(blockerKey, IDLE_BLOCKER), updateState({
              blockers
            });
          }
        });
        return;
      }
      return startNavigation(historyAction, location);
    }), isBrowser2) {
      restoreAppliedTransitions(routerWindow, appliedViewTransitions);
      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);
      routerWindow.addEventListener("pagehide", _saveAppliedTransitions), removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
    }
    return state.initialized || startNavigation(Action.Pop, state.location, {
      initialHydration: true
    }), router2;
  }
  function dispose() {
    unlistenHistory && unlistenHistory(), removePageHideEventListener && removePageHideEventListener(), subscribers.clear(), pendingNavigationController && pendingNavigationController.abort(), state.fetchers.forEach((_, key) => deleteFetcher(key)), state.blockers.forEach((_, key) => deleteBlocker(key));
  }
  function subscribe(fn) {
    return subscribers.add(fn), () => subscribers.delete(fn);
  }
  function updateState(newState, opts) {
    opts === void 0 && (opts = {}), state = _extends({}, state, newState);
    let completedFetchers = [], deletedFetchersKeys = [];
    future2.v7_fetcherPersist && state.fetchers.forEach((fetcher, key) => {
      fetcher.state === "idle" && (deletedFetchers.has(key) ? deletedFetchersKeys.push(key) : completedFetchers.push(key));
    }), [...subscribers].forEach((subscriber) => subscriber(state, {
      deletedFetchers: deletedFetchersKeys,
      unstable_viewTransitionOpts: opts.viewTransitionOpts,
      unstable_flushSync: opts.flushSync === true
    })), future2.v7_fetcherPersist && (completedFetchers.forEach((key) => state.fetchers.delete(key)), deletedFetchersKeys.forEach((key) => deleteFetcher(key)));
  }
  function completeNavigation(location, newState, _temp) {
    var _location$state, _location$state2;
    let {
      flushSync
    } = _temp === void 0 ? {} : _temp, isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true, actionData;
    newState.actionData ? Object.keys(newState.actionData).length > 0 ? actionData = newState.actionData : actionData = null : isActionReload ? actionData = state.actionData : actionData = null;
    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData, blockers = state.blockers;
    blockers.size > 0 && (blockers = new Map(blockers), blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER)));
    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
    inFlightDataRoutes && (dataRoutes = inFlightDataRoutes, inFlightDataRoutes = void 0), isUninterruptedRevalidation || pendingAction === Action.Pop || (pendingAction === Action.Push ? init.history.push(location, location.state) : pendingAction === Action.Replace && init.history.replace(location, location.state));
    let viewTransitionOpts;
    if (pendingAction === Action.Pop) {
      let priorPaths = appliedViewTransitions.get(state.location.pathname);
      priorPaths && priorPaths.has(location.pathname) ? viewTransitionOpts = {
        currentLocation: state.location,
        nextLocation: location
      } : appliedViewTransitions.has(location.pathname) && (viewTransitionOpts = {
        currentLocation: location,
        nextLocation: state.location
      });
    } else if (pendingViewTransitionEnabled) {
      let toPaths = appliedViewTransitions.get(state.location.pathname);
      toPaths ? toPaths.add(location.pathname) : (toPaths = /* @__PURE__ */ new Set([location.pathname]), appliedViewTransitions.set(state.location.pathname, toPaths)), viewTransitionOpts = {
        currentLocation: state.location,
        nextLocation: location
      };
    }
    updateState(_extends({}, newState, {
      actionData,
      loaderData,
      historyAction: pendingAction,
      location,
      initialized: true,
      navigation: IDLE_NAVIGATION,
      revalidation: "idle",
      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
      preventScrollReset,
      blockers
    }), {
      viewTransitionOpts,
      flushSync: flushSync === true
    }), pendingAction = Action.Pop, pendingPreventScrollReset = false, pendingViewTransitionEnabled = false, isUninterruptedRevalidation = false, isRevalidationRequired = false, cancelledDeferredRoutes = [], cancelledFetcherLoads = [];
  }
  async function navigate(to, opts) {
    if (typeof to == "number") {
      init.history.go(to);
      return;
    }
    let normalizedPath = normalizeTo(state.location, state.matches, basename, future2.v7_prependBasename, to, future2.v7_relativeSplatPath, opts?.fromRouteId, opts?.relative), {
      path,
      submission,
      error
    } = normalizeNavigateOptions(future2.v7_normalizeFormMethod, false, normalizedPath, opts), currentLocation = state.location, nextLocation = createLocation(state.location, path, opts && opts.state);
    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));
    let userReplace = opts && opts.replace != null ? opts.replace : void 0, historyAction = Action.Push;
    userReplace === true ? historyAction = Action.Replace : userReplace === false || submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search && (historyAction = Action.Replace);
    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0, flushSync = (opts && opts.unstable_flushSync) === true, blockerKey = shouldBlockNavigation({
      currentLocation,
      nextLocation,
      historyAction
    });
    if (blockerKey) {
      updateBlocker(blockerKey, {
        state: "blocked",
        location: nextLocation,
        proceed() {
          updateBlocker(blockerKey, {
            state: "proceeding",
            proceed: void 0,
            reset: void 0,
            location: nextLocation
          }), navigate(to, opts);
        },
        reset() {
          let blockers = new Map(state.blockers);
          blockers.set(blockerKey, IDLE_BLOCKER), updateState({
            blockers
          });
        }
      });
      return;
    }
    return await startNavigation(historyAction, nextLocation, {
      submission,
      // Send through the formData serialization error if we have one so we can
      // render at the right error boundary after we match routes
      pendingError: error,
      preventScrollReset,
      replace: opts && opts.replace,
      enableViewTransition: opts && opts.unstable_viewTransition,
      flushSync
    });
  }
  function revalidate() {
    if (interruptActiveLoads(), updateState({
      revalidation: "loading"
    }), state.navigation.state !== "submitting") {
      if (state.navigation.state === "idle") {
        startNavigation(state.historyAction, state.location, {
          startUninterruptedRevalidation: true
        });
        return;
      }
      startNavigation(pendingAction || state.historyAction, state.navigation.location, {
        overrideNavigation: state.navigation
      });
    }
  }
  async function startNavigation(historyAction, location, opts) {
    pendingNavigationController && pendingNavigationController.abort(), pendingNavigationController = null, pendingAction = historyAction, isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true, saveScrollPosition(state.location, state.matches), pendingPreventScrollReset = (opts && opts.preventScrollReset) === true, pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes, loadingNavigation = opts && opts.overrideNavigation, matches2 = matchRoutes(routesToUse, location, basename), flushSync = (opts && opts.flushSync) === true;
    if (!matches2) {
      let error = getInternalRouterError(404, {
        pathname: location.pathname
      }), {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(routesToUse);
      cancelActiveDeferreds(), completeNavigation(location, {
        matches: notFoundMatches,
        loaderData: {},
        errors: {
          [route.id]: error
        }
      }, {
        flushSync
      });
      return;
    }
    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
      completeNavigation(location, {
        matches: matches2
      }, {
        flushSync
      });
      return;
    }
    pendingNavigationController = new AbortController();
    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission), pendingActionData, pendingError;
    if (opts && opts.pendingError)
      pendingError = {
        [findNearestBoundary(matches2).route.id]: opts.pendingError
      };
    else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
      let actionOutput = await handleAction(request, location, opts.submission, matches2, {
        replace: opts.replace,
        flushSync
      });
      if (actionOutput.shortCircuited)
        return;
      pendingActionData = actionOutput.pendingActionData, pendingError = actionOutput.pendingActionError, loadingNavigation = getLoadingNavigation(location, opts.submission), flushSync = false, request = new Request(request.url, {
        signal: request.signal
      });
    }
    let {
      shortCircuited,
      loaderData,
      errors
    } = await handleLoaders(request, location, matches2, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);
    shortCircuited || (pendingNavigationController = null, completeNavigation(location, _extends({
      matches: matches2
    }, pendingActionData ? {
      actionData: pendingActionData
    } : {}, {
      loaderData,
      errors
    })));
  }
  async function handleAction(request, location, submission, matches2, opts) {
    opts === void 0 && (opts = {}), interruptActiveLoads();
    let navigation = getSubmittingNavigation(location, submission);
    updateState({
      navigation
    }, {
      flushSync: opts.flushSync === true
    });
    let result, actionMatch = getTargetMatch(matches2, location);
    if (!actionMatch.route.action && !actionMatch.route.lazy)
      result = {
        type: ResultType.error,
        error: getInternalRouterError(405, {
          method: request.method,
          pathname: location.pathname,
          routeId: actionMatch.route.id
        })
      };
    else if (result = await callLoaderOrAction("action", request, actionMatch, matches2, manifest, mapRouteProperties2, basename, future2.v7_relativeSplatPath), request.signal.aborted)
      return {
        shortCircuited: true
      };
    if (isRedirectResult(result)) {
      let replace;
      return opts && opts.replace != null ? replace = opts.replace : replace = result.location === state.location.pathname + state.location.search, await startRedirectNavigation(state, result, {
        submission,
        replace
      }), {
        shortCircuited: true
      };
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches2, actionMatch.route.id);
      return (opts && opts.replace) !== true && (pendingAction = Action.Push), {
        // Send back an empty object we can use to clear out any prior actionData
        pendingActionData: {},
        pendingActionError: {
          [boundaryMatch.route.id]: result.error
        }
      };
    }
    if (isDeferredResult(result))
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    return {
      pendingActionData: {
        [actionMatch.route.id]: result.data
      }
    };
  }
  async function handleLoaders(request, location, matches2, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {
    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission), activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation), routesToUse = inFlightDataRoutes || dataRoutes, [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches2, activeSubmission, location, future2.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);
    if (cancelActiveDeferreds((routeId) => !(matches2 && matches2.some((m) => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId)), pendingNavigationLoadId = ++incrementingLoadId, matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
      let updatedFetchers2 = markFetchRedirectsDone();
      return completeNavigation(location, _extends({
        matches: matches2,
        loaderData: {},
        // Commit pending error if we're short circuiting
        errors: pendingError || null
      }, pendingActionData ? {
        actionData: pendingActionData
      } : {}, updatedFetchers2 ? {
        fetchers: new Map(state.fetchers)
      } : {}), {
        flushSync
      }), {
        shortCircuited: true
      };
    }
    if (!isUninterruptedRevalidation && (!future2.v7_partialHydration || !initialHydration)) {
      revalidatingFetchers.forEach((rf) => {
        let fetcher = state.fetchers.get(rf.key), revalidatingFetcher = getLoadingFetcher(void 0, fetcher ? fetcher.data : void 0);
        state.fetchers.set(rf.key, revalidatingFetcher);
      });
      let actionData = pendingActionData || state.actionData;
      updateState(_extends({
        navigation: loadingNavigation
      }, actionData ? Object.keys(actionData).length === 0 ? {
        actionData: null
      } : {
        actionData
      } : {}, revalidatingFetchers.length > 0 ? {
        fetchers: new Map(state.fetchers)
      } : {}), {
        flushSync
      });
    }
    revalidatingFetchers.forEach((rf) => {
      fetchControllers.has(rf.key) && abortFetcher(rf.key), rf.controller && fetchControllers.set(rf.key, rf.controller);
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));
    pendingNavigationController && pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches2, matchesToLoad, revalidatingFetchers, request);
    if (request.signal.aborted)
      return {
        shortCircuited: true
      };
    pendingNavigationController && pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations), revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
    let redirect5 = findRedirect(results);
    if (redirect5) {
      if (redirect5.idx >= matchesToLoad.length) {
        let fetcherKey = revalidatingFetchers[redirect5.idx - matchesToLoad.length].key;
        fetchRedirectIds.add(fetcherKey);
      }
      return await startRedirectNavigation(state, redirect5.result, {
        replace
      }), {
        shortCircuited: true
      };
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, matches2, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
    activeDeferreds.forEach((deferredData, routeId) => {
      deferredData.subscribe((aborted) => {
        (aborted || deferredData.done) && activeDeferreds.delete(routeId);
      });
    });
    let updatedFetchers = markFetchRedirectsDone(), didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId), shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
    return _extends({
      loaderData,
      errors
    }, shouldUpdateFetchers ? {
      fetchers: new Map(state.fetchers)
    } : {});
  }
  function fetch2(key, routeId, href, opts) {
    if (isServer2)
      throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
    fetchControllers.has(key) && abortFetcher(key);
    let flushSync = (opts && opts.unstable_flushSync) === true, routesToUse = inFlightDataRoutes || dataRoutes, normalizedPath = normalizeTo(state.location, state.matches, basename, future2.v7_prependBasename, href, future2.v7_relativeSplatPath, routeId, opts?.relative), matches2 = matchRoutes(routesToUse, normalizedPath, basename);
    if (!matches2) {
      setFetcherError(key, routeId, getInternalRouterError(404, {
        pathname: normalizedPath
      }), {
        flushSync
      });
      return;
    }
    let {
      path,
      submission,
      error
    } = normalizeNavigateOptions(future2.v7_normalizeFormMethod, true, normalizedPath, opts);
    if (error) {
      setFetcherError(key, routeId, error, {
        flushSync
      });
      return;
    }
    let match2 = getTargetMatch(matches2, path);
    if (pendingPreventScrollReset = (opts && opts.preventScrollReset) === true, submission && isMutationMethod(submission.formMethod)) {
      handleFetcherAction(key, routeId, path, match2, matches2, flushSync, submission);
      return;
    }
    fetchLoadMatches.set(key, {
      routeId,
      path
    }), handleFetcherLoader(key, routeId, path, match2, matches2, flushSync, submission);
  }
  async function handleFetcherAction(key, routeId, path, match2, requestMatches, flushSync, submission) {
    if (interruptActiveLoads(), fetchLoadMatches.delete(key), !match2.route.action && !match2.route.lazy) {
      let error = getInternalRouterError(405, {
        method: submission.formMethod,
        pathname: path,
        routeId
      });
      setFetcherError(key, routeId, error, {
        flushSync
      });
      return;
    }
    let existingFetcher = state.fetchers.get(key);
    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {
      flushSync
    });
    let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
    fetchControllers.set(key, abortController);
    let originatingLoadId = incrementingLoadId, actionResult = await callLoaderOrAction("action", fetchRequest, match2, requestMatches, manifest, mapRouteProperties2, basename, future2.v7_relativeSplatPath);
    if (fetchRequest.signal.aborted) {
      fetchControllers.get(key) === abortController && fetchControllers.delete(key);
      return;
    }
    if (future2.v7_fetcherPersist && deletedFetchers.has(key)) {
      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {
        updateFetcherState(key, getDoneFetcher(void 0));
        return;
      }
    } else {
      if (isRedirectResult(actionResult))
        if (fetchControllers.delete(key), pendingNavigationLoadId > originatingLoadId) {
          updateFetcherState(key, getDoneFetcher(void 0));
          return;
        } else
          return fetchRedirectIds.add(key), updateFetcherState(key, getLoadingFetcher(submission)), startRedirectNavigation(state, actionResult, {
            fetcherSubmission: submission
          });
      if (isErrorResult(actionResult)) {
        setFetcherError(key, routeId, actionResult.error);
        return;
      }
    }
    if (isDeferredResult(actionResult))
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    let nextLocation = state.navigation.location || state.location, revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal), routesToUse = inFlightDataRoutes || dataRoutes, matches2 = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
    invariant(matches2, "Didn't find any matches after fetcher action");
    let loadId = ++incrementingLoadId;
    fetchReloadIds.set(key, loadId);
    let loadFetcher = getLoadingFetcher(submission, actionResult.data);
    state.fetchers.set(key, loadFetcher);
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
      init.history,
      state,
      matches2,
      submission,
      nextLocation,
      false,
      isRevalidationRequired,
      cancelledDeferredRoutes,
      cancelledFetcherLoads,
      deletedFetchers,
      fetchLoadMatches,
      fetchRedirectIds,
      routesToUse,
      basename,
      {
        [match2.route.id]: actionResult.data
      },
      void 0
      // No need to send through errors since we short circuit above
    );
    revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
      let staleKey = rf.key, existingFetcher2 = state.fetchers.get(staleKey), revalidatingFetcher = getLoadingFetcher(void 0, existingFetcher2 ? existingFetcher2.data : void 0);
      state.fetchers.set(staleKey, revalidatingFetcher), fetchControllers.has(staleKey) && abortFetcher(staleKey), rf.controller && fetchControllers.set(staleKey, rf.controller);
    }), updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
    abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches2, matchesToLoad, revalidatingFetchers, revalidationRequest);
    if (abortController.signal.aborted)
      return;
    abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations), fetchReloadIds.delete(key), fetchControllers.delete(key), revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));
    let redirect5 = findRedirect(results);
    if (redirect5) {
      if (redirect5.idx >= matchesToLoad.length) {
        let fetcherKey = revalidatingFetchers[redirect5.idx - matchesToLoad.length].key;
        fetchRedirectIds.add(fetcherKey);
      }
      return startRedirectNavigation(state, redirect5.result);
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
    if (state.fetchers.has(key)) {
      let doneFetcher = getDoneFetcher(actionResult.data);
      state.fetchers.set(key, doneFetcher);
    }
    abortStaleFetchLoads(loadId), state.navigation.state === "loading" && loadId > pendingNavigationLoadId ? (invariant(pendingAction, "Expected pending action"), pendingNavigationController && pendingNavigationController.abort(), completeNavigation(state.navigation.location, {
      matches: matches2,
      loaderData,
      errors,
      fetchers: new Map(state.fetchers)
    })) : (updateState({
      errors,
      loaderData: mergeLoaderData(state.loaderData, loaderData, matches2, errors),
      fetchers: new Map(state.fetchers)
    }), isRevalidationRequired = false);
  }
  async function handleFetcherLoader(key, routeId, path, match2, matches2, flushSync, submission) {
    let existingFetcher = state.fetchers.get(key);
    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : void 0), {
      flushSync
    });
    let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
    fetchControllers.set(key, abortController);
    let originatingLoadId = incrementingLoadId, result = await callLoaderOrAction("loader", fetchRequest, match2, matches2, manifest, mapRouteProperties2, basename, future2.v7_relativeSplatPath);
    if (isDeferredResult(result) && (result = await resolveDeferredData(result, fetchRequest.signal, true) || result), fetchControllers.get(key) === abortController && fetchControllers.delete(key), !fetchRequest.signal.aborted) {
      if (deletedFetchers.has(key)) {
        updateFetcherState(key, getDoneFetcher(void 0));
        return;
      }
      if (isRedirectResult(result))
        if (pendingNavigationLoadId > originatingLoadId) {
          updateFetcherState(key, getDoneFetcher(void 0));
          return;
        } else {
          fetchRedirectIds.add(key), await startRedirectNavigation(state, result);
          return;
        }
      if (isErrorResult(result)) {
        setFetcherError(key, routeId, result.error);
        return;
      }
      invariant(!isDeferredResult(result), "Unhandled fetcher deferred data"), updateFetcherState(key, getDoneFetcher(result.data));
    }
  }
  async function startRedirectNavigation(state2, redirect5, _temp2) {
    let {
      submission,
      fetcherSubmission,
      replace
    } = _temp2 === void 0 ? {} : _temp2;
    redirect5.revalidate && (isRevalidationRequired = true);
    let redirectLocation = createLocation(state2.location, redirect5.location, {
      _isRedirect: true
    });
    if (invariant(redirectLocation, "Expected a location on the redirect navigation"), isBrowser2) {
      let isDocumentReload = false;
      if (redirect5.reloadDocument)
        isDocumentReload = true;
      else if (ABSOLUTE_URL_REGEX.test(redirect5.location)) {
        let url = init.history.createURL(redirect5.location);
        isDocumentReload = // Hard reload if it's an absolute URL to a new origin
        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
        stripBasename(url.pathname, basename) == null;
      }
      if (isDocumentReload) {
        replace ? routerWindow.location.replace(redirect5.location) : routerWindow.location.assign(redirect5.location);
        return;
      }
    }
    pendingNavigationController = null;
    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push, {
      formMethod,
      formAction,
      formEncType
    } = state2.navigation;
    !submission && !fetcherSubmission && formMethod && formAction && formEncType && (submission = getSubmissionFromNavigation(state2.navigation));
    let activeSubmission = submission || fetcherSubmission;
    if (redirectPreserveMethodStatusCodes.has(redirect5.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod))
      await startNavigation(redirectHistoryAction, redirectLocation, {
        submission: _extends({}, activeSubmission, {
          formAction: redirect5.location
        }),
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    else {
      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);
      await startNavigation(redirectHistoryAction, redirectLocation, {
        overrideNavigation,
        // Send fetcher submissions through for shouldRevalidate
        fetcherSubmission,
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    }
  }
  async function callLoadersAndMaybeResolveData(currentMatches, matches2, matchesToLoad, fetchersToLoad, request) {
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches2, manifest, mapRouteProperties2, basename, future2.v7_relativeSplatPath)), ...fetchersToLoad.map((f) => f.matches && f.match && f.controller ? callLoaderOrAction("loader", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties2, basename, future2.v7_relativeSplatPath) : {
      type: ResultType.error,
      error: getInternalRouterError(404, {
        pathname: f.path
      })
    })]), loaderResults = results.slice(0, matchesToLoad.length), fetcherResults = results.slice(matchesToLoad.length);
    return await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f) => f.match), fetcherResults, fetchersToLoad.map((f) => f.controller ? f.controller.signal : null), true)]), {
      results,
      loaderResults,
      fetcherResults
    };
  }
  function interruptActiveLoads() {
    isRevalidationRequired = true, cancelledDeferredRoutes.push(...cancelActiveDeferreds()), fetchLoadMatches.forEach((_, key) => {
      fetchControllers.has(key) && (cancelledFetcherLoads.push(key), abortFetcher(key));
    });
  }
  function updateFetcherState(key, fetcher, opts) {
    opts === void 0 && (opts = {}), state.fetchers.set(key, fetcher), updateState({
      fetchers: new Map(state.fetchers)
    }, {
      flushSync: (opts && opts.flushSync) === true
    });
  }
  function setFetcherError(key, routeId, error, opts) {
    opts === void 0 && (opts = {});
    let boundaryMatch = findNearestBoundary(state.matches, routeId);
    deleteFetcher(key), updateState({
      errors: {
        [boundaryMatch.route.id]: error
      },
      fetchers: new Map(state.fetchers)
    }, {
      flushSync: (opts && opts.flushSync) === true
    });
  }
  function getFetcher(key) {
    return future2.v7_fetcherPersist && (activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1), deletedFetchers.has(key) && deletedFetchers.delete(key)), state.fetchers.get(key) || IDLE_FETCHER;
  }
  function deleteFetcher(key) {
    let fetcher = state.fetchers.get(key);
    fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key)) && abortFetcher(key), fetchLoadMatches.delete(key), fetchReloadIds.delete(key), fetchRedirectIds.delete(key), deletedFetchers.delete(key), state.fetchers.delete(key);
  }
  function deleteFetcherAndUpdateState(key) {
    if (future2.v7_fetcherPersist) {
      let count = (activeFetchers.get(key) || 0) - 1;
      count <= 0 ? (activeFetchers.delete(key), deletedFetchers.add(key)) : activeFetchers.set(key, count);
    } else
      deleteFetcher(key);
    updateState({
      fetchers: new Map(state.fetchers)
    });
  }
  function abortFetcher(key) {
    let controller = fetchControllers.get(key);
    invariant(controller, "Expected fetch controller: " + key), controller.abort(), fetchControllers.delete(key);
  }
  function markFetchersDone(keys) {
    for (let key of keys) {
      let fetcher = getFetcher(key), doneFetcher = getDoneFetcher(fetcher.data);
      state.fetchers.set(key, doneFetcher);
    }
  }
  function markFetchRedirectsDone() {
    let doneKeys = [], updatedFetchers = false;
    for (let key of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key);
      invariant(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (fetchRedirectIds.delete(key), doneKeys.push(key), updatedFetchers = true);
    }
    return markFetchersDone(doneKeys), updatedFetchers;
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key, id] of fetchReloadIds)
      if (id < landedId) {
        let fetcher = state.fetchers.get(key);
        invariant(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (abortFetcher(key), fetchReloadIds.delete(key), yeetedKeys.push(key));
      }
    return markFetchersDone(yeetedKeys), yeetedKeys.length > 0;
  }
  function getBlocker(key, fn) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    return blockerFunctions.get(key) !== fn && blockerFunctions.set(key, fn), blocker;
  }
  function deleteBlocker(key) {
    state.blockers.delete(key), blockerFunctions.delete(key);
  }
  function updateBlocker(key, newBlocker) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
    let blockers = new Map(state.blockers);
    blockers.set(key, newBlocker), updateState({
      blockers
    });
  }
  function shouldBlockNavigation(_ref2) {
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = _ref2;
    if (blockerFunctions.size === 0)
      return;
    blockerFunctions.size > 1 && warning(false, "A router only supports one blocker at a time");
    let entries = Array.from(blockerFunctions.entries()), [blockerKey, blockerFunction] = entries[entries.length - 1], blocker = state.blockers.get(blockerKey);
    if (!(blocker && blocker.state === "proceeding") && blockerFunction({
      currentLocation,
      nextLocation,
      historyAction
    }))
      return blockerKey;
  }
  function cancelActiveDeferreds(predicate) {
    let cancelledRouteIds = [];
    return activeDeferreds.forEach((dfd, routeId) => {
      (!predicate || predicate(routeId)) && (dfd.cancel(), cancelledRouteIds.push(routeId), activeDeferreds.delete(routeId));
    }), cancelledRouteIds;
  }
  function enableScrollRestoration(positions, getPosition, getKey) {
    if (savedScrollPositions2 = positions, getScrollPosition = getPosition, getScrollRestorationKey = getKey || null, !initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
      initialScrollRestored = true;
      let y = getSavedScrollPosition(state.location, state.matches);
      y != null && updateState({
        restoreScrollPosition: y
      });
    }
    return () => {
      savedScrollPositions2 = null, getScrollPosition = null, getScrollRestorationKey = null;
    };
  }
  function getScrollKey(location, matches2) {
    return getScrollRestorationKey && getScrollRestorationKey(location, matches2.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))) || location.key;
  }
  function saveScrollPosition(location, matches2) {
    if (savedScrollPositions2 && getScrollPosition) {
      let key = getScrollKey(location, matches2);
      savedScrollPositions2[key] = getScrollPosition();
    }
  }
  function getSavedScrollPosition(location, matches2) {
    if (savedScrollPositions2) {
      let key = getScrollKey(location, matches2), y = savedScrollPositions2[key];
      if (typeof y == "number")
        return y;
    }
    return null;
  }
  function _internalSetRoutes(newRoutes) {
    manifest = {}, inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties2, void 0, manifest);
  }
  return router2 = {
    get basename() {
      return basename;
    },
    get future() {
      return future2;
    },
    get state() {
      return state;
    },
    get routes() {
      return dataRoutes;
    },
    get window() {
      return routerWindow;
    },
    initialize,
    subscribe,
    enableScrollRestoration,
    navigate,
    fetch: fetch2,
    revalidate,
    // Passthrough to history-aware createHref used by useHref so we get proper
    // hash-aware URLs in DOM paths
    createHref: (to) => init.history.createHref(to),
    encodeLocation: (to) => init.history.encodeLocation(to),
    getFetcher,
    deleteFetcher: deleteFetcherAndUpdateState,
    dispose,
    getBlocker,
    deleteBlocker,
    _internalFetchControllers: fetchControllers,
    _internalActiveDeferreds: activeDeferreds,
    // TODO: Remove setRoutes, it's temporary to avoid dealing with
    // updating the tree while validating the update algorithm.
    _internalSetRoutes
  }, router2;
}
function createStaticHandler(routes22, opts) {
  invariant(routes22.length > 0, "You must provide a non-empty routes array to createStaticHandler");
  let manifest = {}, basename = (opts ? opts.basename : null) || "/", mapRouteProperties2;
  if (opts != null && opts.mapRouteProperties)
    mapRouteProperties2 = opts.mapRouteProperties;
  else if (opts != null && opts.detectErrorBoundary) {
    let detectErrorBoundary = opts.detectErrorBoundary;
    mapRouteProperties2 = (route) => ({
      hasErrorBoundary: detectErrorBoundary(route)
    });
  } else
    mapRouteProperties2 = defaultMapRouteProperties;
  let future2 = _extends({
    v7_relativeSplatPath: false
  }, opts ? opts.future : null), dataRoutes = convertRoutesToDataRoutes(routes22, mapRouteProperties2, void 0, manifest);
  async function query(request, _temp3) {
    let {
      requestContext
    } = _temp3 === void 0 ? {} : _temp3, url = new URL(request.url), method = request.method, location = createLocation("", createPath(url), null, "default"), matches2 = matchRoutes(dataRoutes, location, basename);
    if (!isValidMethod(method) && method !== "HEAD") {
      let error = getInternalRouterError(405, {
        method
      }), {
        matches: methodNotAllowedMatches,
        route
      } = getShortCircuitMatches(dataRoutes);
      return {
        basename,
        location,
        matches: methodNotAllowedMatches,
        loaderData: {},
        actionData: null,
        errors: {
          [route.id]: error
        },
        statusCode: error.status,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    } else if (!matches2) {
      let error = getInternalRouterError(404, {
        pathname: location.pathname
      }), {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(dataRoutes);
      return {
        basename,
        location,
        matches: notFoundMatches,
        loaderData: {},
        actionData: null,
        errors: {
          [route.id]: error
        },
        statusCode: error.status,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    }
    let result = await queryImpl(request, location, matches2, requestContext);
    return isResponse(result) ? result : _extends({
      location,
      basename
    }, result);
  }
  async function queryRoute(request, _temp4) {
    let {
      routeId,
      requestContext
    } = _temp4 === void 0 ? {} : _temp4, url = new URL(request.url), method = request.method, location = createLocation("", createPath(url), null, "default"), matches2 = matchRoutes(dataRoutes, location, basename);
    if (!isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS")
      throw getInternalRouterError(405, {
        method
      });
    if (!matches2)
      throw getInternalRouterError(404, {
        pathname: location.pathname
      });
    let match2 = routeId ? matches2.find((m) => m.route.id === routeId) : getTargetMatch(matches2, location);
    if (routeId && !match2)
      throw getInternalRouterError(403, {
        pathname: location.pathname,
        routeId
      });
    if (!match2)
      throw getInternalRouterError(404, {
        pathname: location.pathname
      });
    let result = await queryImpl(request, location, matches2, requestContext, match2);
    if (isResponse(result))
      return result;
    let error = result.errors ? Object.values(result.errors)[0] : void 0;
    if (error !== void 0)
      throw error;
    if (result.actionData)
      return Object.values(result.actionData)[0];
    if (result.loaderData) {
      var _result$activeDeferre;
      let data = Object.values(result.loaderData)[0];
      return (_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match2.route.id] && (data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match2.route.id]), data;
    }
  }
  async function queryImpl(request, location, matches2, requestContext, routeMatch) {
    invariant(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
    try {
      if (isMutationMethod(request.method.toLowerCase()))
        return await submit(request, matches2, routeMatch || getTargetMatch(matches2, location), requestContext, routeMatch != null);
      let result = await loadRouteData(request, matches2, requestContext, routeMatch);
      return isResponse(result) ? result : _extends({}, result, {
        actionData: null,
        actionHeaders: {}
      });
    } catch (e) {
      if (isQueryRouteResponse(e)) {
        if (e.type === ResultType.error)
          throw e.response;
        return e.response;
      }
      if (isRedirectResponse(e))
        return e;
      throw e;
    }
  }
  async function submit(request, matches2, actionMatch, requestContext, isRouteRequest) {
    let result;
    if (!actionMatch.route.action && !actionMatch.route.lazy) {
      let error = getInternalRouterError(405, {
        method: request.method,
        pathname: new URL(request.url).pathname,
        routeId: actionMatch.route.id
      });
      if (isRouteRequest)
        throw error;
      result = {
        type: ResultType.error,
        error
      };
    } else if (result = await callLoaderOrAction("action", request, actionMatch, matches2, manifest, mapRouteProperties2, basename, future2.v7_relativeSplatPath, {
      isStaticRequest: true,
      isRouteRequest,
      requestContext
    }), request.signal.aborted) {
      let method = isRouteRequest ? "queryRoute" : "query";
      throw new Error(method + "() call aborted: " + request.method + " " + request.url);
    }
    if (isRedirectResult(result))
      throw new Response(null, {
        status: result.status,
        headers: {
          Location: result.location
        }
      });
    if (isDeferredResult(result)) {
      let error = getInternalRouterError(400, {
        type: "defer-action"
      });
      if (isRouteRequest)
        throw error;
      result = {
        type: ResultType.error,
        error
      };
    }
    if (isRouteRequest) {
      if (isErrorResult(result))
        throw result.error;
      return {
        matches: [actionMatch],
        loaderData: {},
        actionData: {
          [actionMatch.route.id]: result.data
        },
        errors: null,
        // Note: statusCode + headers are unused here since queryRoute will
        // return the raw Response or value
        statusCode: 200,
        loaderHeaders: {},
        actionHeaders: {},
        activeDeferreds: null
      };
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches2, actionMatch.route.id), context2 = await loadRouteData(request, matches2, requestContext, void 0, {
        [boundaryMatch.route.id]: result.error
      });
      return _extends({}, context2, {
        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,
        actionData: null,
        actionHeaders: _extends({}, result.headers ? {
          [actionMatch.route.id]: result.headers
        } : {})
      });
    }
    let loaderRequest = new Request(request.url, {
      headers: request.headers,
      redirect: request.redirect,
      signal: request.signal
    }), context = await loadRouteData(loaderRequest, matches2, requestContext);
    return _extends({}, context, result.statusCode ? {
      statusCode: result.statusCode
    } : {}, {
      actionData: {
        [actionMatch.route.id]: result.data
      },
      actionHeaders: _extends({}, result.headers ? {
        [actionMatch.route.id]: result.headers
      } : {})
    });
  }
  async function loadRouteData(request, matches2, requestContext, routeMatch, pendingActionError) {
    let isRouteRequest = routeMatch != null;
    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))
      throw getInternalRouterError(400, {
        method: request.method,
        pathname: new URL(request.url).pathname,
        routeId: routeMatch?.route.id
      });
    let matchesToLoad = (routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches2, Object.keys(pendingActionError || {})[0])).filter((m) => m.route.loader || m.route.lazy);
    if (matchesToLoad.length === 0)
      return {
        matches: matches2,
        // Add a null for all matched routes for proper revalidation on the client
        loaderData: matches2.reduce((acc, m) => Object.assign(acc, {
          [m.route.id]: null
        }), {}),
        errors: pendingActionError || null,
        statusCode: 200,
        loaderHeaders: {},
        activeDeferreds: null
      };
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches2, manifest, mapRouteProperties2, basename, future2.v7_relativeSplatPath, {
      isStaticRequest: true,
      isRouteRequest,
      requestContext
    }))]);
    if (request.signal.aborted) {
      let method = isRouteRequest ? "queryRoute" : "query";
      throw new Error(method + "() call aborted: " + request.method + " " + request.url);
    }
    let activeDeferreds = /* @__PURE__ */ new Map(), context = processRouteLoaderData(matches2, matchesToLoad, results, pendingActionError, activeDeferreds), executedLoaders = new Set(matchesToLoad.map((match2) => match2.route.id));
    return matches2.forEach((match2) => {
      executedLoaders.has(match2.route.id) || (context.loaderData[match2.route.id] = null);
    }), _extends({}, context, {
      matches: matches2,
      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
    });
  }
  return {
    dataRoutes,
    query,
    queryRoute
  };
}
function getStaticContextFromError(routes22, context, error) {
  return _extends({}, context, {
    statusCode: 500,
    errors: {
      [context._deepestRenderedBoundaryId || routes22[0].id]: error
    }
  });
}
function isSubmissionNavigation(opts) {
  return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
}
function normalizeTo(location, matches2, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {
  let contextualMatches, activeRouteMatch;
  if (fromRouteId) {
    contextualMatches = [];
    for (let match2 of matches2)
      if (contextualMatches.push(match2), match2.route.id === fromRouteId) {
        activeRouteMatch = match2;
        break;
      }
  } else
    contextualMatches = matches2, activeRouteMatch = matches2[matches2.length - 1];
  let path = resolveTo(to || ".", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === "path");
  return to == null && (path.search = location.search, path.hash = location.hash), (to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search) && (path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index"), prependBasename && basename !== "/" && (path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname])), createPath(path);
}
function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
  if (!opts || !isSubmissionNavigation(opts))
    return {
      path
    };
  if (opts.formMethod && !isValidMethod(opts.formMethod))
    return {
      path,
      error: getInternalRouterError(405, {
        method: opts.formMethod
      })
    };
  let getInvalidBodyError = () => ({
    path,
    error: getInternalRouterError(400, {
      type: "invalid-body"
    })
  }), rawFormMethod = opts.formMethod || "get", formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase(), formAction = stripHashFromPath(path);
  if (opts.body !== void 0) {
    if (opts.formEncType === "text/plain") {
      if (!isMutationMethod(formMethod))
        return getInvalidBodyError();
      let text2 = typeof opts.body == "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
        Array.from(opts.body.entries()).reduce((acc, _ref3) => {
          let [name, value] = _ref3;
          return "" + acc + name + "=" + value + `
`;
        }, "")
      ) : String(opts.body);
      return {
        path,
        submission: {
          formMethod,
          formAction,
          formEncType: opts.formEncType,
          formData: void 0,
          json: void 0,
          text: text2
        }
      };
    } else if (opts.formEncType === "application/json") {
      if (!isMutationMethod(formMethod))
        return getInvalidBodyError();
      try {
        let json8 = typeof opts.body == "string" ? JSON.parse(opts.body) : opts.body;
        return {
          path,
          submission: {
            formMethod,
            formAction,
            formEncType: opts.formEncType,
            formData: void 0,
            json: json8,
            text: void 0
          }
        };
      } catch {
        return getInvalidBodyError();
      }
    }
  }
  invariant(typeof FormData == "function", "FormData is not available in this environment");
  let searchParams, formData;
  if (opts.formData)
    searchParams = convertFormDataToSearchParams(opts.formData), formData = opts.formData;
  else if (opts.body instanceof FormData)
    searchParams = convertFormDataToSearchParams(opts.body), formData = opts.body;
  else if (opts.body instanceof URLSearchParams)
    searchParams = opts.body, formData = convertSearchParamsToFormData(searchParams);
  else if (opts.body == null)
    searchParams = new URLSearchParams(), formData = new FormData();
  else
    try {
      searchParams = new URLSearchParams(opts.body), formData = convertSearchParamsToFormData(searchParams);
    } catch {
      return getInvalidBodyError();
    }
  let submission = {
    formMethod,
    formAction,
    formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
    formData,
    json: void 0,
    text: void 0
  };
  if (isMutationMethod(submission.formMethod))
    return {
      path,
      submission
    };
  let parsedPath = parsePath(path);
  return isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search) && searchParams.append("index", ""), parsedPath.search = "?" + searchParams, {
    path: createPath(parsedPath),
    submission
  };
}
function getLoaderMatchesUntilBoundary(matches2, boundaryId) {
  let boundaryMatches = matches2;
  if (boundaryId) {
    let index = matches2.findIndex((m) => m.route.id === boundaryId);
    index >= 0 && (boundaryMatches = matches2.slice(0, index));
  }
  return boundaryMatches;
}
function getMatchesToLoad(history, state, matches2, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {
  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0, currentUrl = history.createURL(state.location), nextUrl = history.createURL(location), boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0, navigationMatches = getLoaderMatchesUntilBoundary(matches2, boundaryId).filter((match2, index) => {
    let {
      route
    } = match2;
    if (route.lazy)
      return true;
    if (route.loader == null)
      return false;
    if (isInitialLoad)
      return route.loader.hydrate ? true : state.loaderData[route.id] === void 0 && // Don't re-run if the loader ran and threw an error
      (!state.errors || state.errors[route.id] === void 0);
    if (isNewLoader(state.loaderData, state.matches[index], match2) || cancelledDeferredRoutes.some((id) => id === match2.route.id))
      return true;
    let currentRouteMatch = state.matches[index], nextRouteMatch = match2;
    return shouldRevalidateLoader(match2, _extends({
      currentUrl,
      currentParams: currentRouteMatch.params,
      nextUrl,
      nextParams: nextRouteMatch.params
    }, submission, {
      actionResult,
      defaultShouldRevalidate: (
        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
        isRevalidationRequired || // Clicked the same link, resubmitted a GET form
        currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
        currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
      )
    }));
  }), revalidatingFetchers = [];
  return fetchLoadMatches.forEach((f, key) => {
    if (isInitialLoad || !matches2.some((m) => m.route.id === f.routeId) || deletedFetchers.has(key))
      return;
    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
    if (!fetcherMatches) {
      revalidatingFetchers.push({
        key,
        routeId: f.routeId,
        path: f.path,
        matches: null,
        match: null,
        controller: null
      });
      return;
    }
    let fetcher = state.fetchers.get(key), fetcherMatch = getTargetMatch(fetcherMatches, f.path), shouldRevalidate = false;
    fetchRedirectIds.has(key) ? shouldRevalidate = false : cancelledFetcherLoads.includes(key) ? shouldRevalidate = true : fetcher && fetcher.state !== "idle" && fetcher.data === void 0 ? shouldRevalidate = isRevalidationRequired : shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({
      currentUrl,
      currentParams: state.matches[state.matches.length - 1].params,
      nextUrl,
      nextParams: matches2[matches2.length - 1].params
    }, submission, {
      actionResult,
      defaultShouldRevalidate: isRevalidationRequired
    })), shouldRevalidate && revalidatingFetchers.push({
      key,
      routeId: f.routeId,
      path: f.path,
      matches: fetcherMatches,
      match: fetcherMatch,
      controller: new AbortController()
    });
  }), [navigationMatches, revalidatingFetchers];
}
function isNewLoader(currentLoaderData, currentMatch, match2) {
  let isNew = (
    // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match2.route.id !== currentMatch.route.id
  ), isMissingData = currentLoaderData[match2.route.id] === void 0;
  return isNew || isMissingData;
}
function isNewRouteInstance(currentMatch, match2) {
  let currentPath = currentMatch.route.path;
  return (
    // param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match2.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match2.params["*"]
  );
}
function shouldRevalidateLoader(loaderMatch, arg) {
  if (loaderMatch.route.shouldRevalidate) {
    let routeChoice = loaderMatch.route.shouldRevalidate(arg);
    if (typeof routeChoice == "boolean")
      return routeChoice;
  }
  return arg.defaultShouldRevalidate;
}
async function loadLazyRouteModule(route, mapRouteProperties2, manifest) {
  if (!route.lazy)
    return;
  let lazyRoute = await route.lazy();
  if (!route.lazy)
    return;
  let routeToUpdate = manifest[route.id];
  invariant(routeToUpdate, "No route found in manifest");
  let routeUpdates = {};
  for (let lazyRouteProperty in lazyRoute) {
    let isPropertyStaticallyDefined = routeToUpdate[lazyRouteProperty] !== void 0 && // This property isn't static since it should always be updated based
    // on the route updates
    lazyRouteProperty !== "hasErrorBoundary";
    warning(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.')), !isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty) && (routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty]);
  }
  Object.assign(routeToUpdate, routeUpdates), Object.assign(routeToUpdate, _extends({}, mapRouteProperties2(routeToUpdate), {
    lazy: void 0
  }));
}
async function callLoaderOrAction(type, request, match2, matches2, manifest, mapRouteProperties2, basename, v7_relativeSplatPath, opts) {
  opts === void 0 && (opts = {});
  let resultType, result, onReject, runHandler = (handler) => {
    let reject, abortPromise = new Promise((_, r) => reject = r);
    return onReject = () => reject(), request.signal.addEventListener("abort", onReject), Promise.race([handler({
      request,
      params: match2.params,
      context: opts.requestContext
    }), abortPromise]);
  };
  try {
    let handler = match2.route[type];
    if (match2.route.lazy)
      if (handler) {
        let handlerError, values2 = await Promise.all([
          // If the handler throws, don't let it immediately bubble out,
          // since we need to let the lazy() execution finish so we know if this
          // route has a boundary that can handle the error
          runHandler(handler).catch((e) => {
            handlerError = e;
          }),
          loadLazyRouteModule(match2.route, mapRouteProperties2, manifest)
        ]);
        if (handlerError)
          throw handlerError;
        result = values2[0];
      } else if (await loadLazyRouteModule(match2.route, mapRouteProperties2, manifest), handler = match2.route[type], handler)
        result = await runHandler(handler);
      else if (type === "action") {
        let url = new URL(request.url), pathname = url.pathname + url.search;
        throw getInternalRouterError(405, {
          method: request.method,
          pathname,
          routeId: match2.route.id
        });
      } else
        return {
          type: ResultType.data,
          data: void 0
        };
    else if (handler)
      result = await runHandler(handler);
    else {
      let url = new URL(request.url), pathname = url.pathname + url.search;
      throw getInternalRouterError(404, {
        pathname
      });
    }
    invariant(result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match2.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
  } catch (e) {
    resultType = ResultType.error, result = e;
  } finally {
    onReject && request.signal.removeEventListener("abort", onReject);
  }
  if (isResponse(result)) {
    let status = result.status;
    if (redirectStatusCodes.has(status)) {
      let location = result.headers.get("Location");
      if (invariant(location, "Redirects returned/thrown from loaders/actions must have a Location header"), !ABSOLUTE_URL_REGEX.test(location))
        location = normalizeTo(new URL(request.url), matches2.slice(0, matches2.indexOf(match2) + 1), basename, true, location, v7_relativeSplatPath);
      else if (!opts.isStaticRequest) {
        let currentUrl = new URL(request.url), url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location), isSameBasename = stripBasename(url.pathname, basename) != null;
        url.origin === currentUrl.origin && isSameBasename && (location = url.pathname + url.search + url.hash);
      }
      if (opts.isStaticRequest)
        throw result.headers.set("Location", location), result;
      return {
        type: ResultType.redirect,
        status,
        location,
        revalidate: result.headers.get("X-Remix-Revalidate") !== null,
        reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
      };
    }
    if (opts.isRouteRequest)
      throw {
        type: resultType === ResultType.error ? ResultType.error : ResultType.data,
        response: result
      };
    let data;
    try {
      let contentType = result.headers.get("Content-Type");
      contentType && /\bapplication\/json\b/.test(contentType) ? data = await result.json() : data = await result.text();
    } catch (e) {
      return {
        type: ResultType.error,
        error: e
      };
    }
    return resultType === ResultType.error ? {
      type: resultType,
      error: new ErrorResponseImpl(status, result.statusText, data),
      headers: result.headers
    } : {
      type: ResultType.data,
      data,
      statusCode: result.status,
      headers: result.headers
    };
  }
  if (resultType === ResultType.error)
    return {
      type: resultType,
      error: result
    };
  if (isDeferredData(result)) {
    var _result$init, _result$init2;
    return {
      type: ResultType.deferred,
      deferredData: result,
      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
    };
  }
  return {
    type: ResultType.data,
    data: result
  };
}
function createClientSideRequest(history, location, signal, submission) {
  let url = history.createURL(stripHashFromPath(location)).toString(), init = {
    signal
  };
  if (submission && isMutationMethod(submission.formMethod)) {
    let {
      formMethod,
      formEncType
    } = submission;
    init.method = formMethod.toUpperCase(), formEncType === "application/json" ? (init.headers = new Headers({
      "Content-Type": formEncType
    }), init.body = JSON.stringify(submission.json)) : formEncType === "text/plain" ? init.body = submission.text : formEncType === "application/x-www-form-urlencoded" && submission.formData ? init.body = convertFormDataToSearchParams(submission.formData) : init.body = submission.formData;
  }
  return new Request(url, init);
}
function convertFormDataToSearchParams(formData) {
  let searchParams = new URLSearchParams();
  for (let [key, value] of formData.entries())
    searchParams.append(key, typeof value == "string" ? value : value.name);
  return searchParams;
}
function convertSearchParamsToFormData(searchParams) {
  let formData = new FormData();
  for (let [key, value] of searchParams.entries())
    formData.append(key, value);
  return formData;
}
function processRouteLoaderData(matches2, matchesToLoad, results, pendingError, activeDeferreds) {
  let loaderData = {}, errors = null, statusCode, foundError = false, loaderHeaders = {};
  return results.forEach((result, index) => {
    let id = matchesToLoad[index].route.id;
    if (invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData"), isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches2, id), error = result.error;
      pendingError && (error = Object.values(pendingError)[0], pendingError = void 0), errors = errors || {}, errors[boundaryMatch.route.id] == null && (errors[boundaryMatch.route.id] = error), loaderData[id] = void 0, foundError || (foundError = true, statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500), result.headers && (loaderHeaders[id] = result.headers);
    } else
      isDeferredResult(result) ? (activeDeferreds.set(id, result.deferredData), loaderData[id] = result.deferredData.data) : loaderData[id] = result.data, result.statusCode != null && result.statusCode !== 200 && !foundError && (statusCode = result.statusCode), result.headers && (loaderHeaders[id] = result.headers);
  }), pendingError && (errors = pendingError, loaderData[Object.keys(pendingError)[0]] = void 0), {
    loaderData,
    errors,
    statusCode: statusCode || 200,
    loaderHeaders
  };
}
function processLoaderData(state, matches2, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
  let {
    loaderData,
    errors
  } = processRouteLoaderData(matches2, matchesToLoad, results, pendingError, activeDeferreds);
  for (let index = 0; index < revalidatingFetchers.length; index++) {
    let {
      key,
      match: match2,
      controller
    } = revalidatingFetchers[index];
    invariant(fetcherResults !== void 0 && fetcherResults[index] !== void 0, "Did not find corresponding fetcher result");
    let result = fetcherResults[index];
    if (!(controller && controller.signal.aborted))
      if (isErrorResult(result)) {
        let boundaryMatch = findNearestBoundary(state.matches, match2?.route.id);
        errors && errors[boundaryMatch.route.id] || (errors = _extends({}, errors, {
          [boundaryMatch.route.id]: result.error
        })), state.fetchers.delete(key);
      } else if (isRedirectResult(result))
        invariant(false, "Unhandled fetcher revalidation redirect");
      else if (isDeferredResult(result))
        invariant(false, "Unhandled fetcher deferred data");
      else {
        let doneFetcher = getDoneFetcher(result.data);
        state.fetchers.set(key, doneFetcher);
      }
  }
  return {
    loaderData,
    errors
  };
}
function mergeLoaderData(loaderData, newLoaderData, matches2, errors) {
  let mergedLoaderData = _extends({}, newLoaderData);
  for (let match2 of matches2) {
    let id = match2.route.id;
    if (newLoaderData.hasOwnProperty(id) ? newLoaderData[id] !== void 0 && (mergedLoaderData[id] = newLoaderData[id]) : loaderData[id] !== void 0 && match2.route.loader && (mergedLoaderData[id] = loaderData[id]), errors && errors.hasOwnProperty(id))
      break;
  }
  return mergedLoaderData;
}
function findNearestBoundary(matches2, routeId) {
  return (routeId ? matches2.slice(0, matches2.findIndex((m) => m.route.id === routeId) + 1) : [...matches2]).reverse().find((m) => m.route.hasErrorBoundary === true) || matches2[0];
}
function getShortCircuitMatches(routes22) {
  let route = routes22.length === 1 ? routes22[0] : routes22.find((r) => r.index || !r.path || r.path === "/") || {
    id: "__shim-error-route__"
  };
  return {
    matches: [{
      params: {},
      pathname: "",
      pathnameBase: "",
      route
    }],
    route
  };
}
function getInternalRouterError(status, _temp5) {
  let {
    pathname,
    routeId,
    method,
    type
  } = _temp5 === void 0 ? {} : _temp5, statusText = "Unknown Server Error", errorMessage = "Unknown @remix-run/router error";
  return status === 400 ? (statusText = "Bad Request", method && pathname && routeId ? errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request." : type === "defer-action" ? errorMessage = "defer() is not supported in actions" : type === "invalid-body" && (errorMessage = "Unable to encode submission body")) : status === 403 ? (statusText = "Forbidden", errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"') : status === 404 ? (statusText = "Not Found", errorMessage = 'No route matches URL "' + pathname + '"') : status === 405 && (statusText = "Method Not Allowed", method && pathname && routeId ? errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request." : method && (errorMessage = 'Invalid request method "' + method.toUpperCase() + '"')), new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);
}
function findRedirect(results) {
  for (let i = results.length - 1; i >= 0; i--) {
    let result = results[i];
    if (isRedirectResult(result))
      return {
        result,
        idx: i
      };
  }
}
function stripHashFromPath(path) {
  let parsedPath = typeof path == "string" ? parsePath(path) : path;
  return createPath(_extends({}, parsedPath, {
    hash: ""
  }));
}
function isHashChangeOnly(a, b) {
  return a.pathname !== b.pathname || a.search !== b.search ? false : a.hash === "" ? b.hash !== "" : a.hash === b.hash ? true : b.hash !== "";
}
function isDeferredResult(result) {
  return result.type === ResultType.deferred;
}
function isErrorResult(result) {
  return result.type === ResultType.error;
}
function isRedirectResult(result) {
  return (result && result.type) === ResultType.redirect;
}
function isDeferredData(value) {
  let deferred = value;
  return deferred && typeof deferred == "object" && typeof deferred.data == "object" && typeof deferred.subscribe == "function" && typeof deferred.cancel == "function" && typeof deferred.resolveData == "function";
}
function isResponse(value) {
  return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
}
function isRedirectResponse(result) {
  if (!isResponse(result))
    return false;
  let status = result.status, location = result.headers.get("Location");
  return status >= 300 && status <= 399 && location != null;
}
function isQueryRouteResponse(obj) {
  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);
}
function isValidMethod(method) {
  return validRequestMethods.has(method.toLowerCase());
}
function isMutationMethod(method) {
  return validMutationMethods.has(method.toLowerCase());
}
async function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
  for (let index = 0; index < results.length; index++) {
    let result = results[index], match2 = matchesToLoad[index];
    if (!match2)
      continue;
    let currentMatch = currentMatches.find((m) => m.route.id === match2.route.id), isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match2) && (currentLoaderData && currentLoaderData[match2.route.id]) !== void 0;
    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
      let signal = signals[index];
      invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result"), await resolveDeferredData(result, signal, isFetcher).then((result2) => {
        result2 && (results[index] = result2 || results[index]);
      });
    }
  }
}
async function resolveDeferredData(result, signal, unwrap3) {
  if (unwrap3 === void 0 && (unwrap3 = false), !await result.deferredData.resolveData(signal)) {
    if (unwrap3)
      try {
        return {
          type: ResultType.data,
          data: result.deferredData.unwrappedData
        };
      } catch (e) {
        return {
          type: ResultType.error,
          error: e
        };
      }
    return {
      type: ResultType.data,
      data: result.deferredData.data
    };
  }
}
function hasNakedIndexQuery(search) {
  return new URLSearchParams(search).getAll("index").some((v) => v === "");
}
function getTargetMatch(matches2, location) {
  let search = typeof location == "string" ? parsePath(location).search : location.search;
  if (matches2[matches2.length - 1].route.index && hasNakedIndexQuery(search || ""))
    return matches2[matches2.length - 1];
  let pathMatches = getPathContributingMatches(matches2);
  return pathMatches[pathMatches.length - 1];
}
function getSubmissionFromNavigation(navigation) {
  let {
    formMethod,
    formAction,
    formEncType,
    text: text2,
    formData,
    json: json8
  } = navigation;
  if (!(!formMethod || !formAction || !formEncType)) {
    if (text2 != null)
      return {
        formMethod,
        formAction,
        formEncType,
        formData: void 0,
        json: void 0,
        text: text2
      };
    if (formData != null)
      return {
        formMethod,
        formAction,
        formEncType,
        formData,
        json: void 0,
        text: void 0
      };
    if (json8 !== void 0)
      return {
        formMethod,
        formAction,
        formEncType,
        formData: void 0,
        json: json8,
        text: void 0
      };
  }
}
function getLoadingNavigation(location, submission) {
  return submission ? {
    state: "loading",
    location,
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text
  } : {
    state: "loading",
    location,
    formMethod: void 0,
    formAction: void 0,
    formEncType: void 0,
    formData: void 0,
    json: void 0,
    text: void 0
  };
}
function getSubmittingNavigation(location, submission) {
  return {
    state: "submitting",
    location,
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text
  };
}
function getLoadingFetcher(submission, data) {
  return submission ? {
    state: "loading",
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text,
    data
  } : {
    state: "loading",
    formMethod: void 0,
    formAction: void 0,
    formEncType: void 0,
    formData: void 0,
    json: void 0,
    text: void 0,
    data
  };
}
function getSubmittingFetcher(submission, existingFetcher) {
  return {
    state: "submitting",
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text,
    data: existingFetcher ? existingFetcher.data : void 0
  };
}
function getDoneFetcher(data) {
  return {
    state: "idle",
    formMethod: void 0,
    formAction: void 0,
    formEncType: void 0,
    formData: void 0,
    json: void 0,
    text: void 0,
    data
  };
}
function restoreAppliedTransitions(_window, transitions) {
  try {
    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);
    if (sessionPositions) {
      let json8 = JSON.parse(sessionPositions);
      for (let [k, v] of Object.entries(json8 || {}))
        v && Array.isArray(v) && transitions.set(k, new Set(v || []));
    }
  } catch {
  }
}
function persistAppliedTransitions(_window, transitions) {
  if (transitions.size > 0) {
    let json8 = {};
    for (let [k, v] of transitions)
      json8[k] = [...v];
    try {
      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json8));
    } catch (error) {
      warning(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");
    }
  }
}
var Action;
var PopStateEventType;
var ResultType;
var immutableRouteKeys;
var paramRe;
var dynamicSegmentValue;
var indexRouteValue;
var emptySegmentValue;
var staticSegmentValue;
var splatPenalty;
var isSplat;
var joinPaths;
var normalizePathname;
var normalizeSearch;
var normalizeHash;
var json;
var AbortedDeferredError;
var DeferredData;
var defer;
var redirect;
var redirectDocument;
var ErrorResponseImpl;
var validMutationMethodsArr;
var validMutationMethods;
var validRequestMethodsArr;
var validRequestMethods;
var redirectStatusCodes;
var redirectPreserveMethodStatusCodes;
var IDLE_NAVIGATION;
var IDLE_FETCHER;
var IDLE_BLOCKER;
var ABSOLUTE_URL_REGEX;
var defaultMapRouteProperties;
var TRANSITIONS_STORAGE_KEY;
var UNSAFE_DEFERRED_SYMBOL;
var init_router = __esm({
  "node_modules/@remix-run/router/dist/router.js"() {
    (function(Action3) {
      Action3.Pop = "POP", Action3.Push = "PUSH", Action3.Replace = "REPLACE";
    })(Action || (Action = {}));
    PopStateEventType = "popstate";
    (function(ResultType2) {
      ResultType2.data = "data", ResultType2.deferred = "deferred", ResultType2.redirect = "redirect", ResultType2.error = "error";
    })(ResultType || (ResultType = {}));
    immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
    paramRe = /^:\w+$/, dynamicSegmentValue = 3, indexRouteValue = 2, emptySegmentValue = 1, staticSegmentValue = 10, splatPenalty = -2, isSplat = (s) => s === "*";
    joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/"), normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/"), normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search, normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash, json = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init, headers2 = new Headers(responseInit.headers);
      return headers2.has("Content-Type") || headers2.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(data), _extends({}, responseInit, {
        headers: headers2
      }));
    }, AbortedDeferredError = class extends Error {
    }, DeferredData = class {
      constructor(data, responseInit) {
        this.pendingKeysSet = /* @__PURE__ */ new Set(), this.subscribers = /* @__PURE__ */ new Set(), this.deferredKeys = [], invariant(data && typeof data == "object" && !Array.isArray(data), "defer() only accepts plain objects");
        let reject;
        this.abortPromise = new Promise((_, r) => reject = r), this.controller = new AbortController();
        let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
        this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort), this.controller.signal.addEventListener("abort", onAbort), this.data = Object.entries(data).reduce((acc, _ref2) => {
          let [key, value] = _ref2;
          return Object.assign(acc, {
            [key]: this.trackPromise(key, value)
          });
        }, {}), this.done && this.unlistenAbortSignal(), this.init = responseInit;
      }
      trackPromise(key, value) {
        if (!(value instanceof Promise))
          return value;
        this.deferredKeys.push(key), this.pendingKeysSet.add(key);
        let promise = Promise.race([value, this.abortPromise]).then((data) => this.onSettle(promise, key, void 0, data), (error) => this.onSettle(promise, key, error));
        return promise.catch(() => {
        }), Object.defineProperty(promise, "_tracked", {
          get: () => true
        }), promise;
      }
      onSettle(promise, key, error, data) {
        if (this.controller.signal.aborted && error instanceof AbortedDeferredError)
          return this.unlistenAbortSignal(), Object.defineProperty(promise, "_error", {
            get: () => error
          }), Promise.reject(error);
        if (this.pendingKeysSet.delete(key), this.done && this.unlistenAbortSignal(), error === void 0 && data === void 0) {
          let undefinedError = new Error('Deferred data for key "' + key + '" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');
          return Object.defineProperty(promise, "_error", {
            get: () => undefinedError
          }), this.emit(false, key), Promise.reject(undefinedError);
        }
        return data === void 0 ? (Object.defineProperty(promise, "_error", {
          get: () => error
        }), this.emit(false, key), Promise.reject(error)) : (Object.defineProperty(promise, "_data", {
          get: () => data
        }), this.emit(false, key), data);
      }
      emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
      }
      subscribe(fn) {
        return this.subscribers.add(fn), () => this.subscribers.delete(fn);
      }
      cancel() {
        this.controller.abort(), this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k)), this.emit(true);
      }
      async resolveData(signal) {
        let aborted = false;
        if (!this.done) {
          let onAbort = () => this.cancel();
          signal.addEventListener("abort", onAbort), aborted = await new Promise((resolve) => {
            this.subscribe((aborted2) => {
              signal.removeEventListener("abort", onAbort), (aborted2 || this.done) && resolve(aborted2);
            });
          });
        }
        return aborted;
      }
      get done() {
        return this.pendingKeysSet.size === 0;
      }
      get unwrappedData() {
        return invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds"), Object.entries(this.data).reduce((acc, _ref3) => {
          let [key, value] = _ref3;
          return Object.assign(acc, {
            [key]: unwrapTrackedPromise(value)
          });
        }, {});
      }
      get pendingKeys() {
        return Array.from(this.pendingKeysSet);
      }
    };
    defer = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init;
      return new DeferredData(data, responseInit);
    }, redirect = function(url, init) {
      init === void 0 && (init = 302);
      let responseInit = init;
      typeof responseInit == "number" ? responseInit = {
        status: responseInit
      } : typeof responseInit.status > "u" && (responseInit.status = 302);
      let headers2 = new Headers(responseInit.headers);
      return headers2.set("Location", url), new Response(null, _extends({}, responseInit, {
        headers: headers2
      }));
    }, redirectDocument = (url, init) => {
      let response = redirect(url, init);
      return response.headers.set("X-Remix-Reload-Document", "true"), response;
    }, ErrorResponseImpl = class {
      constructor(status, statusText, data, internal) {
        internal === void 0 && (internal = false), this.status = status, this.statusText = statusText || "", this.internal = internal, data instanceof Error ? (this.data = data.toString(), this.error = data) : this.data = data;
      }
    };
    validMutationMethodsArr = ["post", "put", "patch", "delete"], validMutationMethods = new Set(validMutationMethodsArr), validRequestMethodsArr = ["get", ...validMutationMethodsArr], validRequestMethods = new Set(validRequestMethodsArr), redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]), redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]), IDLE_NAVIGATION = {
      state: "idle",
      location: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    }, IDLE_FETCHER = {
      state: "idle",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    }, IDLE_BLOCKER = {
      state: "unblocked",
      proceed: void 0,
      reset: void 0,
      location: void 0
    }, ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, defaultMapRouteProperties = (route) => ({
      hasErrorBoundary: Boolean(route.hasErrorBoundary)
    }), TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
    UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
  }
});
function isServerMode(value) {
  return value === ServerMode.Development || value === ServerMode.Production || value === ServerMode.Test;
}
var ServerMode;
var init_mode = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/mode.js"() {
    ServerMode = /* @__PURE__ */ function(ServerMode2) {
      return ServerMode2.Development = "development", ServerMode2.Production = "production", ServerMode2.Test = "test", ServerMode2;
    }({});
  }
});
function sanitizeError(error, serverMode) {
  if (error instanceof Error && serverMode !== ServerMode.Development) {
    let sanitized = new Error("Unexpected Server Error");
    return sanitized.stack = void 0, sanitized;
  }
  return error;
}
function sanitizeErrors(errors, serverMode) {
  return Object.entries(errors).reduce((acc, [routeId, error]) => Object.assign(acc, {
    [routeId]: sanitizeError(error, serverMode)
  }), {});
}
function serializeError(error, serverMode) {
  let sanitized = sanitizeError(error, serverMode);
  return {
    message: sanitized.message,
    stack: sanitized.stack
  };
}
function serializeErrors(errors, serverMode) {
  if (!errors)
    return null;
  let entries = Object.entries(errors), serialized = {};
  for (let [key, val] of entries)
    if (isRouteErrorResponse(val))
      serialized[key] = {
        ...val,
        __type: "RouteErrorResponse"
      };
    else if (val instanceof Error) {
      let sanitized = sanitizeError(val, serverMode);
      serialized[key] = {
        message: sanitized.message,
        stack: sanitized.stack,
        __type: "Error",
        // If this is a subclass (i.e., ReferenceError), send up the type so we
        // can re-create the same type during hydration.  This will only apply
        // in dev mode since all production errors are sanitized to normal
        // Error instances
        ...sanitized.name !== "Error" ? {
          __subType: sanitized.name
        } : {}
      };
    } else
      serialized[key] = val;
  return serialized;
}
var init_errors = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/errors.js"() {
    init_router();
    init_mode();
  }
});
function isDeferredData2(value) {
  let deferred = value;
  return deferred && typeof deferred == "object" && typeof deferred.data == "object" && typeof deferred.subscribe == "function" && typeof deferred.cancel == "function" && typeof deferred.resolveData == "function";
}
function isResponse2(value) {
  return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
}
function isRedirectStatusCode(statusCode) {
  return redirectStatusCodes2.has(statusCode);
}
function isRedirectResponse2(response) {
  return isRedirectStatusCode(response.status);
}
function isTrackedPromise2(value) {
  return value != null && typeof value.then == "function" && value._tracked === true;
}
function createDeferredReadableStream(deferredData, signal, serverMode) {
  let encoder2 = new TextEncoder();
  return new ReadableStream({
    async start(controller) {
      let criticalData = {}, preresolvedKeys = [];
      for (let [key, value] of Object.entries(deferredData.data))
        isTrackedPromise2(value) ? (criticalData[key] = `${DEFERRED_VALUE_PLACEHOLDER_PREFIX}${key}`, (typeof value._data < "u" || typeof value._error < "u") && preresolvedKeys.push(key)) : criticalData[key] = value;
      controller.enqueue(encoder2.encode(JSON.stringify(criticalData) + `

`));
      for (let preresolvedKey of preresolvedKeys)
        enqueueTrackedPromise(controller, encoder2, preresolvedKey, deferredData.data[preresolvedKey], serverMode);
      let unsubscribe = deferredData.subscribe((aborted, settledKey) => {
        settledKey && enqueueTrackedPromise(controller, encoder2, settledKey, deferredData.data[settledKey], serverMode);
      });
      await deferredData.resolveData(signal), unsubscribe(), controller.close();
    }
  });
}
function enqueueTrackedPromise(controller, encoder2, settledKey, promise, serverMode) {
  "_error" in promise ? controller.enqueue(encoder2.encode("error:" + JSON.stringify({
    [settledKey]: promise._error instanceof Error ? serializeError(promise._error, serverMode) : promise._error
  }) + `

`)) : controller.enqueue(encoder2.encode("data:" + JSON.stringify({
    [settledKey]: promise._data ?? null
  }) + `

`));
}
var json3;
var defer3;
var redirect3;
var redirectDocument2;
var redirectStatusCodes2;
var DEFERRED_VALUE_PLACEHOLDER_PREFIX;
var init_responses = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/responses.js"() {
    init_router();
    init_errors();
    json3 = (data, init = {}) => json(data, init), defer3 = (data, init = {}) => defer(data, init), redirect3 = (url, init = 302) => redirect(url, init), redirectDocument2 = (url, init = 302) => redirectDocument(url, init);
    redirectStatusCodes2 = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
    DEFERRED_VALUE_PLACEHOLDER_PREFIX = "__deferred_promise:";
  }
});
function createEntryRouteModules(manifest) {
  return Object.keys(manifest).reduce((memo21, routeId) => (memo21[routeId] = manifest[routeId].module, memo21), {});
}
var init_entry = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/entry.js"() {
  }
});
var require_set_cookie = __commonJS({
  "node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module) {
    "use strict";
    var defaultParseOptions = {
      decodeValues: true,
      map: false,
      silent: false
    };
    function isNonEmptyString(str) {
      return typeof str == "string" && !!str.trim();
    }
    function parseString(setCookieValue, options) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString), nameValuePairStr = parts.shift(), parsed = parseNameValuePair(nameValuePairStr), name = parsed.name, value = parsed.value;
      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
      try {
        value = options.decodeValues ? decodeURIComponent(value) : value;
      } catch (e) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
          e
        );
      }
      var cookie = {
        name,
        value
      };
      return parts.forEach(function(part) {
        var sides = part.split("="), key = sides.shift().trimLeft().toLowerCase(), value2 = sides.join("=");
        key === "expires" ? cookie.expires = new Date(value2) : key === "max-age" ? cookie.maxAge = parseInt(value2, 10) : key === "secure" ? cookie.secure = true : key === "httponly" ? cookie.httpOnly = true : key === "samesite" ? cookie.sameSite = value2 : cookie[key] = value2;
      }), cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name = "", value = "", nameValueArr = nameValuePairStr.split("=");
      return nameValueArr.length > 1 ? (name = nameValueArr.shift(), value = nameValueArr.join("=")) : value = nameValuePairStr, { name, value };
    }
    function parse3(input, options) {
      if (options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, !input)
        return options.map ? {} : [];
      if (input.headers)
        if (typeof input.headers.getSetCookie == "function")
          input = input.headers.getSetCookie();
        else if (input.headers["set-cookie"])
          input = input.headers["set-cookie"];
        else {
          var sch = input.headers[Object.keys(input.headers).find(function(key) {
            return key.toLowerCase() === "set-cookie";
          })];
          !sch && input.headers.cookie && !options.silent && console.warn(
            "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
          ), input = sch;
        }
      if (Array.isArray(input) || (input = [input]), options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, options.map) {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString(str, options);
          return cookies2[cookie.name] = cookie, cookies2;
        }, cookies);
      } else
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString(str, options);
        });
    }
    function splitCookiesString2(cookiesString) {
      if (Array.isArray(cookiesString))
        return cookiesString;
      if (typeof cookiesString != "string")
        return [];
      var cookiesStrings = [], pos = 0, start, ch, lastComma, nextStart, cookiesSeparatorFound;
      function skipWhitespace() {
        for (; pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos)); )
          pos += 1;
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        return ch = cookiesString.charAt(pos), ch !== "=" && ch !== ";" && ch !== ",";
      }
      for (; pos < cookiesString.length; ) {
        for (start = pos, cookiesSeparatorFound = false; skipWhitespace(); )
          if (ch = cookiesString.charAt(pos), ch === ",") {
            for (lastComma = pos, pos += 1, skipWhitespace(), nextStart = pos; pos < cookiesString.length && notSpecialChar(); )
              pos += 1;
            pos < cookiesString.length && cookiesString.charAt(pos) === "=" ? (cookiesSeparatorFound = true, pos = nextStart, cookiesStrings.push(cookiesString.substring(start, lastComma)), start = pos) : pos = lastComma + 1;
          } else
            pos += 1;
        (!cookiesSeparatorFound || pos >= cookiesString.length) && cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
      }
      return cookiesStrings;
    }
    module.exports = parse3;
    module.exports.parse = parse3;
    module.exports.parseString = parseString;
    module.exports.splitCookiesString = splitCookiesString2;
  }
});
function getDocumentHeadersRR(build, context) {
  let boundaryIdx = context.errors ? context.matches.findIndex((m) => context.errors[m.route.id]) : -1, matches2 = boundaryIdx >= 0 ? context.matches.slice(0, boundaryIdx + 1) : context.matches, errorHeaders;
  if (boundaryIdx >= 0) {
    let {
      actionHeaders,
      actionData,
      loaderHeaders,
      loaderData
    } = context;
    context.matches.slice(boundaryIdx).some((match2) => {
      let id = match2.route.id;
      return actionHeaders[id] && (!actionData || actionData[id] === void 0) ? errorHeaders = actionHeaders[id] : loaderHeaders[id] && loaderData[id] === void 0 && (errorHeaders = loaderHeaders[id]), errorHeaders != null;
    });
  }
  return matches2.reduce((parentHeaders, match2, idx) => {
    let {
      id
    } = match2.route, routeModule = build.routes[id].module, loaderHeaders = context.loaderHeaders[id] || new Headers(), actionHeaders = context.actionHeaders[id] || new Headers(), includeErrorHeaders = errorHeaders != null && idx === matches2.length - 1, includeErrorCookies = includeErrorHeaders && errorHeaders !== loaderHeaders && errorHeaders !== actionHeaders;
    if (routeModule.headers == null) {
      let headers3 = new Headers(parentHeaders);
      return includeErrorCookies && prependCookies(errorHeaders, headers3), prependCookies(actionHeaders, headers3), prependCookies(loaderHeaders, headers3), headers3;
    }
    let headers2 = new Headers(routeModule.headers ? typeof routeModule.headers == "function" ? routeModule.headers({
      loaderHeaders,
      parentHeaders,
      actionHeaders,
      errorHeaders: includeErrorHeaders ? errorHeaders : void 0
    }) : routeModule.headers : void 0);
    return includeErrorCookies && prependCookies(errorHeaders, headers2), prependCookies(actionHeaders, headers2), prependCookies(loaderHeaders, headers2), prependCookies(parentHeaders, headers2), headers2;
  }, new Headers());
}
function prependCookies(parentHeaders, childHeaders) {
  let parentSetCookieString = parentHeaders.get("Set-Cookie");
  parentSetCookieString && (0, import_set_cookie_parser.splitCookiesString)(parentSetCookieString).forEach((cookie) => {
    childHeaders.append("Set-Cookie", cookie);
  });
}
var import_set_cookie_parser;
var init_headers = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/headers.js"() {
    import_set_cookie_parser = __toESM(require_set_cookie());
  }
});
function invariant2(value, message2) {
  if (value === false || value === null || typeof value > "u")
    throw console.error("The following error is a bug in Remix; please open an issue! https://github.com/remix-run/remix/issues/new"), new Error(message2);
}
var init_invariant = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/invariant.js"() {
  }
});
function matchServerRoutes(routes22, pathname) {
  let matches2 = matchRoutes(routes22, pathname);
  return matches2 ? matches2.map((match2) => ({
    params: match2.params,
    pathname: match2.pathname,
    route: match2.route
  })) : null;
}
var init_routeMatching = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/routeMatching.js"() {
    init_router();
  }
});
async function callRouteActionRR({
  loadContext,
  action: action4,
  params,
  request,
  routeId
}) {
  let result = await action4({
    request: stripDataParam(stripIndexParam(request)),
    context: loadContext,
    params
  });
  if (result === void 0)
    throw new Error(`You defined an action for route "${routeId}" but didn't return anything from your \`action\` function. Please return a value or \`null\`.`);
  return isResponse2(result) ? result : json3(result);
}
async function callRouteLoaderRR({
  loadContext,
  loader: loader6,
  params,
  request,
  routeId
}) {
  let result = await loader6({
    request: stripDataParam(stripIndexParam(request)),
    context: loadContext,
    params
  });
  if (result === void 0)
    throw new Error(`You defined a loader for route "${routeId}" but didn't return anything from your \`loader\` function. Please return a value or \`null\`.`);
  return isDeferredData2(result) ? result.init && isRedirectStatusCode(result.init.status || 200) ? redirect3(new Headers(result.init.headers).get("Location"), result.init) : result : isResponse2(result) ? result : json3(result);
}
function stripIndexParam(request) {
  let url = new URL(request.url), indexValues = url.searchParams.getAll("index");
  url.searchParams.delete("index");
  let indexValuesToKeep = [];
  for (let indexValue of indexValues)
    indexValue && indexValuesToKeep.push(indexValue);
  for (let toKeep of indexValuesToKeep)
    url.searchParams.append("index", toKeep);
  let init = {
    method: request.method,
    body: request.body,
    headers: request.headers,
    signal: request.signal
  };
  return init.body && (init.duplex = "half"), new Request(url.href, init);
}
function stripDataParam(request) {
  let url = new URL(request.url);
  url.searchParams.delete("_data");
  let init = {
    method: request.method,
    body: request.body,
    headers: request.headers,
    signal: request.signal
  };
  return init.body && (init.duplex = "half"), new Request(url.href, init);
}
var init_data = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/data.js"() {
    init_responses();
  }
});
function groupRoutesByParentId(manifest) {
  let routes22 = {};
  return Object.values(manifest).forEach((route) => {
    let parentId = route.parentId || "";
    routes22[parentId] || (routes22[parentId] = []), routes22[parentId].push(route);
  }), routes22;
}
function createRoutes(manifest, parentId = "", routesByParentId = groupRoutesByParentId(manifest)) {
  return (routesByParentId[parentId] || []).map((route) => ({
    ...route,
    children: createRoutes(manifest, route.id, routesByParentId)
  }));
}
function createStaticHandlerDataRoutes(manifest, future2, parentId = "", routesByParentId = groupRoutesByParentId(manifest)) {
  return (routesByParentId[parentId] || []).map((route) => {
    let commonRoute = {
      // Always include root due to default boundaries
      hasErrorBoundary: route.id === "root" || route.module.ErrorBoundary != null,
      id: route.id,
      path: route.path,
      loader: route.module.loader ? (
        // Need to use RR's version here to permit the optional context even
        // though we know it'll always be provided in remix
        (args) => callRouteLoaderRR({
          request: args.request,
          params: args.params,
          loadContext: args.context,
          loader: route.module.loader,
          routeId: route.id
        })
      ) : void 0,
      action: route.module.action ? (args) => callRouteActionRR({
        request: args.request,
        params: args.params,
        loadContext: args.context,
        action: route.module.action,
        routeId: route.id
      }) : void 0,
      handle: route.module.handle
    };
    return route.index ? {
      index: true,
      ...commonRoute
    } : {
      caseSensitive: route.caseSensitive,
      children: createStaticHandlerDataRoutes(manifest, future2, route.id, routesByParentId),
      ...commonRoute
    };
  });
}
var init_routes = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/routes.js"() {
    init_data();
  }
});
function escapeHtml(html) {
  return html.replace(ESCAPE_REGEX, (match2) => ESCAPE_LOOKUP[match2]);
}
var ESCAPE_LOOKUP;
var ESCAPE_REGEX;
var init_markup = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/markup.js"() {
    ESCAPE_LOOKUP = {
      "&": "\\u0026",
      ">": "\\u003e",
      "<": "\\u003c",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    }, ESCAPE_REGEX = /[&><\u2028\u2029]/g;
  }
});
function createServerHandoffString(serverHandoff) {
  return escapeHtml(JSON.stringify(serverHandoff));
}
var init_serverHandoff = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/serverHandoff.js"() {
    init_markup();
  }
});
async function broadcastDevReady(build, origin) {
  if (origin ??= "https://obesity-live-shades-guests.trycloudflare.com/", !origin)
    throw Error("Dev server origin not set");
  let url = new URL(origin);
  url.pathname = "ping";
  let response = await fetch(url.href, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      buildHash: build.assets.version
    })
  }).catch((error) => {
    throw console.error(`Could not reach Remix dev server at ${url}`), error;
  });
  if (!response.ok)
    throw console.error(`Could not reach Remix dev server at ${url} (${response.status})`), Error(await response.text());
}
function logDevReady(build) {
  console.log(`[REMIX DEV] ${build.assets.version} ready`);
}
function setDevServerHooks(devServerHooks) {
  globalThis[globalDevServerHooksKey] = devServerHooks;
}
function getDevServerHooks() {
  return globalThis[globalDevServerHooksKey];
}
var globalDevServerHooksKey;
var init_dev = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/dev.js"() {
    globalDevServerHooksKey = "__remix_devServerHooks";
  }
});
function derive(build, mode2) {
  var _build$future;
  let routes22 = createRoutes(build.routes), dataRoutes = createStaticHandlerDataRoutes(build.routes, build.future), serverMode = isServerMode(mode2) ? mode2 : ServerMode.Production, staticHandler = createStaticHandler(dataRoutes, {
    future: {
      v7_relativeSplatPath: (_build$future = build.future) === null || _build$future === void 0 ? void 0 : _build$future.v3_relativeSplatPath
    }
  }), errorHandler = build.entry.module.handleError || ((error, {
    request
  }) => {
    serverMode !== ServerMode.Test && !request.signal.aborted && console.error(
      // @ts-expect-error This is "private" from users but intended for internal use
      isRouteErrorResponse(error) && error.error ? error.error : error
    );
  });
  return {
    routes: routes22,
    dataRoutes,
    serverMode,
    staticHandler,
    errorHandler
  };
}
async function handleDataRequestRR(serverMode, staticHandler, routeId, request, loadContext, handleError) {
  try {
    let response = await staticHandler.queryRoute(request, {
      routeId,
      requestContext: loadContext
    });
    if (isRedirectResponse2(response)) {
      let headers2 = new Headers(response.headers);
      return headers2.set("X-Remix-Redirect", headers2.get("Location")), headers2.set("X-Remix-Status", response.status), headers2.delete("Location"), response.headers.get("Set-Cookie") !== null && headers2.set("X-Remix-Revalidate", "yes"), new Response(null, {
        status: 204,
        headers: headers2
      });
    }
    if (UNSAFE_DEFERRED_SYMBOL in response) {
      let deferredData = response[UNSAFE_DEFERRED_SYMBOL], body = createDeferredReadableStream(deferredData, request.signal, serverMode), init = deferredData.init || {}, headers2 = new Headers(init.headers);
      return headers2.set("Content-Type", "text/remix-deferred"), headers2.set("X-Remix-Response", "yes"), init.headers = headers2, new Response(body, init);
    }
    return response.headers.set("X-Remix-Response", "yes"), response;
  } catch (error) {
    if (isResponse2(error))
      return error.headers.set("X-Remix-Catch", "yes"), error;
    if (isRouteErrorResponse(error))
      return error && handleError(error), errorResponseToJson(error, serverMode);
    let errorInstance = error instanceof Error ? error : new Error("Unexpected Server Error");
    return handleError(errorInstance), json(serializeError(errorInstance, serverMode), {
      status: 500,
      headers: {
        "X-Remix-Error": "yes"
      }
    });
  }
}
async function handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext, handleError, criticalCss) {
  let context;
  try {
    context = await staticHandler.query(request, {
      requestContext: loadContext
    });
  } catch (error) {
    return handleError(error), new Response(null, {
      status: 500
    });
  }
  if (isResponse2(context))
    return context;
  context.errors && (Object.values(context.errors).forEach((err) => {
    (!isRouteErrorResponse(err) || err.error) && handleError(err);
  }), context.errors = sanitizeErrors(context.errors, serverMode));
  let headers2 = getDocumentHeadersRR(build, context), entryContext = {
    manifest: build.assets,
    routeModules: createEntryRouteModules(build.routes),
    staticHandlerContext: context,
    criticalCss,
    serverHandoffString: createServerHandoffString({
      url: context.location.pathname,
      criticalCss,
      state: {
        loaderData: context.loaderData,
        actionData: context.actionData,
        errors: serializeErrors(context.errors, serverMode)
      },
      future: build.future
    }),
    future: build.future,
    serializeError: (err) => serializeError(err, serverMode)
  }, handleDocumentRequestFunction = build.entry.module.default;
  try {
    return await handleDocumentRequestFunction(request, context.statusCode, headers2, entryContext, loadContext);
  } catch (error) {
    handleError(error), context = getStaticContextFromError(staticHandler.dataRoutes, context, error), context.errors && (context.errors = sanitizeErrors(context.errors, serverMode)), entryContext = {
      ...entryContext,
      staticHandlerContext: context,
      serverHandoffString: createServerHandoffString({
        url: context.location.pathname,
        state: {
          loaderData: context.loaderData,
          actionData: context.actionData,
          errors: serializeErrors(context.errors, serverMode)
        },
        future: build.future
      })
    };
    try {
      return await handleDocumentRequestFunction(request, context.statusCode, headers2, entryContext, loadContext);
    } catch (error2) {
      return handleError(error2), returnLastResortErrorResponse(error2, serverMode);
    }
  }
}
async function handleResourceRequestRR(serverMode, staticHandler, routeId, request, loadContext, handleError) {
  try {
    let response = await staticHandler.queryRoute(request, {
      routeId,
      requestContext: loadContext
    });
    return invariant2(isResponse2(response), "Expected a Response to be returned from queryRoute"), response;
  } catch (error) {
    return isResponse2(error) ? (error.headers.set("X-Remix-Catch", "yes"), error) : isRouteErrorResponse(error) ? (error && handleError(error), errorResponseToJson(error, serverMode)) : (handleError(error), returnLastResortErrorResponse(error, serverMode));
  }
}
function errorResponseToJson(errorResponse, serverMode) {
  return json(serializeError(
    // @ts-expect-error This is "private" from users but intended for internal use
    errorResponse.error || new Error("Unexpected Server Error"),
    serverMode
  ), {
    status: errorResponse.status,
    statusText: errorResponse.statusText,
    headers: {
      "X-Remix-Error": "yes"
    }
  });
}
function returnLastResortErrorResponse(error, serverMode) {
  let message2 = "Unexpected Server Error";
  return serverMode !== ServerMode.Production && (message2 += `

${String(error)}`), new Response(message2, {
    status: 500,
    headers: {
      "Content-Type": "text/plain"
    }
  });
}
var createRequestHandler;
var init_server = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/server.js"() {
    init_router();
    init_entry();
    init_errors();
    init_headers();
    init_invariant();
    init_mode();
    init_routeMatching();
    init_routes();
    init_responses();
    init_serverHandoff();
    init_dev();
    createRequestHandler = (build, mode2) => {
      let _build, routes22, serverMode, staticHandler, errorHandler;
      return async function(request, loadContext = {}) {
        if (_build = typeof build == "function" ? await build() : build, typeof build == "function") {
          let derived = derive(_build, mode2);
          routes22 = derived.routes, serverMode = derived.serverMode, staticHandler = derived.staticHandler, errorHandler = derived.errorHandler;
        } else if (!routes22 || !serverMode || !staticHandler || !errorHandler) {
          let derived = derive(_build, mode2);
          routes22 = derived.routes, serverMode = derived.serverMode, staticHandler = derived.staticHandler, errorHandler = derived.errorHandler;
        }
        let url = new URL(request.url), matches2 = matchServerRoutes(routes22, url.pathname), handleError = (error) => {
          if (mode2 === ServerMode.Development) {
            var _getDevServerHooks, _getDevServerHooks$pr;
            (_getDevServerHooks = getDevServerHooks()) === null || _getDevServerHooks === void 0 || (_getDevServerHooks$pr = _getDevServerHooks.processRequestError) === null || _getDevServerHooks$pr === void 0 || _getDevServerHooks$pr.call(_getDevServerHooks, error);
          }
          errorHandler(error, {
            context: loadContext,
            params: matches2 && matches2.length > 0 ? matches2[0].params : {},
            request
          });
        }, response;
        if (url.searchParams.has("_data")) {
          let routeId = url.searchParams.get("_data");
          if (response = await handleDataRequestRR(serverMode, staticHandler, routeId, request, loadContext, handleError), _build.entry.module.handleDataRequest) {
            var _matches$find;
            response = await _build.entry.module.handleDataRequest(response, {
              context: loadContext,
              params: (matches2 == null || (_matches$find = matches2.find((m) => m.route.id == routeId)) === null || _matches$find === void 0 ? void 0 : _matches$find.params) || {},
              request
            });
          }
        } else if (matches2 && matches2[matches2.length - 1].route.module.default == null && matches2[matches2.length - 1].route.module.ErrorBoundary == null)
          response = await handleResourceRequestRR(serverMode, staticHandler, matches2.slice(-1)[0].route.id, request, loadContext, handleError);
        else {
          var _getDevServerHooks2, _getDevServerHooks2$g;
          let criticalCss = mode2 === ServerMode.Development ? await ((_getDevServerHooks2 = getDevServerHooks()) === null || _getDevServerHooks2 === void 0 || (_getDevServerHooks2$g = _getDevServerHooks2.getCriticalCss) === null || _getDevServerHooks2$g === void 0 ? void 0 : _getDevServerHooks2$g.call(_getDevServerHooks2, _build, url.pathname)) : void 0;
          response = await handleDocumentRequestRR(serverMode, _build, staticHandler, request, loadContext, handleError, criticalCss);
        }
        return request.method === "HEAD" ? new Response(null, {
          headers: response.headers,
          status: response.status,
          statusText: response.statusText
        }) : response;
      };
    };
  }
});
function flash(name) {
  return `__flash_${name}__`;
}
function warnOnceAboutSigningSessionCookie(cookie) {
  warnOnce(cookie.isSigned, `The "${cookie.name}" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://remix.run/utils/cookies#signing-cookies for more information.`);
}
var createSession;
var isSession;
var createSessionStorageFactory;
var init_sessions = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/sessions.js"() {
    init_cookies();
    init_warnings();
    createSession = (initialData = {}, id = "") => {
      let map = new Map(Object.entries(initialData));
      return {
        get id() {
          return id;
        },
        get data() {
          return Object.fromEntries(map);
        },
        has(name) {
          return map.has(name) || map.has(flash(name));
        },
        get(name) {
          if (map.has(name))
            return map.get(name);
          let flashName = flash(name);
          if (map.has(flashName)) {
            let value = map.get(flashName);
            return map.delete(flashName), value;
          }
        },
        set(name, value) {
          map.set(name, value);
        },
        flash(name, value) {
          map.set(flash(name), value);
        },
        unset(name) {
          map.delete(name);
        }
      };
    }, isSession = (object) => object != null && typeof object.id == "string" && typeof object.data < "u" && typeof object.has == "function" && typeof object.get == "function" && typeof object.set == "function" && typeof object.flash == "function" && typeof object.unset == "function", createSessionStorageFactory = (createCookie) => ({
      cookie: cookieArg,
      createData,
      readData,
      updateData,
      deleteData
    }) => {
      let cookie = isCookie(cookieArg) ? cookieArg : createCookie(cookieArg?.name || "__session", cookieArg);
      return warnOnceAboutSigningSessionCookie(cookie), {
        async getSession(cookieHeader, options) {
          let id = cookieHeader && await cookie.parse(cookieHeader, options), data = id && await readData(id);
          return createSession(data || {}, id || "");
        },
        async commitSession(session, options) {
          let {
            id,
            data
          } = session, expires = options?.maxAge != null ? new Date(Date.now() + options.maxAge * 1e3) : options?.expires != null ? options.expires : cookie.expires;
          return id ? await updateData(id, data, expires) : id = await createData(data, expires), cookie.serialize(id, options);
        },
        async destroySession(session, options) {
          return await deleteData(session.id), cookie.serialize("", {
            ...options,
            maxAge: void 0,
            expires: /* @__PURE__ */ new Date(0)
          });
        }
      };
    };
  }
});
var createCookieSessionStorageFactory;
var init_cookieStorage = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/sessions/cookieStorage.js"() {
    init_cookies();
    init_sessions();
    createCookieSessionStorageFactory = (createCookie) => ({
      cookie: cookieArg
    } = {}) => {
      let cookie = isCookie(cookieArg) ? cookieArg : createCookie(cookieArg?.name || "__session", cookieArg);
      return warnOnceAboutSigningSessionCookie(cookie), {
        async getSession(cookieHeader, options) {
          return createSession(cookieHeader && await cookie.parse(cookieHeader, options) || {});
        },
        async commitSession(session, options) {
          let serializedCookie = await cookie.serialize(session.data, options);
          if (serializedCookie.length > 4096)
            throw new Error("Cookie length will exceed browser maximum. Length: " + serializedCookie.length);
          return serializedCookie;
        },
        async destroySession(_session, options) {
          return cookie.serialize("", {
            ...options,
            maxAge: void 0,
            expires: /* @__PURE__ */ new Date(0)
          });
        }
      };
    };
  }
});
var createMemorySessionStorageFactory;
var init_memoryStorage = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/sessions/memoryStorage.js"() {
    createMemorySessionStorageFactory = (createSessionStorage) => ({
      cookie
    } = {}) => {
      let map = /* @__PURE__ */ new Map();
      return createSessionStorage({
        cookie,
        async createData(data, expires) {
          let id = Math.random().toString(36).substring(2, 10);
          return map.set(id, {
            data,
            expires
          }), id;
        },
        async readData(id) {
          if (map.has(id)) {
            let {
              data,
              expires
            } = map.get(id);
            if (!expires || expires > /* @__PURE__ */ new Date())
              return data;
            expires && map.delete(id);
          }
          return null;
        },
        async updateData(id, data, expires) {
          map.set(id, {
            data,
            expires
          });
        },
        async deleteData(id) {
          map.delete(id);
        }
      });
    };
  }
});
var MaxPartSizeExceededError;
var init_errors2 = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/upload/errors.js"() {
    MaxPartSizeExceededError = class extends Error {
      constructor(field, maxBytes) {
        super(`Field "${field}" exceeded upload size of ${maxBytes} bytes.`), this.field = field, this.maxBytes = maxBytes;
      }
    };
  }
});
function createMemoryUploadHandler({
  filter,
  maxPartSize = 3e6
} = {}) {
  return async ({
    filename,
    contentType,
    name,
    data
  }) => {
    if (filter && !await filter({
      filename,
      contentType,
      name
    }))
      return;
    let size2 = 0, chunks = [];
    for await (let chunk of data) {
      if (size2 += chunk.byteLength, size2 > maxPartSize)
        throw new MaxPartSizeExceededError(name, maxPartSize);
      chunks.push(chunk);
    }
    return typeof filename == "string" ? new File(chunks, filename, {
      type: contentType
    }) : await new Blob(chunks, {
      type: contentType
    }).text();
  };
}
var init_memoryUploadHandler = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/upload/memoryUploadHandler.js"() {
    init_errors2();
  }
});
var esm_exports = {};
__export(esm_exports, {
  MaxPartSizeExceededError: () => MaxPartSizeExceededError,
  broadcastDevReady: () => broadcastDevReady,
  createCookieFactory: () => createCookieFactory,
  createCookieSessionStorageFactory: () => createCookieSessionStorageFactory,
  createMemorySessionStorageFactory: () => createMemorySessionStorageFactory,
  createRequestHandler: () => createRequestHandler,
  createSession: () => createSession,
  createSessionStorageFactory: () => createSessionStorageFactory,
  defer: () => defer3,
  isCookie: () => isCookie,
  isSession: () => isSession,
  json: () => json3,
  logDevReady: () => logDevReady,
  redirect: () => redirect3,
  redirectDocument: () => redirectDocument2,
  unstable_composeUploadHandlers: () => composeUploadHandlers,
  unstable_createMemoryUploadHandler: () => createMemoryUploadHandler,
  unstable_parseMultipartFormData: () => parseMultipartFormData,
  unstable_setDevServerHooks: () => setDevServerHooks
});
var init_esm = __esm({
  "node_modules/@remix-run/server-runtime/dist/esm/index.js"() {
    init_cookies();
    init_formData();
    init_responses();
    init_server();
    init_sessions();
    init_cookieStorage();
    init_memoryStorage();
    init_memoryUploadHandler();
    init_errors2();
    init_dev();
  }
});
var require_crypto = __commonJS({
  "node_modules/@remix-run/cloudflare/dist/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var encoder2 = new TextEncoder(), sign2 = async (value, secret) => {
      let key = await createKey2(secret, ["sign"]), data = encoder2.encode(value), signature = await crypto.subtle.sign("HMAC", key, data), hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/=+$/, "");
      return value + "." + hash;
    }, unsign = async (signed, secret) => {
      let index = signed.lastIndexOf("."), value = signed.slice(0, index), hash = signed.slice(index + 1), key = await createKey2(secret, ["verify"]), data = encoder2.encode(value), signature = byteStringToUint8Array(atob(hash));
      return await crypto.subtle.verify("HMAC", key, signature, data) ? value : false;
    };
    async function createKey2(secret, usages) {
      return await crypto.subtle.importKey("raw", encoder2.encode(secret), {
        name: "HMAC",
        hash: "SHA-256"
      }, false, usages);
    }
    function byteStringToUint8Array(byteString) {
      let array = new Uint8Array(byteString.length);
      for (let i = 0; i < byteString.length; i++)
        array[i] = byteString.charCodeAt(i);
      return array;
    }
    exports.sign = sign2;
    exports.unsign = unsign;
  }
});
var require_implementations = __commonJS({
  "node_modules/@remix-run/cloudflare/dist/implementations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var serverRuntime = (init_esm(), __toCommonJS(esm_exports)), crypto2 = require_crypto(), createCookie = serverRuntime.createCookieFactory({
      sign: crypto2.sign,
      unsign: crypto2.unsign
    }), createCookieSessionStorage = serverRuntime.createCookieSessionStorageFactory(createCookie), createSessionStorage = serverRuntime.createSessionStorageFactory(createCookie), createMemorySessionStorage = serverRuntime.createMemorySessionStorageFactory(createSessionStorage);
    exports.createCookie = createCookie;
    exports.createCookieSessionStorage = createCookieSessionStorage;
    exports.createMemorySessionStorage = createMemorySessionStorage;
    exports.createSessionStorage = createSessionStorage;
  }
});
var require_workersKVStorage = __commonJS({
  "node_modules/@remix-run/cloudflare/dist/sessions/workersKVStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var implementations = require_implementations();
    function createWorkersKVSessionStorage({
      cookie,
      kv
    }) {
      return implementations.createSessionStorage({
        cookie,
        async createData(data, expires) {
          for (; ; ) {
            let randomBytes = new Uint8Array(8);
            crypto.getRandomValues(randomBytes);
            let id = [...randomBytes].map((x) => x.toString(16).padStart(2, "0")).join("");
            if (!await kv.get(id, "json"))
              return await kv.put(id, JSON.stringify(data), {
                expiration: expires ? Math.round(expires.getTime() / 1e3) : void 0
              }), id;
          }
        },
        async readData(id) {
          let session = await kv.get(id);
          return session ? JSON.parse(session) : null;
        },
        async updateData(id, data, expires) {
          await kv.put(id, JSON.stringify(data), {
            expiration: expires ? Math.round(expires.getTime() / 1e3) : void 0
          });
        },
        async deleteData(id) {
          await kv.delete(id);
        }
      });
    }
    exports.createWorkersKVSessionStorage = createWorkersKVSessionStorage;
  }
});
var require_dist = __commonJS({
  "node_modules/@remix-run/cloudflare/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var workersKVStorage = require_workersKVStorage(), implementations = require_implementations(), serverRuntime = (init_esm(), __toCommonJS(esm_exports));
    exports.createWorkersKVSessionStorage = workersKVStorage.createWorkersKVSessionStorage;
    exports.createCookie = implementations.createCookie;
    exports.createCookieSessionStorage = implementations.createCookieSessionStorage;
    exports.createMemorySessionStorage = implementations.createMemorySessionStorage;
    exports.createSessionStorage = implementations.createSessionStorage;
    Object.defineProperty(exports, "MaxPartSizeExceededError", {
      enumerable: true,
      get: function() {
        return serverRuntime.MaxPartSizeExceededError;
      }
    });
    Object.defineProperty(exports, "broadcastDevReady", {
      enumerable: true,
      get: function() {
        return serverRuntime.broadcastDevReady;
      }
    });
    Object.defineProperty(exports, "createRequestHandler", {
      enumerable: true,
      get: function() {
        return serverRuntime.createRequestHandler;
      }
    });
    Object.defineProperty(exports, "createSession", {
      enumerable: true,
      get: function() {
        return serverRuntime.createSession;
      }
    });
    Object.defineProperty(exports, "defer", {
      enumerable: true,
      get: function() {
        return serverRuntime.defer;
      }
    });
    Object.defineProperty(exports, "isCookie", {
      enumerable: true,
      get: function() {
        return serverRuntime.isCookie;
      }
    });
    Object.defineProperty(exports, "isSession", {
      enumerable: true,
      get: function() {
        return serverRuntime.isSession;
      }
    });
    Object.defineProperty(exports, "json", {
      enumerable: true,
      get: function() {
        return serverRuntime.json;
      }
    });
    Object.defineProperty(exports, "logDevReady", {
      enumerable: true,
      get: function() {
        return serverRuntime.logDevReady;
      }
    });
    Object.defineProperty(exports, "redirect", {
      enumerable: true,
      get: function() {
        return serverRuntime.redirect;
      }
    });
    Object.defineProperty(exports, "redirectDocument", {
      enumerable: true,
      get: function() {
        return serverRuntime.redirectDocument;
      }
    });
    Object.defineProperty(exports, "unstable_composeUploadHandlers", {
      enumerable: true,
      get: function() {
        return serverRuntime.unstable_composeUploadHandlers;
      }
    });
    Object.defineProperty(exports, "unstable_createMemoryUploadHandler", {
      enumerable: true,
      get: function() {
        return serverRuntime.unstable_createMemoryUploadHandler;
      }
    });
    Object.defineProperty(exports, "unstable_parseMultipartFormData", {
      enumerable: true,
      get: function() {
        return serverRuntime.unstable_parseMultipartFormData;
      }
    });
  }
});
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var ReactVersion = "18.2.0", REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactCurrentDispatcher = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, ReactCurrentBatchConfig = {
        transition: null
      }, ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      }, ReactCurrentOwner = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
      }
      ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
      }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = "";
        currentExtraStackFrame && (stack += currentExtraStackFrame);
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        return impl && (stack += impl() || ""), stack;
      };
      var enableScopeAPI = false, enableCacheElement = false, enableTransitionTracing = false, enableLegacyHidden = false, enableDebugTracing = false, ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame, ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey])
            return;
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(publicInstance) {
          return false;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      }, assign = Object.assign, emptyObject = {};
      Object.freeze(emptyObject);
      function Component9(props, context, updater) {
        this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      Component9.prototype.isReactComponent = {}, Component9.prototype.setState = function(partialState, callback) {
        if (typeof partialState != "object" && typeof partialState != "function" && partialState != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      }, Component9.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component9.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
          });
        };
        for (var fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component9.prototype;
      function PureComponent13(props, context, updater) {
        this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent13.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent13, assign(pureComponentPrototype, Component9.prototype), pureComponentPrototype.isPureReactComponent = true;
      function createRef11() {
        var refObject = {
          current: null
        };
        return Object.seal(refObject), refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), false;
        } catch {
          return true;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning)
            return false;
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning)
            return false;
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = true, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingKey.isReactWarning = true, Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          specialPropRefWarningShown || (specialPropRefWarningShown = true, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingRef.isReactWarning = true, Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref == "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref), didWarnAboutStringRefs[componentName] = true);
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }), Object.defineProperty(element, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function createElement11(type, config, children) {
        var propName, props = {}, key = null, ref = null, self2 = null, source = null;
        if (config != null) {
          hasValidRef(config) && (ref = config.ref, warnIfStringRefCannotBeAutoConverted(config)), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), self2 = config.__self === void 0 ? null : config.__self, source = config.__source === void 0 ? null : config.__source;
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
            childArray[i] = arguments[i + 2];
          Object.freeze && Object.freeze(childArray), props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps2 = type.defaultProps;
          for (propName in defaultProps2)
            props[propName] === void 0 && (props[propName] = defaultProps2[propName]);
        }
        if (key || ref) {
          var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
          key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement2(element, config, children) {
        if (element == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName, props = assign({}, element.props), key = element.key, ref = element.ref, self2 = element._self, source = element._source, owner = element._owner;
        if (config != null) {
          hasValidRef(config) && (ref = config.ref, owner = ReactCurrentOwner.current), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
          var defaultProps2;
          element.type && element.type.defaultProps && (defaultProps2 = element.type.defaultProps);
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (config[propName] === void 0 && defaultProps2 !== void 0 ? props[propName] = defaultProps2[propName] : props[propName] = config[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
            childArray[i] = arguments[i + 2];
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement7(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".", SUBSEPARATOR = ":";
      function escape2(key) {
        var escapeRegex2 = /[=:]/g, escaperLookup = {
          "=": "=0",
          ":": "=2"
        }, escapedString = key.replace(escapeRegex2, function(match2) {
          return escaperLookup[match2];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false, userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text2) {
        return text2.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        return typeof element == "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape2("" + element.key)) : index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        (type === "undefined" || type === "boolean") && (children = null);
        var invokeCallback = false;
        if (children === null)
          invokeCallback = true;
        else
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        if (invokeCallback) {
          var _child = children, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            childKey != null && (escapedChildKey = escapeUserProvidedKey(childKey) + "/"), mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else
            mappedChild != null && (isValidElement7(mappedChild) && (mappedChild.key && (!_child || _child.key !== mappedChild.key) && checkKeyStringCoercion(mappedChild.key), mappedChild = cloneAndReplaceKey(
              mappedChild,
              // Keep both the (mapped) and old keys if they differ, just as
              // traverseAllChildren used to do for objects as children
              escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
              (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                // eslint-disable-next-line react-internal/safe-string-coercion
                escapeUserProvidedKey("" + mappedChild.key) + "/"
              ) : "") + childKey
            )), array.push(mappedChild));
          return 1;
        }
        var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children))
          for (var i = 0; i < children.length; i++)
            child = children[i], nextName = nextNamePrefix + getElementKey(child, i), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn == "function") {
            var iterableChildren = children;
            iteratorFn === iterableChildren.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = true);
            for (var iterator = iteratorFn.call(iterableChildren), step, ii = 0; !(step = iterator.next()).done; )
              child = step.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null)
          return children;
        var result = [], count = 0;
        return mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        }), result;
      }
      function countChildren(children) {
        var n = 0;
        return mapChildren(children, function() {
          n++;
        }), n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement7(children))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
      }
      function createContext29(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false, hasWarnedAboutUsingConsumerProvider = false, hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                return hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = true, error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                return hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = true, error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = true);
              }
            }
          }), context.Consumer = Consumer;
        }
        return context._currentRenderer = null, context._currentRenderer2 = null, context;
      }
      var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result, thenable = ctor();
          if (thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved, resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected, rejected._result = error2;
            }
          }), payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending, pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          return moduleObject === void 0 && error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, moduleObject), "default" in moduleObject || error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject), moduleObject.default;
        } else
          throw payload._result;
      }
      function lazy(ctor) {
        var payload = {
          // We use these fields to store the result.
          _status: Uninitialized,
          _result: ctor
        }, lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps2, propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps2;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps2 = newDefaultProps, Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef13(render) {
        render != null && render.$$typeof === REACT_MEMO_TYPE ? error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render != "function" ? error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : render.length !== 0 && render.length !== 2 && error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), render != null && (render.defaultProps != null || render.propTypes != null) && error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !render.name && !render.displayName && (render.displayName = name);
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function memo21(type, compare2) {
        isValidElementType(type) || error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare2 === void 0 ? null : compare2
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !type.name && !type.displayName && (type.displayName = name);
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        return dispatcher === null && error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), dispatcher;
      }
      function useContext32(Context) {
        var dispatcher = resolveDispatcher();
        if (Context._context !== void 0) {
          var realContext = Context._context;
          realContext.Consumer === Context ? error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
      }
      function useState52(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer4(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef66(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect65(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect5(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback56(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo28(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle6(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId28() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0)
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match2 && match2[1] || "";
            }
          return `
` + prefix + name;
        }
      }
      var reentry = false, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = false, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
      }
      function shouldConstruct(Component10) {
        var prototype = Component10.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values2, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = true, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else
          setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = false;
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name)
            return `

Check the render method of \`` + name + "`.";
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        return elementProps != null ? getSourceInfoErrorAddendum(elementProps.__source) : "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
          parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!(!element._store || element._store.validated || element.key != null)) {
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (!ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            element && element._owner && element._owner !== ReactCurrentOwner.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node == "object") {
          if (isArray(node))
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              isValidElement7(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement7(node))
            node._store && (node._store.validated = true);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement7(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
          var typeString;
          type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement11.apply(this, arguments);
        if (element == null)
          return element;
        if (validType)
          for (var i = 2; i < arguments.length; i++)
            validateChildKeys(arguments[i], type);
        return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        return validatedFactory.type = type, didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = true, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(validatedFactory, "type", {
          enumerable: false,
          get: function() {
            return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: type
            }), type;
          }
        }), validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        for (var newElement = cloneElement2.apply(this, arguments), i = 2; i < arguments.length; i++)
          validateChildKeys(arguments[i], newElement.type);
        return validatePropTypes(newElement), newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          scope();
        } finally {
          if (ReactCurrentBatchConfig.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      var didWarnAboutMessageChannel = false, enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null)
          try {
            var requireString = ("require" + Math.random()).slice(0, 7), nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch {
            enqueueTaskImpl = function(callback) {
              didWarnAboutMessageChannel === false && (didWarnAboutMessageChannel = true, typeof MessageChannel > "u" && error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var channel = new MessageChannel();
              channel.port1.onmessage = callback, channel.port2.postMessage(void 0);
            };
          }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0, didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++, ReactCurrentActQueue.current === null && (ReactCurrentActQueue.current = []);
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy, result;
          try {
            if (ReactCurrentActQueue.isBatchingLegacy = true, result = callback(), !prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              queue !== null && (ReactCurrentActQueue.didScheduleLegacyUpdate = false, flushActQueue(queue));
            }
          } catch (error2) {
            throw popActScope(prevActScopeDepth), error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result == "object" && typeof result.then == "function") {
            var thenableResult = result, wasAwaited = false, thenable = {
              then: function(resolve, reject) {
                wasAwaited = true, thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth), actScopeDepth === 0 ? recursivelyFlushAsyncActWork(returnValue2, resolve, reject) : resolve(returnValue2);
                }, function(error2) {
                  popActScope(prevActScopeDepth), reject(error2);
                });
              }
            };
            return !didWarnNoAwaitAct && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              wasAwaited || (didWarnNoAwaitAct = true, error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), thenable;
          } else {
            var returnValue = result;
            if (popActScope(prevActScopeDepth), actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              _queue !== null && (flushActQueue(_queue), ReactCurrentActQueue.current = null);
              var _thenable = {
                then: function(resolve, reject) {
                  ReactCurrentActQueue.current === null ? (ReactCurrentActQueue.current = [], recursivelyFlushAsyncActWork(returnValue, resolve, reject)) : resolve(returnValue);
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), actScopeDepth = prevActScopeDepth;
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null)
            try {
              flushActQueue(queue), enqueueTask(function() {
                queue.length === 0 ? (ReactCurrentActQueue.current = null, resolve(returnValue)) : recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              });
            } catch (error2) {
              reject(error2);
            }
          else
            resolve(returnValue);
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        if (!isFlushing) {
          isFlushing = true;
          var i = 0;
          try {
            for (; i < queue.length; i++) {
              var callback = queue[i];
              do
                callback = callback(true);
              while (callback !== null);
            }
            queue.length = 0;
          } catch (error2) {
            throw queue = queue.slice(i + 1), error2;
          } finally {
            isFlushing = false;
          }
        }
      }
      var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children11 = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children11, exports.Component = Component9, exports.Fragment = REACT_FRAGMENT_TYPE, exports.Profiler = REACT_PROFILER_TYPE, exports.PureComponent = PureComponent13, exports.StrictMode = REACT_STRICT_MODE_TYPE, exports.Suspense = REACT_SUSPENSE_TYPE, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.cloneElement = cloneElement$1, exports.createContext = createContext29, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef11, exports.forwardRef = forwardRef13, exports.isValidElement = isValidElement7, exports.lazy = lazy, exports.memo = memo21, exports.startTransition = startTransition, exports.unstable_act = act, exports.useCallback = useCallback56, exports.useContext = useContext32, exports.useDebugValue = useDebugValue, exports.useDeferredValue = useDeferredValue, exports.useEffect = useEffect65, exports.useId = useId28, exports.useImperativeHandle = useImperativeHandle6, exports.useInsertionEffect = useInsertionEffect, exports.useLayoutEffect = useLayoutEffect5, exports.useMemo = useMemo28, exports.useReducer = useReducer4, exports.useRef = useRef66, exports.useState = useState52, exports.useSyncExternalStore = useSyncExternalStore, exports.useTransition = useTransition, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    module.exports = require_react_development();
  }
});
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var enableSchedulerDebugging = false, enableProfiling = false, frameYieldMs = 5;
      function push(heap, node) {
        var index = heap.length;
        heap.push(node), siftUp(heap, node, index);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0)
          return null;
        var first = heap[0], last = heap.pop();
        return last !== first && (heap[0] = last, siftDown(heap, last, 0)), first;
      }
      function siftUp(heap, node, i) {
        for (var index = i; index > 0; ) {
          var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
          if (compare2(parent, node) > 0)
            heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
          else
            return;
        }
      }
      function siftDown(heap, node, i) {
        for (var index = i, length = heap.length, halfLength = length >>> 1; index < halfLength; ) {
          var leftIndex = (index + 1) * 2 - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
          if (compare2(left, node) < 0)
            rightIndex < length && compare2(right, left) < 0 ? (heap[index] = right, heap[rightIndex] = node, index = rightIndex) : (heap[index] = left, heap[leftIndex] = node, index = leftIndex);
          else if (rightIndex < length && compare2(right, node) < 0)
            heap[index] = right, heap[rightIndex] = node, index = rightIndex;
          else
            return;
        }
      }
      function compare2(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var ImmediatePriority = 1, UserBlockingPriority = 2, NormalPriority = 3, LowPriority = 4, IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance == "object" && typeof performance.now == "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date, initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823, IMMEDIATE_PRIORITY_TIMEOUT = -1, USER_BLOCKING_PRIORITY_TIMEOUT = 250, NORMAL_PRIORITY_TIMEOUT = 5e3, LOW_PRIORITY_TIMEOUT = 1e4, IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt, taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = NormalPriority, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, localSetTimeout = typeof setTimeout == "function" ? setTimeout : null, localClearTimeout = typeof clearTimeout == "function" ? clearTimeout : null, localSetImmediate = typeof setImmediate < "u" ? setImmediate : null, isInputPending = typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        for (var timer = peek(timerQueue); timer !== null; ) {
          if (timer.callback === null)
            pop(timerQueue);
          else if (timer.startTime <= currentTime)
            pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
          else
            return;
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        if (isHostTimeoutScheduled = false, advanceTimers(currentTime), !isHostCallbackScheduled)
          if (peek(taskQueue) !== null)
            isHostCallbackScheduled = true, requestHostCallback(flushWork);
          else {
            var firstTimer = peek(timerQueue);
            firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false, isHostTimeoutScheduled && (isHostTimeoutScheduled = false, cancelHostTimeout()), isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling)
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                currentTask.isQueued = false;
              }
              throw error;
            }
          else
            return workLoop(hasTimeRemaining, initialTime2);
        } finally {
          currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        for (advanceTimers(currentTime), currentTask = peek(taskQueue); currentTask !== null && !enableSchedulerDebugging && !(currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())); ) {
          var callback = currentTask.callback;
          if (typeof callback == "function") {
            currentTask.callback = null, currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime, continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now(), typeof continuationCallback == "function" ? currentTask.callback = continuationCallback : currentTask === peek(taskQueue) && pop(taskQueue), advanceTimers(currentTime);
          } else
            pop(taskQueue);
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null)
          return true;
        var firstTimer = peek(timerQueue);
        return firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime), false;
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now(), startTime2;
        if (typeof options == "object" && options !== null) {
          var delay = options.delay;
          typeof delay == "number" && delay > 0 ? startTime2 = currentTime + delay : startTime2 = currentTime;
        } else
          startTime2 = currentTime;
        var timeout2;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout2 = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout2 = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout2 = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout2, newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        return startTime2 > currentTime ? (newTask.sortIndex = startTime2, push(timerQueue, newTask), peek(taskQueue) === null && newTask === peek(timerQueue) && (isHostTimeoutScheduled ? cancelHostTimeout() : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, startTime2 - currentTime))) : (newTask.sortIndex = expirationTime, push(taskQueue, newTask), !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = true, requestHostCallback(flushWork))), newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = true, requestHostCallback(flushWork));
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false, scheduledHostCallback = null, taskTimeoutID = -1, frameInterval = frameYieldMs, startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        return !(timeElapsed < frameInterval);
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        fps > 0 ? frameInterval = Math.floor(1e3 / fps) : frameInterval = frameYieldMs;
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true, hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            hasMoreWork ? schedulePerformWorkUntilDeadline() : (isMessageLoopRunning = false, scheduledHostCallback = null);
          }
        } else
          isMessageLoopRunning = false;
      }, schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate == "function")
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      else if (typeof MessageChannel < "u") {
        var channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline, schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      function requestHostCallback(callback) {
        scheduledHostCallback = callback, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID), taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint, unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority, exports.unstable_ImmediatePriority = ImmediatePriority, exports.unstable_LowPriority = LowPriority, exports.unstable_NormalPriority = NormalPriority, exports.unstable_Profiling = unstable_Profiling, exports.unstable_UserBlockingPriority = UserBlockingPriority, exports.unstable_cancelCallback = unstable_cancelCallback, exports.unstable_continueExecution = unstable_continueExecution, exports.unstable_forceFrameRate = forceFrameRate, exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel, exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode, exports.unstable_next = unstable_next, exports.unstable_pauseExecution = unstable_pauseExecution, exports.unstable_requestPaint = unstable_requestPaint, exports.unstable_runWithPriority = unstable_runWithPriority, exports.unstable_scheduleCallback = unstable_scheduleCallback, exports.unstable_shouldYield = shouldYieldToHost, exports.unstable_wrapCallback = unstable_wrapCallback, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    module.exports = require_scheduler_development();
  }
});
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var React270 = require_react(), Scheduler = require_scheduler(), ReactSharedInternals = React270.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
      }
      function warn(format) {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0, ClassComponent = 1, IndeterminateComponent = 2, HostRoot = 3, HostPortal = 4, HostComponent = 5, HostText = 6, Fragment7 = 7, Mode = 8, ContextConsumer = 9, ContextProvider = 10, ForwardRef = 11, Profiler = 12, SuspenseComponent = 13, MemoComponent = 14, SimpleMemoComponent = 15, LazyComponent = 16, IncompleteClassComponent = 17, DehydratedFragment = 18, SuspenseListComponent = 19, ScopeComponent = 21, OffscreenComponent = 22, LegacyHiddenComponent = 23, CacheComponent = 24, TracingMarkerComponent = 25, enableClientRenderFallbackOnTextMismatch = true, enableNewReconciler = false, enableLazyContextPropagation = false, enableLegacyHidden = false, enableSuspenseAvoidThisFallback = false, disableCommentsAsDOMContainers = true, enableCustomElementPropertySupport = false, warnAboutStringRefs = false, enableSchedulingProfiler = true, enableProfilerTimer = true, enableProfilerCommitHooks = true, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies), registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] && error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName), registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName, registrationName === "onDoubleClick" && (possibleRegistrationNames.ondblclick = registrationName);
        }
        for (var i = 0; i < dependencies.length; i++)
          allNativeEvents.add(dependencies[i]);
      }
      var canUseDOM = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), false;
        } catch {
          return true;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? true : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? false : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = true, true) : (illegalAttributeNameCache[attributeName] = true, error("Invalid attribute name: `%s`", attributeName), false);
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        return propertyInfo !== null ? propertyInfo.type === RESERVED : isCustomComponentTag ? false : name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N");
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return false;
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag)
              return false;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix2 = name.toLowerCase().slice(0, 5);
            return prefix2 !== "data-" && prefix2 !== "aria-";
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value > "u" || shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag))
          return true;
        if (isCustomComponentTag)
          return false;
        if (propertyInfo !== null)
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          true,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize3 = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          false,
          // sanitizeURL
          false
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          false,
          // sanitizeURL
          false
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        false,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        true,
        // sanitizeURL
        false
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          true,
          // sanitizeURL
          true
        );
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = false;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = true, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          checkAttributeStringCoercion(expected, name), propertyInfo.sanitizeURL && sanitizeURL("" + expected);
          var attributeName = propertyInfo.attributeName, stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);
              return value === "" ? true : shouldRemoveAttribute(name, expected, propertyInfo, false) ? value : value === "" + expected ? expected : value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false))
              return node.getAttribute(attributeName);
            if (propertyInfo.type === BOOLEAN)
              return expected;
            stringValue = node.getAttribute(attributeName);
          }
          return shouldRemoveAttribute(name, expected, propertyInfo, false) ? stringValue === null ? expected : stringValue : stringValue === "" + expected ? expected : stringValue;
        }
      }
      function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name))
            return;
          if (!node.hasAttribute(name))
            return expected === void 0 ? void 0 : null;
          var value = node.getAttribute(name);
          return checkAttributeStringCoercion(expected, name), value === "" + expected ? expected : value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (!shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) && (value = null), isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              value === null ? node.removeAttribute(_attributeName) : (checkAttributeStringCoercion(value, name), node.setAttribute(_attributeName, "" + value));
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else
              node[propertyName] = value;
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null)
            node.removeAttribute(attributeName);
          else {
            var _type = propertyInfo.type, attributeValue;
            _type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true ? attributeValue = "" : (checkAttributeStringCoercion(value, attributeName), attributeValue = "" + value, propertyInfo.sanitizeURL && sanitizeURL(attributeValue.toString())), attributeNamespace ? node.setAttributeNS(attributeNamespace, attributeName, attributeValue) : node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_CACHE_TYPE = Symbol.for("react.cache"), REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0)
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match2 && match2[1] || "";
            }
          return `
` + prefix + name;
        }
      }
      var reentry = false, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = false, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
      }
      function shouldConstruct(Component9) {
        var prototype = Component9.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null, source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "", node = workInProgress2;
          do
            info += describeFiber(node), node = node.return;
          while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment7:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type == "function")
              return type.displayName || type.name || null;
            if (typeof type == "string")
              return type;
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame, current = null, isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null)
            return null;
          var owner = current._debugOwner;
          if (owner !== null && typeof owner < "u")
            return getComponentNameFromFiber(owner);
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        return current === null ? "" : getStackByFiberInDevAndProd(current);
      }
      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null, current = null, isRendering = false;
      }
      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev, current = fiber, isRendering = false;
      }
      function getCurrentFiber() {
        return current;
      }
      function setIsRendering(rendering) {
        isRendering = rendering;
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            return checkFormFieldValueStringCoercion(value), value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCheckable(elem) {
        var type = elem.type, nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        return node && (isCheckable(node) ? value = node.checked ? "true" : "false" : value = node.value), value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField];
        if (!(node.hasOwnProperty(valueField) || typeof descriptor > "u" || typeof descriptor.get != "function" || typeof descriptor.set != "function")) {
          var get3 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get3.call(this);
            },
            set: function(value) {
              checkFormFieldValueStringCoercion(value), currentValue = "" + value, set2.call(this, value);
            }
          }), Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              checkFormFieldValueStringCoercion(value), currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node), delete node[valueField];
            }
          };
          return tracker;
        }
      }
      function track(node) {
        getTracker(node) || (node._valueTracker = trackValueOnNode(node));
      }
      function updateValueIfChanged(node) {
        if (!node)
          return false;
        var tracker = getTracker(node);
        if (!tracker)
          return true;
        var lastValue = tracker.getValue(), nextValue = getValueFromNode(node);
        return nextValue !== lastValue ? (tracker.setValue(nextValue), true) : false;
      }
      function getActiveElement(doc) {
        if (doc = doc || (typeof document < "u" ? document : void 0), typeof doc > "u")
          return null;
        try {
          return doc.activeElement || doc.body;
        } catch {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false, didWarnCheckedDefaultChecked = false, didWarnControlledToUncontrolled = false, didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element, checked = props.checked, hostProps = assign({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked ?? node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = true), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue = true);
        var node = element, defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element, checked = props.checked;
        checked != null && setValueForProperty(node, "checked", checked, false);
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          !node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled && (error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnUncontrolledToControlled = true), node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled && (error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnControlledToUncontrolled = true);
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value), type = props.type;
        if (value != null)
          type === "number" ? (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) && (node.value = toString(value)) : node.value !== toString(value) && (node.value = toString(value));
        else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        props.hasOwnProperty("value") ? setDefaultValue(node, props.type, value) : props.hasOwnProperty("defaultValue") && setDefaultValue(node, props.type, getToStringValue(props.defaultValue)), props.checked == null && props.defaultChecked != null && (node.defaultChecked = !!props.defaultChecked);
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type, isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === void 0 || props.value === null))
            return;
          var initialValue = toString(node._wrapperState.initialValue);
          isHydrating2 || initialValue !== node.value && (node.value = initialValue), node.defaultValue = initialValue;
        }
        var name = node.name;
        name !== "" && (node.name = ""), node.defaultChecked = !node.defaultChecked, node.defaultChecked = !!node._wrapperState.initialChecked, name !== "" && (node.name = name);
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props), updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          for (var queryRoot = rootNode; queryRoot.parentNode; )
            queryRoot = queryRoot.parentNode;
          checkAttributeStringCoercion(name, "name");
          for (var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]'), i = 0; i < group.length; i++) {
            var otherNode = group[i];
            if (!(otherNode === rootNode || otherNode.form !== rootNode.form)) {
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps)
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              updateValueIfChanged(otherNode), updateWrapper(otherNode, otherProps);
            }
          }
        }
      }
      function setDefaultValue(node, type, value) {
        (type !== "number" || getActiveElement(node.ownerDocument) !== node) && (value == null ? node.defaultValue = toString(node._wrapperState.initialValue) : node.defaultValue !== toString(value) && (node.defaultValue = toString(value)));
      }
      var didWarnSelectedSetOnOption = false, didWarnInvalidChild = false, didWarnInvalidInnerHTML = false;
      function validateProps(element, props) {
        props.value == null && (typeof props.children == "object" && props.children !== null ? React270.Children.forEach(props.children, function(child) {
          child != null && (typeof child == "string" || typeof child == "number" || didWarnInvalidChild || (didWarnInvalidChild = true, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }) : props.dangerouslySetInnerHTML != null && (didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = true, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")))), props.selected != null && !didWarnSelectedSetOnOption && (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = true);
      }
      function postMountWrapper$1(element, props) {
        props.value != null && element.setAttribute("value", toString(getToStringValue(props.value)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var didWarnValueDefaultValue$1;
      didWarnValueDefaultValue$1 = false;
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        return ownerName ? `

Check the render method of \`` + ownerName + "`." : "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i = 0; i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] != null) {
              var propNameIsArray = isArray(props[propName]);
              props.multiple && !propNameIsArray ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum()) : !props.multiple && propNameIsArray && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          for (var selectedValues = propValue, selectedValue = {}, i = 0; i < selectedValues.length; i++)
            selectedValue["$" + selectedValues[i]] = true;
          for (var _i = 0; _i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            options2[_i].selected !== selected && (options2[_i].selected = selected), selected && setDefaultSelected && (options2[_i].defaultSelected = true);
          }
        } else {
          for (var _selectedValue = toString(getToStringValue(propValue)), defaultSelected = null, _i2 = 0; _i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true, setDefaultSelected && (options2[_i2].defaultSelected = true);
              return;
            }
            defaultSelected === null && !options2[_i2].disabled && (defaultSelected = options2[_i2]);
          }
          defaultSelected !== null && (defaultSelected.selected = true);
        }
      }
      function getHostProps$1(element, props) {
        return assign({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props), node._wrapperState = {
          wasMultiple: !!props.multiple
        }, props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1 && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnValueDefaultValue$1 = true);
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        value != null ? updateOptions(node, !!props.multiple, value, false) : props.defaultValue != null && updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
      function postUpdateWrapper(element, props) {
        var node = element, wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        value != null ? updateOptions(node, !!props.multiple, value, false) : wasMultiple !== !!props.multiple && (props.defaultValue != null ? updateOptions(node, !!props.multiple, props.defaultValue, true) : updateOptions(node, !!props.multiple, props.multiple ? [] : "", false));
      }
      function restoreControlledState$1(element, props) {
        var node = element, value = props.value;
        value != null && updateOptions(node, !!props.multiple, value, false);
      }
      var didWarnValDefaultVal = false;
      function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null)
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        var hostProps = assign({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal && (error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = true);
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue = props.defaultValue;
          if (children != null) {
            error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            {
              if (defaultValue != null)
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              if (isArray(children)) {
                if (children.length > 1)
                  throw new Error("<textarea> can only have at most one child.");
                children = children[0];
              }
              defaultValue = children;
            }
          }
          defaultValue == null && (defaultValue = ""), initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element, value = getToStringValue(props.value), defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          newValue !== node.value && (node.value = newValue), props.defaultValue == null && node.defaultValue !== newValue && (node.defaultValue = newValue);
        }
        defaultValue != null && (node.defaultValue = toString(defaultValue));
      }
      function postMountWrapper$3(element, props) {
        var node = element, textContent = node.textContent;
        textContent === node._wrapperState.initialValue && textContent !== "" && textContent !== null && (node.value = textContent);
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml", MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        return parentNamespace == null || parentNamespace === HTML_NAMESPACE ? getIntrinsicNamespace(type) : parentNamespace === SVG_NAMESPACE && type === "foreignObject" ? HTML_NAMESPACE : parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        } : func;
      }, reusableSVGContainer, setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE && !("innerHTML" in node)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div"), reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          for (var svgNode = reusableSVGContainer.firstChild; node.firstChild; )
            node.removeChild(node.firstChild);
          for (; svgNode.firstChild; )
            node.appendChild(svgNode.firstChild);
          return;
        }
        node.innerHTML = html;
      }), ELEMENT_NODE = 1, TEXT_NODE = 3, COMMENT_NODE = 8, DOCUMENT_NODE = 9, DOCUMENT_FRAGMENT_NODE = 11, setTextContent = function(node, text2) {
        if (text2) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text2;
            return;
          }
        }
        node.textContent = text2;
      }, shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      }, isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix2, key) {
        return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix2) {
          isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value == "boolean" || value === "";
        return isEmpty ? "" : !isCustomProperty && typeof value == "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) ? value + "px" : (checkCSSPropertyStringCoercion(value, name), ("" + value).trim());
      }
      var uppercasePattern = /([A-Z])/g, msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern$1 = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = true, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern$1, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = true, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = true, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = true, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles130) {
        {
          var serialized = "", delimiter = "";
          for (var styleName in styles130)
            if (styles130.hasOwnProperty(styleName)) {
              var styleValue = styles130[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":", serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty), delimiter = ";";
              }
            }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles130) {
        var style2 = node.style;
        for (var styleName in styles130)
          if (styles130.hasOwnProperty(styleName)) {
            var isCustomProperty = styleName.indexOf("--") === 0;
            isCustomProperty || warnValidStyle$1(styleName, styles130[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles130[styleName], isCustomProperty);
            styleName === "float" && (styleName = "cssFloat"), isCustomProperty ? style2.setProperty(styleName, styleValue) : style2[styleName] = styleValue;
          }
      }
      function isValueEmpty(value) {
        return value == null || typeof value == "boolean" || value === "";
      }
      function expandShorthandMap(styles130) {
        var expanded = {};
        for (var key in styles130)
          for (var longhands = shorthandToLonghand[key] || [key], i = 0; i < longhands.length; i++)
            expanded[longhands[i]] = key;
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles)
            return;
          var expandedUpdates = expandShorthandMap(styleUpdates), expandedStyles = expandShorthandMap(nextStyles), warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key], correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey])
                continue;
              warnedAbout[warningKey] = true, error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
        // NOTE: menuitem's close tag should be omitted, but that causes problems.
      }, voidElementTags = assign({
        menuitem: true
      }, omittedCloseTags), HTML = "__html";
      function assertValidProps(tag, props) {
        if (props) {
          if (voidElementTags[tag] && (props.children != null || props.dangerouslySetInnerHTML != null))
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null)
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof props.dangerouslySetInnerHTML != "object" || !(HTML in props.dangerouslySetInnerHTML))
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), props.style != null && typeof props.style != "object")
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return true;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = true, true;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = true, true;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = true, false;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = true, true;
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = true, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return true;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = true, true;
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name))
              return true;
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = true, true;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = true, true;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = true, true;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return true;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = true, true;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = true, true;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = true, true;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = true, true;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = true, true;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = true, true;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = true, true) : isReserved ? true : shouldRemoveAttributeWithWarning(name, value, propertyInfo, false) ? (warnedProperties$1[name] = true, false) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = true), true);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1, IS_NON_DELEGATED = 1 << 1, IS_CAPTURE_PHASE = 1 << 2, SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE, currentReplayingEvent = null;
      function setReplayingEvent(event) {
        currentReplayingEvent !== null && error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."), currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        currentReplayingEvent === null && error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."), currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        return target.correspondingUseElement && (target = target.correspondingUseElement), target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null, restoreTarget = null, restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (internalInstance) {
          if (typeof restoreImpl != "function")
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (restoreTarget) {
          var target = restoreTarget, queuedTargets = restoreQueue;
          if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets)
            for (var i = 0; i < queuedTargets.length; i++)
              restoreStateOfTarget(queuedTargets[i]);
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      }, flushSyncImpl2 = function() {
      }, isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        controlledComponentsHavePendingUpdates && (flushSyncImpl2(), restoreStateIfNeeded());
      }
      function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler)
          return fn(a, b);
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, a, b);
        } finally {
          isInsideEventHandler = false, finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl, flushSyncImpl2 = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null)
          return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null)
          return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props))
          return null;
        if (listener && typeof listener != "function")
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM)
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          }), window.addEventListener("test", options, options), window.removeEventListener("test", options, options);
        } catch {
          passiveBrowserEventsSupported = false;
        }
      function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
          if (typeof document > "u" || document === null)
            throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          var evt = document.createEvent("Event"), didCall = false, didError = true, windowEvent = window.event, windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          function restoreAfterDispatch() {
            fakeNode.removeEventListener(evtType, callCallback2, false), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = windowEvent);
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback2() {
            didCall = true, restoreAfterDispatch(), func.apply(context, funcArgs), didError = false;
          }
          var error2, didSetError = false, isCrossOriginError = false;
          function handleWindowError(event) {
            if (error2 = event.error, didSetError = true, error2 === null && event.colno === 0 && event.lineno === 0 && (isCrossOriginError = true), event.defaultPrevented && error2 != null && typeof error2 == "object")
              try {
                error2._suppressLogging = true;
              } catch {
              }
          }
          var evtType = "react-" + (name || "invokeguardedcallback");
          if (window.addEventListener("error", handleWindowError), fakeNode.addEventListener(evtType, callCallback2, false), evt.initEvent(evtType, false, false), fakeNode.dispatchEvent(evt), windowEventDescriptor && Object.defineProperty(window, "event", windowEventDescriptor), didCall && didError && (didSetError ? isCrossOriginError && (error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(error2)), window.removeEventListener("error", handleWindowError), !didCall)
            return restoreAfterDispatch(), invokeGuardedCallbackProd.apply(this, arguments);
        };
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl, hasError = false, caughtError = null, hasRethrowError = false, rethrowError = null, reporter = {
        onError: function(error2) {
          hasError = true, caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false, caughtError = null, invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        if (invokeGuardedCallback.apply(this, arguments), hasError) {
          var error2 = clearCaughtError();
          hasRethrowError || (hasRethrowError = true, rethrowError = error2);
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          throw hasRethrowError = false, rethrowError = null, error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          return hasError = false, caughtError = null, error2;
        } else
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
      function get2(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== void 0;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = (
        /*                      */
        0
      ), PerformedWork = (
        /*                */
        1
      ), Placement = (
        /*                    */
        2
      ), Update = (
        /*                       */
        4
      ), ChildDeletion = (
        /*                */
        16
      ), ContentReset = (
        /*                 */
        32
      ), Callback = (
        /*                     */
        64
      ), DidCapture = (
        /*                   */
        128
      ), ForceClientRender = (
        /*            */
        256
      ), Ref = (
        /*                          */
        512
      ), Snapshot = (
        /*                     */
        1024
      ), Passive = (
        /*                      */
        2048
      ), Hydrating = (
        /*                    */
        4096
      ), Visibility = (
        /*                   */
        8192
      ), StoreConsistency = (
        /*             */
        16384
      ), LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency, HostEffectMask = (
        /*               */
        32767
      ), Incomplete = (
        /*                   */
        32768
      ), ShouldCapture = (
        /*                */
        65536
      ), ForceUpdateForLegacySuspense = (
        /* */
        131072
      ), Forked = (
        /*                       */
        1048576
      ), RefStatic = (
        /*                    */
        2097152
      ), LayoutStatic = (
        /*                 */
        4194304
      ), PassiveStatic = (
        /*                */
        8388608
      ), MountLayoutDev = (
        /*               */
        16777216
      ), MountPassiveDev = (
        /*              */
        33554432
      ), BeforeMutationMask = (
        // TODO: Remove Update flag from before mutation phase by re-landing Visibility
        // flag logic (see #20043)
        Update | Snapshot | 0
      ), MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility, LayoutMask = Update | Callback | Ref | Visibility, PassiveMask = Passive | ChildDeletion, StaticMask = LayoutStatic | PassiveStatic | RefStatic, ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber, nearestMounted = fiber;
        if (fiber.alternate)
          for (; node.return; )
            node = node.return;
        else {
          var nextNode = node;
          do
            node = nextNode, (node.flags & (Placement | Hydrating)) !== NoFlags && (nearestMounted = node.return), nextNode = node.return;
          while (nextNode);
        }
        return node.tag === HostRoot ? nearestMounted : null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            current2 !== null && (suspenseState = current2.memoizedState);
          }
          if (suspenseState !== null)
            return suspenseState.dehydrated;
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner, instance = ownerFiber.stateNode;
            instance._warnedAboutRefsInRender || error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component"), instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get2(component);
        return fiber ? getNearestMountedFiber(fiber) === fiber : false;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber)
          throw new Error("Unable to find node on an unmounted component.");
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null)
            throw new Error("Unable to find node on an unmounted component.");
          return nearestMounted !== fiber ? null : fiber;
        }
        for (var a = fiber, b = alternate; ; ) {
          var parentA = a.return;
          if (parentA === null)
            break;
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            for (var child = parentA.child; child; ) {
              if (child === a)
                return assertIsMounted(parentA), fiber;
              if (child === b)
                return assertIsMounted(parentA), alternate;
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.return !== b.return)
            a = parentA, b = parentB;
          else {
            for (var didFindChild = false, _child = parentA.child; _child; ) {
              if (_child === a) {
                didFindChild = true, a = parentA, b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true, b = parentA, a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              for (_child = parentB.child; _child; ) {
                if (_child === a) {
                  didFindChild = true, a = parentB, b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true, b = parentB, a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild)
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
          if (a.alternate !== b)
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (a.tag !== HostRoot)
          throw new Error("Unable to find node on an unmounted component.");
        return a.stateNode.current === a ? fiber : alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText)
          return node;
        for (var child = node.child; child !== null; ) {
          var match2 = findCurrentHostFiberImpl(child);
          if (match2 !== null)
            return match2;
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText)
          return node;
        for (var child = node.child; child !== null; ) {
          if (child.tag !== HostPortal) {
            var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match2 !== null)
              return match2;
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback, cancelCallback = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, unstable_yieldValue = Scheduler.unstable_yieldValue, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = false, isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
          return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled)
          return true;
        if (!hook.supportsFiber)
          return error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), true;
        try {
          enableSchedulingProfiler && (internals = assign({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          })), rendererID = hook.inject(internals), injectedHook = hook;
        } catch (err) {
          error("React instrumentation encountered an error: %s.", err);
        }
        return !!hook.checkDCE;
      }
      function onScheduleRoot(root2, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot == "function")
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root2, children);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot == "function")
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            } else
              injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot == "function")
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error("React instrumentation encountered an error: %s", err));
          }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount == "function")
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error("React instrumentation encountered an error: %s", err));
          }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue == "function" && (unstable_setDisableYieldValue(newIsStrictMode), setSuppressWarning(newIsStrictMode)), injectedHook && typeof injectedHook.setStrictMode == "function")
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            hasLoggedError || (hasLoggedError = true, error("React instrumentation encountered an error: %s", err));
          }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          for (var map = /* @__PURE__ */ new Map(), lane = 1, index2 = 0; index2 < TotalLanes; index2++) {
            var label = getLabelForLane(lane);
            map.set(lane, label), lane *= 2;
          }
          return map;
        }
      }
      function markCommitStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted == "function" && injectedProfilingHooks.markCommitStarted(lanes);
      }
      function markCommitStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped == "function" && injectedProfilingHooks.markCommitStopped();
      }
      function markComponentRenderStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted == "function" && injectedProfilingHooks.markComponentRenderStarted(fiber);
      }
      function markComponentRenderStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped == "function" && injectedProfilingHooks.markComponentRenderStopped();
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted == "function" && injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
      }
      function markComponentPassiveEffectMountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped == "function" && injectedProfilingHooks.markComponentPassiveEffectMountStopped();
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted == "function" && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
      }
      function markComponentPassiveEffectUnmountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped == "function" && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted == "function" && injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
      }
      function markComponentLayoutEffectMountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped == "function" && injectedProfilingHooks.markComponentLayoutEffectMountStopped();
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted == "function" && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
      }
      function markComponentLayoutEffectUnmountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped == "function" && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored == "function" && injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended == "function" && injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
      }
      function markLayoutEffectsStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted == "function" && injectedProfilingHooks.markLayoutEffectsStarted(lanes);
      }
      function markLayoutEffectsStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped == "function" && injectedProfilingHooks.markLayoutEffectsStopped();
      }
      function markPassiveEffectsStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted == "function" && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
      }
      function markPassiveEffectsStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped == "function" && injectedProfilingHooks.markPassiveEffectsStopped();
      }
      function markRenderStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted == "function" && injectedProfilingHooks.markRenderStarted(lanes);
      }
      function markRenderYielded() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded == "function" && injectedProfilingHooks.markRenderYielded();
      }
      function markRenderStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped == "function" && injectedProfilingHooks.markRenderStopped();
      }
      function markRenderScheduled(lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled == "function" && injectedProfilingHooks.markRenderScheduled(lane);
      }
      function markForceUpdateScheduled(fiber, lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled == "function" && injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
      }
      function markStateUpdateScheduled(fiber, lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled == "function" && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
      }
      var NoMode = (
        /*                         */
        0
      ), ConcurrentMode = (
        /*                 */
        1
      ), ProfileMode = (
        /*                    */
        2
      ), StrictLegacyMode = (
        /*               */
        8
      ), StrictEffectsMode = (
        /*              */
        16
      ), clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31, NoLanes = (
        /*                        */
        0
      ), NoLane = (
        /*                          */
        0
      ), SyncLane = (
        /*                        */
        1
      ), InputContinuousHydrationLane = (
        /*    */
        2
      ), InputContinuousLane = (
        /*             */
        4
      ), DefaultHydrationLane = (
        /*            */
        8
      ), DefaultLane = (
        /*                     */
        16
      ), TransitionHydrationLane = (
        /*                */
        32
      ), TransitionLanes = (
        /*                       */
        4194240
      ), TransitionLane1 = (
        /*                        */
        64
      ), TransitionLane2 = (
        /*                        */
        128
      ), TransitionLane3 = (
        /*                        */
        256
      ), TransitionLane4 = (
        /*                        */
        512
      ), TransitionLane5 = (
        /*                        */
        1024
      ), TransitionLane6 = (
        /*                        */
        2048
      ), TransitionLane7 = (
        /*                        */
        4096
      ), TransitionLane8 = (
        /*                        */
        8192
      ), TransitionLane9 = (
        /*                        */
        16384
      ), TransitionLane10 = (
        /*                       */
        32768
      ), TransitionLane11 = (
        /*                       */
        65536
      ), TransitionLane12 = (
        /*                       */
        131072
      ), TransitionLane13 = (
        /*                       */
        262144
      ), TransitionLane14 = (
        /*                       */
        524288
      ), TransitionLane15 = (
        /*                       */
        1048576
      ), TransitionLane16 = (
        /*                       */
        2097152
      ), RetryLanes = (
        /*                            */
        130023424
      ), RetryLane1 = (
        /*                             */
        4194304
      ), RetryLane2 = (
        /*                             */
        8388608
      ), RetryLane3 = (
        /*                             */
        16777216
      ), RetryLane4 = (
        /*                             */
        33554432
      ), RetryLane5 = (
        /*                             */
        67108864
      ), SomeRetryLane = RetryLane1, SelectiveHydrationLane = (
        /*          */
        134217728
      ), NonIdleLanes = (
        /*                          */
        268435455
      ), IdleHydrationLane = (
        /*               */
        268435456
      ), IdleLane = (
        /*                        */
        536870912
      ), OffscreenLane = (
        /*                   */
        1073741824
      );
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane)
            return "Sync";
          if (lane & InputContinuousHydrationLane)
            return "InputContinuousHydration";
          if (lane & InputContinuousLane)
            return "InputContinuous";
          if (lane & DefaultHydrationLane)
            return "DefaultHydration";
          if (lane & DefaultLane)
            return "Default";
          if (lane & TransitionHydrationLane)
            return "TransitionHydration";
          if (lane & TransitionLanes)
            return "Transition";
          if (lane & RetryLanes)
            return "Retry";
          if (lane & SelectiveHydrationLane)
            return "SelectiveHydration";
          if (lane & IdleHydrationLane)
            return "IdleHydration";
          if (lane & IdleLane)
            return "Idle";
          if (lane & OffscreenLane)
            return "Offscreen";
        }
      }
      var NoTimestamp = -1, nextTransitionLane = TransitionLane1, nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            return error("Should have found matching lanes. This is a bug in React."), lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes)
          return NoLanes;
        var nextLanes = NoLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes)
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            nonIdlePingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(nonIdlePingedLanes));
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          unblockedLanes !== NoLanes ? nextLanes = getHighestPriorityLanes(unblockedLanes) : pingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
        }
        if (nextLanes === NoLanes)
          return NoLanes;
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
        // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes), wipLane = getHighestPriorityLane(wipLanes);
          if (
            // Tests whether the next lane is equal or lower priority than the wip
            // one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
            // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
          )
            return wipLanes;
        }
        (nextLanes & InputContinuousLane) !== NoLanes && (nextLanes |= pendingLanes & DefaultLane);
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes)
          for (var entanglements = root2.entanglements, lanes = nextLanes & entangledLanes; lanes > 0; ) {
            var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
            nextLanes |= entanglements[index2], lanes &= ~lane;
          }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        for (var eventTimes = root2.eventTimes, mostRecentEventTime = NoTimestamp; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2, eventTime = eventTimes[index2];
          eventTime > mostRecentEventTime && (mostRecentEventTime = eventTime), lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5e3;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            return error("Should have found matching lanes. This is a bug in React."), NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        for (var pendingLanes = root2.pendingLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = pendingLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2, expirationTime = expirationTimes[index2];
          expirationTime === NoTimestamp ? ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) && (expirationTimes[index2] = computeExpirationTime(lane, currentTime)) : expirationTime <= currentTime && (root2.expiredLanes |= lane), lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        return everythingButOffscreen !== NoLanes ? everythingButOffscreen : everythingButOffscreen & OffscreenLane ? OffscreenLane : NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        return nextTransitionLane <<= 1, (nextTransitionLane & TransitionLanes) === NoLanes && (nextTransitionLane = TransitionLane1), lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        return nextRetryLane <<= 1, (nextRetryLane & RetryLanes) === NoLanes && (nextRetryLane = RetryLane1), lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a, b) {
        return a | b;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a, b) {
        return a & b;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
      }
      function createLaneMap(initial) {
        for (var laneMap = [], i = 0; i < TotalLanes; i++)
          laneMap.push(initial);
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane, updateLane !== IdleLane && (root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes);
        var eventTimes = root2.eventTimes, index2 = laneToIndex(updateLane);
        eventTimes[index2] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes, root2.pingedLanes &= ~suspendedLanes;
        for (var expirationTimes = root2.expirationTimes, lanes = suspendedLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp, lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes, root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes, root2.expiredLanes &= remainingLanes, root2.mutableReadLanes &= remainingLanes, root2.entangledLanes &= remainingLanes;
        for (var entanglements = root2.entanglements, eventTimes = root2.eventTimes, expirationTimes = root2.expirationTimes, lanes = noLongerPendingLanes; lanes > 0; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          entanglements[index2] = NoLanes, eventTimes[index2] = NoTimestamp, expirationTimes[index2] = NoTimestamp, lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        for (var rootEntangledLanes = root2.entangledLanes |= entangledLanes, entanglements = root2.entanglements, lanes = rootEntangledLanes; lanes; ) {
          var index2 = pickArbitraryLaneIndex(lanes), lane = 1 << index2;
          lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
          entanglements[index2] & entangledLanes && (entanglements[index2] |= entangledLanes), lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2), lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        return (lane & (root2.suspendedLanes | renderLanes2)) !== NoLane ? NoLane : lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap; lanes > 0; ) {
            var index2 = laneToIndex(lanes), lane = 1 << index2, updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber), lanes &= ~lane;
          }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap, memoizedUpdaters = root2.memoizedUpdaters; lanes > 0; ) {
            var index2 = laneToIndex(lanes), lane = 1 << index2, updaters = pendingUpdatersLaneMap[index2];
            updaters.size > 0 && (updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              (alternate === null || !memoizedUpdaters.has(alternate)) && memoizedUpdaters.add(fiber);
            }), updaters.clear()), lanes &= ~lane;
          }
      }
      function getTransitionsForLanes(root2, lanes) {
        return null;
      }
      var DiscreteEventPriority = SyncLane, ContinuousEventPriority = InputContinuousLane, DefaultEventPriority = DefaultLane, IdleEventPriority = IdleLane, currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          return currentUpdatePriority = priority, fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
      }
      function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
      }
      function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        return isHigherEventPriority(DiscreteEventPriority, lane) ? isHigherEventPriority(ContinuousEventPriority, lane) ? includesNonIdleWork(lane) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = false, queuedDiscreteEvents = [], queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        // Intentionally camelCase
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            _fiber2 !== null && attemptContinuousHydration(_fiber2);
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        return targetContainer !== null && targetContainers.indexOf(targetContainer) === -1 && targetContainers.push(targetContainer), existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent), true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent), true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent), true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent, pointerId = pointerEvent.pointerId;
            return queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent)), true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent, _pointerId2 = _pointerEvent.pointerId;
            return queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent)), true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance, attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        for (var updatePriority = getCurrentUpdatePriority$1(), queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        }, i = 0; i < queuedExplicitHydrationTargets.length && isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority); i++)
          ;
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget), i === 0 && attemptExplicitHydrationTarget(queuedTarget);
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null)
          return false;
        for (var targetContainers = queuedEvent.targetContainers; targetContainers.length > 0; ) {
          var targetContainer = targetContainers[0], nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            var nativeEvent = queuedEvent.nativeEvent, nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone), nativeEvent.target.dispatchEvent(nativeEventClone), resetReplayingEvent();
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            return _fiber3 !== null && attemptContinuousHydration(_fiber3), queuedEvent.blockedOn = nextBlockedOn, false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false, queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null), queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null), queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null), queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap), queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i = 1; i < queuedDiscreteEvents.length; i++) {
            var queuedEvent = queuedDiscreteEvents[i];
            queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null);
          }
        }
        queuedFocus !== null && scheduleCallbackIfUnblocked(queuedFocus, unblocked), queuedDrag !== null && scheduleCallbackIfUnblocked(queuedDrag, unblocked), queuedMouse !== null && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock), queuedPointerCaptures.forEach(unblock);
        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for (; queuedExplicitHydrationTargets.length > 0; ) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null)
            break;
          attemptExplicitHydrationTarget(nextExplicitTarget), nextExplicitTarget.blockedOn === null && queuedExplicitHydrationTargets.shift();
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig, _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName), listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        _enabled && dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          for (; blockedOn !== null; ) {
            var fiber = getInstanceFromNode(blockedOn);
            fiber !== null && attemptSynchronousHydration(fiber);
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null && dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), nextBlockedOn === blockedOn)
              break;
            blockedOn = nextBlockedOn;
          }
          blockedOn !== null && nativeEvent.stopPropagation();
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent), targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null)
            targetInst = null;
          else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null)
                return instance;
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2))
                return getContainerFromFiber(nearestMounted);
              targetInst = null;
            } else
              nearestMounted !== targetInst && (targetInst = null);
          }
        }
        return return_targetInst = targetInst, null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        return target.addEventListener(eventType, listener, false), listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        return target.addEventListener(eventType, listener, true), listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        return target.addEventListener(eventType, listener, {
          capture: true,
          passive
        }), listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        return target.addEventListener(eventType, listener, {
          passive
        }), listener;
      }
      var root = null, startText = null, fallbackText = null;
      function initialize(nativeEventTarget) {
        return root = nativeEventTarget, startText = getText(), true;
      }
      function reset() {
        root = null, startText = null, fallbackText = null;
      }
      function getData() {
        if (fallbackText)
          return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = getText(), endLength = endValue.length;
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++)
          ;
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++)
          ;
        var sliceTail = end > 1 ? 1 - end : void 0;
        return fallbackText = endValue.slice(start, sliceTail), fallbackText;
      }
      function getText() {
        return "value" in root ? root.value : root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode, keyCode = nativeEvent.keyCode;
        return "charCode" in nativeEvent ? (charCode = nativeEvent.charCode, charCode === 0 && keyCode === 13 && (charCode = 13)) : charCode = keyCode, charCode === 10 && (charCode = 13), charCode >= 32 || charCode === 13 ? charCode : 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName, this._targetInst = targetInst, this.type = reactEventType, this.nativeEvent = nativeEvent, this.target = nativeEventTarget, this.currentTarget = null;
          for (var _propName in Interface)
            if (Interface.hasOwnProperty(_propName)) {
              var normalize = Interface[_propName];
              normalize ? this[_propName] = normalize(nativeEvent) : this[_propName] = nativeEvent[_propName];
            }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          return defaultPrevented ? this.isDefaultPrevented = functionThatReturnsTrue : this.isDefaultPrevented = functionThatReturnsFalse, this.isPropagationStopped = functionThatReturnsFalse, this;
        }
        return assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            event && (event.preventDefault ? event.preventDefault() : typeof event.returnValue != "unknown" && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            event && (event.stopPropagation ? event.stopPropagation() : typeof event.cancelBubble != "unknown" && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
          },
          /**
           * We release all dispatched `SyntheticEvent`s after each event loop, adding
           * them back into the pool. This allows a way to hold onto a reference that
           * won't be added back into the pool.
           */
          persist: function() {
          },
          /**
           * Checks if this event should be released back into the pool.
           *
           * @return {boolean} True if this should not be released, false otherwise.
           */
          isPersistent: functionThatReturnsTrue
        }), SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        event !== lastMouseEvent && (lastMouseEvent && event.type === "mousemove" ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : (lastMovementX = 0, lastMovementY = 0), lastMouseEvent = event);
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          return event.relatedTarget === void 0 ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
        },
        movementX: function(event) {
          return "movementX" in event ? event.movementX : (updateMouseMovementPolyfillState(event), lastMovementX);
        },
        movementY: function(event) {
          return "movementY" in event ? event.movementY : lastMovementY;
        }
      }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      }, translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified")
            return key;
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        return nativeEvent.type === "keydown" || nativeEvent.type === "keyup" ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this, nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState)
          return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
          return event.type === "keypress" ? getEventCharCode(event) : 0;
        },
        keyCode: function(event) {
          return event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
        },
        which: function(event) {
          return event.type === "keypress" ? getEventCharCode(event) : event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
        }
      }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : (
            // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
            "wheelDeltaX" in event ? -event.wheelDeltaX : 0
          );
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : (
            // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
            "wheelDeltaY" in event ? -event.wheelDeltaY : (
              // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
              "wheelDelta" in event ? -event.wheelDelta : 0
            )
          );
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
      }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
      canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        return typeof detail == "object" && "data" in detail ? detail.data : null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType, fallbackData;
        if (canUseCompositionEvent ? eventType = getCompositionEventType(domEventName) : isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : isFallbackCompositionStart(domEventName, nativeEvent) && (eventType = "onCompositionStart"), !eventType)
          return null;
        useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) && (!isComposing && eventType === "onCompositionStart" ? isComposing = initialize(nativeEventTarget) : eventType === "onCompositionEnd" && isComposing && (fallbackData = getData()));
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          if (dispatchQueue.push({
            event,
            listeners
          }), fallbackData)
            event.data = fallbackData;
          else {
            var customData = getDataFromCustomEvent(nativeEvent);
            customData !== null && (event.data = customData);
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            return which !== SPACEBAR_CODE ? null : (hasSpaceKeypress = true, SPACEBAR_CHAR);
          case "textInput":
            var chars = nativeEvent.data;
            return chars === SPACEBAR_CHAR && hasSpaceKeypress ? null : chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            return reset(), isComposing = false, chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1)
                return nativeEvent.char;
              if (nativeEvent.which)
                return String.fromCharCode(nativeEvent.which);
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent ? chars = getNativeBeforeInputChars(domEventName, nativeEvent) : chars = getFallbackBeforeInputChars(domEventName, nativeEvent), !chars)
          return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          }), event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "input" ? !!supportedInputTypes[elem.type] : nodeName === "textarea";
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM)
          return false;
        var eventName = "on" + eventNameSuffix, isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;"), isSupported = typeof element[eventName] == "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null, activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)), batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode))
          return targetInst;
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change")
          return targetInst;
      }
      var isInputEventSupported = false;
      canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9));
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target, activeElementInst = targetInst, activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        activeElement && (activeElement.detachEvent("onpropertychange", handlePropertyChange), activeElement = null, activeElementInst = null);
      }
      function handlePropertyChange(nativeEvent) {
        nativeEvent.propertyName === "value" && getInstIfValueChanged(activeElementInst) && manualDispatchChangeEvent(nativeEvent);
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        domEventName === "focusin" ? (stopWatchingForValueChange(), startWatchingForValueChange(target, targetInst)) : domEventName === "focusout" && stopWatchingForValueChange();
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown")
          return getInstIfValueChanged(activeElementInst);
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click")
          return getInstIfValueChanged(targetInst);
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change")
          return getInstIfValueChanged(targetInst);
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        !state || !state.controlled || node.type !== "number" || setDefaultValue(node, "number", node.value);
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window, getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode) ? getTargetInstFunc = getTargetInstForChangeEvent : isTextInputElement(targetNode) ? isInputEventSupported ? getTargetInstFunc = getTargetInstForInputOrChangeEvent : (getTargetInstFunc = getTargetInstForInputEventPolyfill, handleEventFunc = handleEventsForInputEventPolyfill) : shouldUseClickEvent(targetNode) && (getTargetInstFunc = getTargetInstForClickEvent), getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        handleEventFunc && handleEventFunc(domEventName, targetNode, targetInst), domEventName === "focusout" && handleControlledInputBlur(targetNode);
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]), registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]), registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]), registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover", isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related && (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)))
            return;
        }
        if (!(!isOutEvent && !isOverEvent)) {
          var win;
          if (nativeEventTarget.window === nativeEventTarget)
            win = nativeEventTarget;
          else {
            var doc = nativeEventTarget.ownerDocument;
            doc ? win = doc.defaultView || doc.parentWindow : win = window;
          }
          var from, to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            if (from = targetInst, to = _related ? getClosestInstanceFromNode(_related) : null, to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) && (to = null);
            }
          } else
            from = null, to = targetInst;
          if (from !== to) {
            var SyntheticEventCtor = SyntheticMouseEvent, leaveEventType = "onMouseLeave", enterEventType = "onMouseEnter", eventTypePrefix = "mouse";
            (domEventName === "pointerout" || domEventName === "pointerover") && (SyntheticEventCtor = SyntheticPointerEvent, leaveEventType = "onPointerLeave", enterEventType = "onPointerEnter", eventTypePrefix = "pointer");
            var fromNode = from == null ? win : getNodeFromInstance(from), toNode = to == null ? win : getNodeFromInstance(to), leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode, leave.relatedTarget = toNode;
            var enter = null, nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode, enterEvent.relatedTarget = fromNode, enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
        }
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB))
          return true;
        if (typeof objA != "object" || objA === null || typeof objB != "object" || objB === null)
          return false;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length)
          return false;
        for (var i = 0; i < keysA.length; i++) {
          var currentKey = keysA[i];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
            return false;
        }
        return true;
      }
      function getLeafNode(node) {
        for (; node && node.firstChild; )
          node = node.firstChild;
        return node;
      }
      function getSiblingNode(node) {
        for (; node; ) {
          if (node.nextSibling)
            return node.nextSibling;
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        for (var node = getLeafNode(root2), nodeStart = 0, nodeEnd = 0; node; ) {
          if (node.nodeType === TEXT_NODE) {
            if (nodeEnd = nodeStart + node.textContent.length, nodeStart <= offset && nodeEnd >= offset)
              return {
                node,
                offset: offset - nodeStart
              };
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument, win = ownerDocument && ownerDocument.defaultView || window, selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0)
          return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        try {
          anchorNode.nodeType, focusNode.nodeType;
        } catch {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = outerNode, parentNode = null;
        outer:
          for (; ; ) {
            for (var next = null; node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE) && (start = length + anchorOffset), node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE) && (end = length + focusOffset), node.nodeType === TEXT_NODE && (length += node.nodeValue.length), (next = node.firstChild) !== null; )
              parentNode = node, node = next;
            for (; ; ) {
              if (node === outerNode)
                break outer;
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset && (start = length), parentNode === focusNode && ++indexWithinFocus === focusOffset && (end = length), (next = node.nextSibling) !== null)
                break;
              node = parentNode, parentNode = node.parentNode;
            }
            node = next;
          }
        return start === -1 || end === -1 ? null : {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document, win = doc && doc.defaultView || window;
        if (win.getSelection) {
          var selection = win.getSelection(), length = node.textContent.length, start = Math.min(offsets.start, length), end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start, start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start), endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset)
              return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset), selection.removeAllRanges(), start > end ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        return !outerNode || !innerNode ? false : outerNode === innerNode ? true : isTextNode(outerNode) ? false : isTextNode(innerNode) ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false;
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href == "string";
        } catch {
          return false;
        }
      }
      function getActiveElementDeep() {
        for (var win = window, element = getActiveElement(); element instanceof win.HTMLIFrameElement; ) {
          if (isSameOriginFrame(element))
            win = element.contentWindow;
          else
            return element;
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep(), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem) && setSelection(priorFocusedElem, priorSelectionRange);
          for (var ancestors = [], ancestor = priorFocusedElem; ancestor = ancestor.parentNode; )
            ancestor.nodeType === ELEMENT_NODE && ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          typeof priorFocusedElem.focus == "function" && priorFocusedElem.focus();
          for (var i = 0; i < ancestors.length; i++) {
            var info = ancestors[i];
            info.element.scrollLeft = info.left, info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        return "selectionStart" in input ? selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        } : selection = getOffsets(input), selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start, end = offsets.end;
        end === void 0 && (end = start), "selectionStart" in input ? (input.selectionStart = start, input.selectionEnd = Math.min(end, input.value.length)) : setOffsets(input, offsets);
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null, activeElementInst$1 = null, lastSelection = null, mouseDown = false;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node))
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        var win = node.ownerDocument && node.ownerDocument.defaultView || window, selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (!(mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc))) {
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              }), event.target = activeElement$1;
            }
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            (isTextInputElement(targetNode) || targetNode.contentEditable === "true") && (activeElement$1 = targetNode, activeElementInst$1 = targetInst, lastSelection = null);
            break;
          case "focusout":
            activeElement$1 = null, activeElementInst$1 = null, lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false, constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent)
              break;
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        return prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase(), prefixes2["Webkit" + styleProp] = "webkit" + eventName, prefixes2["Moz" + styleProp] = "moz" + eventName, prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      }, prefixedEventNames = {}, style = {};
      canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName])
          return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName])
          return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap)
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
            return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName), registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i = 0; i < simpleEventPluginEvents.length; i++) {
          var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase(), capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd"), registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration"), registerSimpleEvent(ANIMATION_START, "onAnimationStart"), registerSimpleEvent("dblclick", "onDoubleClick"), registerSimpleEvent("focusin", "onFocus"), registerSimpleEvent("focusout", "onBlur"), registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName !== void 0) {
          var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0)
                return;
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus", SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur", SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2)
                return;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll", _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
      }
      registerSimpleEvents(), registerEvents$2(), registerEvents$1(), registerEvents$3(), registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        shouldProcessPolyfillPlugins && (extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget));
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget, invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase)
          for (var i = dispatchListeners.length - 1; i >= 0; i--) {
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped())
              return;
            executeDispatch(event, listener, currentTarget), previousInstance = instance;
          }
        else
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped())
              return;
            executeDispatch(event, _listener, _currentTarget), previousInstance = _instance;
          }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        for (var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0, i = 0; i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags), processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        nonDelegatedEvents.has(domEventName) || error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = false, listenerSet = getEventListenerSet(targetElement), listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener), listenerSet.add(listenerSetKey));
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= IS_CAPTURE_PHASE), addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true, allNativeEvents.forEach(function(domEventName) {
            domEventName !== "selectionchange" && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          ownerDocument !== null && (ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument)));
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags), isPassiveListener = void 0;
        passiveBrowserEventsSupported && (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") && (isPassiveListener = true), targetContainer = targetContainer;
        var unsubscribeListener;
        isCapturePhaseListener ? isPassiveListener !== void 0 ? unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener) : isPassiveListener !== void 0 ? unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if (!(eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) && !(eventSystemFlags & IS_NON_DELEGATED)) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              for (; ; ) {
                if (node === null)
                  return;
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode))
                    break;
                  if (nodeTag === HostPortal)
                    for (var grandNode = node.return; grandNode !== null; ) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode))
                          return;
                      }
                      grandNode = grandNode.return;
                    }
                  for (; container !== null; ) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null)
                      return;
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        for (var captureName = reactName !== null ? reactName + "Capture" : null, reactEventName = inCapturePhase ? captureName : reactName, listeners = [], instance = targetFiber, lastHostComponent = null; instance !== null; ) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null && (lastHostComponent = stateNode, reactEventName !== null)) {
            var listener = getListener(instance, reactEventName);
            listener != null && listeners.push(createDispatchListener(instance, listener, lastHostComponent));
          }
          if (accumulateTargetOnly)
            break;
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + "Capture", listeners = [], instance = targetFiber; instance !== null; ) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode, captureListener = getListener(instance, captureName);
            captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            var bubbleListener = getListener(instance, reactName);
            bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null)
          return null;
        do
          inst = inst.return;
        while (inst && inst.tag !== HostComponent);
        return inst || null;
      }
      function getLowestCommonAncestor(instA, instB) {
        for (var nodeA = instA, nodeB = instB, depthA = 0, tempA = nodeA; tempA; tempA = getParent(tempA))
          depthA++;
        for (var depthB = 0, tempB = nodeB; tempB; tempB = getParent(tempB))
          depthB++;
        for (; depthA - depthB > 0; )
          nodeA = getParent(nodeA), depthA--;
        for (; depthB - depthA > 0; )
          nodeB = getParent(nodeB), depthB--;
        for (var depth = depthA; depth--; ) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate)
            return nodeA;
          nodeA = getParent(nodeA), nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        for (var registrationName = event._reactName, listeners = [], instance = target; instance !== null && instance !== common; ) {
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common)
            break;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        listeners.length !== 0 && dispatchQueue.push({
          event,
          listeners
        });
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        from !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false), to !== null && enterEvent !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false, DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML", SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", AUTOFOCUS = "autoFocus", CHILDREN = "children", STYLE = "style", HTML$1 = "__html", warnedUnknownTags, validatePropertiesInDevelopment, warnForPropDifference, warnForExtraAttributes, warnForInvalidEventListener, canDiffStyleForHydrationWarning, normalizeHTML;
      warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      }, validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, {
          registrationNameDependencies,
          possibleRegistrationNames
        });
      }, canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode, warnForPropDifference = function(propName, serverValue, clientValue) {
        if (!didWarnInvalidHydration) {
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          normalizedServerValue !== normalizedClientValue && (didWarnInvalidHydration = true, error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue)));
        }
      }, warnForExtraAttributes = function(attributeNames) {
        if (!didWarnInvalidHydration) {
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          }), error("Extra attributes from the server: %s", names);
        }
      }, warnForInvalidEventListener = function(registrationName, listener) {
        listener === false ? error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName) : error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
      }, normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        return testElement.innerHTML = html, testElement.innerHTML;
      };
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup == "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText), normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText !== normalizedClientText && (shouldWarnDev && (didWarnInvalidHydration || (didWarnInvalidHydration = true, error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText))), isConcurrentMode && enableClientRenderFallbackOnTextMismatch))
          throw new Error("Text content does not match server-rendered HTML.");
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop21() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop21;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps)
          if (nextProps.hasOwnProperty(propKey)) {
            var nextProp = nextProps[propKey];
            if (propKey === STYLE)
              nextProp && Object.freeze(nextProp), setValueForStyles(domElement, nextProp);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              nextHtml != null && setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN)
              if (typeof nextProp == "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                canSetTextContent && setTextContent(domElement, nextProp);
              } else
                typeof nextProp == "number" && setTextContent(domElement, "" + nextProp);
            else
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)) : nextProp != null && setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag));
          }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i = 0; i < updatePayload.length; i += 2) {
          var propKey = updatePayload[i], propValue = updatePayload[i + 1];
          propKey === STYLE ? setValueForStyles(domElement, propValue) : propKey === DANGEROUSLY_SET_INNER_HTML ? setInnerHTML(domElement, propValue) : propKey === CHILDREN ? setTextContent(domElement, propValue) : setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
      function createElement11(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag, ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement), domElement, namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE && (namespaceURI = getIntrinsicNamespace(type)), namespaceURI === HTML_NAMESPACE) {
          if (isCustomComponentTag = isCustomComponent(type, props), !isCustomComponentTag && type !== type.toLowerCase() && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script><\/script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is == "string")
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          else if (domElement = ownerDocument.createElement(type), type === "select") {
            var node = domElement;
            props.multiple ? node.multiple = true : props.size && (node.size = props.size);
          }
        } else
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        return namespaceURI === HTML_NAMESPACE && !isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type) && (warnedUnknownTags[type] = true, error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type)), domElement;
      }
      function createTextNode(text2, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text2);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement), props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement), props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i = 0; i < mediaEventTypes.length; i++)
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement), props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement), props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement), props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps), props = getHostProps(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps), props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps), props = getHostProps$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps), props = getHostProps$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        switch (assertValidProps(tag, props), setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag), tag) {
          case "input":
            track(domElement), postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement), postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            typeof props.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null, lastProps, nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps), nextProps = getHostProps(domElement, nextRawProps), updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps), nextProps = getHostProps$1(domElement, nextRawProps), updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps), nextProps = getHostProps$2(domElement, nextRawProps), updatePayload = [];
            break;
          default:
            lastProps = lastRawProps, nextProps = nextRawProps, typeof lastProps.onClick != "function" && typeof nextProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey, styleName, styleUpdates = null;
        for (propKey in lastProps)
          if (!(nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null))
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle)
                lastStyle.hasOwnProperty(styleName) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
            } else
              propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? updatePayload || (updatePayload = []) : (updatePayload = updatePayload || []).push(propKey, null));
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey], lastProp = lastProps?.[propKey];
          if (!(!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null))
            if (propKey === STYLE)
              if (nextProp && Object.freeze(nextProp), lastProp) {
                for (styleName in lastProp)
                  lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName)) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
                for (styleName in nextProp)
                  nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName] && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = nextProp[styleName]);
              } else
                styleUpdates || (updatePayload || (updatePayload = []), updatePayload.push(propKey, styleUpdates)), styleUpdates = nextProp;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0, lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              nextHtml != null && lastHtml !== nextHtml && (updatePayload = updatePayload || []).push(propKey, nextHtml);
            } else
              propKey === CHILDREN ? (typeof nextProp == "string" || typeof nextProp == "number") && (updatePayload = updatePayload || []).push(propKey, "" + nextProp) : propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || (registrationNameDependencies.hasOwnProperty(propKey) ? (nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)), !updatePayload && lastProp !== nextProp && (updatePayload = [])) : (updatePayload = updatePayload || []).push(propKey, nextProp));
        }
        return styleUpdates && (validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]), (updatePayload = updatePayload || []).push(STYLE, styleUpdates)), updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null && updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps), isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        switch (updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag), tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          return possibleStandardNames.hasOwnProperty(lowerCasedName) && possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag, extraAttributeNames;
        switch (isCustomComponentTag = isCustomComponent(tag, rawProps), validatePropertiesInDevelopment(tag, rawProps), tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i = 0; i < mediaEventTypes.length; i++)
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = /* @__PURE__ */ new Set();
          for (var attributes = domElement.attributes, _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps)
          if (rawProps.hasOwnProperty(propKey)) {
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN)
              typeof nextProp == "string" ? domElement.textContent !== nextProp && (rawProps[SUPPRESS_HYDRATION_WARNING] !== true && checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev), updatePayload = [CHILDREN, nextProp]) : typeof nextProp == "number" && domElement.textContent !== "" + nextProp && (rawProps[SUPPRESS_HYDRATION_WARNING] !== true && checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev), updatePayload = [CHILDREN, "" + nextProp]);
            else if (registrationNameDependencies.hasOwnProperty(propKey))
              nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement));
            else if (shouldWarnDev && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag == "boolean") {
              var serverValue = void 0, propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                if (!(propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")) {
                  if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML, nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                    if (nextHtml != null) {
                      var expectedHTML = normalizeHTML(domElement, nextHtml);
                      expectedHTML !== serverHTML && warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  } else if (propKey === STYLE) {
                    if (extraAttributeNames.delete(propKey), canDiffStyleForHydrationWarning) {
                      var expectedStyle = createDangerousStringForStyles(nextProp);
                      serverValue = domElement.getAttribute("style"), expectedStyle !== serverValue && warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  } else if (isCustomComponentTag && !enableCustomElementPropertySupport)
                    extraAttributeNames.delete(propKey.toLowerCase()), serverValue = getValueForAttribute(domElement, propKey, nextProp), nextProp !== serverValue && warnForPropDifference(propKey, serverValue, nextProp);
                  else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null)
                      extraAttributeNames.delete(propertyInfo.attributeName), serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    else {
                      var ownNamespace = parentNamespace;
                      if (ownNamespace === HTML_NAMESPACE && (ownNamespace = getIntrinsicNamespace(tag)), ownNamespace === HTML_NAMESPACE)
                        extraAttributeNames.delete(propKey.toLowerCase());
                      else {
                        var standardName = getPossibleStandardName(propKey);
                        standardName !== null && standardName !== propKey && (isMismatchDueToBadCasing = true, extraAttributeNames.delete(standardName)), extraAttributeNames.delete(propKey);
                      }
                      serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    !dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing && warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
          }
        switch (shouldWarnDev && // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true && warnForExtraAttributes(extraAttributeNames), tag) {
          case "input":
            track(domElement), postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement), postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            typeof rawProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text2, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text2;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = true, error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = true, error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = true, error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text2) {
        {
          if (text2 === "" || didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = true, error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text2, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      }, updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
          // TODO: Distinguish by namespace here -- for <title>, including it here
          // errs on the side of fewer warnings
          "foreignObject",
          "desc",
          "title"
        ], buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo), info = {
            tag
          };
          return inScopeTags.indexOf(tag) !== -1 && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null), buttonScopeTags.indexOf(tag) !== -1 && (ancestorInfo.pTagInButtonScope = null), specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p" && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null), ancestorInfo.current = info, tag === "form" && (ancestorInfo.formTag = info), tag === "a" && (ancestorInfo.aTagInScope = info), tag === "button" && (ancestorInfo.buttonTagInScope = info), tag === "nobr" && (ancestorInfo.nobrTagInScope = info), tag === "p" && (ancestorInfo.pTagInButtonScope = info), tag === "li" && (ancestorInfo.listItemTagAutoclosing = info), (tag === "dd" || tag === "dt") && (ancestorInfo.dlItemTagAutoclosing = info), ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        }, findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        }, didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current, parentTag = parentInfo && parentInfo.tag;
          childText != null && (childTag != null && error("validateDOMNesting: when childText is passed, childTag should be null"), childTag = "#text");
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo, invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo), invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (invalidParentOrAncestor) {
            var ancestorTag = invalidParentOrAncestor.tag, warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (!didWarn$1[warnKey]) {
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag, whitespaceInfo = "";
              if (childTag === "#text" ? /\S/.test(childText) ? tagDisplayName = "Text nodes" : (tagDisplayName = "Whitespace text nodes", whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : tagDisplayName = "<" + childTag + ">", invalidParent) {
                var info = "";
                ancestorTag === "table" && childTag === "tr" && (info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", STYLE$1 = "style", eventsEnabled = null, selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type, namespace, nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance, ownNamespace = container.namespaceURI || null;
            type = container.tagName, namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase(), ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext, namespace = getChildNamespace(parentHostContextDev.namespace, type), ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled(), selectionInformation = getSelectionInformation();
        var activeInstance = null;
        return setEnabled(false), activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation), setEnabled(eventsEnabled), eventsEnabled = null, selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          if (validateDOMNesting(type, null, hostContextDev.ancestorInfo), typeof props.children == "string" || typeof props.children == "number") {
            var string = "" + props.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement11(type, props, rootContainerInstance, parentNamespace);
        return precacheFiberNode(internalInstanceHandle, domElement), updateFiberProps(domElement, props), domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        switch (setInitialProperties(domElement, type, props, rootContainerInstance), type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children != typeof oldProps.children && (typeof newProps.children == "string" || typeof newProps.children == "number")) {
            var string = "" + newProps.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children == "string" || typeof props.children == "number" || typeof props.dangerouslySetInnerHTML == "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text2, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text2, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text2, rootContainerInstance);
        return precacheFiberNode(internalInstanceHandle, textNode), textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        return currentEvent === void 0 ? DefaultEventPriority : getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout == "function" ? setTimeout : void 0, cancelTimeout = typeof clearTimeout == "function" ? clearTimeout : void 0, noTimeout = -1, localPromise = typeof Promise == "function" ? Promise : void 0, scheduleMicrotask = typeof queueMicrotask == "function" ? queueMicrotask : typeof localPromise < "u" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            newProps.autoFocus && domElement.focus();
            return;
          case "img": {
            newProps.src && (domElement.src = newProps.src);
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps), updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        container.nodeType === COMMENT_NODE ? (parentNode = container.parentNode, parentNode.insertBefore(child, container)) : (parentNode = container, parentNode.appendChild(child));
        var reactRootContainer = container._reactRootContainer;
        reactRootContainer == null && parentNode.onclick === null && trapClickOnNonInteractiveElement(parentNode);
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        container.nodeType === COMMENT_NODE ? container.parentNode.insertBefore(child, beforeChild) : container.insertBefore(child, beforeChild);
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        container.nodeType === COMMENT_NODE ? container.parentNode.removeChild(child) : container.removeChild(child);
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance, depth = 0;
        do {
          var nextNode = node.nextSibling;
          if (parentInstance.removeChild(node), nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA)
              if (depth === 0) {
                parentInstance.removeChild(nextNode), retryIfBlockedOn(suspenseInstance);
                return;
              } else
                depth--;
            else
              (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) && depth++;
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        container.nodeType === COMMENT_NODE ? clearSuspenseBoundary(container.parentNode, suspenseInstance) : container.nodeType === ELEMENT_NODE && clearSuspenseBoundary(container, suspenseInstance), retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        typeof style2.setProperty == "function" ? style2.setProperty("display", "none", "important") : style2.display = "none";
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1], display = styleProp != null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text2) {
        textInstance.nodeValue = text2;
      }
      function clearContainer(container) {
        container.nodeType === ELEMENT_NODE ? container.textContent = "" : container.nodeType === DOCUMENT_NODE && container.documentElement && container.removeChild(container.documentElement);
      }
      function canHydrateInstance(instance, type, props) {
        return instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase() ? null : instance;
      }
      function canHydrateTextInstance(instance, text2) {
        return text2 === "" || instance.nodeType !== TEXT_NODE ? null : instance;
      }
      function canHydrateSuspenseInstance(instance) {
        return instance.nodeType !== COMMENT_NODE ? null : instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset, digest2, message2, stack;
        return dataset && (digest2 = dataset.dgst, message2 = dataset.msg, stack = dataset.stck), {
          message: message2,
          digest: digest2,
          stack
        };
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE)
            break;
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA)
              break;
            if (nodeData === SUSPENSE_END_DATA)
              return null;
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance), updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text2, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text2);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        for (var node = suspenseInstance.nextSibling, depth = 0; node; ) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0)
                return getNextHydratableSibling(node);
              depth--;
            } else
              (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) && depth++;
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        for (var node = targetInstance.previousSibling, depth = 0; node; ) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0)
                return node;
              depth--;
            } else
              data === SUSPENSE_END_DATA && depth++;
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text2, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text2, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text2, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text2, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentContainer, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentContainer, instance);
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentNode, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentNode, instance));
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentInstance, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentInstance, instance));
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text2) {
        warnForInsertedHydratedText(parentContainer, text2);
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text2) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && warnForInsertedHydratedText(parentNode, text2);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) && warnForInsertedHydratedElement(parentInstance, type);
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text2, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) && warnForInsertedHydratedText(parentInstance, text2);
      }
      function errorHydratingContainer(parentContainer) {
        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey], delete node[internalPropsKey], delete node[internalEventHandlersKey], delete node[internalEventHandlerListenersKey], delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst)
          return targetInst;
        for (var parentNode = targetNode.parentNode; parentNode; ) {
          if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey], targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null)
              for (var suspenseInstance = getParentSuspenseInstance(targetNode); suspenseInstance !== null; ) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst)
                  return targetSuspenseInst;
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            return targetInst;
          }
          targetNode = parentNode, parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        return inst && (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) ? inst : null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText)
          return inst.stateNode;
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        return elementListenerSet === void 0 && (elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set()), elementListenerSet;
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values2, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = true, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var valueStack = [], fiberStack;
      fiberStack = [];
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          error("Unexpected pop.");
          return;
        }
        fiber !== fiberStack[index] && error("Unexpected Fiber popped."), cursor.current = valueStack[index], valueStack[index] = null, fiberStack[index] = null, index--;
      }
      function push(cursor, value, fiber) {
        index++, valueStack[index] = cursor.current, fiberStack[index] = fiber, cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      var contextStackCursor = createCursor(emptyContextObject), didPerformWorkStackCursor = createCursor(false), previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component9, didPushOwnContextIfProvider) {
        return didPushOwnContextIfProvider && isContextProvider(Component9) ? previousContext : contextStackCursor.current;
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type, contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext)
            return instance.__reactInternalMemoizedMaskedChildContext;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return instance && cacheContext(workInProgress2, unmaskedContext, context), context;
        }
      }
      function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes != null;
        }
      }
      function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
      }
      function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject)
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode, childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = true, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode, memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress2), push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2), true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance)
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress2), pop(contextStackCursor, workInProgress2), push(contextStackCursor, mergedContext, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else
            pop(didPerformWorkStackCursor, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent)
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component9 = node.type;
                if (isContextProvider(Component9))
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0, ConcurrentRoot = 1, syncQueue = null, includesLegacySyncCallbacks = false, isFlushingSyncQueue = false;
      function scheduleSyncCallback(callback) {
        syncQueue === null ? syncQueue = [callback] : syncQueue.push(callback);
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true, scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        includesLegacySyncCallbacks && flushSyncCallbacks();
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0, previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = true, queue = syncQueue;
            for (setCurrentUpdatePriority(DiscreteEventPriority); i < queue.length; i++) {
              var callback = queue[i];
              do
                callback = callback(isSync);
              while (callback !== null);
            }
            syncQueue = null, includesLegacySyncCallbacks = false;
          } catch (error2) {
            throw syncQueue !== null && (syncQueue = syncQueue.slice(i + 1)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority), isFlushingSyncQueue = false;
          }
        }
        return null;
      }
      var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        return warnIfNotHydrating(), (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        return warnIfNotHydrating(), treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow, idWithLeadingBit = treeContextId, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating(), forkStack[forkStackIndex++] = treeForkCount, forkStack[forkStackIndex++] = treeForkProvider, treeForkProvider = workInProgress2, treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId, baseOverflow = treeContextOverflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index2 + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id, treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          treeContextId = 1 << length | _id, treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1, slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks), pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
          treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for (; workInProgress2 === treeContextProvider; )
          treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
      function getSuspendedTreeContext() {
        return warnIfNotHydrating(), treeContextProvider !== null ? {
          id: treeContextId,
          overflow: treeContextOverflow
        } : null;
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = suspendedContext.id, treeContextOverflow = suspendedContext.overflow, treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        getIsHydrating() || error("Expected to be hydrating. This is a bug in React. Please file an issue.");
      }
      var hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, didSuspendOrErrorDEV = false, hydrationErrors = null;
      function warnIfHydrating() {
        isHydrating && error("We should not be hydrating here. This is a bug in React. Please file a bug.");
      }
      function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = true;
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        return nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance), hydrationParentFiber = fiber, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        return nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance), hydrationParentFiber = fiber, isHydrating = true, hydrationErrors = null, didSuspendOrErrorDEV = false, treeContext !== null && restoreSuspendedTreeContext(fiber, treeContext), true;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        switch (returnFiber.tag) {
          case HostRoot: {
            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
            break;
          }
          case HostComponent: {
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotHydrateInstance(
              returnFiber.type,
              returnFiber.memoizedProps,
              returnFiber.stateNode,
              instance,
              // TODO: Delete this argument when we remove the legacy root API.
              isConcurrentMode
            );
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            suspenseState.dehydrated !== null && didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
            break;
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance, childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion) : deletions.push(childToDelete);
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV)
            return;
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type, props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text2 = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text2);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type, _props = fiber.pendingProps, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _type,
                    _props,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps, _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _text,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode
                  );
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState, _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type, _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement, warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type, props = fiber.pendingProps, instance = canHydrateInstance(nextInstance, type);
            return instance !== null ? (fiber.stateNode = instance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(instance), true) : false;
          }
          case HostText: {
            var text2 = fiber.pendingProps, textInstance = canHydrateTextInstance(nextInstance, text2);
            return textInstance !== null ? (fiber.stateNode = textInstance, hydrationParentFiber = fiber, nextHydratableInstance = null, true) : false;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              return dehydratedFragment.return = fiber, fiber.child = dehydratedFragment, hydrationParentFiber = fiber, nextHydratableInstance = null, true;
            }
            return false;
          }
          default:
            return false;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = false, hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = false, hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode, shouldWarnIfMismatchDev = !didSuspendOrErrorDEV, updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        return fiber.updateQueue = updatePayload, updatePayload !== null;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode, textContent = fiber.memoizedProps, shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null)
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(
                  parentContainer,
                  textInstance,
                  textContent,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode, _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  textInstance,
                  textContent,
                  // TODO: Delete this argument when we remove the legacy root API.
                  _isConcurrentMode2
                );
                break;
              }
            }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance)
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance)
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        for (var parent = fiber.return; parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent; )
          parent = parent.return;
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber)
          return false;
        if (!isHydrating)
          return popToNextHostParent(fiber), isHydrating = true, false;
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance)
            if (shouldClientRenderOnMismatch(fiber))
              warnIfUnhydratedTailNodes(fiber), throwOnHydrationMismatch();
            else
              for (; nextInstance; )
                deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
        }
        return popToNextHostParent(fiber), fiber.tag === SuspenseComponent ? nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber) : nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        for (var nextInstance = nextHydratableInstance; nextInstance; )
          warnUnhydratedInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
      }
      function resetHydrationState() {
        hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        hydrationErrors !== null && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null);
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        hydrationErrors === null ? hydrationErrors = [error2] : hydrationErrors.push(error2);
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig, NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          for (var maybeStrictRoot = null, node = fiber; node !== null; )
            node.mode & StrictLegacyMode && (maybeStrictRoot = node), node = node.return;
          return maybeStrictRoot;
        }, setToSortedString = function(set2) {
          var array = [];
          return set2.forEach(function(value) {
            array.push(value);
          }), array.sort().join(", ");
        }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          didWarnAboutUnsafeLifecycles.has(fiber.type) || (typeof instance.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
          instance.componentWillMount.__suppressDeprecationWarning !== true && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount == "function" && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps == "function" && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate == "function" && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
        }, ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillMountWarnings.length > 0 && (pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillMountWarnings = []);
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          pendingUNSAFE_ComponentWillMountWarnings.length > 0 && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillMountWarnings = []);
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillReceivePropsWarnings.length > 0 && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillReceivePropsWarnings = []);
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0 && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillUpdateWarnings.length > 0 && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillUpdateWarnings = []);
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0 && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillUpdateWarnings = []), UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (!didWarnAboutLegacyContext.has(fiber.type)) {
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext == "function") && (warningsForRoot === void 0 && (warningsForRoot = [], pendingLegacyContextWarning.set(strictRoot, warningsForRoot)), warningsForRoot.push(fiber));
          }
        }, ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length !== 0) {
              var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber), error(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, sortedNames);
              } finally {
                resetCurrentFiber();
              }
            }
          });
        }, ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
      }
      function resolveDefaultProps(Component9, baseProps) {
        if (Component9 && Component9.defaultProps) {
          var props = assign({}, baseProps), defaultProps2 = Component9.defaultProps;
          for (var propName in defaultProps2)
            props[propName] === void 0 && (props[propName] = defaultProps2[propName]);
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null), rendererSigil;
      rendererSigil = {};
      var currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = false;
      }
      function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
      }
      function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
      }
      function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber), context._currentValue = nextValue, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber), context._currentValue = currentValue;
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (var node = parent; node !== null; ) {
          var alternate = node.alternate;
          if (isSubsetOfLanes(node.childLanes, renderLanes2) ? alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2) && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2)) : (node.childLanes = mergeLanes(node.childLanes, renderLanes2), alternate !== null && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2))), node === propagationRoot)
            break;
          node = node.return;
        }
        node !== propagationRoot && error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        propagateContextChange_eager(workInProgress2, context, renderLanes2);
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        for (fiber !== null && (fiber.return = workInProgress2); fiber !== null; ) {
          var nextFiber = void 0, list2 = fiber.dependencies;
          if (list2 !== null) {
            nextFiber = fiber.child;
            for (var dependency = list2.firstContext; dependency !== null; ) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2), update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue !== null) {
                    var sharedQueue = updateQueue.shared, pending = sharedQueue.pending;
                    pending === null ? update.next = update : (update.next = pending.next, pending.next = update), sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2), list2.lanes = mergeLanes(list2.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider)
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null)
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            _alternate !== null && (_alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2), nextFiber = fiber.sibling;
          } else
            nextFiber = fiber.child;
          if (nextFiber !== null)
            nextFiber.return = fiber;
          else
            for (nextFiber = fiber; nextFiber !== null; ) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return, nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2, lastContextDependency = null, lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;
          firstContext !== null && (includesSomeLane(dependencies.lanes, renderLanes2) && markWorkInProgressReceivedUpdate(), dependencies.firstContext = null);
        }
      }
      function readContext(context) {
        isDisallowedContextReadInDEV && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext !== context) {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null)
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            lastContextDependency = contextItem, currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        concurrentQueues === null ? concurrentQueues = [queue] : concurrentQueues.push(queue);
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i = 0; i < concurrentQueues.length; i++) {
            var queue = concurrentQueues[i], lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next, lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate, lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        return interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        return interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, lane)), alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        for (var node = sourceFiber, parent = sourceFiber.return; parent !== null; )
          parent.childLanes = mergeLanes(parent.childLanes, lane), alternate = parent.alternate, alternate !== null ? alternate.childLanes = mergeLanes(alternate.childLanes, lane) : (parent.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = parent.return;
        if (node.tag === HostRoot) {
          var root2 = node.stateNode;
          return root2;
        } else
          return null;
      }
      var UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = false, didWarnUpdateInsideUpdate, currentlyProcessingQueue;
      didWarnUpdateInsideUpdate = false, currentlyProcessingQueue = null;
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue, currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone2 = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone2;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null)
          return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate && (error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), didWarnUpdateInsideUpdate = true), isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          return pending === null ? update.next = update : (update.next = pending.next, pending.next = update), sharedQueue.pending = update, unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue !== null) {
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null, newLast = null, firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone2 = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLast === null ? newFirst = newLast = clone2 : (newLast.next = clone2, newLast = clone2), update = update.next;
              } while (update !== null);
              newLast === null ? newFirst = newLast = capturedUpdate : (newLast.next = capturedUpdate, newLast = capturedUpdate);
            } else
              newFirst = newLast = capturedUpdate;
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            }, workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        lastBaseUpdate === null ? queue.firstBaseUpdate = capturedUpdate : lastBaseUpdate.next = capturedUpdate, queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload == "function") {
              enterDisallowedContextReadInDEV();
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate:
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          case UpdateState: {
            var _payload = update.payload, partialState;
            if (typeof _payload == "function") {
              enterDisallowedContextReadInDEV(), partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else
              partialState = _payload;
            return partialState == null ? prevState : assign({}, prevState, partialState);
          }
          case ForceUpdate:
            return hasForceUpdate = true, prevState;
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false, currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null, lastBaseUpdate === null ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate, lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue, currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            currentLastBaseUpdate !== lastBaseUpdate && (currentLastBaseUpdate === null ? currentQueue.firstBaseUpdate = firstPendingUpdate : currentLastBaseUpdate.next = firstPendingUpdate, currentQueue.lastBaseUpdate = lastPendingUpdate);
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState, newLanes = NoLanes, newBaseState = null, newFirstBaseUpdate = null, newLastBaseUpdate = null, update = firstBaseUpdate;
          do {
            var updateLane = update.lane, updateEventTime = update.eventTime;
            if (isSubsetOfLanes(renderLanes2, updateLane)) {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && // If the update was already committed, we should not queue its
              // callback again.
              update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                effects === null ? queue.effects = [update] : effects.push(update);
              }
            } else {
              var clone2 = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate === null ? (newFirstBaseUpdate = newLastBaseUpdate = clone2, newBaseState = newState) : newLastBaseUpdate = newLastBaseUpdate.next = clone2, newLanes = mergeLanes(newLanes, updateLane);
            }
            if (update = update.next, update === null) {
              if (pendingQueue = queue.shared.pending, pendingQueue === null)
                break;
              var _lastPendingUpdate = pendingQueue, _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null, update = _firstPendingUpdate, queue.lastBaseUpdate = _lastPendingUpdate, queue.shared.pending = null;
            }
          } while (true);
          newLastBaseUpdate === null && (newBaseState = newState), queue.baseState = newBaseState, queue.firstBaseUpdate = newFirstBaseUpdate, queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do
              newLanes = mergeLanes(newLanes, interleaved.lane), interleaved = interleaved.next;
            while (interleaved !== lastInterleaved);
          } else
            firstBaseUpdate === null && (queue.shared.lanes = NoLanes);
          markSkippedUpdateLanes(newLanes), workInProgress2.lanes = newLanes, workInProgress2.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
      }
      function callCallback(callback, context) {
        if (typeof callback != "function")
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        if (finishedQueue.effects = null, effects !== null)
          for (var i = 0; i < effects.length; i++) {
            var effect = effects[i], callback = effect.callback;
            callback !== null && (effect.callback = null, callCallback(callback, instance));
          }
      }
      var fakeInternalInstance = {}, emptyRefsObject = new React270.Component().refs, didWarnAboutStateAssignmentForComponent, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set(), didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        }, Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        }), Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState == null ? prevState : assign({}, prevState, partialState);
        if (workInProgress2.memoizedState = memoizedState, workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get2(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.payload = payload, callback != null && (warnOnInvalidCallback(callback, "setState"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get2(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.tag = ReplaceState, update.payload = payload, callback != null && (warnOnInvalidCallback(callback, "replaceState"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get2(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate, callback != null && (warnOnInvalidCallback(callback, "forceUpdate"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markForceUpdateScheduled(fiber, lane);
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate == "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            shouldUpdate === void 0 && error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
          }
          return shouldUpdate;
        }
        return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater, workInProgress2.stateNode = instance, set(instance, workInProgress2), instance._reactInternalInstance = fakeInternalInstance;
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false, unmaskedContext = emptyContextObject, context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        if (typeof contextType == "object" && contextType !== null)
          context = readContext(contextType);
        else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes != null, context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            instance = new ctor(props, context);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== true ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return isLegacyContextConsumer && cacheContext(workInProgress2, unmaskedContext, context), instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps(newProps, nextContext), typeof instance.UNSAFE_componentWillReceiveProps == "function" && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext), instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            didWarnAboutStateAssignmentForComponent.has(componentName) || (didWarnAboutStateAssignmentForComponent.add(componentName), error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName));
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        checkClassInstance(workInProgress2, ctor, newProps);
        var instance = workInProgress2.stateNode;
        instance.props = newProps, instance.state = workInProgress2.memoizedState, instance.refs = emptyRefsObject, initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null)
          instance.context = readContext(contextType);
        else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance), ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), instance.state = workInProgress2.memoizedState), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(workInProgress2, instance), processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), instance.state = workInProgress2.memoizedState), typeof instance.componentDidMount == "function") {
          var fiberFlags = Update;
          fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode, oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
        if (typeof contextType == "object" && contextType !== null)
          nextContext = readContext(contextType);
        else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
        !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (oldProps !== newProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
        if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount == "function") {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount()), typeof instance.componentDidMount == "function") {
            var _fiberFlags = Update;
            _fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (_fiberFlags |= MountLayoutDev), workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount == "function") {
            var _fiberFlags2 = Update;
            _fiberFlags2 |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (_fiberFlags2 |= MountLayoutDev), workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState;
        }
        return instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps, oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
        if (typeof contextType == "object" && contextType !== null)
          nextContext = readContext(contextType);
        else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
        !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
        if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation)
          return typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), false;
        typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
        // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        return shouldUpdate ? (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate == "function" || typeof instance.componentWillUpdate == "function") && (typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate(newProps, newState, nextContext), typeof instance.UNSAFE_componentWillUpdate == "function" && instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext)), typeof instance.componentDidUpdate == "function" && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (workInProgress2.flags |= Snapshot)) : (typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState), instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
      }
      var didWarnAboutMaps, didWarnAboutGenerators, didWarnAboutStringRefs, ownerHasKeyUseWarning, ownerHasFunctionTypeWarning, warnForMissingKey = function(child, returnFiber) {
      };
      didWarnAboutMaps = false, didWarnAboutGenerators = false, didWarnAboutStringRefs = {}, ownerHasKeyUseWarning = {}, ownerHasFunctionTypeWarning = {}, warnForMissingKey = function(child, returnFiber) {
        if (!(child === null || typeof child != "object") && !(!child._store || child._store.validated || child.key != null)) {
          if (typeof child._store != "object")
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasKeyUseWarning[componentName] || (ownerHasKeyUseWarning[componentName] = true, error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
        }
      };
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef != "function" && typeof mixedRef != "object") {
          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          !(element._owner && element._self && element._owner.stateNode !== element._self)) {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            didWarnAboutStringRefs[componentName] || (error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef), didWarnAboutStringRefs[componentName] = true);
          }
          if (element._owner) {
            var owner = element._owner, inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent)
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              inst = ownerFiber.stateNode;
            }
            if (!inst)
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            var resolvedInst = inst;
            checkPropStringCoercion(mixedRef, "ref");
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref == "function" && current2.ref._stringRef === stringRef)
              return current2.ref;
            var ref = function(value) {
              var refs = resolvedInst.refs;
              refs === emptyRefsObject && (refs = resolvedInst.refs = {}), value === null ? delete refs[stringRef] : refs[stringRef] = value;
            };
            return ref._stringRef = stringRef, ref;
          } else {
            if (typeof mixedRef != "string")
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            if (!element._owner)
              throw new Error("Element ref was specified as a string (" + mixedRef + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName])
            return;
          ownerHasFunctionTypeWarning[componentName] = true, error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload, init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion) : deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects)
            return null;
          for (var childToDelete = currentFirstChild; childToDelete !== null; )
            deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          for (var existingChildren = /* @__PURE__ */ new Map(), existingChild = currentFirstChild; existingChild !== null; )
            existingChild.key !== null ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone2 = createWorkInProgress(fiber, pendingProps);
          return clone2.index = 0, clone2.sibling = null, clone2;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          if (newFiber.index = newIndex, !shouldTrackSideEffects)
            return newFiber.flags |= Forked, lastPlacedIndex;
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            return oldIndex < lastPlacedIndex ? (newFiber.flags |= Placement, lastPlacedIndex) : oldIndex;
          } else
            return newFiber.flags |= Placement, lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
          return shouldTrackSideEffects && newFiber.alternate === null && (newFiber.flags |= Placement), newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, textContent);
            return existing.return = returnFiber, existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE)
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          if (current2 !== null && (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
          isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType == "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type)) {
            var existing = useFiber(current2, element.props);
            return existing.ref = coerceRef(returnFiber, current2, element), existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          return created.ref = coerceRef(returnFiber, current2, element), created.return = returnFiber, created;
        }
        function updatePortal(returnFiber, current2, portal2, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal2.containerInfo || current2.stateNode.implementation !== portal2.implementation) {
            var created = createFiberFromPortal(portal2, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, portal2.children || []);
            return existing.return = returnFiber, existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment7) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, fragment);
            return existing.return = returnFiber, existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          }
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                return _created.ref = coerceRef(returnFiber, null, newChild), _created.return = returnFiber, _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                return _created2.return = returnFiber, _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload, init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              return _created3.return = returnFiber, _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number")
            return key !== null ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_PORTAL_TYPE:
                return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload, init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild))
              return key !== null ? null : updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload, init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child != "object" || child === null)
              return knownKeys;
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key != "string")
                  break;
                if (knownKeys === null) {
                  knownKeys = /* @__PURE__ */ new Set(), knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload, init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          for (var knownKeys = null, i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              oldFiber === null && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              _newFiber !== null && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            _newFiber2 !== null && (shouldTrackSideEffects && _newFiber2.alternate !== null && existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
          }
          if (shouldTrackSideEffects && existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          }), getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn != "function")
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          {
            typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = true), newChildrenIterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = true);
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren)
              for (var knownKeys = null, _step = _newChildren.next(); !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null)
            throw new Error("An iterable object provided no iterator.");
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next(); oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              oldFiber === null && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
          }
          if (step.done) {
            if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              _newFiber3 !== null && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            _newFiber4 !== null && (shouldTrackSideEffects && _newFiber4.alternate !== null && existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
          }
          if (shouldTrackSideEffects && existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          }), getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            return existing.return = returnFiber, existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          for (var key = element.key, child = currentFirstChild; child !== null; ) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment7) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  return existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
                }
              } else if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType == "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var _existing = useFiber(child, element.props);
                return _existing.ref = coerceRef(returnFiber, child, element), _existing.return = returnFiber, _existing._debugSource = element._source, _existing._debugOwner = element._owner, _existing;
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else
              deleteChild(returnFiber, child);
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            return created.return = returnFiber, created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            return _created4.ref = coerceRef(returnFiber, currentFirstChild, element), _created4.return = returnFiber, _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal2, lanes) {
          for (var key = portal2.key, child = currentFirstChild; child !== null; ) {
            if (child.key === key)
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal2.containerInfo && child.stateNode.implementation === portal2.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal2.children || []);
                return existing.return = returnFiber, existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            else
              deleteChild(returnFiber, child);
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal2, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild == "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment && (newChild = newChild.props.children), typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload, init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild))
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild))
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "string" && newChild !== "" || typeof newChild == "number" ? placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes)) : (typeof newChild == "function" && warnOnFunctionType(returnFiber), deleteRemainingChildren(returnFiber, currentFirstChild));
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true), mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child)
          throw new Error("Resuming work not yet implemented.");
        if (workInProgress2.child !== null) {
          var currentChild = workInProgress2.child, newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          for (workInProgress2.child = newChild, newChild.return = workInProgress2; currentChild.sibling !== null; )
            currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps), newChild.return = workInProgress2;
          newChild.sibling = null;
        }
      }
      function resetChildFibers(workInProgress2, lanes) {
        for (var child = workInProgress2.child; child !== null; )
          resetWorkInProgress(child, lanes), child = child.sibling;
      }
      var NO_CONTEXT = {}, contextStackCursor$1 = createCursor(NO_CONTEXT), contextFiberStackCursor = createCursor(NO_CONTEXT), rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        if (c === NO_CONTEXT)
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber), push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber), push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber), pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current), context = requiredContext(contextStackCursor$1.current), nextContext = getChildHostContext(context, fiber.type);
        context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
      }
      function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
      }
      var DefaultSuspenseContext = 0, SubtreeSuspenseContextMask = 1, InvisibleParentSuspenseContext = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null)
          return nextState.dehydrated !== null;
        var props = workInProgress2.memoizedProps;
        return true;
      }
      function findFirstSuspended(row) {
        for (var node = row; node !== null; ) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated))
                return node;
            }
          } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
          // keep track of whether it suspended or not.
          node.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend)
              return node;
          } else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === row)
            return null;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === row)
              return null;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = (
        /*   */
        0
      ), HasEffect = (
        /* */
        1
      ), Insertion = (
        /*  */
        2
      ), Layout3 = (
        /*    */
        4
      ), Passive$1 = (
        /*   */
        8
      ), workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i = 0; i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion, version = getVersion(mutableSource._source);
        root2.mutableSourceEagerHydrationData == null ? root2.mutableSourceEagerHydrationData = [mutableSource, version] : root2.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig, didWarnAboutMismatchedHooksForComponent, didWarnUncachedGetSnapshot;
      didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
      var renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, localIdCounter = 0, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          hookTypesDev === null ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          hookTypesDev !== null && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName && warnOnHookMismatchInDev(hookName));
        }
      }
      function checkDepsAreArrayDev(deps) {
        deps != null && !isArray(deps) && error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName) && (didWarnAboutMismatchedHooksForComponent.add(componentName), hookTypesDev !== null)) {
            for (var table = "", secondColumnStart = 30, i = 0; i <= hookTypesUpdateIndexDev; i++) {
              for (var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName, row = i + 1 + ". " + oldHookName; row.length < secondColumnStart; )
                row += " ";
              row += newHookName + `
`, table += row;
            }
            error(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName, table);
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies)
          return false;
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), false;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i]))
            return false;
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component9, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes, currentlyRenderingFiber$1 = workInProgress2, hookTypesDev = current2 !== null ? current2._debugHookTypes : null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.lanes = NoLanes, current2 !== null && current2.memoizedState !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV : hookTypesDev !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV : ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component9(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            if (didScheduleRenderPhaseUpdateDuringThisPass = false, localIdCounter = 0, numberOfReRenders >= RE_RENDER_LIMIT)
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            numberOfReRenders += 1, ignorePreviousDependencies = false, currentHook = null, workInProgressHook = null, workInProgress2.updateQueue = null, hookTypesUpdateIndexDev = -1, ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV, children = Component9(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, workInProgress2._debugHookTypes = hookTypesDev;
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        if (renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current2.mode & ConcurrentMode) !== NoMode && error("Internal React error: Expected static flag was missing. Please notify the React team."), didScheduleRenderPhaseUpdate = false, didRenderTooFewHooks)
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return localIdCounter = 0, didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue, (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update) : workInProgress2.flags &= ~(Passive | Update), current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        if (ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, didScheduleRenderPhaseUpdate) {
          for (var hook = currentlyRenderingFiber$1.memoizedState; hook !== null; ) {
            var queue = hook.queue;
            queue !== null && (queue.pending = null), hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, currentHookNameInDev = null, isUpdatingOpaqueValueInRenderPhase = false, didScheduleRenderPhaseUpdateDuringThisPass = false, localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        return workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook, workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          current2 !== null ? nextCurrentHook = current2.memoizedState : nextCurrentHook = null;
        } else
          nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null ? nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState : nextWorkInProgressHook = workInProgressHook.next, nextWorkInProgressHook !== null)
          workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook;
        else {
          if (nextCurrentHook === null)
            throw new Error("Rendered more hooks than during the previous render.");
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook : workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action4) {
        return typeof action4 == "function" ? action4(state) : action4;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook(), initialState;
        init !== void 0 ? initialState = init(initialArg) : initialState = initialArg, hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (queue === null)
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook, baseQueue = current2.baseQueue, pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next, pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst, pendingQueue.next = baseFirst;
          }
          current2.baseQueue !== baseQueue && error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), current2.baseQueue = baseQueue = pendingQueue, queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next, newState = current2.baseState, newBaseState = null, newBaseQueueFirst = null, newBaseQueueLast = null, update = first;
          do {
            var updateLane = update.lane;
            if (isSubsetOfLanes(renderLanes, updateLane)) {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState)
                newState = update.eagerState;
              else {
                var action4 = update.action;
                newState = reducer(newState, action4);
              }
            } else {
              var clone2 = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = clone2, newBaseState = newState) : newBaseQueueLast = newBaseQueueLast.next = clone2, currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane), markSkippedUpdateLanes(updateLane);
            }
            update = update.next;
          } while (update !== null && update !== first);
          newBaseQueueLast === null ? newBaseState = newState : newBaseQueueLast.next = newBaseQueueFirst, objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseState = newBaseState, hook.baseQueue = newBaseQueueLast, queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane), markSkippedUpdateLanes(interleavedLane), interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else
          baseQueue === null && (queue.lanes = NoLanes);
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (queue === null)
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next, update = firstRenderPhaseUpdate;
          do {
            var action4 = update.action;
            newState = reducer(newState, action4), update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseQueue === null && (hook.baseState = newState), queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook(), nextSnapshot, isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === void 0)
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          nextSnapshot = getServerSnapshot(), didWarnUncachedGetSnapshot || nextSnapshot !== getServerSnapshot() && (error("The result of getServerSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = true);
        } else {
          if (nextSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            objectIs(nextSnapshot, cachedSnapshot) || (error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = true);
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null)
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          includesBlockingLane(root2, renderLanes) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        return hook.queue = inst, mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null), nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook(), nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          objectIs(nextSnapshot, cachedSnapshot) || (error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = true);
        }
        var prevSnapshot = hook.memoizedState, snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        snapshotChanged && (hook.memoizedState = nextSnapshot, markWorkInProgressReceivedUpdate());
        var inst = hook.queue;
        if (updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
        // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null)
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          includesBlockingLane(root2, renderLanes) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check2 = {
          getSnapshot,
          value: renderedSnapshot
        }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.stores = [check2];
        else {
          var stores = componentUpdateQueue.stores;
          stores === null ? componentUpdateQueue.stores = [check2] : stores.push(check2);
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot, inst.getSnapshot = getSnapshot, checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot, prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        typeof initialState == "function" && (initialState = initialState()), hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          // Circular
          next: null
        }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.lastEffect = effect.next = effect;
        else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null)
            componentUpdateQueue.lastEffect = effect.next = effect;
          else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect, effect.next = firstEffect, componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          return hook.memoizedState = _ref2, _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          if (destroy = prevEffect.destroy, nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        return (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode ? mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps) : mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        return fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), mountEffectImpl(fiberFlags, Layout3, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout3, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref == "function") {
          var refCallback = ref, _inst = create();
          return refCallback(_inst), function() {
            refCallback(null);
          };
        } else if (ref != null) {
          var refObject = ref;
          refObject.hasOwnProperty("current") || error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
          var _inst2 = create();
          return refObject.current = _inst2, function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        typeof create != "function" && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps != null ? deps.concat([ref]) : null, fiberFlags = Update;
        return fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), mountEffectImpl(fiberFlags, Layout3, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        typeof create != "function" && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps != null ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout3, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
        return hook.memoizedState = [callback, nextDeps], callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
        if (prevState !== null && nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
        return hook.memoizedState = [callback, nextDeps], callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, nextValue = nextCreate();
        return hook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
        if (prevState !== null && nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
        var nextValue = nextCreate();
        return hook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        return hook.memoizedState = value, value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook(), resolvedCurrentHook = currentHook, prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null)
          return hook.memoizedState = value, value;
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane), markSkippedUpdateLanes(deferredLane), hook.baseState = true;
          }
          return prevValue;
        } else
          return hook.baseState && (hook.baseState = false, markWorkInProgressReceivedUpdate()), hook.memoizedState = value, value;
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority)), setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          setPending(false), callback();
        } finally {
          if (setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$2.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1], start = startTransition.bind(null, setPending), hook = mountWorkInProgressHook();
        return hook.memoizedState = start, [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
      }
      function mountId() {
        var hook = mountWorkInProgressHook(), root2 = getWorkInProgressRoot(), identifierPrefix = root2.identifierPrefix, id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          localId > 0 && (id += "H" + localId.toString(32)), id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        return hook.memoizedState = id, id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook(), id = hook.memoizedState;
        return id;
      }
      function dispatchReducerAction(fiber, queue, action4) {
        typeof arguments[3] == "function" && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber), update = {
          lane,
          action: action4,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action4) {
        typeof arguments[3] == "function" && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber), update = {
          lane,
          action: action4,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              prevDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                var currentState = queue.lastRenderedState, eagerState = lastRenderedReducer(currentState, action4);
                if (update.hasEagerState = true, update.eagerState = eagerState, objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch {
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        pending === null ? update.next = update : (update.next = pending.next, pending.next = update), queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action4) {
        markStateUpdateScheduled(fiber, lane);
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }, warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", mountHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", mountHookTypesDev(), checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", mountHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", mountHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", mountHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", mountHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", mountHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", mountHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), updateDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), rerenderDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), mountHookTypesDev(), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), mountHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), mountHookTypesDev(), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), mountHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), mountHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), mountHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), mountHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), mountHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), mountHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), rerenderDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now, commitTime = 0, layoutEffectStartTime = -1, profilerStartTime = -1, passiveEffectStartTime = -1, currentUpdateIsNested = false, nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        nestedUpdateScheduled = true;
      }
      function resetNestedUpdateFlag() {
        currentUpdateIsNested = false, nestedUpdateScheduled = false;
      }
      function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled, nestedUpdateScheduled = false;
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1(), fiber.actualStartTime < 0 && (fiber.actualStartTime = now$1());
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime, overrideBaseTime && (fiber.selfBaseDuration = elapsedTime), profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          for (var parentFiber = fiber.return; parentFiber !== null; ) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          for (var parentFiber = fiber.return; parentFiber !== null; ) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2 !== null && (root2.passiveEffectDuration += elapsedTime);
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode !== null && (parentStateNode.passiveEffectDuration += elapsedTime);
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        for (var child = fiber.child; child; )
          fiber.actualDuration += child.actualDuration, child = child.sibling;
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest2, stack) {
        return {
          value,
          source: null,
          stack: stack ?? null,
          digest: digest2 ?? null
        };
      }
      function showErrorDialog(boundary2, errorInfo) {
        return true;
      }
      function logCapturedError(boundary2, errorInfo) {
        try {
          var logError = showErrorDialog(boundary2, errorInfo);
          if (logError === false)
            return;
          var error2 = errorInfo.value, source = errorInfo.source, stack = errorInfo.stack, componentStack = stack !== null ? stack : "";
          if (error2 != null && error2._suppressLogging) {
            if (boundary2.tag === ClassComponent)
              return;
            console.error(error2);
          }
          var componentName = source ? getComponentNameFromFiber(source) : null, componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:", errorBoundaryMessage;
          if (boundary2.tag === HostRoot)
            errorBoundaryMessage = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
          else {
            var errorBoundaryName = getComponentNameFromFiber(boundary2) || "Anonymous";
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          }
          var combinedMessage = componentNameMessage + `
` + componentStack + `

` + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap == "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate, update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        return update.callback = function() {
          onUncaughtError(error2), logCapturedError(fiber, errorInfo);
        }, update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError == "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          }, update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        return inst !== null && typeof inst.componentDidCatch == "function" && (update.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo), typeof getDerivedStateFromError != "function" && markLegacyErrorBoundaryAsFailed(this);
          var error$12 = errorInfo.value, stack = errorInfo.stack;
          this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          }), typeof getDerivedStateFromError != "function" && (includesSomeLane(fiber.lanes, SyncLane) || error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown"));
        }), update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache, threadIDs;
        if (pingCache === null ? (pingCache = root2.pingCache = new PossiblyWeakMap$1(), threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs)) : (threadIDs = pingCache.get(wakeable), threadIDs === void 0 && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs))), !threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          isDevToolsPresent && restorePendingUpdaters(root2, lanes), wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = /* @__PURE__ */ new Set();
          updateQueue.add(wakeable), suspenseBoundary.updateQueue = updateQueue;
        } else
          wakeables.add(wakeable);
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          currentSource ? (sourceFiber.updateQueue = currentSource.updateQueue, sourceFiber.memoizedState = currentSource.memoizedState, sourceFiber.lanes = currentSource.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null);
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node))
            return node;
          node = node.return;
        } while (node !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber)
            suspenseBoundary.flags |= ShouldCapture;
          else {
            if (suspenseBoundary.flags |= DidCapture, sourceFiber.flags |= ForceUpdateForLegacySuspense, sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete), sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null)
                sourceFiber.tag = IncompleteClassComponent;
              else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate, enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        return suspenseBoundary.flags |= ShouldCapture, suspenseBoundary.lanes = rootRenderLanes, suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        if (sourceFiber.flags |= Incomplete, isDevToolsPresent && restorePendingUpdaters(root2, rootRenderLanes), value !== null && typeof value == "object" && typeof value.then == "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber), getIsHydrating() && sourceFiber.mode & ConcurrentMode && markDidThrowWhileHydratingDEV();
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender, markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), suspenseBoundary.mode & ConcurrentMode && attachPingListener(root2, wakeable, rootRenderLanes), attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes), renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
          markDidThrowWhileHydratingDEV();
          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (_suspenseBoundary !== null) {
            (_suspenseBoundary.flags & ShouldCapture) === NoFlags && (_suspenseBoundary.flags |= ForceClientRender), markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
            return;
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber), renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value, ctor = workInProgress2.type, instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError == "function" || instance !== null && typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update3 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update3);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        return null;
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, didReceiveUpdate = false, didWarnAboutBadClass, didWarnAboutModulePatternComponent, didWarnAboutContextTypeOnFunctionComponent, didWarnAboutGetDerivedStateOnFunctionComponent, didWarnAboutFunctionRefs, didWarnAboutReassigningProps, didWarnAboutRevealOrder, didWarnAboutTailOptions;
      didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutFunctionRefs = {}, didWarnAboutReassigningProps = false, didWarnAboutRevealOrder = {}, didWarnAboutTailOptions = {};
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        current2 === null ? workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component9, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component9.propTypes;
          innerPropTypes && checkPropTypes(
            innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(Component9)
          );
        }
        var render2 = Component9.render, ref = workInProgress2.ref, nextChildren, hasId;
        prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
        {
          if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(true), nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        return markComponentRenderStopped(), current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
      }
      function updateMemoComponent(current2, workInProgress2, Component9, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component9.type;
          if (isSimpleFunctionComponent(type) && Component9.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
          Component9.defaultProps === void 0) {
            var resolvedType = type;
            return resolvedType = resolveFunctionForHotReloading(type), workInProgress2.tag = SimpleMemoComponent, workInProgress2.type = resolvedType, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            innerPropTypes && checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(type)
            );
          }
          var child = createFiberFromTypeAndProps(Component9.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          return child.ref = workInProgress2.ref, child.return = workInProgress2, workInProgress2.child = child, child;
        }
        {
          var _type = Component9.type, _innerPropTypes = _type.propTypes;
          _innerPropTypes && checkPropTypes(
            _innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(_type)
          );
        }
        var currentChild = current2.child, hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps, compare2 = Component9.compare;
          if (compare2 = compare2 !== null ? compare2 : shallowEqual, compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        return newChild.ref = workInProgress2.ref, newChild.return = workInProgress2, workInProgress2.child = newChild, newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component9, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var outerMemoType = workInProgress2.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            var lazyComponent = outerMemoType, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              outerMemoType = init(payload);
            } catch {
              outerMemoType = null;
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            outerPropTypes && checkPropTypes(
              outerPropTypes,
              nextProps,
              // Resolved (SimpleMemoComponent has no defaultProps)
              "prop",
              getComponentNameFromType(outerMemoType)
            );
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
          workInProgress2.type === current2.type)
            if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
              (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags && (didReceiveUpdate = true);
            else
              return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        return updateFunctionComponent(current2, workInProgress2, Component9, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden)
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState, pushRenderLanes(workInProgress2, renderLanes2);
          } else if (includesSomeLane(renderLanes2, OffscreenLane)) {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          } else {
            var spawnedCachePool = null, nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else
              nextBaseLanes = renderLanes2;
            workInProgress2.lanes = workInProgress2.childLanes = OffscreenLane;
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            return workInProgress2.memoizedState = _nextState, workInProgress2.updateQueue = null, pushRenderLanes(workInProgress2, nextBaseLanes), null;
          }
        else {
          var _subtreeRenderLanes;
          prevState !== null ? (_subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2), workInProgress2.memoizedState = null) : _subtreeRenderLanes = renderLanes2, pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) && (workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic);
      }
      function updateFunctionComponent(current2, workInProgress2, Component9, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component9.propTypes;
          innerPropTypes && checkPropTypes(
            innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(Component9)
          );
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component9, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren, hasId;
        prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
        {
          if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(true), nextChildren = renderWithHooks(current2, workInProgress2, Component9, nextProps, context, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component9, nextProps, context, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        return markComponentRenderStopped(), current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
      }
      function updateClassComponent(current2, workInProgress2, Component9, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode, ctor = workInProgress2.type, tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context), state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture, workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools"), lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component9.propTypes;
            innerPropTypes && checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component9)
            );
          }
        }
        var hasContext;
        isContextProvider(Component9) ? (hasContext = true, pushContextProvider(workInProgress2)) : hasContext = false, prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode, shouldUpdate;
        instance === null ? (resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2), constructClassInstance(workInProgress2, Component9, nextProps), mountClassInstance(workInProgress2, Component9, nextProps, renderLanes2), shouldUpdate = true) : current2 === null ? shouldUpdate = resumeMountClassInstance(workInProgress2, Component9, nextProps, renderLanes2) : shouldUpdate = updateClassInstance(current2, workInProgress2, Component9, nextProps, renderLanes2);
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component9, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          shouldUpdate && inst.props !== nextProps && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component"), didWarnAboutReassigningProps = true);
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component9, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError)
          return hasContext && invalidateContextProvider(workInProgress2, Component9, false), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component9.getDerivedStateFromError != "function")
          nextChildren = null, stopProfilerTimerIfRunning();
        else {
          markComponentRenderStarted(workInProgress2);
          {
            if (setIsRendering(true), nextChildren = instance.render(), workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          markComponentRenderStopped();
        }
        return workInProgress2.flags |= PerformedWork, current2 !== null && didCaptureError ? forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.memoizedState = instance.state, hasContext && invalidateContextProvider(workInProgress2, Component9, true), workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        root2.pendingContext ? pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context) : root2.context && pushTopLevelContextObject(workInProgress2, root2.context, false), pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        if (pushHostRootContext(workInProgress2), current2 === null)
          throw new Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress2.pendingProps, prevState = workInProgress2.memoizedState, prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState, root2 = workInProgress2.stateNode, nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          }, updateQueue = workInProgress2.updateQueue;
          if (updateQueue.baseState = overrideState, workInProgress2.memoizedState = overrideState, workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            for (var node = child; node; )
              node.flags = node.flags & ~Placement | Hydrating, node = node.sibling;
          }
        } else {
          if (resetHydrationState(), nextChildren === prevChildren)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        return resetHydrationState(), queueHydrationError(recoverableError), workInProgress2.flags |= ForceClientRender, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2), current2 === null && tryToClaimNextHydratableInstance(workInProgress2);
        var type = workInProgress2.type, nextProps = workInProgress2.pendingProps, prevProps = current2 !== null ? current2.memoizedProps : null, nextChildren = nextProps.children, isDirectTextChild = shouldSetTextContent(type, nextProps);
        return isDirectTextChild ? nextChildren = null : prevProps !== null && shouldSetTextContent(type, prevProps) && (workInProgress2.flags |= ContentReset), markRef(current2, workInProgress2), reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        return current2 === null && tryToClaimNextHydratableInstance(workInProgress2), null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps, lazyComponent = elementType, payload = lazyComponent._payload, init = lazyComponent._init, Component9 = init(payload);
        workInProgress2.type = Component9;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component9), resolvedProps = resolveDefaultProps(Component9, props), child;
        switch (resolvedTag) {
          case FunctionComponent:
            return validateFunctionComponentInDev(workInProgress2, Component9), workInProgress2.type = Component9 = resolveFunctionForHotReloading(Component9), child = updateFunctionComponent(null, workInProgress2, Component9, resolvedProps, renderLanes2), child;
          case ClassComponent:
            return workInProgress2.type = Component9 = resolveClassForHotReloading(Component9), child = updateClassComponent(null, workInProgress2, Component9, resolvedProps, renderLanes2), child;
          case ForwardRef:
            return workInProgress2.type = Component9 = resolveForwardRefForHotReloading(Component9), child = updateForwardRef(null, workInProgress2, Component9, resolvedProps, renderLanes2), child;
          case MemoComponent: {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = Component9.propTypes;
              outerPropTypes && checkPropTypes(
                outerPropTypes,
                resolvedProps,
                // Resolved for outer only
                "prop",
                getComponentNameFromType(Component9)
              );
            }
            return child = updateMemoComponent(
              null,
              workInProgress2,
              Component9,
              resolveDefaultProps(Component9.type, resolvedProps),
              // The inner type can have defaults too
              renderLanes2
            ), child;
          }
        }
        var hint = "";
        throw Component9 !== null && typeof Component9 == "object" && Component9.$$typeof === REACT_LAZY_TYPE && (hint = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + Component9 + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component9, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2), workInProgress2.tag = ClassComponent;
        var hasContext;
        return isContextProvider(Component9) ? (hasContext = true, pushContextProvider(workInProgress2)) : hasContext = false, prepareToReadContext(workInProgress2, renderLanes2), constructClassInstance(workInProgress2, Component9, nextProps), mountClassInstance(workInProgress2, Component9, nextProps, renderLanes2), finishClassComponent(null, workInProgress2, Component9, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component9, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps, context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component9, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value, hasId;
        markComponentRenderStarted(workInProgress2);
        {
          if (Component9.prototype && typeof Component9.prototype.render == "function") {
            var componentName = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = true);
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null), setIsRendering(true), ReactCurrentOwner$1.current = workInProgress2, value = renderWithHooks(null, workInProgress2, Component9, props, context, renderLanes2), hasId = checkDidRenderIdHook(), setIsRendering(false);
        }
        if (markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component9) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = true);
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = true);
          }
          workInProgress2.tag = ClassComponent, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null;
          var hasContext = false;
          return isContextProvider(Component9) ? (hasContext = true, pushContextProvider(workInProgress2)) : hasContext = false, workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null, initializeUpdateQueue(workInProgress2), adoptClassInstance(workInProgress2, value), mountClassInstance(workInProgress2, Component9, props, renderLanes2), finishClassComponent(null, workInProgress2, Component9, true, hasContext, renderLanes2);
        } else {
          if (workInProgress2.tag = FunctionComponent, workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              value = renderWithHooks(null, workInProgress2, Component9, props, context, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          return getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), reconcileChildren(null, workInProgress2, value, renderLanes2), validateFunctionComponentInDev(workInProgress2, Component9), workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component9) {
        {
          if (Component9 && Component9.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component9.displayName || Component9.name || "Component"), workInProgress2.ref !== null) {
            var info = "", ownerName = getCurrentFiberOwnerNameInDevOrNull();
            ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
            var warningKey = ownerName || "", debugSource = workInProgress2._debugSource;
            debugSource && (warningKey = debugSource.fileName + ":" + debugSource.lineNumber), didWarnAboutFunctionRefs[warningKey] || (didWarnAboutFunctionRefs[warningKey] = true, error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info));
          }
          if (typeof Component9.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true);
          }
          if (typeof Component9.contextType == "object" && Component9.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true);
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null)
            return false;
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        shouldSuspend(workInProgress2) && (workInProgress2.flags |= DidCapture);
        var suspenseContext = suspenseStackCursor.current, showFallback = false, didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2) ? (showFallback = true, workInProgress2.flags &= ~DidCapture) : (current2 === null || current2.memoizedState !== null) && (suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext)), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null)
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
          }
          var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), primaryChildFragment = workInProgress2.child;
            return primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackFragment;
          } else
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null)
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback, _nextPrimaryChildren = nextProps.children, fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2), _primaryChildFragment2 = workInProgress2.child, prevOffscreenState = current2.child.memoizedState;
            return _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2), _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children, _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            return workInProgress2.memoizedState = null, _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode2 = workInProgress2.mode, primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
        return primaryChildFragment.return = workInProgress2, workInProgress2.child = primaryChildFragment, primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode2 = workInProgress2.mode, progressedPrimaryFragment = workInProgress2.child, primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        }, primaryChildFragment, fallbackChildFragment;
        return (mode2 & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null ? (primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = 0, primaryChildFragment.treeBaseDuration = 0), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null)) : (primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null)), primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode2, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode2, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode && (primaryChildFragment.lanes = renderLanes2), primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = null, currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          deletions === null ? (workInProgress2.deletions = [currentFallbackChildFragment], workInProgress2.flags |= ChildDeletion) : deletions.push(currentFallbackChildFragment);
        }
        return workInProgress2.child = primaryChildFragment, primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode2 = workInProgress2.mode, currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        }, primaryChildFragment;
        if (
          // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
          (mode2 & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
          // already cloned. In legacy mode, the only case where this isn't true is
          // when DevTools forces us to display a fallback; we skip the first render
          // pass entirely and go straight to rendering the fallback. (In Concurrent
          // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
          // only codepath.)
          workInProgress2.child !== currentPrimaryChildFragment
        ) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration, primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration), workInProgress2.deletions = null;
        } else
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps), primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        var fallbackChildFragment;
        return currentFallbackChildFragment !== null ? fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren) : (fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null), fallbackChildFragment.flags |= Placement), fallbackChildFragment.return = workInProgress2, primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        recoverableError !== null && queueHydrationError(recoverableError), reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps, primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        return primaryChildFragment.flags |= Placement, workInProgress2.memoizedState = null, primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode, primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode), fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        return fallbackChildFragment.flags |= Placement, primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, (workInProgress2.mode & ConcurrentMode) !== NoMode && reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        return (workInProgress2.mode & ConcurrentMode) === NoMode ? (error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), workInProgress2.lanes = SyncLane) : isSuspenseInstanceFallback(suspenseInstance) ? workInProgress2.lanes = DefaultHydrationLane : workInProgress2.lanes = OffscreenLane, null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (didSuspend)
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else {
            if (workInProgress2.memoizedState !== null)
              return workInProgress2.child = current2.child, workInProgress2.flags |= DidCapture, null;
            var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback, fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), _primaryChildFragment4 = workInProgress2.child;
            return _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
          }
        else {
          if (warnIfHydrating(), (workInProgress2.mode & ConcurrentMode) === NoMode)
            return retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2,
              // TODO: When we delete legacy mode, we should make this error argument
              // required — every concurrent mode path that causes hydration to
              // de-opt to client rendering should have an error message.
              null
            );
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest2, message2, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest2 = _getSuspenseInstanceF.digest, message2 = _getSuspenseInstanceF.message, stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            message2 ? error2 = new Error(message2) : error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            var capturedValue = createCapturedValue(error2, digest2, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane), scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture, workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            return registerSuspenseInstanceRetry(suspenseInstance, retry), null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            return primaryChildFragment.flags |= Hydrating, primaryChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        for (var node = firstChild; node !== null; ) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            state !== null && scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.tag === SuspenseListComponent)
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === workInProgress2)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === workInProgress2)
              return;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        for (var row = firstChild, lastContentRow = null; row !== null; ) {
          var currentRow = row.alternate;
          currentRow !== null && findFirstSuspended(currentRow) === null && (lastContentRow = row), row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder])
          if (didWarnAboutRevealOrder[revealOrder] = true, typeof revealOrder == "string")
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              case "forward":
              case "backward": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              default:
                error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          else
            error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
      function validateTailOptions(tailMode, revealOrder) {
        tailMode !== void 0 && !didWarnAboutTailOptions[tailMode] && (tailMode !== "collapsed" && tailMode !== "hidden" ? (didWarnAboutTailOptions[tailMode] = true, error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode)) : revealOrder !== "forwards" && revealOrder !== "backwards" && (didWarnAboutTailOptions[tailMode] = true, error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode)));
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isAnArray = isArray(childSlot), isIterable = !isAnArray && typeof getIteratorFn(childSlot) == "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            return error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type), false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false)
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++)
              if (!validateSuspenseListNestedChild(children[i], i))
                return;
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn == "function") {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator)
                for (var step = childrenIterator.next(), _i = 0; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i))
                    return;
                  _i++;
                }
            } else
              error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
          }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        renderState === null ? workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail, newChildren = nextProps.children;
        validateRevealOrder(revealOrder), validateTailOptions(tailMode, revealOrder), validateSuspenseListChildren(newChildren, revealOrder), reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current, shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback)
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback), workInProgress2.flags |= DidCapture;
        else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          didSuspendBefore && propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        if (pushSuspenseContext(workInProgress2, suspenseContext), (workInProgress2.mode & ConcurrentMode) === NoMode)
          workInProgress2.memoizedState = null;
        else
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child), tail;
              lastContentRow === null ? (tail = workInProgress2.child, workInProgress2.child = null) : (tail = lastContentRow.sibling, lastContentRow.sibling = null), initSuspenseListRenderState(
                workInProgress2,
                false,
                // isBackwards
                tail,
                lastContentRow,
                tailMode
              );
              break;
            }
            case "backwards": {
              var _tail = null, row = workInProgress2.child;
              for (workInProgress2.child = null; row !== null; ) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail, _tail = row, row = nextRow;
              }
              initSuspenseListRenderState(
                workInProgress2,
                true,
                // isBackwards
                _tail,
                null,
                // last
                tailMode
              );
              break;
            }
            case "together": {
              initSuspenseListRenderState(
                workInProgress2,
                false,
                // isBackwards
                null,
                // tail
                null,
                // last
                void 0
              );
              break;
            }
            default:
              workInProgress2.memoizedState = null;
          }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        return current2 === null ? workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type, context = providerType._context, newProps = workInProgress2.pendingProps, oldProps = workInProgress2.memoizedProps, newValue = newProps.value;
        {
          "value" in newProps || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = true, error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
          var providerPropTypes = workInProgress2.type.propTypes;
          providerPropTypes && checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        }
        if (pushProvider(workInProgress2, context, newValue), oldProps !== null) {
          var oldValue = oldProps.value;
          if (objectIs(oldValue, newValue)) {
            if (oldProps.children === newProps.children && !hasContextChanged())
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else
            propagateContextChange(workInProgress2, context, renderLanes2);
        }
        var newChildren = newProps.children;
        return reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = true, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var newProps = workInProgress2.pendingProps, render2 = newProps.children;
        typeof render2 != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress2);
        var newChildren;
        return ReactCurrentOwner$1.current = workInProgress2, setIsRendering(true), newChildren = render2(newValue), setIsRendering(false), markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        (workInProgress2.mode & ConcurrentMode) === NoMode && current2 !== null && (current2.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement);
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        return current2 !== null && (workInProgress2.dependencies = current2.dependencies), stopProfilerTimerIfRunning(), markSkippedUpdateLanes(workInProgress2.lanes), includesSomeLane(renderLanes2, workInProgress2.childLanes) ? (cloneChildFibers(current2, workInProgress2), workInProgress2.child) : null;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null)
            throw new Error("Cannot swap the root fiber.");
          if (current2.alternate = null, oldWorkInProgress.alternate = null, newWorkInProgress.index = oldWorkInProgress.index, newWorkInProgress.sibling = oldWorkInProgress.sibling, newWorkInProgress.return = oldWorkInProgress.return, newWorkInProgress.ref = oldWorkInProgress.ref, oldWorkInProgress === returnFiber.child)
            returnFiber.child = newWorkInProgress;
          else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null)
              throw new Error("Expected parent to have a child.");
            for (; prevSibling.sibling !== oldWorkInProgress; )
              if (prevSibling = prevSibling.sibling, prevSibling === null)
                throw new Error("Expected to find the previous sibling.");
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          return deletions === null ? (returnFiber.deletions = [current2], returnFiber.flags |= ChildDeletion) : deletions.push(current2), newWorkInProgress.flags |= Placement, newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        return !!includesSomeLane(updateLanes, renderLanes2);
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root2 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component9 = workInProgress2.type;
            isContextProvider(Component9) && pushContextProvider(workInProgress2);
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value, context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              hasChildWork && (workInProgress2.flags |= Update);
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null)
                return pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current)), workInProgress2.flags |= DidCapture, null;
              var primaryChildFragment = workInProgress2.child, primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes))
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              return child !== null ? child.sibling : null;
            } else
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags, _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork)
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null && (renderState.rendering = null, renderState.tail = null, renderState.lastEffect = null), pushSuspenseContext(workInProgress2, suspenseStackCursor.current), _hasChildWork)
              break;
            return null;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return workInProgress2.lanes = NoLanes, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        if (workInProgress2._debugNeedsRemount && current2 !== null)
          return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
        if (current2 !== null) {
          var oldProps = current2.memoizedProps, newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
          workInProgress2.type !== current2.type)
            didReceiveUpdate = true;
          else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
            // may not be work scheduled on `current`, so we check for this flag.
            (workInProgress2.flags & DidCapture) === NoFlags)
              return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags ? didReceiveUpdate = true : didReceiveUpdate = false;
          }
        } else if (didReceiveUpdate = false, getIsHydrating() && isForkedChild(workInProgress2)) {
          var slotIndex = workInProgress2.index, numberOfForks = getForksAtLevel();
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
        switch (workInProgress2.lanes = NoLanes, workInProgress2.tag) {
          case IndeterminateComponent:
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component9 = workInProgress2.type, unresolvedProps = workInProgress2.pendingProps, resolvedProps = workInProgress2.elementType === Component9 ? unresolvedProps : resolveDefaultProps(Component9, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component9, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type, _unresolvedProps = workInProgress2.pendingProps, _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type, _unresolvedProps2 = workInProgress2.pendingProps, _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment7:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type, _unresolvedProps3 = workInProgress2.pendingProps, _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = _type2.propTypes;
              outerPropTypes && checkPropTypes(
                outerPropTypes,
                _resolvedProps3,
                // Resolved for outer only
                "prop",
                getComponentNameFromType(_type2)
              );
            }
            return _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3), updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent:
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type, _unresolvedProps4 = workInProgress2.pendingProps, _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent:
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          case ScopeComponent:
            break;
          case OffscreenComponent:
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic;
      }
      var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
      appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        for (var node = workInProgress2.child; node !== null; ) {
          if (node.tag === HostComponent || node.tag === HostText)
            appendInitialChild(parent, node.stateNode);
          else if (node.tag !== HostPortal) {
            if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
          }
          if (node === workInProgress2)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === workInProgress2)
              return;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }, updateHostContainer = function(current2, workInProgress2) {
      }, updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
        var oldProps = current2.memoizedProps;
        if (oldProps !== newProps) {
          var instance = workInProgress2.stateNode, currentHostContext = getHostContext(), updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload, updatePayload && markUpdate(workInProgress2);
        }
      }, updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        oldText !== newText && markUpdate(workInProgress2);
      };
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!getIsHydrating())
          switch (renderState.tailMode) {
            case "hidden": {
              for (var tailNode = renderState.tail, lastTailNode = null; tailNode !== null; )
                tailNode.alternate !== null && (lastTailNode = tailNode), tailNode = tailNode.sibling;
              lastTailNode === null ? renderState.tail = null : lastTailNode.sibling = null;
              break;
            }
            case "collapsed": {
              for (var _tailNode = renderState.tail, _lastTailNode = null; _tailNode !== null; )
                _tailNode.alternate !== null && (_lastTailNode = _tailNode), _tailNode = _tailNode.sibling;
              _lastTailNode === null ? !hasRenderedATailFallback && renderState.tail !== null ? renderState.tail.sibling = null : renderState.tail = null : _lastTailNode.sibling = null;
              break;
            }
          }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child, newChildLanes = NoLanes, subtreeFlags = NoFlags;
        if (didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; _child2 !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)), subtreeFlags |= _child2.subtreeFlags & StaticMask, subtreeFlags |= _child2.flags & StaticMask, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else
            for (var _child3 = completedWork.child; _child3 !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)), subtreeFlags |= _child3.subtreeFlags & StaticMask, subtreeFlags |= _child3.flags & StaticMask, _child3.return = completedWork, _child3 = _child3.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var actualDuration = completedWork.actualDuration, treeBaseDuration = completedWork.selfBaseDuration, child = completedWork.child; child !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes)), subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, actualDuration += child.actualDuration, treeBaseDuration += child.treeBaseDuration, child = child.sibling;
            completedWork.actualDuration = actualDuration, completedWork.treeBaseDuration = treeBaseDuration;
          } else
            for (var _child = completedWork.child; _child !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes)), subtreeFlags |= _child.subtreeFlags, subtreeFlags |= _child.flags, _child.return = completedWork, _child = _child.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
        }
        return completedWork.childLanes = newChildLanes, didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags)
          return warnIfUnhydratedTailNodes(workInProgress2), resetHydrationState(), workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture, false;
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null)
          if (current2 === null) {
            if (!wasHydrated)
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            if (prepareToHydrateHostSuspenseInstance(workInProgress2), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
              var isTimedOutSuspense = nextState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration);
              }
            }
            return false;
          } else {
            if (resetHydrationState(), (workInProgress2.flags & DidCapture) === NoFlags && (workInProgress2.memoizedState = null), workInProgress2.flags |= Update, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
              var _isTimedOutSuspense = nextState !== null;
              if (_isTimedOutSuspense) {
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration);
              }
            }
            return false;
          }
        else
          return upgradeHydrationErrorsToRecoverable(), true;
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        switch (popTreeContext(workInProgress2), workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment7:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return bubbleProperties(workInProgress2), null;
          case ClassComponent: {
            var Component9 = workInProgress2.type;
            return isContextProvider(Component9) && popContext(workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            if (popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions(), fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated)
                markUpdate(workInProgress2);
              else if (current2 !== null) {
                var prevState = current2.memoizedState;
                (!prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                (workInProgress2.flags & ForceClientRender) !== NoFlags) && (workInProgress2.flags |= Snapshot, upgradeHydrationErrorsToRecoverable());
              }
            }
            return updateHostContainer(current2, workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer(), type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null)
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance), current2.ref !== workInProgress2.ref && markRef$1(workInProgress2);
            else {
              if (!newProps) {
                if (workInProgress2.stateNode === null)
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                return bubbleProperties(workInProgress2), null;
              }
              var currentHostContext = getHostContext(), _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated)
                prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext) && markUpdate(workInProgress2);
              else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false), workInProgress2.stateNode = instance, finalizeInitialChildren(instance, type, newProps, rootContainerInstance) && markUpdate(workInProgress2);
              }
              workInProgress2.ref !== null && markRef$1(workInProgress2);
            }
            return bubbleProperties(workInProgress2), null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText != "string" && workInProgress2.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              var _rootContainerInstance = getRootHostContainer(), _currentHostContext = getHostContext(), _wasHydrated2 = popHydrationState(workInProgress2);
              _wasHydrated2 ? prepareToHydrateHostTextInstance(workInProgress2) && markUpdate(workInProgress2) : workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
            }
            return bubbleProperties(workInProgress2), null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath)
                return workInProgress2.flags & ShouldCapture ? workInProgress2 : null;
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags)
              return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
            var nextDidTimeout = nextState !== null, prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout && nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              if (_offscreenFiber2.flags |= Visibility, (workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext) ? renderDidSuspend() : renderDidSuspendDelayIfPossible();
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null && (workInProgress2.flags |= Update), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && nextDidTimeout) {
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration);
            }
            return null;
          }
          case HostPortal:
            return popHostContainer(workInProgress2), updateHostContainer(current2, workInProgress2), current2 === null && preparePortalMount(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            return popProvider(context, workInProgress2), bubbleProperties(workInProgress2), null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            return isContextProvider(_Component) && popContext(workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null)
              return bubbleProperties(workInProgress2), null;
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags, renderedTail = renderState.rendering;
            if (renderedTail === null)
              if (didSuspendAlready)
                cutOffTailIfNeeded(renderState, false);
              else {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended)
                  for (var row = workInProgress2.child; row !== null; ) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true, workInProgress2.flags |= DidCapture, cutOffTailIfNeeded(renderState, false);
                      var newThenables = suspended.updateQueue;
                      return newThenables !== null && (workInProgress2.updateQueue = newThenables, workInProgress2.flags |= Update), workInProgress2.subtreeFlags = NoFlags, resetChildFibers(workInProgress2, renderLanes2), pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)), workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                renderState.tail !== null && now() > getRenderTargetTime() && (workInProgress2.flags |= DidCapture, didSuspendAlready = true, cutOffTailIfNeeded(renderState, false), workInProgress2.lanes = SomeRetryLane);
              }
            else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture, didSuspendAlready = true;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null && (workInProgress2.updateQueue = _newThenables, workInProgress2.flags |= Update), cutOffTailIfNeeded(renderState, true), renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating())
                    return bubbleProperties(workInProgress2), null;
                } else
                  now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane && (workInProgress2.flags |= DidCapture, didSuspendAlready = true, cutOffTailIfNeeded(renderState, false), workInProgress2.lanes = SomeRetryLane);
              }
              if (renderState.isBackwards)
                renderedTail.sibling = workInProgress2.child, workInProgress2.child = renderedTail;
              else {
                var previousSibling = renderState.last;
                previousSibling !== null ? previousSibling.sibling = renderedTail : workInProgress2.child = renderedTail, renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next, renderState.tail = next.sibling, renderState.renderingStartTime = now(), next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              return didSuspendAlready ? suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback) : suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), next;
            }
            return bubbleProperties(workInProgress2), null;
          }
          case ScopeComponent:
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState, nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState, prevIsHidden = _prevState !== null;
              prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
              !enableLegacyHidden && (workInProgress2.flags |= Visibility);
            }
            return !nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode ? bubbleProperties(workInProgress2) : includesSomeLane(subtreeRenderLanes, OffscreenLane) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & (Placement | Update) && (workInProgress2.flags |= Visibility)), null;
          }
          case CacheComponent:
            return null;
          case TracingMarkerComponent:
            return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        switch (popTreeContext(workInProgress2), workInProgress2.tag) {
          case ClassComponent: {
            var Component9 = workInProgress2.type;
            isContextProvider(Component9) && popContext(workInProgress2);
            var flags22 = workInProgress2.flags;
            return flags22 & ShouldCapture ? (workInProgress2.flags = flags22 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          }
          case HostRoot: {
            var root2 = workInProgress2.stateNode;
            popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            return (_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags ? (workInProgress2.flags = _flags & ~ShouldCapture | DidCapture, workInProgress2) : null;
          }
          case HostComponent:
            return popHostContext(workInProgress2), null;
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null)
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            return _flags2 & ShouldCapture ? (workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          }
          case SuspenseListComponent:
            return popSuspenseContext(workInProgress2), null;
          case HostPortal:
            return popHostContainer(workInProgress2), null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            return popProvider(context, workInProgress2), null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return popRenderLanes(workInProgress2), null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        switch (popTreeContext(interruptedWork), interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            childContextTypes != null && popContext(interruptedWork);
            break;
          }
          case HostRoot: {
            var root2 = interruptedWork.stateNode;
            popHostContainer(interruptedWork), popTopLevelContextObject(interruptedWork), resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
      var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, PossiblyWeakSet = typeof WeakSet == "function" ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        invokeGuardedCallback(null, function() {
          throw error2;
        }), clearCaughtError();
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        if (instance.props = current2.memoizedProps, instance.state = current2.memoizedState, current2.mode & ProfileMode)
          try {
            startLayoutEffectTimer(), instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        else
          instance.componentWillUnmount();
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout3, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null)
          if (typeof ref == "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              else
                retVal = ref(null);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            typeof retVal == "function" && error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
          } else
            ref.current = null;
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var focusedInstanceHandle = null, shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root2, firstChild) {
        focusedInstanceHandle = prepareForCommit(root2.containerInfo), nextEffect = firstChild, commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        return shouldFireAfterActiveInstanceBlur = false, focusedInstanceHandle = null, shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, child = fiber.child;
          (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null ? (child.return = fiber, nextEffect = child) : commitBeforeMutationEffects_complete();
        }
      }
      function commitBeforeMutationEffects_complete() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate, flags22 = finishedWork.flags;
        if ((flags22 & Snapshot) !== NoFlags) {
          switch (setCurrentFiber(finishedWork), finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              break;
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps, prevState = current2.memoizedState, instance = finishedWork.stateNode;
                finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  snapshot === void 0 && !didWarnSet.has(finishedWork.type) && (didWarnSet.add(finishedWork.type), error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork)));
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags22, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next, effect = firstEffect;
          do {
            if ((effect.tag & flags22) === flags22) {
              var destroy = effect.destroy;
              effect.destroy = void 0, destroy !== void 0 && ((flags22 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectUnmountStarted(finishedWork) : (flags22 & Layout3) !== NoFlags$1 && markComponentLayoutEffectUnmountStarted(finishedWork), (flags22 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(true), safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy), (flags22 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(false), (flags22 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectUnmountStopped() : (flags22 & Layout3) !== NoFlags$1 && markComponentLayoutEffectUnmountStopped());
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags22, finishedWork) {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next, effect = firstEffect;
          do {
            if ((effect.tag & flags22) === flags22) {
              (flags22 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectMountStarted(finishedWork) : (flags22 & Layout3) !== NoFlags$1 && markComponentLayoutEffectMountStarted(finishedWork);
              var create = effect.create;
              (flags22 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(true), effect.destroy = create(), (flags22 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(false), (flags22 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectMountStopped() : (flags22 & Layout3) !== NoFlags$1 && markComponentLayoutEffectMountStopped();
              {
                var destroy = effect.destroy;
                if (destroy !== void 0 && typeof destroy != "function") {
                  var hookName = void 0;
                  (effect.tag & Layout3) !== NoFlags ? hookName = "useLayoutEffect" : (effect.tag & Insertion) !== NoFlags ? hookName = "useInsertionEffect" : hookName = "useEffect";
                  var addendum = void 0;
                  destroy === null ? addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof destroy.then == "function" ? addendum = `

It looks like you wrote ` + hookName + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + hookName + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : addendum = " You returned: " + destroy, error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        if ((finishedWork.flags & Update) !== NoFlags)
          switch (finishedWork.tag) {
            case Profiler: {
              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration, _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit, commitTime2 = getCommitTime(), phase = finishedWork.alternate === null ? "mount" : "update";
              isCurrentUpdateNested() && (phase = "nested-update"), typeof onPostCommit == "function" && onPostCommit(id, phase, passiveEffectDuration, commitTime2);
              var parentFiber = finishedWork.return;
              outer:
                for (; parentFiber !== null; ) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root2 = parentFiber.stateNode;
                      root2.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
              break;
            }
          }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags)
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden)
                if (finishedWork.mode & ProfileMode)
                  try {
                    startLayoutEffectTimer(), commitHookEffectListMount(Layout3 | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                else
                  commitHookEffectListMount(Layout3 | HasEffect, finishedWork);
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update && !offscreenSubtreeWasHidden)
                if (current2 === null)
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidMount();
                else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps), prevState = current2.memoizedState;
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              var updateQueue = finishedWork.updateQueue;
              updateQueue !== null && (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), commitUpdateQueue(finishedWork, updateQueue, instance));
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null)
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type, props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText:
              break;
            case HostPortal:
              break;
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender, effectDuration = finishedWork.stateNode.effectDuration, commitTime2 = getCommitTime(), phase = current2 === null ? "mount" : "update";
                isCurrentUpdateNested() && (phase = "nested-update"), typeof onRender == "function" && onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                {
                  typeof onCommit == "function" && onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2), enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    for (; parentFiber !== null; ) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
              break;
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        offscreenSubtreeWasHidden || finishedWork.flags & Ref && commitAttachRef(finishedWork);
      }
      function reappearLayoutEffectsOnFiber(node) {
        switch (node.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), safelyCallCommitHookLayoutEffectListMount(node, node.return);
              } finally {
                recordLayoutEffectDuration(node);
              }
            else
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            break;
          }
          case ClassComponent: {
            var instance = node.stateNode;
            typeof instance.componentDidMount == "function" && safelyCallComponentDidMount(node, node.return, instance), safelyAttachRef(node, node.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node, node.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        for (var hostSubtreeRoot = null, node = finishedWork; ; ) {
          if (node.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node;
              try {
                var instance = node.stateNode;
                isHidden ? hideInstance(instance) : unhideInstance(node.stateNode, node.memoizedProps);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else if (node.tag === HostText) {
            if (hostSubtreeRoot === null)
              try {
                var _instance3 = node.stateNode;
                isHidden ? hideTextInstance(_instance3) : unhideTextInstance(_instance3, node.memoizedProps);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
          } else if (!((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)) {
            if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
          }
          if (node === finishedWork)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return;
            hostSubtreeRoot === node && (hostSubtreeRoot = null), node = node.return;
          }
          hostSubtreeRoot === node && (hostSubtreeRoot = null), node.sibling.return = node.return, node = node.sibling;
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode, instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = instance;
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref == "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            else
              retVal = ref(instanceToUse);
            typeof retVal == "function" && error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
          } else
            ref.hasOwnProperty("current") || error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork)), ref.current = instanceToUse;
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        alternate !== null && (alternate.return = null), fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        alternate !== null && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        {
          if (fiber.child = null, fiber.deletions = null, fiber.sibling = null, fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            hostInstance !== null && detachDeletedInstance(hostInstance);
          }
          fiber.stateNode = null, fiber._debugOwner = null, fiber.return = null, fiber.dependencies = null, fiber.memoizedProps = null, fiber.memoizedState = null, fiber.pendingProps = null, fiber.stateNode = null, fiber.updateQueue = null;
        }
      }
      function getHostParentFiber(fiber) {
        for (var parent = fiber.return; parent !== null; ) {
          if (isHostParent(parent))
            return parent;
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          for (; ; ) {
            for (; node.sibling === null; ) {
              if (node.return === null || isHostParent(node.return))
                return null;
              node = node.return;
            }
            for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment; ) {
              if (node.flags & Placement || node.child === null || node.tag === HostPortal)
                continue siblings;
              node.child.return = node, node = node.child;
            }
            if (!(node.flags & Placement))
              return node.stateNode;
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            parentFiber.flags & ContentReset && (resetTextContent(parent), parentFiber.flags &= ~ContentReset);
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo, _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          before ? insertInContainerBefore(parent, stateNode, before) : appendChildToContainer(parent, stateNode);
        } else if (tag !== HostPortal) {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            for (var sibling = child.sibling; sibling !== null; )
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent), sibling = sibling.sibling;
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          before ? insertBefore(parent, stateNode, before) : appendChild(parent, stateNode);
        } else if (tag !== HostPortal) {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            for (var sibling = child.sibling; sibling !== null; )
              insertOrAppendPlacementNode(sibling, before, parent), sibling = sibling.sibling;
          }
        }
      }
      var hostParent = null, hostParentIsContainer = false;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            for (; parent !== null; ) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode, hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo, hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo, hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null)
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber), hostParent = null, hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (var child = parent.child; child !== null; )
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child), child = child.sibling;
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        switch (onCommitUnmount(deletedFiber), deletedFiber.tag) {
          case HostComponent:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          case HostText: {
            {
              var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = prevHostParent, hostParentIsContainer = prevHostParentIsContainer, hostParent !== null && (hostParentIsContainer ? removeChildFromContainer(hostParent, deletedFiber.stateNode) : removeChild(hostParent, deletedFiber.stateNode));
            }
            return;
          }
          case DehydratedFragment: {
            hostParent !== null && (hostParentIsContainer ? clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent, _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo, hostParentIsContainer = true, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = _prevHostParent, hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next, effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    destroy !== void 0 && ((tag & Insertion) !== NoFlags$1 ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : (tag & Layout3) !== NoFlags$1 && (markComponentLayoutEffectUnmountStarted(deletedFiber), deletedFiber.mode & ProfileMode ? (startLayoutEffectTimer(), safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), recordLayoutEffectDuration(deletedFiber)) : safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), markComponentLayoutEffectUnmountStopped())), effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (
              // TODO: Remove this dead flag
              deletedFiber.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              suspenseInstance !== null && commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          retryCache === null && (retryCache = finishedWork.stateNode = new PossiblyWeakSet()), wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              if (retryCache.add(wakeable), isDevToolsPresent)
                if (inProgressLanes !== null && inProgressRoot !== null)
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                else
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes, inProgressRoot = root2, setCurrentFiber(finishedWork), commitMutationEffectsOnFiber(finishedWork, root2), setCurrentFiber(finishedWork), inProgressLanes = null, inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null)
          for (var i = 0; i < deletions.length; i++) {
            var childToDelete = deletions[i];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask)
          for (var child = parentFiber.child; child !== null; )
            setCurrentFiber(child), commitMutationEffectsOnFiber(child, root2), child = child.sibling;
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate, flags22 = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags22 & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return), commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(Layout3 | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else
                try {
                  commitHookEffectListUnmount(Layout3 | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags22 & Ref && current2 !== null && safelyDetachRef(current2, current2.return);
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags22 & Ref && current2 !== null && safelyDetachRef(current2, current2.return);
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags22 & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps, oldProps = current2 !== null ? current2.memoizedProps : newProps, type = finishedWork.type, updatePayload = finishedWork.updateQueue;
                  if (finishedWork.updateQueue = null, updatePayload !== null)
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                }
              }
            }
            return;
          }
          case HostText: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags22 & Update) {
              if (finishedWork.stateNode === null)
                throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              var textInstance = finishedWork.stateNode, newText = finishedWork.memoizedProps, oldText = current2 !== null ? current2.memoizedProps : newText;
              try {
                commitTextUpdate(textInstance, oldText, newText);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
            return;
          }
          case HostRoot: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags22 & Update && current2 !== null) {
              var prevRootState = current2.memoizedState;
              if (prevRootState.isDehydrated)
                try {
                  commitHydratedContainer(root2.containerInfo);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode, newState = offscreenFiber.memoizedState, isHidden = newState !== null;
              if (offscreenInstance.isHidden = isHidden, isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                wasHidden || markCommitTimeOfFallback();
              }
            }
            if (flags22 & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (
              // TODO: Remove this dead flag
              finishedWork.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden, recursivelyTraverseMutationEffects(root2, finishedWork), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else
              recursivelyTraverseMutationEffects(root2, finishedWork);
            if (commitReconciliationEffects(finishedWork), flags22 & Visibility) {
              var _offscreenInstance = finishedWork.stateNode, _newState = finishedWork.memoizedState, _isHidden = _newState !== null, offscreenBoundary = finishedWork;
              if (_offscreenInstance.isHidden = _isHidden, _isHidden && !_wasHidden && (offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                nextEffect = offscreenBoundary;
                for (var offscreenChild = offscreenBoundary.child; offscreenChild !== null; )
                  nextEffect = offscreenChild, disappearLayoutEffects_begin(offscreenChild), offscreenChild = offscreenChild.sibling;
              }
              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags22 & Update && attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case ScopeComponent:
            return;
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags22 = finishedWork.flags;
        if (flags22 & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        flags22 & Hydrating && (finishedWork.flags &= ~Hydrating);
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes, inProgressRoot = root2, nextEffect = finishedWork, commitLayoutEffects_begin(finishedWork, root2, committedLanes), inProgressLanes = null, inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        for (var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null, newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate, wasHidden = current2 !== null && current2.memoizedState !== null, newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden, offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden && (nextEffect = fiber, reappearLayoutEffects_begin(fiber));
              for (var child = firstChild; child !== null; )
                nextEffect = child, commitLayoutEffects_begin(
                  child,
                  // New root; bubble back up to here and stop.
                  root2,
                  committedLanes
                ), child = child.sibling;
              nextEffect = fiber, offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden, commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          (fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(Layout3, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              else
                commitHookEffectListUnmount(Layout3, fiber, fiber.return);
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : disappearLayoutEffects_complete(subtreeRoot);
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : reappearLayoutEffects_complete(subtreeRoot);
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          if (resetCurrentFiber(), fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork, commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          (fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild, commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var fiberToDelete = deletions[i];
                nextEffect = fiberToDelete, commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null, detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          (fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null ? (child.return = fiber, nextEffect = child) : commitPassiveUnmountEffects_complete();
        }
      }
      function commitPassiveUnmountEffects_complete() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          (fiber.flags & Passive) !== NoFlags && (setCurrentFiber(fiber), commitPassiveUnmountOnFiber(fiber), resetCurrentFiber());
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            finishedWork.mode & ProfileMode ? (startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return), recordPassiveEffectDuration(finishedWork)) : commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber), commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor), resetCurrentFiber();
          var child = fiber.child;
          child !== null ? (child.return = fiber, nextEffect = child) : commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, sibling = fiber.sibling, returnFiber = fiber.return;
          if (detachFiberAfterEffects(fiber), fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
          if (sibling !== null) {
            sibling.return = returnFiber, nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            current2.mode & ProfileMode ? (startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor), recordPassiveEffectDuration(current2)) : commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Layout3 | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Layout3 | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            break;
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            try {
              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
        }
      }
      var COMPONENT_TYPE = 0, HAS_PSEUDO_CLASS_TYPE = 1, ROLE_TYPE = 2, TEST_NAME_TYPE = 3, TEXT_TYPE = 4;
      if (typeof Symbol == "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component"), HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class"), ROLE_TYPE = symbolFor("selector.role"), TEST_NAME_TYPE = symbolFor("selector.test_id"), TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
          ), jestIsDefined = typeof jest < "u";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
          );
          return !isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null && error("The current testing environment is not configured to support act(...)"), isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil, ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue, NoContext = (
        /*             */
        0
      ), BatchedContext = (
        /*               */
        1
      ), RenderContext = (
        /*                */
        2
      ), CommitContext = (
        /*                */
        4
      ), RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootCompleted = 5, RootDidNotComplete = 6, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes, subtreeRenderLanes = NoLanes, subtreeRenderLanesCursor = createCursor(NoLanes), workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootIncludedLanes = NoLanes, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 500, workInProgressRootRenderTargetTime = 1 / 0, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false, firstUncaughtError = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, pendingPassiveProfilerEffects = [], pendingPassiveTransitions = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = false, didScheduleUpdateDuringPassiveEffects = false, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext ? now() : (currentEventTime !== NoTimestamp || (currentEventTime = now()), currentEventTime);
      }
      function requestUpdateLane(fiber) {
        var mode2 = fiber.mode;
        if ((mode2 & ConcurrentMode) === NoMode)
          return SyncLane;
        if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes)
          return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber);
          }
          return currentEventTransitionLane === NoLane && (currentEventTransitionLane = claimNextTransitionLane()), currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane)
          return updateLane;
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode2 = fiber.mode;
        return (mode2 & ConcurrentMode) === NoMode ? SyncLane : claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates(), isRunningInsertionEffect && error("useInsertionEffect must not schedule updates."), isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true), markRootUpdated(root2, lane, eventTime), (executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot ? warnAboutRenderPhaseUpdatesInDEV(fiber) : (isDevToolsPresent && addFiberToLanesMap(root2, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane)), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended$1(root2, workInProgressRootRenderLanes)), ensureRootIsScheduled(root2, eventTime), lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy && (resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode()));
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane, markRootUpdated(root2, lane, eventTime), ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (
          // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
          // decided not to enable it.
          (executionContext & RenderContext) !== NoContext
        );
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          existingCallbackNode !== null && cancelCallback$1(existingCallbackNode), root2.callbackNode = null, root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes), existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
        // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          existingCallbackNode == null && existingCallbackPriority !== SyncLane && error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        existingCallbackNode != null && cancelCallback$1(existingCallbackNode);
        var newCallbackNode;
        if (newCallbackPriority === SyncLane)
          root2.tag === LegacyRoot ? (ReactCurrentActQueue$1.isBatchingLegacy !== null && (ReactCurrentActQueue$1.didScheduleLegacyUpdate = true), scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2))) : scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2)), ReactCurrentActQueue$1.current !== null ? ReactCurrentActQueue$1.current.push(flushSyncCallbacks) : scheduleMicrotask(function() {
            (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
          }), newCallbackNode = null;
        else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority, root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        if (resetNestedUpdateFlag(), currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        var originalCallbackNode = root2.callbackNode, didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects && root2.callbackNode !== originalCallbackNode)
          return null;
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes)
          return null;
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout, exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            errorRetryLanes !== NoLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes));
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), fatalError;
          }
          if (exitStatus === RootDidNotComplete)
            markRootSuspended$1(root2, lanes);
          else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes), finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              if (exitStatus = renderRootSync(root2, lanes), exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                _errorRetryLanes !== NoLanes && (lanes = _errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes));
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), _fatalError;
              }
            }
            root2.finishedWork = finishedWork, root2.finishedLanes = lanes, finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        return ensureRootIsScheduled(root2, now()), root2.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root2) : null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender, errorHydratingContainer(root2.containerInfo);
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt, errorsFromSecondAttempt !== null && queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        workInProgressRootRecoverableErrors === null ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored:
            throw new Error("Root did not complete. This is a bug in React.");
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            if (markRootSuspended$1(root2, lanes), includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
            !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes)
                  break;
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            if (markRootSuspended$1(root2, lanes), includesOnlyTransitions(lanes))
              break;
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes), eventTimeMs = mostRecentEventTime, timeElapsedMs = now() - eventTimeMs, _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default:
            throw new Error("Unknown root exit status.");
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node = finishedWork; ; ) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null)
                for (var i = 0; i < checks.length; i++) {
                  var check2 = checks[i], getSnapshot = check2.getSnapshot, renderedValue = check2.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue))
                      return false;
                  } catch {
                    return false;
                  }
                }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node, node = child;
            continue;
          }
          if (node === finishedWork)
            return true;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return true;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return true;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes), suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes), markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        if (syncNestedUpdateFlag(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane))
          return ensureRootIsScheduled(root2, now()), null;
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          errorRetryLanes !== NoLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes));
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), fatalError;
        }
        if (exitStatus === RootDidNotComplete)
          throw new Error("Root did not complete. This is a bug in React.");
        var finishedWork = root2.current.alternate;
        return root2.finishedWork = finishedWork, root2.finishedLanes = lanes, commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions), ensureRootIsScheduled(root2, now()), null;
      }
      function flushRoot(root2, lanes) {
        lanes !== NoLanes && (markRootEntangled(root2, mergeLanes(lanes, SyncLane)), ensureRootIsScheduled(root2, now()), (executionContext & (RenderContext | CommitContext)) === NoContext && (resetRenderTimer(), flushSyncCallbacks()));
      }
      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext, executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
          !ReactCurrentActQueue$1.isBatchingLegacy && (resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode());
        }
      }
      function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn(a, b, c, d);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext === NoContext && resetRenderTimer();
        }
      }
      function flushSync(fn) {
        rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext && flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn ? fn() : void 0;
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext = prevExecutionContext, (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber), subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes), workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current, pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null, root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout && (root2.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle)), workInProgress !== null)
          for (var interruptedWork = workInProgress.return; interruptedWork !== null; ) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork), interruptedWork = interruptedWork.return;
          }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        return workInProgress = rootWorkInProgress, workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes, workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, finishQueueingConcurrentUpdates(), ReactStrictModeWarnings.discardPendingWarnings(), rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            if (resetContextDependencies(), resetHooksAfterThrow(), resetCurrentFiber(), ReactCurrentOwner$2.current = null, erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored, workInProgressRootFatalError = thrownValue, workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true), enableSchedulingProfiler)
              if (markComponentRenderStopped(), thrownValue !== null && typeof thrownValue == "object" && typeof thrownValue.then == "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes), completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue, workInProgress === erroredWork && erroredWork !== null ? (erroredWork = erroredWork.return, workInProgress = erroredWork) : erroredWork = workInProgress;
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        return ReactCurrentDispatcher$2.current = ContextOnlyDispatcher, prevDispatcher === null ? ContextOnlyDispatcher : prevDispatcher;
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended);
      }
      function renderDidSuspendDelayIfPossible() {
        (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) && (workInProgressRootExitStatus = RootSuspendedWithDelay), workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) && markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
      function renderDidError(error2) {
        workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored), workInProgressRootConcurrentErrors === null ? workInProgressRootConcurrentErrors = [error2] : workInProgressRootConcurrentErrors.push(error2);
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.size > 0 && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear()), movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = getTransitionsForLanes(), prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        do
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        while (true);
        if (resetContextDependencies(), executionContext = prevExecutionContext, popDispatcher(prevDispatcher), workInProgress !== null)
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        return markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus;
      }
      function workLoopSync() {
        for (; workInProgress !== null; )
          performUnitOfWork(workInProgress);
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.size > 0 && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear()), movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = getTransitionsForLanes(), resetRenderTimer(), prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        do
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        while (true);
        return resetContextDependencies(), popDispatcher(prevDispatcher), executionContext = prevExecutionContext, workInProgress !== null ? (markRenderYielded(), RootInProgress) : (markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus);
      }
      function workLoopConcurrent() {
        for (; workInProgress !== null && !shouldYield(); )
          performUnitOfWork(workInProgress);
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true)) : next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), resetCurrentFiber(), unitOfWork.memoizedProps = unitOfWork.pendingProps, next === null ? completeUnitOfWork(unitOfWork) : workInProgress = next, ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate, returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode ? next = completeWork(current2, completedWork, subtreeRenderLanes) : (startProfilerTimer(completedWork), next = completeWork(current2, completedWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(completedWork, false)), resetCurrentFiber(), next !== null) {
              workInProgress = next;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask, workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              for (var actualDuration = completedWork.actualDuration, child = completedWork.child; child !== null; )
                actualDuration += child.actualDuration, child = child.sibling;
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null)
              returnFiber.flags |= Incomplete, returnFiber.subtreeFlags = NoFlags, returnFiber.deletions = null;
            else {
              workInProgressRootExitStatus = RootDidNotComplete, workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber, workInProgress = completedWork;
        } while (completedWork !== null);
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition, setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do
          flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null);
        if (flushRenderPhaseStrictModeWarningsInDEV(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        var finishedWork = root2.finishedWork, lanes = root2.finishedLanes;
        if (markCommitStarted(lanes), finishedWork === null)
          return markCommitStopped(), null;
        if (lanes === NoLanes && error("root.finishedLanes should not be empty during a commit. This is a bug in React."), root2.finishedWork = null, root2.finishedLanes = NoLanes, finishedWork === root2.current)
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        root2.callbackNode = null, root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes), root2 === workInProgressRoot && (workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes), ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) && (rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, pendingPassiveTransitions = transitions, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        })));
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags, rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext, ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
          recordCommitTime(), commitMutationEffects(root2, finishedWork, lanes), resetAfterCommit(root2.containerInfo), root2.current = finishedWork, markLayoutEffectsStarted(lanes), commitLayoutEffects(finishedWork, root2, lanes), markLayoutEffectsStopped(), requestPaint(), executionContext = prevExecutionContext, setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
        } else
          root2.current = finishedWork, recordCommitTime();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root2, pendingPassiveEffectsLanes = lanes) : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null), remainingLanes = root2.pendingLanes, remainingLanes === NoLanes && (legacyErrorBoundariesThatAlreadyFailed = null), rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root2.current, false), onCommitRoot(finishedWork.stateNode, renderPriorityLevel), isDevToolsPresent && root2.memoizedUpdaters.clear(), onCommitRoot$1(), ensureRootIsScheduled(root2, now()), recoverableErrors !== null)
          for (var onRecoverableError = root2.onRecoverableError, i = 0; i < recoverableErrors.length; i++) {
            var recoverableError = recoverableErrors[i], componentStack = recoverableError.stack, digest2 = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest: digest2
            });
          }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          throw firstUncaughtError = null, error$1;
        }
        return includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot && flushPassiveEffects(), remainingLanes = root2.pendingLanes, includesSomeLane(remainingLanes, SyncLane) ? (markNestedUpdateScheduled(), root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2)) : nestedUpdateCount = 0, flushSyncCallbacks(), markCommitStopped(), null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), priority = lowerEventPriority(DefaultEventPriority, renderPriority), prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
          try {
            return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(priority), flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber), rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        }));
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null)
          return false;
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
        if (rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true, didScheduleUpdateDuringPassiveEffects = false, markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext, commitPassiveUnmountEffects(root2.current), commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i = 0; i < profilerEffects.length; i++) {
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        markPassiveEffectsStopped(), commitDoubleInvokeEffectsInDEV(root2.current, true), executionContext = prevExecutionContext, flushSyncCallbacks(), didScheduleUpdateDuringPassiveEffects ? root2 === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root2) : nestedPassiveUpdateCount = 0, isFlushingPassiveEffects = false, didScheduleUpdateDuringPassiveEffects = false, onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        legacyErrorBoundariesThatAlreadyFailed === null ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
      function prepareToThrowUncaughtError(error2) {
        hasUncaughtError || (hasUncaughtError = true, firstUncaughtError = error2);
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber), update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane), root2 = enqueueUpdate(rootFiber, update, SyncLane), eventTime = requestEventTime();
        root2 !== null && (markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime));
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        if (reportUncaughtErrorInDEV(error$1), setIsRunningInsertionEffect(false), sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        for (fiber = nearestMountedAncestor; fiber !== null; ) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type, instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError == "function" || typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber), update = createClassErrorUpdate(fiber, errorInfo, SyncLane), root2 = enqueueUpdate(fiber, update, SyncLane), eventTime = requestEventTime();
              root2 !== null && (markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime));
              return;
            }
          }
          fiber = fiber.return;
        }
        error(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, error$1);
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        pingCache !== null && pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes), warnIfSuspenseResolutionNotWrappedWithActDEV(root2), workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes) && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root2, NoLanes) : workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes)), ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        retryLane === NoLane && (retryLane = requestRetryLane(boundaryFiber));
        var eventTime = requestEventTime(), root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        root2 !== null && (markRootUpdated(root2, retryLane, eventTime), ensureRootIsScheduled(root2, eventTime));
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = NoLane;
        suspenseState !== null && (retryLane = suspenseState.retryLane), retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane, retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            suspenseState !== null && (retryLane = suspenseState.retryLane);
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        retryCache !== null && retryCache.delete(wakeable), retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
          throw nestedUpdateCount = 0, rootWithNestedUpdates = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning(), ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        setCurrentFiber(fiber), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV), hasPassiveEffects && invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV), hasPassiveEffects && invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV), resetCurrentFiber();
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        for (var current2 = firstChild, subtreeRoot = null; current2 !== null; ) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags ? current2 = current2.child : ((current2.flags & fiberFlags) !== NoFlags && invokeEffectFn(current2), current2.sibling !== null ? current2 = current2.sibling : current2 = subtreeRoot = current2.return);
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext || !(fiber.mode & ConcurrentMode))
            return;
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent)
            return;
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName))
              return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else
            didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
          var previousFiber = current;
          try {
            setCurrentFiber(fiber), error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError == "object" && typeof originalError.then == "function")
              throw originalError;
            if (resetContextDependencies(), resetHooksAfterThrow(), unwindInterruptedWork(current2, unitOfWork), assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy), unitOfWork.mode & ProfileMode && startProfilerTimer(unitOfWork), invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes), hasCaughtError()) {
              var replayError = clearCaughtError();
              typeof replayError == "object" && replayError !== null && replayError._suppressLogging && typeof originalError == "object" && originalError !== null && !originalError._suppressLogging && (originalError._suppressLogging = true);
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false, didWarnAboutUpdateInRenderForAnotherComponent;
      didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV())
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown", dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
            case ClassComponent: {
              didWarnAboutUpdateInRender || (error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = true);
              break;
            }
          }
      }
      function restorePendingUpdaters(root2, lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root2, schedulingFiber, lanes);
          });
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          return actQueue !== null ? (actQueue.push(callback), fakeActCallbackNode) : scheduleCallback(priorityLevel, callback);
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode !== fakeActCallbackNode)
          return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment())
              return;
          } else if (!isLegacyActEnvironment() || executionContext !== NoContext || fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent)
            return;
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber), error(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, getComponentNameFromFiber(fiber));
            } finally {
              previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null && error(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
      }
      function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
      }
      var resolveFamily = null, failedBoundaries = null, setRefreshHandler = function(handler) {
        resolveFamily = handler;
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null)
            return type;
          var family = resolveFamily(type);
          return family === void 0 ? type : family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null)
            return type;
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type != null && typeof type.render == "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                return type.displayName !== void 0 && (syntheticType.displayName = type.displayName), syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null)
            return false;
          var prevType = fiber.elementType, nextType = element.type, needsCompareFamilies = false, $$typeofNextType = typeof nextType == "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              typeof nextType == "function" && (needsCompareFamilies = true);
              break;
            }
            case FunctionComponent: {
              (typeof nextType == "function" || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = true);
              break;
            }
            case ForwardRef: {
              ($$typeofNextType === REACT_FORWARD_REF_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = true);
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              ($$typeofNextType === REACT_MEMO_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = true);
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType))
              return true;
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null || typeof WeakSet != "function")
            return;
          failedBoundaries === null && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null)
            return;
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects(), flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      }, scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject)
            return;
          flushPassiveEffects(), flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null)
            throw new Error("Expected resolveFamily to be set during hot reload.");
          var needsRender = false, needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            family !== void 0 && (staleFamilies.has(family) ? needsRemount = true : updatedFamilies.has(family) && (tag === ClassComponent ? needsRemount = true : needsRender = true));
          }
          if (failedBoundaries !== null && (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) && (needsRemount = true), needsRemount && (fiber._debugNeedsRemount = true), needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            _root !== null && scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
          }
          child !== null && !needsRemount && scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies), sibling !== null && scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = /* @__PURE__ */ new Set(), types2 = new Set(families.map(function(family) {
            return family.current;
          }));
          return findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances), hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          candidateType !== null && types2.has(candidateType) && (didMatch = true), didMatch ? findHostInstancesForFiberShallowly(fiber, hostInstances) : child !== null && findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances), sibling !== null && findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances)
            return;
          for (var node = fiber; ; ) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null)
              throw new Error("Expected to reach root first.");
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        for (var node = fiber, foundHostInstances = false; ; ) {
          if (node.tag === HostComponent)
            foundHostInstances = true, hostInstances.add(node.stateNode);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === fiber)
            return foundHostInstances;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === fiber)
              return foundHostInstances;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
        } catch {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode2) {
        this.tag = tag, this.key = key, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = pendingProps, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = mode2, this.flags = NoFlags, this.subtreeFlags = NoFlags, this.deletions = null, this.lanes = NoLanes, this.childLanes = NoLanes, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = false, this._debugHookTypes = null, !hasBadMapPolyfill && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
      }
      var createFiber = function(tag, pendingProps, key, mode2) {
        return new FiberNode(tag, pendingProps, key, mode2);
      };
      function shouldConstruct$1(Component9) {
        var prototype = Component9.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type == "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component9) {
        if (typeof Component9 == "function")
          return shouldConstruct$1(Component9) ? ClassComponent : FunctionComponent;
        if (Component9 != null) {
          var $$typeof = Component9.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE)
            return ForwardRef;
          if ($$typeof === REACT_MEMO_TYPE)
            return MemoComponent;
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        workInProgress2 === null ? (workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugSource = current2._debugSource, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = NoFlags, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.actualDuration = 0, workInProgress2.actualStartTime = -1), workInProgress2.flags = current2.flags & StaticMask, workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        switch (workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        }, workInProgress2.sibling = current2.sibling, workInProgress2.index = current2.index, workInProgress2.ref = current2.ref, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration, workInProgress2._debugNeedsRemount = current2._debugNeedsRemount, workInProgress2.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case ClassComponent:
            workInProgress2.type = resolveClassForHotReloading(current2.type);
            break;
          case ForwardRef:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
            break;
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null)
          workInProgress2.childLanes = NoLanes, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = NoFlags, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0;
        else {
          workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode2;
        return tag === ConcurrentRoot ? (mode2 = ConcurrentMode, isStrictMode === true && (mode2 |= StrictLegacyMode, mode2 |= StrictEffectsMode)) : mode2 = NoMode, isDevToolsPresent && (mode2 |= ProfileMode), createFiber(HostRoot, null, null, mode2);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes) {
        var fiberTag = IndeterminateComponent, resolvedType = type;
        if (typeof type == "function")
          shouldConstruct$1(type) ? (fiberTag = ClassComponent, resolvedType = resolveClassForHotReloading(resolvedType)) : resolvedType = resolveFunctionForHotReloading(resolvedType);
        else if (typeof type == "string")
          fiberTag = HostComponent;
        else
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode, mode2 |= StrictLegacyMode, (mode2 & ConcurrentMode) !== NoMode && (mode2 |= StrictEffectsMode);
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode2, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode2, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type == "object" && type !== null)
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef, resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent, resolvedType = null;
                      break getTag;
                  }
                var info = "";
                {
                  (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        var fiber = createFiber(fiberTag, pendingProps, key, mode2);
        return fiber.elementType = type, fiber.type = resolvedType, fiber.lanes = lanes, fiber._debugOwner = owner, fiber;
      }
      function createFiberFromElement(element, mode2, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type, key = element.key, pendingProps = element.props, fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes);
        return fiber._debugSource = element._source, fiber._debugOwner = element._owner, fiber;
      }
      function createFiberFromFragment(elements, mode2, lanes, key) {
        var fiber = createFiber(Fragment7, elements, key, mode2);
        return fiber.lanes = lanes, fiber;
      }
      function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
        typeof pendingProps.id != "string" && error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
        return fiber.elementType = REACT_PROFILER_TYPE, fiber.lanes = lanes, fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        }, fiber;
      }
      function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
        return fiber.elementType = REACT_SUSPENSE_TYPE, fiber.lanes = lanes, fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
        return fiber.elementType = REACT_SUSPENSE_LIST_TYPE, fiber.lanes = lanes, fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
        fiber.elementType = REACT_OFFSCREEN_TYPE, fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: false
        };
        return fiber.stateNode = primaryChildInstance, fiber;
      }
      function createFiberFromText(content, mode2, lanes) {
        var fiber = createFiber(HostText, content, null, mode2);
        return fiber.lanes = lanes, fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        return fiber.elementType = "DELETED", fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        return fiber.stateNode = dehydratedNode, fiber;
      }
      function createFiberFromPortal(portal2, mode2, lanes) {
        var pendingProps = portal2.children !== null ? portal2.children : [], fiber = createFiber(HostPortal, pendingProps, portal2.key, mode2);
        return fiber.lanes = lanes, fiber.stateNode = {
          containerInfo: portal2.containerInfo,
          pendingChildren: null,
          // Used by persistent updates
          implementation: portal2.implementation
        }, fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        return target === null && (target = createFiber(IndeterminateComponent, null, null, NoMode)), target.tag = source.tag, target.key = source.key, target.elementType = source.elementType, target.type = source.type, target.stateNode = source.stateNode, target.return = source.return, target.child = source.child, target.sibling = source.sibling, target.index = source.index, target.ref = source.ref, target.pendingProps = source.pendingProps, target.memoizedProps = source.memoizedProps, target.updateQueue = source.updateQueue, target.memoizedState = source.memoizedState, target.dependencies = source.dependencies, target.mode = source.mode, target.flags = source.flags, target.subtreeFlags = source.subtreeFlags, target.deletions = source.deletions, target.lanes = source.lanes, target.childLanes = source.childLanes, target.alternate = source.alternate, target.actualDuration = source.actualDuration, target.actualStartTime = source.actualStartTime, target.selfBaseDuration = source.selfBaseDuration, target.treeBaseDuration = source.treeBaseDuration, target._debugSource = source._debugSource, target._debugOwner = source._debugOwner, target._debugNeedsRemount = source._debugNeedsRemount, target._debugHookTypes = source._debugHookTypes, target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag, this.containerInfo = containerInfo, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = noTimeout, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = NoLane, this.eventTimes = createLaneMap(NoLanes), this.expirationTimes = createLaneMap(NoTimestamp), this.pendingLanes = NoLanes, this.suspendedLanes = NoLanes, this.pingedLanes = NoLanes, this.expiredLanes = NoLanes, this.mutableReadLanes = NoLanes, this.finishedLanes = NoLanes, this.entangledLanes = NoLanes, this.entanglements = createLaneMap(NoLanes), this.identifierPrefix = identifierPrefix, this.onRecoverableError = onRecoverableError, this.mutableSourceEagerHydrationData = null, this.effectDuration = 0, this.passiveEffectDuration = 0;
        {
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          for (var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [], _i = 0; _i < TotalLanes; _i++)
            pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
        }
        switch (tag) {
          case ConcurrentRoot:
            this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
            break;
          case LegacyRoot:
            this._debugRootType = hydrate2 ? "hydrate()" : "render()";
            break;
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError), uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber, uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        return initializeUpdateQueue(uninitializedFiber), root2;
      }
      var ReactVersion = "18.2.0";
      function createPortal2(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        return checkKeyStringCoercion(key), {
          // This tag allow us to uniquely identify this as a React Portal
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates, didWarnAboutFindNodeInStrictMode;
      didWarnAboutNestedUpdates = false, didWarnAboutFindNodeInStrictMode = {};
      function getContextForSubtree(parentComponent) {
        if (!parentComponent)
          return emptyContextObject;
        var fiber = get2(parentComponent), parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component9 = fiber.type;
          if (isContextProvider(Component9))
            return processChildContext(fiber, Component9, parentContext);
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get2(component);
          if (fiber === void 0) {
            if (typeof component.render == "function")
              throw new Error("Unable to find node on an unmounted component.");
            var keys = Object.keys(component).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null)
            return null;
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber), fiber.mode & StrictLegacyMode ? error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName) : error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              } finally {
                previousFiber ? setCurrentFiber(previousFiber) : resetCurrentFiber();
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false, initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true, root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current, eventTime = requestEventTime(), lane = requestUpdateLane(current2), update = createUpdate(eventTime, lane);
        return update.callback = callback ?? null, enqueueUpdate(current2, update, lane), scheduleInitialHydrationOnRoot(root2, lane, eventTime), root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current, eventTime = requestEventTime(), lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        container.context === null ? container.context = context : container.pendingContext = context, isRendering && current !== null && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = true, error(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, getComponentNameFromFiber(current) || "Unknown"));
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        }, callback = callback === void 0 ? null : callback, callback !== null && (typeof callback != "function" && error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback), update.callback = callback);
        var root2 = enqueueUpdate(current$1, update, lane);
        return root2 !== null && (scheduleUpdateOnFiber(root2, current$1, lane, eventTime), entangleTransitions(root2, current$1, lane)), lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child)
          return null;
        switch (containerFiber.child.tag) {
          case HostComponent:
            return containerFiber.child.stateNode;
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        suspenseState !== null && suspenseState.dehydrated !== null && (suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane));
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        alternate && markRetryLaneImpl(alternate, retryLane);
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var lane = SelectiveHydrationLane, root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var lane = requestUpdateLane(fiber), root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        return hostFiber === null ? null : hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index2) {
          var key = path[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          return index2 + 1 === path.length ? (isArray(updated) ? updated.splice(key, 1) : delete updated[key], updated) : (updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1), updated);
        }, copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        }, copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey], isArray(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey];
          } else
            updated[oldKey] = copyWithRenameImpl(
              // $FlowFixMe number or string is fine here
              obj[oldKey],
              oldPath,
              newPath,
              index2 + 1
            );
          return updated;
        }, copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else
            for (var i = 0; i < newPath.length - 1; i++)
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        }, copyWithSetImpl = function(obj, path, index2, value) {
          if (index2 >= path.length)
            return value;
          var key = path[index2], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          return updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value), updated;
        }, copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        }, findHook = function(fiber, id) {
          for (var currentHook2 = fiber.memoizedState; currentHook2 !== null && id > 0; )
            currentHook2 = currentHook2.next, id--;
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideHookStateDeletePath = function(fiber, id, path) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        }, setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        return hostFiber === null ? null : hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance, ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          // React Refresh
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          // Enables DevTools to append owner stacks to error messages in DEV mode.
          getCurrentFiber: getCurrentFiberForDevTools,
          // Enables DevTools to detect reconciler version rather than renderer version
          // which may not match for third party renderers.
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError == "function" ? (
        // In modern browsers, reportError will dispatch an error event,
        // emulating an uncaught JavaScript error.
        reportError
      ) : function(error2) {
        console.error(error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null)
          throw new Error("Cannot update an unmounted root.");
        {
          typeof arguments[1] == "function" ? error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : isValidContainer(arguments[1]) ? error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : typeof arguments[1] < "u" && error("You passed a second argument to root.render(...) but it only accepts one argument.");
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
          }
        }
        updateContainer(children, root2, null, null);
      }, ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        typeof arguments[0] == "function" && error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          isAlreadyRendering() && error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."), flushSync(function() {
            updateContainer(null, root2, null, null);
          }), unmarkContainerAsRoot(container);
        }
      };
      function createRoot(container, options2) {
        if (!isValidContainer(container))
          throw new Error("createRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false, concurrentUpdatesByDefaultOverride = false, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        options2 != null && (options2.hydrate ? warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : typeof options2 == "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE && error(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`), options2.unstable_strictMode === true && (isStrictMode = true), options2.identifierPrefix !== void 0 && (identifierPrefix = options2.identifierPrefix), options2.onRecoverableError !== void 0 && (onRecoverableError = options2.onRecoverableError), options2.transitionCallbacks !== void 0 && (transitionCallbacks = options2.transitionCallbacks));
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        return listenToAllSupportedEvents(rootContainerElement), new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        target && queueExplicitHydrationTarget(target);
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container))
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container), initialChildren === void 0 && error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        var hydrationCallbacks = options2 ?? null, mutableSources = options2 != null && options2.hydratedSources || null, isStrictMode = false, concurrentUpdatesByDefaultOverride = false, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError;
        options2 != null && (options2.unstable_strictMode === true && (isStrictMode = true), options2.identifierPrefix !== void 0 && (identifierPrefix = options2.identifierPrefix), options2.onRecoverableError !== void 0 && (onRecoverableError = options2.onRecoverableError));
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        if (markContainerAsRoot(root2.current, container), listenToAllSupportedEvents(container), mutableSources)
          for (var i = 0; i < mutableSources.length; i++) {
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."), isContainerMarkedAsRoot(container) && (container._reactRootContainer ? error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner, topLevelUpdateWarnings;
      topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
          hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer, rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        hasNonRootReactChild && !isRootRenderedBySomeReact && error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
      };
      function getReactRootElementInContainer(container) {
        return container ? container.nodeType === DOCUMENT_NODE ? container.documentElement : container.firstChild : null;
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback == "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(
            initialChildren,
            callback,
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            false,
            // isStrictMode
            false,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = root2, markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          return listenToAllSupportedEvents(rootContainerElement), flushSync(), root2;
        } else {
          for (var rootSibling; rootSibling = container.lastChild; )
            container.removeChild(rootSibling);
          if (typeof callback == "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            false,
            // isStrictMode
            false,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = _root, markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          return listenToAllSupportedEvents(_rootContainerElement), flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          }), _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        callback !== null && typeof callback != "function" && error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container), warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        var maybeRoot = container._reactRootContainer, root2;
        if (!maybeRoot)
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
          if (root2 = maybeRoot, typeof callback == "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            warnedAboutRefsInRender || error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component"), owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        return componentOrElement == null ? null : componentOrElement.nodeType === ELEMENT_NODE ? componentOrElement : findHostInstanceWithWarning(componentOrElement, "findDOMNode");
      }
      function hydrate(element, container, callback) {
        if (error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
          throw new Error("Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render(element, container, callback) {
        if (error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
          throw new Error("Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(containerNode))
          throw new Error("Target container is not a DOM element.");
        if (parentComponent == null || !has(parentComponent))
          throw new Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container))
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container), renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            renderedByDifferentReact && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
          }
          return flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null, unmarkContainerAsRoot(container);
            });
          }), true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)), isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            hasNonRootReactChild && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
          }
          return false;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1), setAttemptContinuousHydration(attemptContinuousHydration$1), setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1), setGetCurrentUpdatePriority(getCurrentUpdatePriority), setAttemptHydrationAtPriority(runWithPriority), (typeof Map != "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear != "function" || typeof Set.prototype.forEach != "function") && error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), setRestoreImplementation(restoreControlledState$3), setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container))
          throw new Error("Target container is not a DOM element.");
        return createPortal2(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        return Internals.usingClientEntryPoint || error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), createRoot(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        return Internals.usingClientEntryPoint || error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn) {
        return isAlreadyRendering() && error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."), flushSync(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      if (!foundDevTools && canUseDOM && window.top === window.self && (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1)) {
        var protocol = window.location.protocol;
        /^(https?|file):$/.test(protocol) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals, exports.createPortal = createPortal$1, exports.createRoot = createRoot$1, exports.findDOMNode = findDOMNode, exports.flushSync = flushSync$1, exports.hydrate = hydrate, exports.hydrateRoot = hydrateRoot$1, exports.render = render, exports.unmountComponentAtNode = unmountComponentAtNode, exports.unstable_batchedUpdates = batchedUpdates$1, exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    module.exports = require_react_dom_development();
  }
});
var dist_exports = {};
__export(dist_exports, {
  AbortedDeferredError: () => AbortedDeferredError,
  Await: () => Await,
  MemoryRouter: () => MemoryRouter,
  Navigate: () => Navigate,
  NavigationType: () => Action,
  Outlet: () => Outlet,
  Route: () => Route,
  Router: () => Router,
  RouterProvider: () => RouterProvider,
  Routes: () => Routes,
  UNSAFE_DataRouterContext: () => DataRouterContext,
  UNSAFE_DataRouterStateContext: () => DataRouterStateContext,
  UNSAFE_LocationContext: () => LocationContext,
  UNSAFE_NavigationContext: () => NavigationContext,
  UNSAFE_RouteContext: () => RouteContext,
  UNSAFE_mapRouteProperties: () => mapRouteProperties,
  UNSAFE_useRouteId: () => useRouteId,
  UNSAFE_useRoutesImpl: () => useRoutesImpl,
  createMemoryRouter: () => createMemoryRouter,
  createPath: () => createPath,
  createRoutesFromChildren: () => createRoutesFromChildren,
  createRoutesFromElements: () => createRoutesFromChildren,
  defer: () => defer,
  generatePath: () => generatePath,
  isRouteErrorResponse: () => isRouteErrorResponse,
  json: () => json,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  parsePath: () => parsePath,
  redirect: () => redirect,
  redirectDocument: () => redirectDocument,
  renderMatches: () => renderMatches,
  resolvePath: () => resolvePath,
  useActionData: () => useActionData,
  useAsyncError: () => useAsyncError,
  useAsyncValue: () => useAsyncValue,
  useBlocker: () => useBlocker,
  useHref: () => useHref,
  useInRouterContext: () => useInRouterContext,
  useLoaderData: () => useLoaderData,
  useLocation: () => useLocation,
  useMatch: () => useMatch,
  useMatches: () => useMatches,
  useNavigate: () => useNavigate,
  useNavigation: () => useNavigation,
  useNavigationType: () => useNavigationType,
  useOutlet: () => useOutlet,
  useOutletContext: () => useOutletContext,
  useParams: () => useParams,
  useResolvedPath: () => useResolvedPath,
  useRevalidator: () => useRevalidator,
  useRouteError: () => useRouteError,
  useRouteLoaderData: () => useRouteLoaderData,
  useRoutes: () => useRoutes
});
function _extends2() {
  return _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends2.apply(this, arguments);
}
function useHref(to, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  useInRouterContext() || invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useHref() may be used only in the context of a <Router> component."
  );
  let {
    basename,
    navigator: navigator2
  } = React.useContext(NavigationContext), {
    hash,
    pathname,
    search
  } = useResolvedPath(to, {
    relative
  }), joinedPathname = pathname;
  return basename !== "/" && (joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname])), navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash
  });
}
function useInRouterContext() {
  return React.useContext(LocationContext) != null;
}
function useLocation() {
  return useInRouterContext() || invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useLocation() may be used only in the context of a <Router> component."
  ), React.useContext(LocationContext).location;
}
function useNavigationType() {
  return React.useContext(LocationContext).navigationType;
}
function useMatch(pattern) {
  useInRouterContext() || invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useMatch() may be used only in the context of a <Router> component."
  );
  let {
    pathname
  } = useLocation();
  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);
}
function useIsomorphicLayoutEffect(cb) {
  React.useContext(NavigationContext).static || React.useLayoutEffect(cb);
}
function useNavigate() {
  let {
    isDataRoute
  } = React.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  useInRouterContext() || invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useNavigate() may be used only in the context of a <Router> component."
  );
  let dataRouterContext = React.useContext(DataRouterContext), {
    basename,
    future: future2,
    navigator: navigator2
  } = React.useContext(NavigationContext), {
    matches: matches2
  } = React.useContext(RouteContext), {
    pathname: locationPathname
  } = useLocation(), routePathnamesJson = JSON.stringify(getResolveToMatches(matches2, future2.v7_relativeSplatPath)), activeRef = React.useRef(false);
  return useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  }), React.useCallback(function(to, options) {
    if (options === void 0 && (options = {}), warning(activeRef.current, navigateEffectWarning), !activeRef.current)
      return;
    if (typeof to == "number") {
      navigator2.go(to);
      return;
    }
    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    dataRouterContext == null && basename !== "/" && (path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname])), (options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
}
function useOutletContext() {
  return React.useContext(OutletContext);
}
function useOutlet(context) {
  let outlet = React.useContext(RouteContext).outlet;
  return outlet && /* @__PURE__ */ React.createElement(OutletContext.Provider, {
    value: context
  }, outlet);
}
function useParams() {
  let {
    matches: matches2
  } = React.useContext(RouteContext), routeMatch = matches2[matches2.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2, {
    future: future2
  } = React.useContext(NavigationContext), {
    matches: matches2
  } = React.useContext(RouteContext), {
    pathname: locationPathname
  } = useLocation(), routePathnamesJson = JSON.stringify(getResolveToMatches(matches2, future2.v7_relativeSplatPath));
  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
}
function useRoutes(routes22, locationArg) {
  return useRoutesImpl(routes22, locationArg);
}
function useRoutesImpl(routes22, locationArg, dataRouterState, future2) {
  useInRouterContext() || invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useRoutes() may be used only in the context of a <Router> component."
  );
  let {
    navigator: navigator2
  } = React.useContext(NavigationContext), {
    matches: parentMatches
  } = React.useContext(RouteContext), routeMatch = parentMatches[parentMatches.length - 1], parentParams = routeMatch ? routeMatch.params : {}, parentPathname = routeMatch ? routeMatch.pathname : "/", parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/", parentRoute = routeMatch && routeMatch.route;
  {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
  }
  let locationFromContext = useLocation(), location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg == "string" ? parsePath(locationArg) : locationArg;
    parentPathnameBase === "/" || (_parsedLocationArg$pa = parsedLocationArg.pathname) != null && _parsedLocationArg$pa.startsWith(parentPathnameBase) || invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')), location = parsedLocationArg;
  } else
    location = locationFromContext;
  let pathname = location.pathname || "/", remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/", matches2 = matchRoutes(routes22, {
    pathname: remainingPathname
  });
  warning(parentRoute || matches2 != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" '), warning(matches2 == null || matches2[matches2.length - 1].route.element !== void 0 || matches2[matches2.length - 1].route.Component !== void 0 || matches2[matches2.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.');
  let renderedMatches = _renderMatches(matches2 && matches2.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterState, future2);
  return locationArg && renderedMatches ? /* @__PURE__ */ React.createElement(LocationContext.Provider, {
    value: {
      location: _extends2({
        pathname: "/",
        search: "",
        hash: "",
        state: null,
        key: "default"
      }, location),
      navigationType: Action.Pop
    }
  }, renderedMatches) : renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError(), message2 = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error), stack = error instanceof Error ? error.stack : null, lightgrey = "rgba(200,200,200, 0.5)", preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  }, codeStyles = {
    padding: "2px 4px",
    backgroundColor: lightgrey
  }, devInfo = null;
  return console.error("Error handled by React Router default ErrorBoundary:", error), devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React.createElement("code", {
    style: codeStyles
  }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React.createElement("code", {
    style: codeStyles
  }, "errorElement"), " prop on your route.")), /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message2), stack ? /* @__PURE__ */ React.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref, dataRouterContext = React.useContext(DataRouterContext);
  return dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary) && (dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id), /* @__PURE__ */ React.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches2, parentMatches, dataRouterState, future2) {
  var _dataRouterState2;
  if (parentMatches === void 0 && (parentMatches = []), dataRouterState === void 0 && (dataRouterState = null), future2 === void 0 && (future2 = null), matches2 == null) {
    var _dataRouterState;
    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors)
      matches2 = dataRouterState.matches;
    else
      return null;
  }
  let renderedMatches = matches2, errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m) => m.route.id && errors?.[m.route.id]);
    errorIndex >= 0 || invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")), renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false, fallbackIndex = -1;
  if (dataRouterState && future2 && future2.v7_partialHydration)
    for (let i = 0; i < renderedMatches.length; i++) {
      let match2 = renderedMatches[i];
      if ((match2.route.HydrateFallback || match2.route.hydrateFallbackElement) && (fallbackIndex = i), match2.route.id) {
        let {
          loaderData,
          errors: errors2
        } = dataRouterState, needsToRunLoader = match2.route.loader && loaderData[match2.route.id] === void 0 && (!errors2 || errors2[match2.route.id] === void 0);
        if (match2.route.lazy || needsToRunLoader) {
          renderFallback = true, fallbackIndex >= 0 ? renderedMatches = renderedMatches.slice(0, fallbackIndex + 1) : renderedMatches = [renderedMatches[0]];
          break;
        }
      }
    }
  return renderedMatches.reduceRight((outlet, match2, index) => {
    let error, shouldRenderHydrateFallback = false, errorElement = null, hydrateFallbackElement = null;
    dataRouterState && (error = errors && match2.route.id ? errors[match2.route.id] : void 0, errorElement = match2.route.errorElement || defaultErrorElement, renderFallback && (fallbackIndex < 0 && index === 0 ? (warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration"), shouldRenderHydrateFallback = true, hydrateFallbackElement = null) : fallbackIndex === index && (shouldRenderHydrateFallback = true, hydrateFallbackElement = match2.route.hydrateFallbackElement || null)));
    let matches3 = parentMatches.concat(renderedMatches.slice(0, index + 1)), getChildren = () => {
      let children;
      return error ? children = errorElement : shouldRenderHydrateFallback ? children = hydrateFallbackElement : match2.route.Component ? children = /* @__PURE__ */ React.createElement(match2.route.Component, null) : match2.route.element ? children = match2.route.element : children = outlet, /* @__PURE__ */ React.createElement(RenderedRoute, {
        match: match2,
        routeContext: {
          outlet,
          matches: matches3,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches3,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
function getDataRouterConsoleError(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext(hookName) {
  let ctx = React.useContext(DataRouterContext);
  return ctx || invariant(false, getDataRouterConsoleError(hookName)), ctx;
}
function useDataRouterState(hookName) {
  let state = React.useContext(DataRouterStateContext);
  return state || invariant(false, getDataRouterConsoleError(hookName)), state;
}
function useRouteContext(hookName) {
  let route = React.useContext(RouteContext);
  return route || invariant(false, getDataRouterConsoleError(hookName)), route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName), thisRoute = route.matches[route.matches.length - 1];
  return thisRoute.route.id || invariant(false, hookName + ' can only be used on routes that contain a unique "id"'), thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(DataRouterStateHook.UseRouteId);
}
function useNavigation() {
  return useDataRouterState(DataRouterStateHook.UseNavigation).navigation;
}
function useRevalidator() {
  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator), state = useDataRouterState(DataRouterStateHook.UseRevalidator);
  return React.useMemo(() => ({
    revalidate: dataRouterContext.router.revalidate,
    state: state.revalidation
  }), [dataRouterContext.router.revalidate, state.revalidation]);
}
function useMatches() {
  let {
    matches: matches2,
    loaderData
  } = useDataRouterState(DataRouterStateHook.UseMatches);
  return React.useMemo(() => matches2.map((m) => convertRouteMatchToUiMatch(m, loaderData)), [matches2, loaderData]);
}
function useLoaderData() {
  let state = useDataRouterState(DataRouterStateHook.UseLoaderData), routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
  if (state.errors && state.errors[routeId] != null) {
    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
    return;
  }
  return state.loaderData[routeId];
}
function useRouteLoaderData(routeId) {
  return useDataRouterState(DataRouterStateHook.UseRouteLoaderData).loaderData[routeId];
}
function useActionData() {
  let state = useDataRouterState(DataRouterStateHook.UseActionData), routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
  return state.actionData ? state.actionData[routeId] : void 0;
}
function useRouteError() {
  var _state$errors;
  let error = React.useContext(RouteErrorContext), state = useDataRouterState(DataRouterStateHook.UseRouteError), routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
  return error !== void 0 ? error : (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function useAsyncValue() {
  let value = React.useContext(AwaitContext);
  return value?._data;
}
function useAsyncError() {
  let value = React.useContext(AwaitContext);
  return value?._error;
}
function useBlocker(shouldBlock) {
  let {
    router: router2,
    basename
  } = useDataRouterContext(DataRouterHook.UseBlocker), state = useDataRouterState(DataRouterStateHook.UseBlocker), [blockerKey, setBlockerKey] = React.useState(""), blockerFunction = React.useCallback((arg) => {
    if (typeof shouldBlock != "function")
      return !!shouldBlock;
    if (basename === "/")
      return shouldBlock(arg);
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = arg;
    return shouldBlock({
      currentLocation: _extends2({}, currentLocation, {
        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname
      }),
      nextLocation: _extends2({}, nextLocation, {
        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname
      }),
      historyAction
    });
  }, [basename, shouldBlock]);
  return React.useEffect(() => {
    let key = String(++blockerId);
    return setBlockerKey(key), () => router2.deleteBlocker(key);
  }, [router2]), React.useEffect(() => {
    blockerKey !== "" && router2.getBlocker(blockerKey, blockerFunction);
  }, [router2, blockerKey, blockerFunction]), blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;
}
function useNavigateStable() {
  let {
    router: router2
  } = useDataRouterContext(DataRouterHook.UseNavigateStable), id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable), activeRef = React.useRef(false);
  return useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  }), React.useCallback(function(to, options) {
    options === void 0 && (options = {}), warning(activeRef.current, navigateEffectWarning), activeRef.current && (typeof to == "number" ? router2.navigate(to) : router2.navigate(to, _extends2({
      fromRouteId: id
    }, options)));
  }, [router2, id]);
}
function warningOnce(key, cond, message2) {
  !cond && !alreadyWarned2[key] && (alreadyWarned2[key] = true, warning(false, message2));
}
function RouterProvider(_ref) {
  let {
    fallbackElement,
    router: router2,
    future: future2
  } = _ref, [state, setStateImpl] = React.useState(router2.state), {
    v7_startTransition
  } = future2 || {}, setState = React.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  React.useLayoutEffect(() => router2.subscribe(setState), [router2, setState]), React.useEffect(() => {
    warning(fallbackElement == null || !router2.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead");
  }, []);
  let navigator2 = React.useMemo(() => ({
    createHref: router2.createHref,
    encodeLocation: router2.encodeLocation,
    go: (n) => router2.navigate(n),
    push: (to, state2, opts) => router2.navigate(to, {
      state: state2,
      preventScrollReset: opts?.preventScrollReset
    }),
    replace: (to, state2, opts) => router2.navigate(to, {
      replace: true,
      state: state2,
      preventScrollReset: opts?.preventScrollReset
    })
  }), [router2]), basename = router2.basename || "/", dataRouterContext = React.useMemo(() => ({
    router: router2,
    navigator: navigator2,
    static: false,
    basename
  }), [router2, navigator2, basename]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DataRouterContext.Provider, {
    value: dataRouterContext
  }, /* @__PURE__ */ React.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ React.createElement(Router, {
    basename,
    location: state.location,
    navigationType: state.historyAction,
    navigator: navigator2,
    future: {
      v7_relativeSplatPath: router2.future.v7_relativeSplatPath
    }
  }, state.initialized || router2.future.v7_partialHydration ? /* @__PURE__ */ React.createElement(DataRoutes, {
    routes: router2.routes,
    future: router2.future,
    state
  }) : fallbackElement))), null);
}
function DataRoutes(_ref2) {
  let {
    routes: routes22,
    future: future2,
    state
  } = _ref2;
  return useRoutesImpl(routes22, void 0, state, future2);
}
function MemoryRouter(_ref3) {
  let {
    basename,
    children,
    initialEntries,
    initialIndex,
    future: future2
  } = _ref3, historyRef = React.useRef();
  historyRef.current == null && (historyRef.current = createMemoryHistory({
    initialEntries,
    initialIndex,
    v5Compat: true
  }));
  let history = historyRef.current, [state, setStateImpl] = React.useState({
    action: history.action,
    location: history.location
  }), {
    v7_startTransition
  } = future2 || {}, setState = React.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  return React.useLayoutEffect(() => history.listen(setState), [history, setState]), /* @__PURE__ */ React.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future: future2
  });
}
function Navigate(_ref4) {
  let {
    to,
    replace,
    state,
    relative
  } = _ref4;
  useInRouterContext() || invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of
    // the router loaded. We can help them understand how to avoid that.
    "<Navigate> may be used only in the context of a <Router> component."
  );
  let {
    future: future2,
    static: isStatic
  } = React.useContext(NavigationContext);
  warning(!isStatic, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");
  let {
    matches: matches2
  } = React.useContext(RouteContext), {
    pathname: locationPathname
  } = useLocation(), navigate = useNavigate(), path = resolveTo(to, getResolveToMatches(matches2, future2.v7_relativeSplatPath), locationPathname, relative === "path"), jsonPath = JSON.stringify(path);
  return React.useEffect(() => navigate(JSON.parse(jsonPath), {
    replace,
    state,
    relative
  }), [navigate, jsonPath, relative, replace, state]), null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.");
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false,
    future: future2
  } = _ref5;
  useInRouterContext() && invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");
  let basename = basenameProp.replace(/^\/*/, "/"), navigationContext = React.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp,
    future: _extends2({
      v7_relativeSplatPath: false
    }, future2)
  }), [basename, future2, navigator2, staticProp]);
  typeof locationProp == "string" && (locationProp = parsePath(locationProp));
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp, locationContext = React.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    return trailingPathname == null ? null : {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key, navigationType]);
  return warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything."), locationContext == null ? null : /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children,
    location
  } = _ref6;
  return useRoutes(createRoutesFromChildren(children), location);
}
function Await(_ref7) {
  let {
    children,
    errorElement,
    resolve
  } = _ref7;
  return /* @__PURE__ */ React.createElement(AwaitErrorBoundary, {
    resolve,
    errorElement
  }, /* @__PURE__ */ React.createElement(ResolveAwait, null, children));
}
function ResolveAwait(_ref8) {
  let {
    children
  } = _ref8, data = useAsyncValue(), toRender = typeof children == "function" ? children(data) : children;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, toRender);
}
function createRoutesFromChildren(children, parentPath) {
  parentPath === void 0 && (parentPath = []);
  let routes22 = [];
  return React.Children.forEach(children, (element, index) => {
    if (!/* @__PURE__ */ React.isValidElement(element))
      return;
    let treePath = [...parentPath, index];
    if (element.type === React.Fragment) {
      routes22.push.apply(routes22, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    element.type !== Route && invariant(false, "[" + (typeof element.type == "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>"), !element.props.index || !element.props.children || invariant(false, "An index route cannot have child routes.");
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    element.props.children && (route.children = createRoutesFromChildren(element.props.children, treePath)), routes22.push(route);
  }), routes22;
}
function renderMatches(matches2) {
  return _renderMatches(matches2);
}
function mapRouteProperties(route) {
  let updates = {
    // Note: this check also occurs in createRoutesFromChildren so update
    // there if you change this -- please and thank you!
    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
  };
  return route.Component && (route.element && warning(false, "You should not include both `Component` and `element` on your route - `Component` will be used."), Object.assign(updates, {
    element: /* @__PURE__ */ React.createElement(route.Component),
    Component: void 0
  })), route.HydrateFallback && (route.hydrateFallbackElement && warning(false, "You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used."), Object.assign(updates, {
    hydrateFallbackElement: /* @__PURE__ */ React.createElement(route.HydrateFallback),
    HydrateFallback: void 0
  })), route.ErrorBoundary && (route.errorElement && warning(false, "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."), Object.assign(updates, {
    errorElement: /* @__PURE__ */ React.createElement(route.ErrorBoundary),
    ErrorBoundary: void 0
  })), updates;
}
function createMemoryRouter(routes22, opts) {
  return createRouter({
    basename: opts?.basename,
    future: _extends2({}, opts?.future, {
      v7_prependBasename: true
    }),
    history: createMemoryHistory({
      initialEntries: opts?.initialEntries,
      initialIndex: opts?.initialIndex
    }),
    hydrationData: opts?.hydrationData,
    routes: routes22,
    mapRouteProperties
  }).initialize();
}
var React;
var DataRouterContext;
var DataRouterStateContext;
var AwaitContext;
var NavigationContext;
var LocationContext;
var RouteContext;
var RouteErrorContext;
var navigateEffectWarning;
var OutletContext;
var defaultErrorElement;
var RenderErrorBoundary;
var DataRouterHook;
var DataRouterStateHook;
var blockerId;
var alreadyWarned2;
var START_TRANSITION;
var startTransitionImpl;
var AwaitRenderStatus;
var neverSettledPromise;
var AwaitErrorBoundary;
var init_dist = __esm({
  "node_modules/react-router/dist/index.js"() {
    React = __toESM(require_react());
    init_router();
    init_router();
    DataRouterContext = /* @__PURE__ */ React.createContext(null);
    DataRouterContext.displayName = "DataRouter";
    DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
    DataRouterStateContext.displayName = "DataRouterState";
    AwaitContext = /* @__PURE__ */ React.createContext(null);
    AwaitContext.displayName = "Await";
    NavigationContext = /* @__PURE__ */ React.createContext(null);
    NavigationContext.displayName = "Navigation";
    LocationContext = /* @__PURE__ */ React.createContext(null);
    LocationContext.displayName = "Location";
    RouteContext = /* @__PURE__ */ React.createContext({
      outlet: null,
      matches: [],
      isDataRoute: false
    });
    RouteContext.displayName = "Route";
    RouteErrorContext = /* @__PURE__ */ React.createContext(null);
    RouteErrorContext.displayName = "RouteError";
    navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
    OutletContext = /* @__PURE__ */ React.createContext(null);
    defaultErrorElement = /* @__PURE__ */ React.createElement(DefaultErrorComponent, null), RenderErrorBoundary = class extends React.Component {
      constructor(props) {
        super(props), this.state = {
          location: props.location,
          revalidation: props.revalidation,
          error: props.error
        };
      }
      static getDerivedStateFromError(error) {
        return {
          error
        };
      }
      static getDerivedStateFromProps(props, state) {
        return state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle" ? {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        } : {
          error: props.error !== void 0 ? props.error : state.error,
          location: state.location,
          revalidation: props.revalidation || state.revalidation
        };
      }
      componentDidCatch(error, errorInfo) {
        console.error("React Router caught the following error during render", error, errorInfo);
      }
      render() {
        return this.state.error !== void 0 ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
          value: this.props.routeContext
        }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
          value: this.state.error,
          children: this.props.component
        })) : this.props.children;
      }
    };
    DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
      return DataRouterHook3.UseBlocker = "useBlocker", DataRouterHook3.UseRevalidator = "useRevalidator", DataRouterHook3.UseNavigateStable = "useNavigate", DataRouterHook3;
    }(DataRouterHook || {}), DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
      return DataRouterStateHook3.UseBlocker = "useBlocker", DataRouterStateHook3.UseLoaderData = "useLoaderData", DataRouterStateHook3.UseActionData = "useActionData", DataRouterStateHook3.UseRouteError = "useRouteError", DataRouterStateHook3.UseNavigation = "useNavigation", DataRouterStateHook3.UseRouteLoaderData = "useRouteLoaderData", DataRouterStateHook3.UseMatches = "useMatches", DataRouterStateHook3.UseRevalidator = "useRevalidator", DataRouterStateHook3.UseNavigateStable = "useNavigate", DataRouterStateHook3.UseRouteId = "useRouteId", DataRouterStateHook3;
    }(DataRouterStateHook || {});
    blockerId = 0;
    alreadyWarned2 = {};
    START_TRANSITION = "startTransition", startTransitionImpl = React[START_TRANSITION];
    AwaitRenderStatus = /* @__PURE__ */ function(AwaitRenderStatus2) {
      return AwaitRenderStatus2[AwaitRenderStatus2.pending = 0] = "pending", AwaitRenderStatus2[AwaitRenderStatus2.success = 1] = "success", AwaitRenderStatus2[AwaitRenderStatus2.error = 2] = "error", AwaitRenderStatus2;
    }(AwaitRenderStatus || {}), neverSettledPromise = new Promise(() => {
    }), AwaitErrorBoundary = class extends React.Component {
      constructor(props) {
        super(props), this.state = {
          error: null
        };
      }
      static getDerivedStateFromError(error) {
        return {
          error
        };
      }
      componentDidCatch(error, errorInfo) {
        console.error("<Await> caught the following error during render", error, errorInfo);
      }
      render() {
        let {
          children,
          errorElement,
          resolve
        } = this.props, promise = null, status = AwaitRenderStatus.pending;
        if (!(resolve instanceof Promise))
          status = AwaitRenderStatus.success, promise = Promise.resolve(), Object.defineProperty(promise, "_tracked", {
            get: () => true
          }), Object.defineProperty(promise, "_data", {
            get: () => resolve
          });
        else if (this.state.error) {
          status = AwaitRenderStatus.error;
          let renderError = this.state.error;
          promise = Promise.reject().catch(() => {
          }), Object.defineProperty(promise, "_tracked", {
            get: () => true
          }), Object.defineProperty(promise, "_error", {
            get: () => renderError
          });
        } else
          resolve._tracked ? (promise = resolve, status = promise._error !== void 0 ? AwaitRenderStatus.error : promise._data !== void 0 ? AwaitRenderStatus.success : AwaitRenderStatus.pending) : (status = AwaitRenderStatus.pending, Object.defineProperty(resolve, "_tracked", {
            get: () => true
          }), promise = resolve.then((data) => Object.defineProperty(resolve, "_data", {
            get: () => data
          }), (error) => Object.defineProperty(resolve, "_error", {
            get: () => error
          })));
        if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError)
          throw neverSettledPromise;
        if (status === AwaitRenderStatus.error && !errorElement)
          throw promise._error;
        if (status === AwaitRenderStatus.error)
          return /* @__PURE__ */ React.createElement(AwaitContext.Provider, {
            value: promise,
            children: errorElement
          });
        if (status === AwaitRenderStatus.success)
          return /* @__PURE__ */ React.createElement(AwaitContext.Provider, {
            value: promise,
            children
          });
        throw promise;
      }
    };
  }
});
var dist_exports2 = {};
__export(dist_exports2, {
  AbortedDeferredError: () => AbortedDeferredError,
  Await: () => Await,
  BrowserRouter: () => BrowserRouter,
  Form: () => Form,
  HashRouter: () => HashRouter,
  Link: () => Link,
  MemoryRouter: () => MemoryRouter,
  NavLink: () => NavLink,
  Navigate: () => Navigate,
  NavigationType: () => Action,
  Outlet: () => Outlet,
  Route: () => Route,
  Router: () => Router,
  RouterProvider: () => RouterProvider2,
  Routes: () => Routes,
  ScrollRestoration: () => ScrollRestoration,
  UNSAFE_DataRouterContext: () => DataRouterContext,
  UNSAFE_DataRouterStateContext: () => DataRouterStateContext,
  UNSAFE_FetchersContext: () => FetchersContext,
  UNSAFE_LocationContext: () => LocationContext,
  UNSAFE_NavigationContext: () => NavigationContext,
  UNSAFE_RouteContext: () => RouteContext,
  UNSAFE_ViewTransitionContext: () => ViewTransitionContext,
  UNSAFE_useRouteId: () => useRouteId,
  UNSAFE_useScrollRestoration: () => useScrollRestoration,
  createBrowserRouter: () => createBrowserRouter,
  createHashRouter: () => createHashRouter,
  createMemoryRouter: () => createMemoryRouter,
  createPath: () => createPath,
  createRoutesFromChildren: () => createRoutesFromChildren,
  createRoutesFromElements: () => createRoutesFromChildren,
  createSearchParams: () => createSearchParams,
  defer: () => defer,
  generatePath: () => generatePath,
  isRouteErrorResponse: () => isRouteErrorResponse,
  json: () => json,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  parsePath: () => parsePath,
  redirect: () => redirect,
  redirectDocument: () => redirectDocument,
  renderMatches: () => renderMatches,
  resolvePath: () => resolvePath,
  unstable_HistoryRouter: () => HistoryRouter,
  unstable_usePrompt: () => usePrompt,
  unstable_useViewTransitionState: () => useViewTransitionState,
  useActionData: () => useActionData,
  useAsyncError: () => useAsyncError,
  useAsyncValue: () => useAsyncValue,
  useBeforeUnload: () => useBeforeUnload,
  useBlocker: () => useBlocker,
  useFetcher: () => useFetcher,
  useFetchers: () => useFetchers,
  useFormAction: () => useFormAction,
  useHref: () => useHref,
  useInRouterContext: () => useInRouterContext,
  useLinkClickHandler: () => useLinkClickHandler,
  useLoaderData: () => useLoaderData,
  useLocation: () => useLocation,
  useMatch: () => useMatch,
  useMatches: () => useMatches,
  useNavigate: () => useNavigate,
  useNavigation: () => useNavigation,
  useNavigationType: () => useNavigationType,
  useOutlet: () => useOutlet,
  useOutletContext: () => useOutletContext,
  useParams: () => useParams,
  useResolvedPath: () => useResolvedPath,
  useRevalidator: () => useRevalidator,
  useRouteError: () => useRouteError,
  useRouteLoaderData: () => useRouteLoaderData,
  useRoutes: () => useRoutes,
  useSearchParams: () => useSearchParams,
  useSubmit: () => useSubmit
});
function _extends3() {
  return _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function isHtmlElement(object) {
  return object != null && typeof object.tagName == "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
function createSearchParams(init) {
  return init === void 0 && (init = ""), new URLSearchParams(typeof init == "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo21, key) => {
    let value = init[key];
    return memo21.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);
  }, []));
}
function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
  let searchParams = createSearchParams(locationSearch);
  return defaultSearchParams && defaultSearchParams.forEach((_, key) => {
    searchParams.has(key) || defaultSearchParams.getAll(key).forEach((value) => {
      searchParams.append(key, value);
    });
  }), searchParams;
}
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null)
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      ), _formDataSupportsSubmitter = false;
    } catch {
      _formDataSupportsSubmitter = true;
    }
  return _formDataSupportsSubmitter;
}
function getFormEncType(encType) {
  return encType != null && !supportedFormEncTypes.has(encType) ? (warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')), null) : encType;
}
function getFormSubmissionInfo(target, basename) {
  let method, action4, encType, formData, body;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action4 = attr ? stripBasename(attr, basename) : null, method = target.getAttribute("method") || defaultMethod, encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType, formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null)
      throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    if (action4 = attr ? stripBasename(attr, basename) : null, method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod, encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType, formData = new FormData(form, target), !isFormDataSubmitterSupported()) {
      let {
        name,
        type,
        value
      } = target;
      if (type === "image") {
        let prefix = name ? name + "." : "";
        formData.append(prefix + "x", "0"), formData.append(prefix + "y", "0");
      } else
        name && formData.append(name, value);
    }
  } else {
    if (isHtmlElement(target))
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    method = defaultMethod, action4 = null, encType = defaultEncType, body = target;
  }
  return formData && encType === "text/plain" && (body = formData, formData = void 0), {
    action: action4,
    method: method.toLowerCase(),
    encType,
    formData,
    body
  };
}
function createBrowserRouter(routes22, opts) {
  return createRouter({
    basename: opts?.basename,
    future: _extends3({}, opts?.future, {
      v7_prependBasename: true
    }),
    history: createBrowserHistory({
      window: opts?.window
    }),
    hydrationData: opts?.hydrationData || parseHydrationData(),
    routes: routes22,
    mapRouteProperties,
    window: opts?.window
  }).initialize();
}
function createHashRouter(routes22, opts) {
  return createRouter({
    basename: opts?.basename,
    future: _extends3({}, opts?.future, {
      v7_prependBasename: true
    }),
    history: createHashHistory({
      window: opts?.window
    }),
    hydrationData: opts?.hydrationData || parseHydrationData(),
    routes: routes22,
    mapRouteProperties,
    window: opts?.window
  }).initialize();
}
function parseHydrationData() {
  var _window;
  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
  return state && state.errors && (state = _extends3({}, state, {
    errors: deserializeErrors(state.errors)
  })), state;
}
function deserializeErrors(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors), serialized = {};
  for (let [key, val] of entries)
    if (val && val.__type === "RouteErrorResponse")
      serialized[key] = new ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);
    else if (val && val.__type === "Error") {
      if (val.__subType) {
        let ErrorConstructor = window[val.__subType];
        if (typeof ErrorConstructor == "function")
          try {
            let error = new ErrorConstructor(val.message);
            error.stack = "", serialized[key] = error;
          } catch {
          }
      }
      if (serialized[key] == null) {
        let error = new Error(val.message);
        error.stack = "", serialized[key] = error;
      }
    } else
      serialized[key] = val;
  return serialized;
}
function startTransitionSafe(cb) {
  startTransitionImpl2 ? startTransitionImpl2(cb) : cb();
}
function flushSyncSafe(cb) {
  flushSyncImpl ? flushSyncImpl(cb) : cb();
}
function RouterProvider2(_ref) {
  let {
    fallbackElement,
    router: router2,
    future: future2
  } = _ref, [state, setStateImpl] = React2.useState(router2.state), [pendingState, setPendingState] = React2.useState(), [vtContext, setVtContext] = React2.useState({
    isTransitioning: false
  }), [renderDfd, setRenderDfd] = React2.useState(), [transition, setTransition] = React2.useState(), [interruption, setInterruption] = React2.useState(), fetcherData = React2.useRef(/* @__PURE__ */ new Map()), {
    v7_startTransition
  } = future2 || {}, optInStartTransition = React2.useCallback((cb) => {
    v7_startTransition ? startTransitionSafe(cb) : cb();
  }, [v7_startTransition]), setState = React2.useCallback((newState, _ref2) => {
    let {
      deletedFetchers,
      unstable_flushSync: flushSync,
      unstable_viewTransitionOpts: viewTransitionOpts
    } = _ref2;
    deletedFetchers.forEach((key) => fetcherData.current.delete(key)), newState.fetchers.forEach((fetcher, key) => {
      fetcher.data !== void 0 && fetcherData.current.set(key, fetcher.data);
    });
    let isViewTransitionUnavailable = router2.window == null || typeof router2.window.document.startViewTransition != "function";
    if (!viewTransitionOpts || isViewTransitionUnavailable) {
      flushSync ? flushSyncSafe(() => setStateImpl(newState)) : optInStartTransition(() => setStateImpl(newState));
      return;
    }
    if (flushSync) {
      flushSyncSafe(() => {
        transition && (renderDfd && renderDfd.resolve(), transition.skipTransition()), setVtContext({
          isTransitioning: true,
          flushSync: true,
          currentLocation: viewTransitionOpts.currentLocation,
          nextLocation: viewTransitionOpts.nextLocation
        });
      });
      let t = router2.window.document.startViewTransition(() => {
        flushSyncSafe(() => setStateImpl(newState));
      });
      t.finished.finally(() => {
        flushSyncSafe(() => {
          setRenderDfd(void 0), setTransition(void 0), setPendingState(void 0), setVtContext({
            isTransitioning: false
          });
        });
      }), flushSyncSafe(() => setTransition(t));
      return;
    }
    transition ? (renderDfd && renderDfd.resolve(), transition.skipTransition(), setInterruption({
      state: newState,
      currentLocation: viewTransitionOpts.currentLocation,
      nextLocation: viewTransitionOpts.nextLocation
    })) : (setPendingState(newState), setVtContext({
      isTransitioning: true,
      flushSync: false,
      currentLocation: viewTransitionOpts.currentLocation,
      nextLocation: viewTransitionOpts.nextLocation
    }));
  }, [router2.window, transition, renderDfd, fetcherData, optInStartTransition]);
  React2.useLayoutEffect(() => router2.subscribe(setState), [router2, setState]), React2.useEffect(() => {
    vtContext.isTransitioning && !vtContext.flushSync && setRenderDfd(new Deferred());
  }, [vtContext]), React2.useEffect(() => {
    if (renderDfd && pendingState && router2.window) {
      let newState = pendingState, renderPromise = renderDfd.promise, transition2 = router2.window.document.startViewTransition(async () => {
        optInStartTransition(() => setStateImpl(newState)), await renderPromise;
      });
      transition2.finished.finally(() => {
        setRenderDfd(void 0), setTransition(void 0), setPendingState(void 0), setVtContext({
          isTransitioning: false
        });
      }), setTransition(transition2);
    }
  }, [optInStartTransition, pendingState, renderDfd, router2.window]), React2.useEffect(() => {
    renderDfd && pendingState && state.location.key === pendingState.location.key && renderDfd.resolve();
  }, [renderDfd, transition, state.location, pendingState]), React2.useEffect(() => {
    !vtContext.isTransitioning && interruption && (setPendingState(interruption.state), setVtContext({
      isTransitioning: true,
      flushSync: false,
      currentLocation: interruption.currentLocation,
      nextLocation: interruption.nextLocation
    }), setInterruption(void 0));
  }, [vtContext.isTransitioning, interruption]), React2.useEffect(() => {
    warning(fallbackElement == null || !router2.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead");
  }, []);
  let navigator2 = React2.useMemo(() => ({
    createHref: router2.createHref,
    encodeLocation: router2.encodeLocation,
    go: (n) => router2.navigate(n),
    push: (to, state2, opts) => router2.navigate(to, {
      state: state2,
      preventScrollReset: opts?.preventScrollReset
    }),
    replace: (to, state2, opts) => router2.navigate(to, {
      replace: true,
      state: state2,
      preventScrollReset: opts?.preventScrollReset
    })
  }), [router2]), basename = router2.basename || "/", dataRouterContext = React2.useMemo(() => ({
    router: router2,
    navigator: navigator2,
    static: false,
    basename
  }), [router2, navigator2, basename]);
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(DataRouterContext.Provider, {
    value: dataRouterContext
  }, /* @__PURE__ */ React2.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ React2.createElement(FetchersContext.Provider, {
    value: fetcherData.current
  }, /* @__PURE__ */ React2.createElement(ViewTransitionContext.Provider, {
    value: vtContext
  }, /* @__PURE__ */ React2.createElement(Router, {
    basename,
    location: state.location,
    navigationType: state.historyAction,
    navigator: navigator2,
    future: {
      v7_relativeSplatPath: router2.future.v7_relativeSplatPath
    }
  }, state.initialized || router2.future.v7_partialHydration ? /* @__PURE__ */ React2.createElement(DataRoutes2, {
    routes: router2.routes,
    future: router2.future,
    state
  }) : fallbackElement))))), null);
}
function DataRoutes2(_ref3) {
  let {
    routes: routes22,
    future: future2,
    state
  } = _ref3;
  return useRoutesImpl(routes22, void 0, state, future2);
}
function BrowserRouter(_ref4) {
  let {
    basename,
    children,
    future: future2,
    window: window2
  } = _ref4, historyRef = React2.useRef();
  historyRef.current == null && (historyRef.current = createBrowserHistory({
    window: window2,
    v5Compat: true
  }));
  let history = historyRef.current, [state, setStateImpl] = React2.useState({
    action: history.action,
    location: history.location
  }), {
    v7_startTransition
  } = future2 || {}, setState = React2.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  return React2.useLayoutEffect(() => history.listen(setState), [history, setState]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future: future2
  });
}
function HashRouter(_ref5) {
  let {
    basename,
    children,
    future: future2,
    window: window2
  } = _ref5, historyRef = React2.useRef();
  historyRef.current == null && (historyRef.current = createHashHistory({
    window: window2,
    v5Compat: true
  }));
  let history = historyRef.current, [state, setStateImpl] = React2.useState({
    action: history.action,
    location: history.location
  }), {
    v7_startTransition
  } = future2 || {}, setState = React2.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  return React2.useLayoutEffect(() => history.listen(setState), [history, setState]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future: future2
  });
}
function HistoryRouter(_ref6) {
  let {
    basename,
    children,
    future: future2,
    history
  } = _ref6, [state, setStateImpl] = React2.useState({
    action: history.action,
    location: history.location
  }), {
    v7_startTransition
  } = future2 || {}, setState = React2.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  return React2.useLayoutEffect(() => history.listen(setState), [history, setState]), /* @__PURE__ */ React2.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future: future2
  });
}
function ScrollRestoration(_ref10) {
  let {
    getKey,
    storageKey
  } = _ref10;
  return useScrollRestoration({
    getKey,
    storageKey
  }), null;
}
function getDataRouterConsoleError2(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext2(hookName) {
  let ctx = React2.useContext(DataRouterContext);
  return ctx || invariant(false, getDataRouterConsoleError2(hookName)), ctx;
}
function useDataRouterState2(hookName) {
  let state = React2.useContext(DataRouterStateContext);
  return state || invariant(false, getDataRouterConsoleError2(hookName)), state;
}
function useLinkClickHandler(to, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    unstable_viewTransition
  } = _temp === void 0 ? {} : _temp, navigate = useNavigate(), location = useLocation(), path = useResolvedPath(to, {
    relative
  });
  return React2.useCallback((event) => {
    if (shouldProcessLinkClick(event, target)) {
      event.preventDefault();
      let replace = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
      navigate(to, {
        replace,
        state,
        preventScrollReset,
        relative,
        unstable_viewTransition
      });
    }
  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);
}
function useSearchParams(defaultInit) {
  warning(typeof URLSearchParams < "u", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.");
  let defaultSearchParamsRef = React2.useRef(createSearchParams(defaultInit)), hasSetSearchParamsRef = React2.useRef(false), location = useLocation(), searchParams = React2.useMemo(() => (
    // Only merge in the defaults if we haven't yet called setSearchParams.
    // Once we call that we want those to take precedence, otherwise you can't
    // remove a param with setSearchParams({}) if it has an initial value
    getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
  ), [location.search]), navigate = useNavigate(), setSearchParams = React2.useCallback((nextInit, navigateOptions) => {
    let newSearchParams = createSearchParams(typeof nextInit == "function" ? nextInit(searchParams) : nextInit);
    hasSetSearchParamsRef.current = true, navigate("?" + newSearchParams, navigateOptions);
  }, [navigate, searchParams]);
  return [searchParams, setSearchParams];
}
function validateClientSideSubmission() {
  if (typeof document > "u")
    throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
}
function useSubmit() {
  let {
    router: router2
  } = useDataRouterContext2(DataRouterHook2.UseSubmit), {
    basename
  } = React2.useContext(NavigationContext), currentRouteId = useRouteId();
  return React2.useCallback(function(target, options) {
    options === void 0 && (options = {}), validateClientSideSubmission();
    let {
      action: action4,
      method,
      encType,
      formData,
      body
    } = getFormSubmissionInfo(target, basename);
    if (options.navigate === false) {
      let key = options.fetcherKey || getUniqueFetcherId();
      router2.fetch(key, currentRouteId, options.action || action4, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        unstable_flushSync: options.unstable_flushSync
      });
    } else
      router2.navigate(options.action || action4, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        replace: options.replace,
        state: options.state,
        fromRouteId: currentRouteId,
        unstable_flushSync: options.unstable_flushSync,
        unstable_viewTransition: options.unstable_viewTransition
      });
  }, [router2, basename, currentRouteId]);
}
function useFormAction(action4, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2, {
    basename
  } = React2.useContext(NavigationContext), routeContext = React2.useContext(RouteContext);
  routeContext || invariant(false, "useFormAction must be used inside a RouteContext");
  let [match2] = routeContext.matches.slice(-1), path = _extends3({}, useResolvedPath(action4 || ".", {
    relative
  })), location = useLocation();
  if (action4 == null) {
    path.search = location.search;
    let params = new URLSearchParams(path.search);
    params.has("index") && params.get("index") === "" && (params.delete("index"), path.search = params.toString() ? "?" + params.toString() : "");
  }
  return (!action4 || action4 === ".") && match2.route.index && (path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index"), basename !== "/" && (path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname])), createPath(path);
}
function useFetcher(_temp3) {
  var _route$matches;
  let {
    key
  } = _temp3 === void 0 ? {} : _temp3, {
    router: router2
  } = useDataRouterContext2(DataRouterHook2.UseFetcher), state = useDataRouterState2(DataRouterStateHook2.UseFetcher), fetcherData = React2.useContext(FetchersContext), route = React2.useContext(RouteContext), routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
  fetcherData || invariant(false, "useFetcher must be used inside a FetchersContext"), route || invariant(false, "useFetcher must be used inside a RouteContext"), routeId == null && invariant(false, 'useFetcher can only be used on routes that contain a unique "id"');
  let [fetcherKey, setFetcherKey] = React2.useState(key || "");
  key && key !== fetcherKey ? setFetcherKey(key) : fetcherKey || setFetcherKey(getUniqueFetcherId()), React2.useEffect(() => (router2.getFetcher(fetcherKey), () => {
    router2.deleteFetcher(fetcherKey);
  }), [router2, fetcherKey]);
  let load = React2.useCallback((href, opts) => {
    routeId || invariant(false, "No routeId available for fetcher.load()"), router2.fetch(fetcherKey, routeId, href, opts);
  }, [fetcherKey, routeId, router2]), submitImpl = useSubmit(), submit = React2.useCallback((target, opts) => {
    submitImpl(target, _extends3({}, opts, {
      navigate: false,
      fetcherKey
    }));
  }, [fetcherKey, submitImpl]), FetcherForm = React2.useMemo(() => {
    let FetcherForm2 = /* @__PURE__ */ React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(Form, _extends3({}, props, {
      navigate: false,
      fetcherKey,
      ref
    })));
    return FetcherForm2.displayName = "fetcher.Form", FetcherForm2;
  }, [fetcherKey]), fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER, data = fetcherData.get(fetcherKey);
  return React2.useMemo(() => _extends3({
    Form: FetcherForm,
    submit,
    load
  }, fetcher, {
    data
  }), [FetcherForm, submit, load, fetcher, data]);
}
function useFetchers() {
  let state = useDataRouterState2(DataRouterStateHook2.UseFetchers);
  return Array.from(state.fetchers.entries()).map((_ref11) => {
    let [key, fetcher] = _ref11;
    return _extends3({}, fetcher, {
      key
    });
  });
}
function useScrollRestoration(_temp4) {
  let {
    getKey,
    storageKey
  } = _temp4 === void 0 ? {} : _temp4, {
    router: router2
  } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration), {
    restoreScrollPosition,
    preventScrollReset
  } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration), {
    basename
  } = React2.useContext(NavigationContext), location = useLocation(), matches2 = useMatches(), navigation = useNavigation();
  React2.useEffect(() => (window.history.scrollRestoration = "manual", () => {
    window.history.scrollRestoration = "auto";
  }), []), usePageHide(React2.useCallback(() => {
    if (navigation.state === "idle") {
      let key = (getKey ? getKey(location, matches2) : null) || location.key;
      savedScrollPositions[key] = window.scrollY;
    }
    try {
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
    } catch (error) {
      warning(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").");
    }
    window.history.scrollRestoration = "auto";
  }, [storageKey, getKey, navigation.state, location, matches2])), typeof document < "u" && (React2.useLayoutEffect(() => {
    try {
      let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
      sessionPositions && (savedScrollPositions = JSON.parse(sessionPositions));
    } catch {
    }
  }, [storageKey]), React2.useLayoutEffect(() => {
    let getKeyWithoutBasename = getKey && basename !== "/" ? (location2, matches3) => getKey(
      // Strip the basename to match useLocation()
      _extends3({}, location2, {
        pathname: stripBasename(location2.pathname, basename) || location2.pathname
      }),
      matches3
    ) : getKey, disableScrollRestoration = router2?.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
    return () => disableScrollRestoration && disableScrollRestoration();
  }, [router2, basename, getKey]), React2.useLayoutEffect(() => {
    if (restoreScrollPosition !== false) {
      if (typeof restoreScrollPosition == "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location.hash) {
        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      preventScrollReset !== true && window.scrollTo(0, 0);
    }
  }, [location, restoreScrollPosition, preventScrollReset]));
}
function useBeforeUnload(callback, options) {
  let {
    capture
  } = options || {};
  React2.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    return window.addEventListener("beforeunload", callback, opts), () => {
      window.removeEventListener("beforeunload", callback, opts);
    };
  }, [callback, capture]);
}
function usePageHide(callback, options) {
  let {
    capture
  } = options || {};
  React2.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    return window.addEventListener("pagehide", callback, opts), () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function usePrompt(_ref12) {
  let {
    when,
    message: message2
  } = _ref12, blocker = useBlocker(when);
  React2.useEffect(() => {
    blocker.state === "blocked" && (window.confirm(message2) ? setTimeout(blocker.proceed, 0) : blocker.reset());
  }, [blocker, message2]), React2.useEffect(() => {
    blocker.state === "blocked" && !when && blocker.reset();
  }, [blocker, when]);
}
function useViewTransitionState(to, opts) {
  opts === void 0 && (opts = {});
  let vtContext = React2.useContext(ViewTransitionContext);
  vtContext == null && invariant(false, "`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");
  let {
    basename
  } = useDataRouterContext2(DataRouterHook2.useViewTransitionState), path = useResolvedPath(to, {
    relative: opts.relative
  });
  if (!vtContext.isTransitioning)
    return false;
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname, nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
}
var React2;
var ReactDOM;
var defaultMethod;
var defaultEncType;
var _formDataSupportsSubmitter;
var supportedFormEncTypes;
var _excluded;
var _excluded2;
var _excluded3;
var ViewTransitionContext;
var FetchersContext;
var START_TRANSITION2;
var startTransitionImpl2;
var FLUSH_SYNC;
var flushSyncImpl;
var Deferred;
var isBrowser;
var ABSOLUTE_URL_REGEX2;
var Link;
var NavLink;
var Form;
var DataRouterHook2;
var DataRouterStateHook2;
var fetcherId;
var getUniqueFetcherId;
var SCROLL_RESTORATION_STORAGE_KEY;
var savedScrollPositions;
var init_dist2 = __esm({
  "node_modules/react-router-dom/dist/index.js"() {
    React2 = __toESM(require_react()), ReactDOM = __toESM(require_react_dom());
    init_dist();
    init_dist();
    init_router();
    defaultMethod = "get", defaultEncType = "application/x-www-form-urlencoded";
    _formDataSupportsSubmitter = null;
    supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
    _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"], _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "unstable_viewTransition", "children"], _excluded3 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "unstable_viewTransition"];
    ViewTransitionContext = /* @__PURE__ */ React2.createContext({
      isTransitioning: false
    });
    ViewTransitionContext.displayName = "ViewTransition";
    FetchersContext = /* @__PURE__ */ React2.createContext(/* @__PURE__ */ new Map());
    FetchersContext.displayName = "Fetchers";
    START_TRANSITION2 = "startTransition", startTransitionImpl2 = React2[START_TRANSITION2], FLUSH_SYNC = "flushSync", flushSyncImpl = ReactDOM[FLUSH_SYNC];
    Deferred = class {
      constructor() {
        this.status = "pending", this.promise = new Promise((resolve, reject) => {
          this.resolve = (value) => {
            this.status === "pending" && (this.status = "resolved", resolve(value));
          }, this.reject = (reason) => {
            this.status === "pending" && (this.status = "rejected", reject(reason));
          };
        });
      }
    };
    HistoryRouter.displayName = "unstable_HistoryRouter";
    isBrowser = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, Link = /* @__PURE__ */ React2.forwardRef(function(_ref7, ref) {
      let {
        onClick,
        relative,
        reloadDocument,
        replace,
        state,
        target,
        to,
        preventScrollReset,
        unstable_viewTransition
      } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded), {
        basename
      } = React2.useContext(NavigationContext), absoluteHref, isExternal = false;
      if (typeof to == "string" && ABSOLUTE_URL_REGEX2.test(to) && (absoluteHref = to, isBrowser))
        try {
          let currentUrl = new URL(window.location.href), targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to), path = stripBasename(targetUrl.pathname, basename);
          targetUrl.origin === currentUrl.origin && path != null ? to = path + targetUrl.search + targetUrl.hash : isExternal = true;
        } catch {
          warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.');
        }
      let href = useHref(to, {
        relative
      }), internalOnClick = useLinkClickHandler(to, {
        replace,
        state,
        target,
        preventScrollReset,
        relative,
        unstable_viewTransition
      });
      function handleClick(event) {
        onClick && onClick(event), event.defaultPrevented || internalOnClick(event);
      }
      return (
        // eslint-disable-next-line jsx-a11y/anchor-has-content
        /* @__PURE__ */ React2.createElement("a", _extends3({}, rest, {
          href: absoluteHref || href,
          onClick: isExternal || reloadDocument ? onClick : handleClick,
          ref,
          target
        }))
      );
    });
    Link.displayName = "Link";
    NavLink = /* @__PURE__ */ React2.forwardRef(function(_ref8, ref) {
      let {
        "aria-current": ariaCurrentProp = "page",
        caseSensitive = false,
        className: classNameProp = "",
        end = false,
        style: styleProp,
        to,
        unstable_viewTransition,
        children
      } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2), path = useResolvedPath(to, {
        relative: rest.relative
      }), location = useLocation(), routerState = React2.useContext(DataRouterStateContext), {
        navigator: navigator2
      } = React2.useContext(NavigationContext), isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useViewTransitionState(path) && unstable_viewTransition === true, toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname, locationPathname = location.pathname, nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
      caseSensitive || (locationPathname = locationPathname.toLowerCase(), nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null, toPathname = toPathname.toLowerCase());
      let endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length, isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/", isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/"), renderProps = {
        isActive,
        isPending,
        isTransitioning
      }, ariaCurrent = isActive ? ariaCurrentProp : void 0, className;
      typeof classNameProp == "function" ? className = classNameProp(renderProps) : className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
      let style = typeof styleProp == "function" ? styleProp(renderProps) : styleProp;
      return /* @__PURE__ */ React2.createElement(Link, _extends3({}, rest, {
        "aria-current": ariaCurrent,
        className,
        ref,
        style,
        to,
        unstable_viewTransition
      }), typeof children == "function" ? children(renderProps) : children);
    });
    NavLink.displayName = "NavLink";
    Form = /* @__PURE__ */ React2.forwardRef((_ref9, forwardedRef) => {
      let {
        fetcherKey,
        navigate,
        reloadDocument,
        replace,
        state,
        method = defaultMethod,
        action: action4,
        onSubmit,
        relative,
        preventScrollReset,
        unstable_viewTransition
      } = _ref9, props = _objectWithoutPropertiesLoose(_ref9, _excluded3), submit = useSubmit(), formAction = useFormAction(action4, {
        relative
      }), formMethod = method.toLowerCase() === "get" ? "get" : "post";
      return /* @__PURE__ */ React2.createElement("form", _extends3({
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : (event) => {
          if (onSubmit && onSubmit(event), event.defaultPrevented)
            return;
          event.preventDefault();
          let submitter = event.nativeEvent.submitter, submitMethod = submitter?.getAttribute("formmethod") || method;
          submit(submitter || event.currentTarget, {
            fetcherKey,
            method: submitMethod,
            navigate,
            replace,
            state,
            relative,
            preventScrollReset,
            unstable_viewTransition
          });
        }
      }, props));
    });
    Form.displayName = "Form";
    ScrollRestoration.displayName = "ScrollRestoration";
    (function(DataRouterHook3) {
      DataRouterHook3.UseScrollRestoration = "useScrollRestoration", DataRouterHook3.UseSubmit = "useSubmit", DataRouterHook3.UseSubmitFetcher = "useSubmitFetcher", DataRouterHook3.UseFetcher = "useFetcher", DataRouterHook3.useViewTransitionState = "useViewTransitionState";
    })(DataRouterHook2 || (DataRouterHook2 = {}));
    (function(DataRouterStateHook3) {
      DataRouterStateHook3.UseFetcher = "useFetcher", DataRouterStateHook3.UseFetchers = "useFetchers", DataRouterStateHook3.UseScrollRestoration = "useScrollRestoration";
    })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
    fetcherId = 0, getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
    SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions", savedScrollPositions = {};
  }
});
function _extends4() {
  return _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends4.apply(this, arguments);
}
var init_rollupPluginBabelHelpers = __esm({
  "node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js"() {
  }
});
function invariant3(value, message2) {
  if (value === false || value === null || typeof value > "u")
    throw new Error(message2);
}
var init_invariant2 = __esm({
  "node_modules/@remix-run/react/dist/esm/invariant.js"() {
  }
});
async function loadRouteModule(route, routeModulesCache) {
  if (route.id in routeModulesCache)
    return routeModulesCache[route.id];
  try {
    let routeModule = await import(
      /* webpackIgnore: true */
      route.module
    );
    return routeModulesCache[route.id] = routeModule, routeModule;
  } catch {
    return window.location.reload(), new Promise(() => {
    });
  }
}
var init_routeModules = __esm({
  "node_modules/@remix-run/react/dist/esm/routeModules.js"() {
  }
});
function getKeyedLinksForMatches(matches2, routeModules, manifest) {
  let descriptors = matches2.map((match2) => {
    var _module$links;
    let module = routeModules[match2.route.id], route = manifest.routes[match2.route.id];
    return [route.css ? route.css.map((href) => ({
      rel: "stylesheet",
      href
    })) : [], ((_module$links = module.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module)) || []];
  }).flat(2), preloads = getCurrentPageModulePreloadHrefs(matches2, manifest);
  return dedupeLinkDescriptors(descriptors, preloads);
}
async function prefetchStyleLinks(route, routeModule) {
  var _route$css, _routeModule$links;
  if (!route.css && !routeModule.links || !isPreloadSupported())
    return;
  let descriptors = [((_route$css = route.css) === null || _route$css === void 0 ? void 0 : _route$css.map((href) => ({
    rel: "stylesheet",
    href
  }))) ?? [], ((_routeModule$links = routeModule.links) === null || _routeModule$links === void 0 ? void 0 : _routeModule$links.call(routeModule)) ?? []].flat(1);
  if (descriptors.length === 0)
    return;
  let styleLinks = [];
  for (let descriptor of descriptors)
    !isPageLinkDescriptor(descriptor) && descriptor.rel === "stylesheet" && styleLinks.push({
      ...descriptor,
      rel: "preload",
      as: "style"
    });
  let matchingLinks = styleLinks.filter((link) => (!link.media || window.matchMedia(link.media).matches) && !document.querySelector(`link[rel="stylesheet"][href="${link.href}"]`));
  await Promise.all(matchingLinks.map(prefetchStyleLink));
}
async function prefetchStyleLink(descriptor) {
  return new Promise((resolve) => {
    let link = document.createElement("link");
    Object.assign(link, descriptor);
    function removeLink() {
      document.head.contains(link) && document.head.removeChild(link);
    }
    link.onload = () => {
      removeLink(), resolve();
    }, link.onerror = () => {
      removeLink(), resolve();
    }, document.head.appendChild(link);
  });
}
function isPageLinkDescriptor(object) {
  return object != null && typeof object.page == "string";
}
function isHtmlLinkDescriptor(object) {
  return object == null ? false : object.href == null ? object.rel === "preload" && typeof object.imageSrcSet == "string" && typeof object.imageSizes == "string" : typeof object.rel == "string" && typeof object.href == "string";
}
async function getKeyedPrefetchLinks(matches2, manifest, routeModules) {
  let links5 = await Promise.all(matches2.map(async (match2) => {
    let mod = await loadRouteModule(manifest.routes[match2.route.id], routeModules);
    return mod.links ? mod.links() : [];
  }));
  return dedupeLinkDescriptors(links5.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map((link) => link.rel === "stylesheet" ? {
    ...link,
    rel: "prefetch",
    as: "style"
  } : {
    ...link,
    rel: "prefetch"
  }));
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode2) {
  let path = parsePathPatch(page), isNew = (match2, index) => currentMatches[index] ? match2.route.id !== currentMatches[index].route.id : true, matchPathChanged = (match2, index) => {
    var _currentMatches$index;
    return (
      // param change, /users/123 -> /users/456
      currentMatches[index].pathname !== match2.pathname || // splat param changed, which is not present in match.path
      // e.g. /files/images/avatar.jpg -> files/finances.xls
      ((_currentMatches$index = currentMatches[index].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith("*")) && currentMatches[index].params["*"] !== match2.params["*"]
    );
  };
  return mode2 === "data" && location.search !== path.search ? (
    // this is really similar to stuff in transition.ts, maybe somebody smarter
    // than me (or in less of a hurry) can share some of it. You're the best.
    nextMatches.filter((match2, index) => {
      if (!manifest.routes[match2.route.id].hasLoader)
        return false;
      if (isNew(match2, index) || matchPathChanged(match2, index))
        return true;
      if (match2.route.shouldRevalidate) {
        var _currentMatches$;
        let routeChoice = match2.route.shouldRevalidate({
          currentUrl: new URL(location.pathname + location.search + location.hash, window.origin),
          currentParams: ((_currentMatches$ = currentMatches[0]) === null || _currentMatches$ === void 0 ? void 0 : _currentMatches$.params) || {},
          nextUrl: new URL(page, window.origin),
          nextParams: match2.params,
          defaultShouldRevalidate: true
        });
        if (typeof routeChoice == "boolean")
          return routeChoice;
      }
      return true;
    })
  ) : nextMatches.filter((match2, index) => {
    let manifestRoute = manifest.routes[match2.route.id];
    return (mode2 === "assets" || manifestRoute.hasLoader) && (isNew(match2, index) || matchPathChanged(match2, index));
  });
}
function getDataLinkHrefs(page, matches2, manifest) {
  let path = parsePathPatch(page);
  return dedupeHrefs(matches2.filter((match2) => manifest.routes[match2.route.id].hasLoader).map((match2) => {
    let {
      pathname,
      search
    } = path, searchParams = new URLSearchParams(search);
    return searchParams.set("_data", match2.route.id), `${pathname}?${searchParams}`;
  }));
}
function getModuleLinkHrefs(matches2, manifestPatch) {
  return dedupeHrefs(matches2.map((match2) => {
    let route = manifestPatch.routes[match2.route.id], hrefs = [route.module];
    return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
  }).flat(1));
}
function getCurrentPageModulePreloadHrefs(matches2, manifest) {
  return dedupeHrefs(matches2.map((match2) => {
    let route = manifest.routes[match2.route.id], hrefs = [route.module];
    return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
  }).flat(1));
}
function dedupeHrefs(hrefs) {
  return [...new Set(hrefs)];
}
function sortKeys(obj) {
  let sorted = {}, keys = Object.keys(obj).sort();
  for (let key of keys)
    sorted[key] = obj[key];
  return sorted;
}
function dedupeLinkDescriptors(descriptors, preloads) {
  let set = /* @__PURE__ */ new Set(), preloadsSet = new Set(preloads);
  return descriptors.reduce((deduped, descriptor) => {
    if (preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href))
      return deduped;
    let key = JSON.stringify(sortKeys(descriptor));
    return set.has(key) || (set.add(key), deduped.push({
      key,
      link: descriptor
    })), deduped;
  }, []);
}
function parsePathPatch(href) {
  let path = parsePath(href);
  return path.search === void 0 && (path.search = ""), path;
}
function isPreloadSupported() {
  if (_isPreloadSupported !== void 0)
    return _isPreloadSupported;
  let el = document.createElement("link");
  return _isPreloadSupported = el.relList.supports("preload"), el = null, _isPreloadSupported;
}
var _isPreloadSupported;
var init_links = __esm({
  "node_modules/@remix-run/react/dist/esm/links.js"() {
    init_dist2();
    init_routeModules();
  }
});
function escapeHtml2(html) {
  return html.replace(ESCAPE_REGEX2, (match2) => ESCAPE_LOOKUP2[match2]);
}
function createHtml(html) {
  return {
    __html: html
  };
}
var ESCAPE_LOOKUP2;
var ESCAPE_REGEX2;
var init_markup2 = __esm({
  "node_modules/@remix-run/react/dist/esm/markup.js"() {
    ESCAPE_LOOKUP2 = {
      "&": "\\u0026",
      ">": "\\u003e",
      "<": "\\u003c",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    }, ESCAPE_REGEX2 = /[&><\u2028\u2029]/g;
  }
});
function useDataRouterContext3() {
  let context = React3.useContext(DataRouterContext);
  return invariant3(context, "You must render this element inside a <DataRouterContext.Provider> element"), context;
}
function useDataRouterStateContext() {
  let context = React3.useContext(DataRouterStateContext);
  return invariant3(context, "You must render this element inside a <DataRouterStateContext.Provider> element"), context;
}
function useRemixContext() {
  let context = React3.useContext(RemixContext);
  return invariant3(context, "You must render this element inside a <Remix> element"), context;
}
function usePrefetchBehavior(prefetch, theirElementProps) {
  let [maybePrefetch, setMaybePrefetch] = React3.useState(false), [shouldPrefetch, setShouldPrefetch] = React3.useState(false), {
    onFocus,
    onBlur,
    onMouseEnter,
    onMouseLeave,
    onTouchStart
  } = theirElementProps, ref = React3.useRef(null);
  React3.useEffect(() => {
    if (prefetch === "render" && setShouldPrefetch(true), prefetch === "viewport") {
      let callback = (entries) => {
        entries.forEach((entry2) => {
          setShouldPrefetch(entry2.isIntersecting);
        });
      }, observer = new IntersectionObserver(callback, {
        threshold: 0.5
      });
      return ref.current && observer.observe(ref.current), () => {
        observer.disconnect();
      };
    }
  }, [prefetch]);
  let setIntent = () => {
    prefetch === "intent" && setMaybePrefetch(true);
  }, cancelIntent = () => {
    prefetch === "intent" && (setMaybePrefetch(false), setShouldPrefetch(false));
  };
  return React3.useEffect(() => {
    if (maybePrefetch) {
      let id = setTimeout(() => {
        setShouldPrefetch(true);
      }, 100);
      return () => {
        clearTimeout(id);
      };
    }
  }, [maybePrefetch]), [shouldPrefetch, ref, {
    onFocus: composeEventHandlers(onFocus, setIntent),
    onBlur: composeEventHandlers(onBlur, cancelIntent),
    onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
    onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
    onTouchStart: composeEventHandlers(onTouchStart, setIntent)
  }];
}
function composeEventHandlers(theirHandler, ourHandler) {
  return (event) => {
    theirHandler && theirHandler(event), event.defaultPrevented || ourHandler(event);
  };
}
function Links() {
  let {
    manifest,
    routeModules,
    criticalCss
  } = useRemixContext(), {
    errors,
    matches: routerMatches
  } = useDataRouterStateContext(), matches2 = errors ? routerMatches.slice(0, routerMatches.findIndex((m) => errors[m.route.id]) + 1) : routerMatches, keyedLinks = React3.useMemo(() => getKeyedLinksForMatches(matches2, routeModules, manifest), [matches2, routeModules, manifest]);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, criticalCss ? /* @__PURE__ */ React3.createElement("style", {
    dangerouslySetInnerHTML: {
      __html: criticalCss
    }
  }) : null, keyedLinks.map(({
    key,
    link
  }) => isPageLinkDescriptor(link) ? /* @__PURE__ */ React3.createElement(PrefetchPageLinks, _extends4({
    key
  }, link)) : /* @__PURE__ */ React3.createElement("link", _extends4({
    key
  }, link))));
}
function PrefetchPageLinks({
  page,
  ...dataLinkProps
}) {
  let {
    router: router2
  } = useDataRouterContext3(), matches2 = React3.useMemo(() => matchRoutes(router2.routes, page), [router2.routes, page]);
  return matches2 ? /* @__PURE__ */ React3.createElement(PrefetchPageLinksImpl, _extends4({
    page,
    matches: matches2
  }, dataLinkProps)) : (console.warn(`Tried to prefetch ${page} but no routes matched.`), null);
}
function useKeyedPrefetchLinks(matches2) {
  let {
    manifest,
    routeModules
  } = useRemixContext(), [keyedPrefetchLinks, setKeyedPrefetchLinks] = React3.useState([]);
  return React3.useEffect(() => {
    let interrupted = false;
    return getKeyedPrefetchLinks(matches2, manifest, routeModules).then((links5) => {
      interrupted || setKeyedPrefetchLinks(links5);
    }), () => {
      interrupted = true;
    };
  }, [matches2, manifest, routeModules]), keyedPrefetchLinks;
}
function PrefetchPageLinksImpl({
  page,
  matches: nextMatches,
  ...linkProps
}) {
  let location = useLocation(), {
    manifest
  } = useRemixContext(), {
    matches: matches2
  } = useDataRouterStateContext(), newMatchesForData = React3.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches2, manifest, location, "data"), [page, nextMatches, matches2, manifest, location]), newMatchesForAssets = React3.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches2, manifest, location, "assets"), [page, nextMatches, matches2, manifest, location]), dataHrefs = React3.useMemo(() => getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]), moduleHrefs = React3.useMemo(() => getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]), keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React3.createElement("link", _extends4({
    key: href,
    rel: "prefetch",
    as: "fetch",
    href
  }, linkProps))), moduleHrefs.map((href) => /* @__PURE__ */ React3.createElement("link", _extends4({
    key: href,
    rel: "modulepreload",
    href
  }, linkProps))), keyedPrefetchLinks.map(({
    key,
    link
  }) => (
    // these don't spread `linkProps` because they are full link descriptors
    // already with their own props
    /* @__PURE__ */ React3.createElement("link", _extends4({
      key
    }, link))
  )));
}
function Meta() {
  let {
    routeModules
  } = useRemixContext(), {
    errors,
    matches: routerMatches,
    loaderData
  } = useDataRouterStateContext(), location = useLocation(), _matches = routerMatches, error = null;
  if (errors) {
    let errorIdx = routerMatches.findIndex((m) => errors[m.route.id]);
    _matches = routerMatches.slice(0, errorIdx + 1), error = errors[routerMatches[errorIdx].route.id];
  }
  let meta = [], leafMeta = null, matches2 = [];
  for (let i = 0; i < _matches.length; i++) {
    let _match = _matches[i], routeId = _match.route.id, data = loaderData[routeId], params = _match.params, routeModule = routeModules[routeId], routeMeta = [], match2 = {
      id: routeId,
      data,
      meta: [],
      params: _match.params,
      pathname: _match.pathname,
      handle: _match.route.handle,
      error
    };
    if (matches2[i] = match2, routeModule != null && routeModule.meta ? routeMeta = typeof routeModule.meta == "function" ? routeModule.meta({
      data,
      params,
      location,
      matches: matches2,
      error
    }) : Array.isArray(routeModule.meta) ? [...routeModule.meta] : routeModule.meta : leafMeta && (routeMeta = [...leafMeta]), routeMeta = routeMeta || [], !Array.isArray(routeMeta))
      throw new Error("The route at " + _match.route.path + ` returns an invalid value. All route meta functions must return an array of meta objects.

To reference the meta function API, see https://remix.run/route/meta`);
    match2.meta = routeMeta, matches2[i] = match2, meta = [...routeMeta], leafMeta = meta;
  }
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, meta.flat().map((metaProps) => {
    if (!metaProps)
      return null;
    if ("tagName" in metaProps) {
      let {
        tagName,
        ...rest
      } = metaProps;
      return isValidMetaTag(tagName) ? /* @__PURE__ */ React3.createElement(tagName, _extends4({
        key: JSON.stringify(rest)
      }, rest)) : (console.warn(`A meta object uses an invalid tagName: ${tagName}. Expected either 'link' or 'meta'`), null);
    }
    if ("title" in metaProps)
      return /* @__PURE__ */ React3.createElement("title", {
        key: "title"
      }, String(metaProps.title));
    if ("charset" in metaProps && (metaProps.charSet ??= metaProps.charset, delete metaProps.charset), "charSet" in metaProps && metaProps.charSet != null)
      return typeof metaProps.charSet == "string" ? /* @__PURE__ */ React3.createElement("meta", {
        key: "charSet",
        charSet: metaProps.charSet
      }) : null;
    if ("script:ld+json" in metaProps)
      try {
        let json8 = JSON.stringify(metaProps["script:ld+json"]);
        return /* @__PURE__ */ React3.createElement("script", {
          key: `script:ld+json:${json8}`,
          type: "application/ld+json",
          dangerouslySetInnerHTML: {
            __html: json8
          }
        });
      } catch {
        return null;
      }
    return /* @__PURE__ */ React3.createElement("meta", _extends4({
      key: JSON.stringify(metaProps)
    }, metaProps));
  }));
}
function isValidMetaTag(tagName) {
  return typeof tagName == "string" && /^(meta|link)$/.test(tagName);
}
function Await2(props) {
  return /* @__PURE__ */ React3.createElement(Await, props);
}
function Scripts(props) {
  let {
    manifest,
    serverHandoffString,
    abortDelay,
    serializeError: serializeError2
  } = useRemixContext(), {
    router: router2,
    static: isStatic,
    staticContext
  } = useDataRouterContext3(), {
    matches: matches2
  } = useDataRouterStateContext(), navigation = useNavigation();
  React3.useEffect(() => {
    isHydrated = true;
  }, []);
  let serializePreResolvedErrorImp = (key, error) => {
    let toSerialize;
    return serializeError2 && error instanceof Error ? toSerialize = serializeError2(error) : toSerialize = error, `${JSON.stringify(key)}:__remixContext.p(!1, ${escapeHtml2(JSON.stringify(toSerialize))})`;
  }, serializePreresolvedDataImp = (routeId, key, data) => {
    let serializedData;
    try {
      serializedData = JSON.stringify(data);
    } catch (error) {
      return serializePreResolvedErrorImp(key, error);
    }
    return `${JSON.stringify(key)}:__remixContext.p(${escapeHtml2(serializedData)})`;
  }, serializeErrorImp = (routeId, key, error) => {
    let toSerialize;
    return serializeError2 && error instanceof Error ? toSerialize = serializeError2(error) : toSerialize = error, `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(key)}, !1, ${escapeHtml2(JSON.stringify(toSerialize))})`;
  }, serializeDataImp = (routeId, key, data) => {
    let serializedData;
    try {
      serializedData = JSON.stringify(data);
    } catch (error) {
      return serializeErrorImp(routeId, key, error);
    }
    return `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(key)}, ${escapeHtml2(serializedData)})`;
  }, deferredScripts = [], initialScripts = React3.useMemo(() => {
    var _manifest$hmr;
    let contextScript = staticContext ? `window.__remixContext = ${serverHandoffString};` : " ", activeDeferreds = staticContext?.activeDeferreds;
    contextScript += activeDeferreds ? ["__remixContext.p = function(v,e,p,x) {", "  if (typeof e !== 'undefined') {", `    x=new Error(e.message);
    x.stack=e.stack;`, "    p=Promise.reject(x);", "  } else {", "    p=Promise.resolve(v);", "  }", "  return p;", "};", "__remixContext.n = function(i,k) {", "  __remixContext.t = __remixContext.t || {};", "  __remixContext.t[i] = __remixContext.t[i] || {};", "  let p = new Promise((r, e) => {__remixContext.t[i][k] = {r:(v)=>{r(v);},e:(v)=>{e(v);}};});", typeof abortDelay == "number" ? `setTimeout(() => {if(typeof p._error !== "undefined" || typeof p._data !== "undefined"){return;} __remixContext.t[i][k].e(new Error("Server timeout."))}, ${abortDelay});` : "", "  return p;", "};", "__remixContext.r = function(i,k,v,e,p,x) {", "  p = __remixContext.t[i][k];", "  if (typeof e !== 'undefined') {", `    x=new Error(e.message);
    x.stack=e.stack;`, "    p.e(x);", "  } else {", "    p.r(v);", "  }", "};"].join(`
`) + Object.entries(activeDeferreds).map(([routeId, deferredData]) => {
      let pendingKeys = new Set(deferredData.pendingKeys), promiseKeyValues = deferredData.deferredKeys.map((key) => {
        if (pendingKeys.has(key))
          return deferredScripts.push(/* @__PURE__ */ React3.createElement(DeferredHydrationScript, {
            key: `${routeId} | ${key}`,
            deferredData,
            routeId,
            dataKey: key,
            scriptProps: props,
            serializeData: serializeDataImp,
            serializeError: serializeErrorImp
          })), `${JSON.stringify(key)}:__remixContext.n(${JSON.stringify(routeId)}, ${JSON.stringify(key)})`;
        {
          let trackedPromise = deferredData.data[key];
          return typeof trackedPromise._error < "u" ? serializePreResolvedErrorImp(key, trackedPromise._error) : serializePreresolvedDataImp(routeId, key, trackedPromise._data);
        }
      }).join(`,
`);
      return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;
    }).join(`
`) + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : "") : "";
    let routeModulesScript = isStatic ? `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : ""}import ${JSON.stringify(manifest.url)};
${matches2.map((match2, index) => `import * as route${index} from ${JSON.stringify(manifest.routes[match2.route.id].module)};`).join(`
`)}
window.__remixRouteModules = {${matches2.map((match2, index) => `${JSON.stringify(match2.route.id)}:route${index}`).join(",")}};

import(${JSON.stringify(manifest.entry.module)});` : " ";
    return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("script", _extends4({}, props, {
      suppressHydrationWarning: true,
      dangerouslySetInnerHTML: createHtml(contextScript),
      type: void 0
    })), /* @__PURE__ */ React3.createElement("script", _extends4({}, props, {
      suppressHydrationWarning: true,
      dangerouslySetInnerHTML: createHtml(routeModulesScript),
      type: "module",
      async: true
    })));
  }, []);
  if (!isStatic && typeof __remixContext == "object" && __remixContext.a)
    for (let i = 0; i < __remixContext.a; i++)
      deferredScripts.push(/* @__PURE__ */ React3.createElement(DeferredHydrationScript, {
        key: i,
        scriptProps: props,
        serializeData: serializeDataImp,
        serializeError: serializeErrorImp
      }));
  let nextMatches = React3.useMemo(() => {
    if (navigation.location) {
      let matches3 = matchRoutes(router2.routes, navigation.location);
      return invariant3(matches3, `No routes match path "${navigation.location.pathname}"`), matches3;
    }
    return [];
  }, [navigation.location, router2.routes]), routePreloads = matches2.concat(nextMatches).map((match2) => {
    let route = manifest.routes[match2.route.id];
    return (route.imports || []).concat([route.module]);
  }).flat(1), preloads = isHydrated ? [] : manifest.entry.imports.concat(routePreloads);
  return isHydrated ? null : /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("link", {
    rel: "modulepreload",
    href: manifest.url,
    crossOrigin: props.crossOrigin
  }), /* @__PURE__ */ React3.createElement("link", {
    rel: "modulepreload",
    href: manifest.entry.module,
    crossOrigin: props.crossOrigin
  }), dedupe(preloads).map((path) => /* @__PURE__ */ React3.createElement("link", {
    key: path,
    rel: "modulepreload",
    href: path,
    crossOrigin: props.crossOrigin
  })), initialScripts, deferredScripts);
}
function DeferredHydrationScript({
  dataKey,
  deferredData,
  routeId,
  scriptProps,
  serializeData,
  serializeError: serializeError2
}) {
  return typeof document > "u" && deferredData && dataKey && routeId && invariant3(deferredData.pendingKeys.includes(dataKey), `Deferred data for route ${routeId} with key ${dataKey} was not pending but tried to render a script for it.`), /* @__PURE__ */ React3.createElement(React3.Suspense, {
    fallback: (
      // This makes absolutely no sense. The server renders null as a fallback,
      // but when hydrating, we need to render a script tag to avoid a hydration issue.
      // To reproduce a hydration mismatch, just render null as a fallback.
      typeof document > "u" && deferredData && dataKey && routeId ? null : /* @__PURE__ */ React3.createElement("script", _extends4({}, scriptProps, {
        async: true,
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html: " "
        }
      }))
    )
  }, typeof document > "u" && deferredData && dataKey && routeId ? /* @__PURE__ */ React3.createElement(Await2, {
    resolve: deferredData.data[dataKey],
    errorElement: /* @__PURE__ */ React3.createElement(ErrorDeferredHydrationScript, {
      dataKey,
      routeId,
      scriptProps,
      serializeError: serializeError2
    }),
    children: (data) => /* @__PURE__ */ React3.createElement("script", _extends4({}, scriptProps, {
      async: true,
      suppressHydrationWarning: true,
      dangerouslySetInnerHTML: {
        __html: serializeData(routeId, dataKey, data)
      }
    }))
  }) : /* @__PURE__ */ React3.createElement("script", _extends4({}, scriptProps, {
    async: true,
    suppressHydrationWarning: true,
    dangerouslySetInnerHTML: {
      __html: " "
    }
  })));
}
function ErrorDeferredHydrationScript({
  dataKey,
  routeId,
  scriptProps,
  serializeError: serializeError2
}) {
  let error = useAsyncError();
  return /* @__PURE__ */ React3.createElement("script", _extends4({}, scriptProps, {
    suppressHydrationWarning: true,
    dangerouslySetInnerHTML: {
      __html: serializeError2(routeId, dataKey, error)
    }
  }));
}
function dedupe(array) {
  return [...new Set(array)];
}
function useMatches2() {
  return useMatches();
}
function useLoaderData2() {
  return useLoaderData();
}
function useRouteLoaderData2(routeId) {
  return useRouteLoaderData(routeId);
}
function useActionData2() {
  return useActionData();
}
function useFetcher2(opts = {}) {
  return useFetcher(opts);
}
function mergeRefs(...refs) {
  return (value) => {
    refs.forEach((ref) => {
      typeof ref == "function" ? ref(value) : ref != null && (ref.current = value);
    });
  };
}
var React3;
var RemixContext;
var ABSOLUTE_URL_REGEX3;
var NavLink2;
var Link2;
var isHydrated;
var LiveReload;
var init_components = __esm({
  "node_modules/@remix-run/react/dist/esm/components.js"() {
    init_rollupPluginBabelHelpers();
    React3 = __toESM(require_react());
    init_dist2();
    init_invariant2();
    init_links();
    init_markup2();
    RemixContext = /* @__PURE__ */ React3.createContext(void 0);
    RemixContext.displayName = "Remix";
    ABSOLUTE_URL_REGEX3 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, NavLink2 = /* @__PURE__ */ React3.forwardRef(({
      to,
      prefetch = "none",
      ...props
    }, forwardedRef) => {
      let isAbsolute = typeof to == "string" && ABSOLUTE_URL_REGEX3.test(to), href = useHref(to), [shouldPrefetch, ref, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
      return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(NavLink, _extends4({}, props, prefetchHandlers, {
        ref: mergeRefs(forwardedRef, ref),
        to
      })), shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React3.createElement(PrefetchPageLinks, {
        page: href
      }) : null);
    });
    NavLink2.displayName = "NavLink";
    Link2 = /* @__PURE__ */ React3.forwardRef(({
      to,
      prefetch = "none",
      ...props
    }, forwardedRef) => {
      let isAbsolute = typeof to == "string" && ABSOLUTE_URL_REGEX3.test(to), href = useHref(to), [shouldPrefetch, ref, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
      return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Link, _extends4({}, props, prefetchHandlers, {
        ref: mergeRefs(forwardedRef, ref),
        to
      })), shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React3.createElement(PrefetchPageLinks, {
        page: href
      }) : null);
    });
    Link2.displayName = "Link";
    isHydrated = false;
    LiveReload = function({
      origin = "https://obesity-live-shades-guests.trycloudflare.com/",
      port,
      timeoutMs = 1e3,
      nonce = void 0
    }) {
      let js = String.raw;
      return /* @__PURE__ */ React3.createElement("script", {
        nonce,
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html: js`
                function remixLiveReloadConnect(config) {
                  let LIVE_RELOAD_ORIGIN = ${JSON.stringify(origin)};
                  let protocol =
                    LIVE_RELOAD_ORIGIN ? new URL(LIVE_RELOAD_ORIGIN).protocol.replace(/^http/, "ws") :
                    location.protocol === "https:" ? "wss:" : "ws:"; // remove in v2?
                  let hostname = LIVE_RELOAD_ORIGIN ? new URL(LIVE_RELOAD_ORIGIN).hostname : location.hostname;
                  let url = new URL(protocol + "//" + hostname + "/socket");

                  url.port =
                    ${port} ||
                    (LIVE_RELOAD_ORIGIN ? new URL(LIVE_RELOAD_ORIGIN).port : 8002);

                  let ws = new WebSocket(url.href);
                  ws.onmessage = async (message) => {
                    let event = JSON.parse(message.data);
                    if (event.type === "LOG") {
                      console.log(event.message);
                    }
                    if (event.type === "RELOAD") {
                      console.log("💿 Reloading window ...");
                      window.location.reload();
                    }
                    if (event.type === "HMR") {
                      if (!window.__hmr__ || !window.__hmr__.contexts) {
                        console.log("💿 [HMR] No HMR context, reloading window ...");
                        window.location.reload();
                        return;
                      }
                      if (!event.updates || !event.updates.length) return;
                      let updateAccepted = false;
                      let needsRevalidation = new Set();
                      for (let update of event.updates) {
                        console.log("[HMR] " + update.reason + " [" + update.id +"]")
                        if (update.revalidate) {
                          needsRevalidation.add(update.routeId);
                          console.log("[HMR] Revalidating [" + update.routeId + "]");
                        }
                        let imported = await import(update.url +  '?t=' + event.assetsManifest.hmr.timestamp);
                        if (window.__hmr__.contexts[update.id]) {
                          let accepted = window.__hmr__.contexts[update.id].emit(
                            imported
                          );
                          if (accepted) {
                            console.log("[HMR] Update accepted by", update.id);
                            updateAccepted = true;
                          }
                        }
                      }
                      if (event.assetsManifest && window.__hmr__.contexts["remix:manifest"]) {
                        let accepted = window.__hmr__.contexts["remix:manifest"].emit(
                          { needsRevalidation, assetsManifest: event.assetsManifest }
                        );
                        if (accepted) {
                          console.log("[HMR] Update accepted by", "remix:manifest");
                          updateAccepted = true;
                        }
                      }
                      if (!updateAccepted) {
                        console.log("[HMR] Update rejected, reloading...");
                        window.location.reload();
                      }
                    }
                  };
                  ws.onopen = () => {
                    if (config && typeof config.onOpen === "function") {
                      config.onOpen();
                    }
                  };
                  ws.onclose = (event) => {
                    if (event.code === 1006) {
                      console.log("Remix dev asset server web socket closed. Reconnecting...");
                      setTimeout(
                        () =>
                          remixLiveReloadConnect({
                            onOpen: () => window.location.reload(),
                          }),
                      ${String(timeoutMs)}
                      );
                    }
                  };
                  ws.onerror = (error) => {
                    console.log("Remix dev asset server web socket error:");
                    console.error(error);
                  };
                }
                remixLiveReloadConnect();
              `
        }
      });
    };
  }
});
function RemixRootDefaultErrorBoundary({
  error
}) {
  if (console.error(error), isRouteErrorResponse(error))
    return /* @__PURE__ */ React4.createElement(BoundaryShell, {
      title: "Unhandled Thrown Response!"
    }, /* @__PURE__ */ React4.createElement("h1", {
      style: {
        fontFamily: "system-ui, sans-serif",
        padding: "2rem"
      }
    }, error.status, " ", error.statusText));
  let errorInstance;
  if (error instanceof Error)
    errorInstance = error;
  else {
    let errorString = error == null ? "Unknown Error" : typeof error == "object" && "toString" in error ? error.toString() : JSON.stringify(error);
    errorInstance = new Error(errorString);
  }
  return /* @__PURE__ */ React4.createElement(BoundaryShell, {
    title: "Application Error!"
  }, /* @__PURE__ */ React4.createElement("main", {
    style: {
      fontFamily: "system-ui, sans-serif",
      padding: "2rem"
    }
  }, /* @__PURE__ */ React4.createElement("h1", {
    style: {
      fontSize: "24px"
    }
  }, "Application Error"), /* @__PURE__ */ React4.createElement("pre", {
    style: {
      padding: "2rem",
      background: "hsla(10, 50%, 50%, 0.1)",
      color: "red",
      overflow: "auto"
    }
  }, errorInstance.stack)));
}
function BoundaryShell({
  title,
  children
}) {
  return /* @__PURE__ */ React4.createElement("html", {
    lang: "en"
  }, /* @__PURE__ */ React4.createElement("head", null, /* @__PURE__ */ React4.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ React4.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1,viewport-fit=cover"
  }), /* @__PURE__ */ React4.createElement("title", null, title)), /* @__PURE__ */ React4.createElement("body", null, children, /* @__PURE__ */ React4.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `
              console.log(
                "\u{1F4BF} Hey developer \u{1F44B}. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."
              );
            `
    }
  })));
}
var React4;
var RemixErrorBoundary;
var init_errorBoundaries = __esm({
  "node_modules/@remix-run/react/dist/esm/errorBoundaries.js"() {
    React4 = __toESM(require_react());
    init_dist2();
    RemixErrorBoundary = class extends React4.Component {
      constructor(props) {
        super(props), this.state = {
          error: props.error || null,
          location: props.location
        };
      }
      static getDerivedStateFromError(error) {
        return {
          error
        };
      }
      static getDerivedStateFromProps(props, state) {
        return state.location !== props.location ? {
          error: props.error || null,
          location: props.location
        } : {
          error: props.error || state.error,
          location: state.location
        };
      }
      render() {
        return this.state.error ? /* @__PURE__ */ React4.createElement(RemixRootDefaultErrorBoundary, {
          error: this.state.error
        }) : this.props.children;
      }
    };
  }
});
function deserializeErrors2(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors), serialized = {};
  for (let [key, val] of entries)
    if (val && val.__type === "RouteErrorResponse")
      serialized[key] = new ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);
    else if (val && val.__type === "Error") {
      if (val.__subType) {
        let ErrorConstructor = window[val.__subType];
        if (typeof ErrorConstructor == "function")
          try {
            let error = new ErrorConstructor(val.message);
            error.stack = val.stack, serialized[key] = error;
          } catch {
          }
      }
      if (serialized[key] == null) {
        let error = new Error(val.message);
        error.stack = val.stack, serialized[key] = error;
      }
    } else
      serialized[key] = val;
  return serialized;
}
var init_errors3 = __esm({
  "node_modules/@remix-run/react/dist/esm/errors.js"() {
    init_router();
  }
});
function isCatchResponse(response) {
  return response.headers.get("X-Remix-Catch") != null;
}
function isErrorResponse(response) {
  return response.headers.get("X-Remix-Error") != null;
}
function isNetworkErrorResponse(response) {
  return isResponse3(response) && response.status >= 400 && response.headers.get("X-Remix-Error") == null && response.headers.get("X-Remix-Catch") == null && response.headers.get("X-Remix-Response") == null;
}
function isRedirectResponse3(response) {
  return response.headers.get("X-Remix-Redirect") != null;
}
function isDeferredResponse(response) {
  var _response$headers$get;
  return !!((_response$headers$get = response.headers.get("Content-Type")) !== null && _response$headers$get !== void 0 && _response$headers$get.match(/text\/remix-deferred/));
}
function isResponse3(value) {
  return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
}
function isDeferredData3(value) {
  let deferred = value;
  return deferred && typeof deferred == "object" && typeof deferred.data == "object" && typeof deferred.subscribe == "function" && typeof deferred.cancel == "function" && typeof deferred.resolveData == "function";
}
async function fetchData(request, routeId, retry = 0) {
  let url = new URL(request.url);
  url.searchParams.set("_data", routeId);
  let init = {
    signal: request.signal
  };
  if (request.method !== "GET") {
    init.method = request.method;
    let contentType = request.headers.get("Content-Type");
    contentType && /\bapplication\/json\b/.test(contentType) ? (init.headers = {
      "Content-Type": contentType
    }, init.body = JSON.stringify(await request.json())) : contentType && /\btext\/plain\b/.test(contentType) ? (init.headers = {
      "Content-Type": contentType
    }, init.body = await request.text()) : contentType && /\bapplication\/x-www-form-urlencoded\b/.test(contentType) ? init.body = new URLSearchParams(await request.text()) : init.body = await request.formData();
  }
  retry > 0 && await new Promise((resolve) => setTimeout(resolve, 5 ** retry * 10));
  let revalidation = window.__remixRevalidation, response = await fetch(url.href, init).catch((error) => {
    if (typeof revalidation == "number" && revalidation === window.__remixRevalidation && error?.name === "TypeError" && retry < 3)
      return fetchData(request, routeId, retry + 1);
    throw error;
  });
  if (isErrorResponse(response)) {
    let data = await response.json(), error = new Error(data.message);
    return error.stack = data.stack, error;
  }
  if (isNetworkErrorResponse(response)) {
    let text2 = await response.text(), error = new Error(text2);
    return error.stack = void 0, error;
  }
  return response;
}
async function parseDeferredReadableStream(stream) {
  if (!stream)
    throw new Error("parseDeferredReadableStream requires stream argument");
  let deferredData, deferredResolvers = {};
  try {
    let sectionReader = readStreamSections(stream), initialSection = (await sectionReader.next()).value;
    if (!initialSection)
      throw new Error("no critical data");
    let criticalData = JSON.parse(initialSection);
    if (typeof criticalData == "object" && criticalData !== null)
      for (let [eventKey, value] of Object.entries(criticalData))
        typeof value != "string" || !value.startsWith(DEFERRED_VALUE_PLACEHOLDER_PREFIX2) || (deferredData = deferredData || {}, deferredData[eventKey] = new Promise((resolve, reject) => {
          deferredResolvers[eventKey] = {
            resolve: (value2) => {
              resolve(value2), delete deferredResolvers[eventKey];
            },
            reject: (error) => {
              reject(error), delete deferredResolvers[eventKey];
            }
          };
        }));
    return (async () => {
      try {
        for await (let section of sectionReader) {
          let [event, ...sectionDataStrings] = section.split(":"), sectionDataString = sectionDataStrings.join(":"), data = JSON.parse(sectionDataString);
          if (event === "data")
            for (let [key, value] of Object.entries(data))
              deferredResolvers[key] && deferredResolvers[key].resolve(value);
          else if (event === "error")
            for (let [key, value] of Object.entries(data)) {
              let err = new Error(value.message);
              err.stack = value.stack, deferredResolvers[key] && deferredResolvers[key].reject(err);
            }
        }
        for (let [key, resolver] of Object.entries(deferredResolvers))
          resolver.reject(new AbortedDeferredError(`Deferred ${key} will never be resolved`));
      } catch (error) {
        for (let resolver of Object.values(deferredResolvers))
          resolver.reject(error);
      }
    })(), new DeferredData({
      ...criticalData,
      ...deferredData
    });
  } catch (error) {
    for (let resolver of Object.values(deferredResolvers))
      resolver.reject(error);
    throw error;
  }
}
async function* readStreamSections(stream) {
  let reader = stream.getReader(), buffer = [], sections = [], closed = false, encoder2 = new TextEncoder(), decoder2 = new TextDecoder(), readStreamSection = async () => {
    if (sections.length > 0)
      return sections.shift();
    for (; !closed && sections.length === 0; ) {
      let chunk = await reader.read();
      if (chunk.done) {
        closed = true;
        break;
      }
      buffer.push(chunk.value);
      try {
        let splitSections = decoder2.decode(mergeArrays3(...buffer)).split(`

`);
        if (splitSections.length >= 2 && (sections.push(...splitSections.slice(0, -1)), buffer = [encoder2.encode(splitSections.slice(-1).join(`

`))]), sections.length > 0)
          break;
      } catch {
        continue;
      }
    }
    return sections.length > 0 || buffer.length > 0 && (sections = decoder2.decode(mergeArrays3(...buffer)).split(`

`).filter((s) => s), buffer = []), sections.shift();
  }, section = await readStreamSection();
  for (; section; )
    yield section, section = await readStreamSection();
}
function mergeArrays3(...arrays) {
  let out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0)), offset = 0;
  for (let arr of arrays)
    out.set(arr, offset), offset += arr.length;
  return out;
}
var DEFERRED_VALUE_PLACEHOLDER_PREFIX2;
var init_data2 = __esm({
  "node_modules/@remix-run/react/dist/esm/data.js"() {
    init_router();
    DEFERRED_VALUE_PLACEHOLDER_PREFIX2 = "__deferred_promise:";
  }
});
function RemixRootDefaultHydrateFallback() {
  return /* @__PURE__ */ React5.createElement("html", {
    lang: "en"
  }, /* @__PURE__ */ React5.createElement("head", null, /* @__PURE__ */ React5.createElement("meta", {
    charSet: "utf-8"
  }), /* @__PURE__ */ React5.createElement("meta", {
    name: "viewport",
    content: "width=device-width,initial-scale=1,viewport-fit=cover"
  })), /* @__PURE__ */ React5.createElement("body", null, /* @__PURE__ */ React5.createElement(Scripts, null), /* @__PURE__ */ React5.createElement("script", {
    dangerouslySetInnerHTML: {
      __html: `
              console.log(
                "\u{1F4BF} Hey developer \u{1F44B}. You can provide a way better UX than this " +
                "when your app is running \`clientLoader\` functions on hydration. " +
                "Check out https://remix.run/route/hydrate-fallback for more information."
              );
            `
    }
  }), " "));
}
var React5;
var init_fallback = __esm({
  "node_modules/@remix-run/react/dist/esm/fallback.js"() {
    React5 = __toESM(require_react());
    init_components();
  }
});
function groupRoutesByParentId2(manifest) {
  let routes22 = {};
  return Object.values(manifest).forEach((route) => {
    let parentId = route.parentId || "";
    routes22[parentId] || (routes22[parentId] = []), routes22[parentId].push(route);
  }), routes22;
}
function createServerRoutes(manifest, routeModules, future2, parentId = "", routesByParentId = groupRoutesByParentId2(manifest)) {
  return (routesByParentId[parentId] || []).map((route) => {
    let routeModule = routeModules[route.id], dataRoute = {
      caseSensitive: route.caseSensitive,
      Component: getRouteModuleComponent(routeModule),
      HydrateFallback: routeModule.HydrateFallback ? routeModule.HydrateFallback : route.id === "root" ? RemixRootDefaultHydrateFallback : void 0,
      ErrorBoundary: routeModule.ErrorBoundary ? routeModule.ErrorBoundary : route.id === "root" ? () => /* @__PURE__ */ React6.createElement(RemixRootDefaultErrorBoundary, {
        error: useRouteError()
      }) : void 0,
      id: route.id,
      index: route.index,
      path: route.path,
      handle: routeModules[route.id].handle,
      // For partial hydration rendering, we need to indicate when the route
      // has a loader/clientLoader, but it won't ever be called during the static
      // render, so just give it a no-op function so we can render down to the
      // proper fallback
      loader: route.hasLoader || route.hasClientLoader ? () => null : void 0
      // We don't need action/shouldRevalidate on these routes since they're
      // for a static render
    }, children = createServerRoutes(manifest, routeModules, future2, route.id, routesByParentId);
    return children.length > 0 && (dataRoute.children = children), dataRoute;
  });
}
function createClientRoutesWithHMRRevalidationOptOut(needsRevalidation, manifest, routeModulesCache, initialState, future2) {
  return createClientRoutes(manifest, routeModulesCache, initialState, future2, "", groupRoutesByParentId2(manifest), needsRevalidation);
}
function getNoServerHandlerError(type, routeId) {
  let msg = `You are trying to call ${type === "action" ? "serverAction()" : "serverLoader()"} on a route that does not have a server ${type} (routeId: "${routeId}")`;
  throw console.error(msg), new ErrorResponseImpl(400, "Bad Request", new Error(msg), true);
}
function createClientRoutes(manifest, routeModulesCache, initialState, future2, parentId = "", routesByParentId = groupRoutesByParentId2(manifest), needsRevalidation) {
  return (routesByParentId[parentId] || []).map((route) => {
    let routeModule = routeModulesCache[route.id];
    async function fetchServerLoader(request) {
      return route.hasLoader ? fetchServerHandler(request, route) : null;
    }
    async function fetchServerAction(request) {
      if (!route.hasAction) {
        let msg = `Route "${route.id}" does not have an action, but you are trying to submit to it. To fix this, please add an \`action\` function to the route`;
        throw console.error(msg), new ErrorResponseImpl(405, "Method Not Allowed", new Error(msg), true);
      }
      return fetchServerHandler(request, route);
    }
    async function prefetchStylesAndCallHandler(handler) {
      let linkPrefetchPromise = routeModulesCache[route.id] ? prefetchStyleLinks(route, routeModulesCache[route.id]) : Promise.resolve();
      try {
        return handler();
      } finally {
        await linkPrefetchPromise;
      }
    }
    let dataRoute = {
      id: route.id,
      index: route.index,
      path: route.path
    };
    if (routeModule) {
      var _initialState$loaderD, _initialState$errors, _routeModule$clientLo;
      Object.assign(dataRoute, {
        ...dataRoute,
        Component: getRouteModuleComponent(routeModule),
        HydrateFallback: routeModule.HydrateFallback ? routeModule.HydrateFallback : route.id === "root" ? RemixRootDefaultHydrateFallback : void 0,
        ErrorBoundary: routeModule.ErrorBoundary ? routeModule.ErrorBoundary : route.id === "root" ? () => /* @__PURE__ */ React6.createElement(RemixRootDefaultErrorBoundary, {
          error: useRouteError()
        }) : void 0,
        handle: routeModule.handle,
        shouldRevalidate: needsRevalidation ? wrapShouldRevalidateForHdr(route.id, routeModule.shouldRevalidate, needsRevalidation) : routeModule.shouldRevalidate
      });
      let initialData = initialState == null || (_initialState$loaderD = initialState.loaderData) === null || _initialState$loaderD === void 0 ? void 0 : _initialState$loaderD[route.id], initialError = initialState == null || (_initialState$errors = initialState.errors) === null || _initialState$errors === void 0 ? void 0 : _initialState$errors[route.id], isHydrationRequest = needsRevalidation == null && (((_routeModule$clientLo = routeModule.clientLoader) === null || _routeModule$clientLo === void 0 ? void 0 : _routeModule$clientLo.hydrate) === true || !route.hasLoader);
      dataRoute.loader = async ({
        request,
        params
      }) => {
        try {
          return await prefetchStylesAndCallHandler(async () => routeModule.clientLoader ? routeModule.clientLoader({
            request,
            params,
            async serverLoader() {
              if (!route.hasLoader)
                throw getNoServerHandlerError("loader", route.id);
              if (isHydrationRequest) {
                if (initialError !== void 0)
                  throw initialError;
                return initialData;
              }
              let result2 = await fetchServerLoader(request);
              return await unwrapServerResponse(result2);
            }
          }) : fetchServerLoader(request));
        } finally {
          isHydrationRequest = false;
        }
      }, dataRoute.loader.hydrate = shouldHydrateRouteLoader(route, routeModule), dataRoute.action = ({
        request,
        params
      }) => prefetchStylesAndCallHandler(async () => routeModule.clientAction ? routeModule.clientAction({
        request,
        params,
        async serverAction() {
          if (!route.hasAction)
            throw getNoServerHandlerError("action", route.id);
          let result = await fetchServerAction(request);
          return await unwrapServerResponse(result);
        }
      }) : fetchServerAction(request));
    } else
      route.hasClientLoader || (dataRoute.loader = ({
        request
      }) => prefetchStylesAndCallHandler(() => fetchServerLoader(request))), route.hasClientAction || (dataRoute.action = ({
        request
      }) => prefetchStylesAndCallHandler(() => fetchServerAction(request))), dataRoute.lazy = async () => {
        let mod = await loadRouteModuleWithBlockingLinks(route, routeModulesCache), lazyRoute = {
          ...mod
        };
        if (mod.clientLoader) {
          let clientLoader = mod.clientLoader;
          lazyRoute.loader = (args) => clientLoader({
            ...args,
            async serverLoader() {
              if (!route.hasLoader)
                throw getNoServerHandlerError("loader", route.id);
              let response = await fetchServerLoader(args.request);
              return await unwrapServerResponse(response);
            }
          });
        }
        if (mod.clientAction) {
          let clientAction = mod.clientAction;
          lazyRoute.action = (args) => clientAction({
            ...args,
            async serverAction() {
              if (!route.hasAction)
                throw getNoServerHandlerError("action", route.id);
              let response = await fetchServerAction(args.request);
              return await unwrapServerResponse(response);
            }
          });
        }
        return needsRevalidation && (lazyRoute.shouldRevalidate = wrapShouldRevalidateForHdr(route.id, mod.shouldRevalidate, needsRevalidation)), {
          ...lazyRoute.loader ? {
            loader: lazyRoute.loader
          } : {},
          ...lazyRoute.action ? {
            action: lazyRoute.action
          } : {},
          hasErrorBoundary: lazyRoute.hasErrorBoundary,
          shouldRevalidate: lazyRoute.shouldRevalidate,
          handle: lazyRoute.handle,
          Component: lazyRoute.Component,
          ErrorBoundary: lazyRoute.ErrorBoundary
        };
      };
    let children = createClientRoutes(manifest, routeModulesCache, initialState, future2, route.id, routesByParentId, needsRevalidation);
    return children.length > 0 && (dataRoute.children = children), dataRoute;
  });
}
function wrapShouldRevalidateForHdr(routeId, routeShouldRevalidate, needsRevalidation) {
  let handledRevalidation = false;
  return (arg) => handledRevalidation ? routeShouldRevalidate ? routeShouldRevalidate(arg) : arg.defaultShouldRevalidate : (handledRevalidation = true, needsRevalidation.has(routeId));
}
async function loadRouteModuleWithBlockingLinks(route, routeModules) {
  let routeModule = await loadRouteModule(route, routeModules);
  return await prefetchStyleLinks(route, routeModule), {
    Component: getRouteModuleComponent(routeModule),
    ErrorBoundary: routeModule.ErrorBoundary,
    clientAction: routeModule.clientAction,
    clientLoader: routeModule.clientLoader,
    handle: routeModule.handle,
    links: routeModule.links,
    meta: routeModule.meta,
    shouldRevalidate: routeModule.shouldRevalidate
  };
}
async function fetchServerHandler(request, route) {
  let result = await fetchData(request, route.id);
  if (result instanceof Error)
    throw result;
  if (isRedirectResponse3(result))
    throw getRedirect(result);
  if (isCatchResponse(result))
    throw result;
  return isDeferredResponse(result) && result.body ? await parseDeferredReadableStream(result.body) : result;
}
function unwrapServerResponse(result) {
  if (isDeferredData3(result))
    return result.data;
  if (isResponse3(result)) {
    let contentType = result.headers.get("Content-Type");
    return contentType && /\bapplication\/json\b/.test(contentType) ? result.json() : result.text();
  }
  return result;
}
function getRedirect(response) {
  let status = parseInt(response.headers.get("X-Remix-Status"), 10) || 302, url = response.headers.get("X-Remix-Redirect"), headers2 = {}, revalidate = response.headers.get("X-Remix-Revalidate");
  revalidate && (headers2["X-Remix-Revalidate"] = revalidate);
  let reloadDocument = response.headers.get("X-Remix-Reload-Document");
  return reloadDocument && (headers2["X-Remix-Reload-Document"] = reloadDocument), redirect(url, {
    status,
    headers: headers2
  });
}
function getRouteModuleComponent(routeModule) {
  if (routeModule.default == null)
    return;
  if (!(typeof routeModule.default == "object" && Object.keys(routeModule.default).length === 0))
    return routeModule.default;
}
function shouldHydrateRouteLoader(route, routeModule) {
  return routeModule.clientLoader != null && (routeModule.clientLoader.hydrate === true || route.hasLoader !== true);
}
var React6;
var init_routes2 = __esm({
  "node_modules/@remix-run/react/dist/esm/routes.js"() {
    React6 = __toESM(require_react());
    init_router();
    init_dist2();
    init_routeModules();
    init_data2();
    init_links();
    init_errorBoundaries();
    init_fallback();
  }
});
function RemixBrowser(_props) {
  if (!router) {
    let initialPathname = window.__remixContext.url, hydratedPathname = window.location.pathname;
    if (initialPathname !== hydratedPathname) {
      let errorMsg = `Initial URL (${initialPathname}) does not match URL at time of hydration (${hydratedPathname}), reloading page...`;
      return console.error(errorMsg), window.location.reload(), /* @__PURE__ */ React7.createElement(React7.Fragment, null);
    }
    let routes22 = createClientRoutes(window.__remixManifest.routes, window.__remixRouteModules, window.__remixContext.state, window.__remixContext.future), hydrationData = {
      ...window.__remixContext.state,
      loaderData: {
        ...window.__remixContext.state.loaderData
      }
    }, initialMatches = matchRoutes(routes22, window.location);
    if (initialMatches)
      for (let match2 of initialMatches) {
        let routeId = match2.route.id, route = window.__remixRouteModules[routeId], manifestRoute = window.__remixManifest.routes[routeId];
        route && shouldHydrateRouteLoader(manifestRoute, route) && (route.HydrateFallback || !manifestRoute.hasLoader) ? hydrationData.loaderData[routeId] = void 0 : manifestRoute && !manifestRoute.hasLoader && (hydrationData.loaderData[routeId] = null);
      }
    hydrationData && hydrationData.errors && (hydrationData.errors = deserializeErrors2(hydrationData.errors)), router = createRouter({
      routes: routes22,
      history: createBrowserHistory(),
      future: {
        v7_normalizeFormMethod: true,
        v7_fetcherPersist: window.__remixContext.future.v3_fetcherPersist,
        v7_partialHydration: true,
        v7_prependBasename: true,
        v7_relativeSplatPath: window.__remixContext.future.v3_relativeSplatPath
      },
      hydrationData,
      mapRouteProperties
    }), router.state.initialized && (routerInitialized = true, router.initialize()), router.createRoutesForHMR = createClientRoutesWithHMRRevalidationOptOut, window.__remixRouter = router, hmrRouterReadyResolve && hmrRouterReadyResolve(router);
  }
  let [criticalCss, clearCriticalCss] = React7.useReducer(criticalCssReducer, window.__remixContext.criticalCss);
  window.__remixClearCriticalCss = clearCriticalCss;
  let [location, setLocation] = React7.useState(router.state.location);
  return React7.useLayoutEffect(() => {
    routerInitialized || (routerInitialized = true, router.initialize());
  }, []), React7.useLayoutEffect(() => router.subscribe((newState) => {
    newState.location !== location && setLocation(newState.location);
  }), [location]), /* @__PURE__ */ React7.createElement(RemixContext.Provider, {
    value: {
      manifest: window.__remixManifest,
      routeModules: window.__remixRouteModules,
      future: window.__remixContext.future,
      criticalCss
    }
  }, /* @__PURE__ */ React7.createElement(RemixErrorBoundary, {
    location
  }, /* @__PURE__ */ React7.createElement(RouterProvider2, {
    router,
    fallbackElement: null,
    future: {
      v7_startTransition: true
    }
  })));
}
var React7;
var router;
var routerInitialized;
var hmrAbortController;
var hmrRouterReadyResolve;
var hmrRouterReadyPromise;
var criticalCssReducer;
var init_browser = __esm({
  "node_modules/@remix-run/react/dist/esm/browser.js"() {
    init_router();
    React7 = __toESM(require_react());
    init_dist();
    init_dist2();
    init_components();
    init_errorBoundaries();
    init_errors3();
    init_routes2();
    routerInitialized = false, hmrRouterReadyPromise = new Promise((resolve) => {
      hmrRouterReadyResolve = resolve;
    }).catch(() => {
    }), criticalCssReducer = () => {
    };
    import.meta && import.meta.hot && import.meta.hot.accept("remix:manifest", async ({
      assetsManifest,
      needsRevalidation
    }) => {
      let router2 = await hmrRouterReadyPromise;
      if (!router2) {
        console.error("Failed to accept HMR update because the router was not ready.");
        return;
      }
      let routeIds = [...new Set(router2.state.matches.map((m) => m.route.id).concat(Object.keys(window.__remixRouteModules)))];
      hmrAbortController && hmrAbortController.abort(), hmrAbortController = new AbortController();
      let signal = hmrAbortController.signal, newRouteModules = Object.assign({}, window.__remixRouteModules, Object.fromEntries((await Promise.all(routeIds.map(async (id) => {
        var _assetsManifest$hmr, _window$__remixRouteM, _window$__remixRouteM2, _window$__remixRouteM3;
        if (!assetsManifest.routes[id])
          return null;
        let imported = await import(assetsManifest.routes[id].module + `?t=${(_assetsManifest$hmr = assetsManifest.hmr) === null || _assetsManifest$hmr === void 0 ? void 0 : _assetsManifest$hmr.timestamp}`);
        return [id, {
          ...imported,
          // react-refresh takes care of updating these in-place,
          // if we don't preserve existing values we'll loose state.
          default: imported.default ? ((_window$__remixRouteM = window.__remixRouteModules[id]) === null || _window$__remixRouteM === void 0 ? void 0 : _window$__remixRouteM.default) ?? imported.default : imported.default,
          ErrorBoundary: imported.ErrorBoundary ? ((_window$__remixRouteM2 = window.__remixRouteModules[id]) === null || _window$__remixRouteM2 === void 0 ? void 0 : _window$__remixRouteM2.ErrorBoundary) ?? imported.ErrorBoundary : imported.ErrorBoundary,
          HydrateFallback: imported.HydrateFallback ? ((_window$__remixRouteM3 = window.__remixRouteModules[id]) === null || _window$__remixRouteM3 === void 0 ? void 0 : _window$__remixRouteM3.HydrateFallback) ?? imported.HydrateFallback : imported.HydrateFallback
        }];
      }))).filter(Boolean)));
      Object.assign(window.__remixRouteModules, newRouteModules);
      let routes22 = createClientRoutesWithHMRRevalidationOptOut(needsRevalidation, assetsManifest.routes, window.__remixRouteModules, window.__remixContext.state, window.__remixContext.future);
      router2._internalSetRoutes(routes22);
      let unsub = router2.subscribe((state) => {
        if (state.revalidation === "idle") {
          if (unsub(), signal.aborted)
            return;
          setTimeout(() => {
            Object.assign(window.__remixManifest, assetsManifest), window.$RefreshRuntime$.performReactRefresh();
          }, 1);
        }
      });
      window.__remixRevalidation = (window.__remixRevalidation || 0) + 1, router2.revalidate();
    });
  }
});
function ScrollRestoration2({
  getKey,
  ...props
}) {
  let location = useLocation(), matches2 = useMatches();
  useScrollRestoration({
    getKey,
    storageKey: STORAGE_KEY
  });
  let key = React8.useMemo(
    () => {
      if (!getKey)
        return null;
      let userKey = getKey(location, matches2);
      return userKey !== location.key ? userKey : null;
    },
    // Nah, we only need this the first time for the SSR render
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  ), restoreScroll = ((STORAGE_KEY2, restoreKey) => {
    if (!window.history.state || !window.history.state.key) {
      let key2 = Math.random().toString(32).slice(2);
      window.history.replaceState({
        key: key2
      }, "");
    }
    try {
      let storedY = JSON.parse(sessionStorage.getItem(STORAGE_KEY2) || "{}")[restoreKey || window.history.state.key];
      typeof storedY == "number" && window.scrollTo(0, storedY);
    } catch (error) {
      console.error(error), sessionStorage.removeItem(STORAGE_KEY2);
    }
  }).toString();
  return /* @__PURE__ */ React8.createElement("script", _extends4({}, props, {
    suppressHydrationWarning: true,
    dangerouslySetInnerHTML: {
      __html: `(${restoreScroll})(${JSON.stringify(STORAGE_KEY)}, ${JSON.stringify(key)})`
    }
  }));
}
var React8;
var STORAGE_KEY;
var init_scroll_restoration = __esm({
  "node_modules/@remix-run/react/dist/esm/scroll-restoration.js"() {
    init_rollupPluginBabelHelpers();
    React8 = __toESM(require_react());
    init_dist2();
    STORAGE_KEY = "positions";
  }
});
var require_server = __commonJS({
  "node_modules/react-router-dom/server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var React270 = require_react(), router2 = (init_router(), __toCommonJS(router_exports)), reactRouter = (init_dist(), __toCommonJS(dist_exports)), reactRouterDom = (init_dist2(), __toCommonJS(dist_exports2));
    function _interopNamespace(e) {
      if (e && e.__esModule)
        return e;
      var n = /* @__PURE__ */ Object.create(null);
      return e && Object.keys(e).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function() {
              return e[k];
            }
          });
        }
      }), n.default = e, Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React270);
    function StaticRouter({
      basename,
      children,
      location: locationProp = "/",
      future: future2
    }) {
      typeof locationProp == "string" && (locationProp = reactRouterDom.parsePath(locationProp));
      let action4 = router2.Action.Pop, location = {
        pathname: locationProp.pathname || "/",
        search: locationProp.search || "",
        hash: locationProp.hash || "",
        state: locationProp.state || null,
        key: locationProp.key || "default"
      }, staticNavigator = getStatelessNavigator();
      return /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Router, {
        basename,
        children,
        location,
        navigationType: action4,
        navigator: staticNavigator,
        future: future2,
        static: true
      });
    }
    function StaticRouterProvider2({
      context,
      router: router$1,
      hydrate = true,
      nonce
    }) {
      router$1 && context || router2.UNSAFE_invariant(false, "You must provide `router` and `context` to <StaticRouterProvider>");
      let dataRouterContext = {
        router: router$1,
        navigator: getStatelessNavigator(),
        static: true,
        staticContext: context,
        basename: context.basename || "/"
      }, fetchersContext = /* @__PURE__ */ new Map(), hydrateScript = "";
      if (hydrate !== false) {
        let data = {
          loaderData: context.loaderData,
          actionData: context.actionData,
          errors: serializeErrors2(context.errors)
        };
        hydrateScript = `window.__staticRouterHydrationData = JSON.parse(${htmlEscape(JSON.stringify(JSON.stringify(data)))});`;
      }
      let {
        state
      } = dataRouterContext.router;
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_DataRouterContext.Provider, {
        value: dataRouterContext
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_DataRouterStateContext.Provider, {
        value: state
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_FetchersContext.Provider, {
        value: fetchersContext
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_ViewTransitionContext.Provider, {
        value: {
          isTransitioning: false
        }
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Router, {
        basename: dataRouterContext.basename,
        location: state.location,
        navigationType: state.historyAction,
        navigator: dataRouterContext.navigator,
        static: dataRouterContext.static,
        future: {
          v7_relativeSplatPath: router$1.future.v7_relativeSplatPath
        }
      }, /* @__PURE__ */ React__namespace.createElement(DataRoutes3, {
        routes: router$1.routes,
        future: router$1.future,
        state
      })))))), hydrateScript ? /* @__PURE__ */ React__namespace.createElement("script", {
        suppressHydrationWarning: true,
        nonce,
        dangerouslySetInnerHTML: {
          __html: hydrateScript
        }
      }) : null);
    }
    function DataRoutes3({
      routes: routes22,
      future: future2,
      state
    }) {
      return reactRouter.UNSAFE_useRoutesImpl(routes22, void 0, state, future2);
    }
    function serializeErrors2(errors) {
      if (!errors)
        return null;
      let entries = Object.entries(errors), serialized = {};
      for (let [key, val] of entries)
        router2.isRouteErrorResponse(val) ? serialized[key] = {
          ...val,
          __type: "RouteErrorResponse"
        } : val instanceof Error ? serialized[key] = {
          message: val.message,
          __type: "Error",
          // If this is a subclass (i.e., ReferenceError), send up the type so we
          // can re-create the same type during hydration.
          ...val.name !== "Error" ? {
            __subType: val.name
          } : {}
        } : serialized[key] = val;
      return serialized;
    }
    function getStatelessNavigator() {
      return {
        createHref,
        encodeLocation,
        push(to) {
          throw new Error(`You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)})\` somewhere in your app.`);
        },
        replace(to) {
          throw new Error(`You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)}, { replace: true })\` somewhere in your app.`);
        },
        go(delta) {
          throw new Error(`You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${delta})\` somewhere in your app.`);
        },
        back() {
          throw new Error("You cannot use navigator.back() on the server because it is a stateless environment.");
        },
        forward() {
          throw new Error("You cannot use navigator.forward() on the server because it is a stateless environment.");
        }
      };
    }
    function createStaticHandler2(routes22, opts) {
      return router2.createStaticHandler(routes22, {
        ...opts,
        mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties
      });
    }
    function createStaticRouter2(routes22, context, opts = {}) {
      let manifest = {}, dataRoutes = router2.UNSAFE_convertRoutesToDataRoutes(routes22, reactRouter.UNSAFE_mapRouteProperties, void 0, manifest), matches2 = context.matches.map((match2) => {
        let route = manifest[match2.route.id] || match2.route;
        return {
          ...match2,
          route
        };
      }), msg = (method) => `You cannot use router.${method}() on the server because it is a stateless environment`;
      return {
        get basename() {
          return context.basename;
        },
        get future() {
          return {
            v7_fetcherPersist: false,
            v7_normalizeFormMethod: false,
            v7_partialHydration: opts.future?.v7_partialHydration === true,
            v7_prependBasename: false,
            v7_relativeSplatPath: opts.future?.v7_relativeSplatPath === true
          };
        },
        get state() {
          return {
            historyAction: router2.Action.Pop,
            location: context.location,
            matches: matches2,
            loaderData: context.loaderData,
            actionData: context.actionData,
            errors: context.errors,
            initialized: true,
            navigation: router2.IDLE_NAVIGATION,
            restoreScrollPosition: null,
            preventScrollReset: false,
            revalidation: "idle",
            fetchers: /* @__PURE__ */ new Map(),
            blockers: /* @__PURE__ */ new Map()
          };
        },
        get routes() {
          return dataRoutes;
        },
        get window() {
        },
        initialize() {
          throw msg("initialize");
        },
        subscribe() {
          throw msg("subscribe");
        },
        enableScrollRestoration() {
          throw msg("enableScrollRestoration");
        },
        navigate() {
          throw msg("navigate");
        },
        fetch() {
          throw msg("fetch");
        },
        revalidate() {
          throw msg("revalidate");
        },
        createHref,
        encodeLocation,
        getFetcher() {
          return router2.IDLE_FETCHER;
        },
        deleteFetcher() {
          throw msg("deleteFetcher");
        },
        dispose() {
          throw msg("dispose");
        },
        getBlocker() {
          return router2.IDLE_BLOCKER;
        },
        deleteBlocker() {
          throw msg("deleteBlocker");
        },
        _internalFetchControllers: /* @__PURE__ */ new Map(),
        _internalActiveDeferreds: /* @__PURE__ */ new Map(),
        _internalSetRoutes() {
          throw msg("_internalSetRoutes");
        }
      };
    }
    function createHref(to) {
      return typeof to == "string" ? to : reactRouterDom.createPath(to);
    }
    function encodeLocation(to) {
      let href = typeof to == "string" ? to : reactRouterDom.createPath(to), encoded = ABSOLUTE_URL_REGEX4.test(href) ? new URL(href) : new URL(href, "http://localhost");
      return {
        pathname: encoded.pathname,
        search: encoded.search,
        hash: encoded.hash
      };
    }
    var ABSOLUTE_URL_REGEX4 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, ESCAPE_LOOKUP3 = {
      "&": "\\u0026",
      ">": "\\u003e",
      "<": "\\u003c",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    }, ESCAPE_REGEX3 = /[&><\u2028\u2029]/g;
    function htmlEscape(str) {
      return str.replace(ESCAPE_REGEX3, (match2) => ESCAPE_LOOKUP3[match2]);
    }
    exports.StaticRouter = StaticRouter;
    exports.StaticRouterProvider = StaticRouterProvider2;
    exports.createStaticHandler = createStaticHandler2;
    exports.createStaticRouter = createStaticRouter2;
  }
});
function RemixServer({
  context,
  url,
  abortDelay
}) {
  typeof url == "string" && (url = new URL(url));
  let {
    manifest,
    routeModules,
    criticalCss,
    serverHandoffString
  } = context, routes22 = createServerRoutes(manifest.routes, routeModules, context.future);
  context.staticHandlerContext.loaderData = {
    ...context.staticHandlerContext.loaderData
  };
  for (let match2 of context.staticHandlerContext.matches) {
    let routeId = match2.route.id, route = routeModules[routeId], manifestRoute = context.manifest.routes[routeId];
    route && shouldHydrateRouteLoader(manifestRoute, route) && (route.HydrateFallback || !manifestRoute.hasLoader) && (context.staticHandlerContext.loaderData[routeId] = void 0);
  }
  let router2 = (0, import_server2.createStaticRouter)(routes22, context.staticHandlerContext, {
    future: {
      v7_partialHydration: true,
      v7_relativeSplatPath: context.future.v3_relativeSplatPath
    }
  });
  return /* @__PURE__ */ React9.createElement(RemixContext.Provider, {
    value: {
      manifest,
      routeModules,
      criticalCss,
      serverHandoffString,
      future: context.future,
      serializeError: context.serializeError,
      abortDelay
    }
  }, /* @__PURE__ */ React9.createElement(RemixErrorBoundary, {
    location: router2.state.location
  }, /* @__PURE__ */ React9.createElement(import_server2.StaticRouterProvider, {
    router: router2,
    context: context.staticHandlerContext,
    hydrate: false
  })));
}
var React9;
var import_server2;
var init_server2 = __esm({
  "node_modules/@remix-run/react/dist/esm/server.js"() {
    React9 = __toESM(require_react()), import_server2 = __toESM(require_server());
    init_components();
    init_errorBoundaries();
    init_routes2();
  }
});
var esm_exports2 = {};
__export(esm_exports2, {
  Await: () => Await2,
  Form: () => Form,
  Link: () => Link2,
  Links: () => Links,
  LiveReload: () => LiveReload,
  Meta: () => Meta,
  NavLink: () => NavLink2,
  Outlet: () => Outlet,
  PrefetchPageLinks: () => PrefetchPageLinks,
  RemixBrowser: () => RemixBrowser,
  RemixServer: () => RemixServer,
  Scripts: () => Scripts,
  ScrollRestoration: () => ScrollRestoration2,
  UNSAFE_RemixContext: () => RemixContext,
  createPath: () => createPath,
  defer: () => defer3,
  generatePath: () => generatePath,
  isRouteErrorResponse: () => isRouteErrorResponse,
  json: () => json3,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  parsePath: () => parsePath,
  redirect: () => redirect3,
  redirectDocument: () => redirectDocument2,
  resolvePath: () => resolvePath,
  unstable_usePrompt: () => usePrompt,
  unstable_useViewTransitionState: () => useViewTransitionState,
  useActionData: () => useActionData2,
  useAsyncError: () => useAsyncError,
  useAsyncValue: () => useAsyncValue,
  useBeforeUnload: () => useBeforeUnload,
  useBlocker: () => useBlocker,
  useFetcher: () => useFetcher2,
  useFetchers: () => useFetchers,
  useFormAction: () => useFormAction,
  useHref: () => useHref,
  useLoaderData: () => useLoaderData2,
  useLocation: () => useLocation,
  useMatch: () => useMatch,
  useMatches: () => useMatches2,
  useNavigate: () => useNavigate,
  useNavigation: () => useNavigation,
  useNavigationType: () => useNavigationType,
  useOutlet: () => useOutlet,
  useOutletContext: () => useOutletContext,
  useParams: () => useParams,
  useResolvedPath: () => useResolvedPath,
  useRevalidator: () => useRevalidator,
  useRouteError: () => useRouteError,
  useRouteLoaderData: () => useRouteLoaderData2,
  useSearchParams: () => useSearchParams,
  useSubmit: () => useSubmit
});
var init_esm2 = __esm({
  "node_modules/@remix-run/react/dist/esm/index.js"() {
    init_dist2();
    init_esm();
    init_browser();
    init_components();
    init_scroll_restoration();
    init_server2();
  }
});
var require_react_dom_server_legacy_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React270 = require_react(), ReactVersion = "18.2.0", ReactSharedInternals = React270.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      function beginWriting(destination) {
      }
      function writeChunk(destination, chunk) {
        writeChunkAndReturn(destination, chunk);
      }
      function writeChunkAndReturn(destination, chunk) {
        return destination.push(chunk);
      }
      function completeWriting(destination) {
      }
      function close(destination) {
        destination.push(null);
      }
      function stringToChunk(content) {
        return content;
      }
      function stringToPrecomputedChunk(content) {
        return content;
      }
      function closeWithError(destination, error2) {
        destination.destroy(error2);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), false;
        } catch {
          return true;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? true : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? false : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = true, true) : (illegalAttributeNameCache[attributeName] = true, error("Invalid attribute name: `%s`", attributeName), false);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return false;
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag)
              return false;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix2 = name.toLowerCase().slice(0, 5);
            return prefix2 !== "data-" && prefix2 !== "aria-";
          }
          default:
            return false;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          true,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize3 = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          false,
          // sanitizeURL
          false
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          false,
          // sanitizeURL
          false
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        false,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        true,
        // sanitizeURL
        false
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          true,
          // sanitizeURL
          true
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix2, key) {
        return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix2) {
          isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return true;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = true, true;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = true, true;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = true, false;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = true, true;
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = true, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return true;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = true, true;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = true, true;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = true, true;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = true, true;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return true;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = true, true;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = true, true;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = true, true;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = true, true;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = true, true;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = true, true;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = true, true) : isReserved ? true : shouldRemoveAttributeWithWarning(name, value, propertyInfo, false) ? (warnedProperties$1[name] = true, false) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = true), true);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = true, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = true, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = true, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = true, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml3(string) {
        checkHtmlStringCoercion(string);
        var str = "" + string, match2 = matchHtmlRegExp.exec(str);
        if (!match2)
          return str;
        var escape2, html = "", index, lastIndex = 0;
        for (index = match2.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape2 = "&quot;";
              break;
            case 38:
              escape2 = "&amp;";
              break;
            case 39:
              escape2 = "&#x27;";
              break;
            case 60:
              escape2 = "&lt;";
              break;
            case 62:
              escape2 = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += str.substring(lastIndex, index)), lastIndex = index + 1, html += escape2;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      function escapeTextForBrowser(text2) {
        return typeof text2 == "boolean" || typeof text2 == "number" ? "" + text2 : escapeHtml3(text2);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = false;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = true, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var startInlineScript = "<script>", endInlineScript = "<\/script>", startScriptSrc = '<script src="', startModuleSrc = '<script type="module" src="', endAsyncScript = '" async=""><\/script>';
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match2, prefix2, s, suffix) {
        return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : '<script nonce="' + escapeTextForBrowser(nonce) + '">', bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, escapeBootstrapScriptContent(bootstrapScriptContent), endInlineScript), bootstrapScripts !== void 0)
          for (var i = 0; i < bootstrapScripts.length; i++)
            bootstrapChunks.push(startScriptSrc, escapeTextForBrowser(bootstrapScripts[i]), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, escapeTextForBrowser(bootstrapModules[_i]), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: idPrefix + "P:",
          segmentPrefix: idPrefix + "S:",
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: false,
          sentCompleteBoundaryFunction: false,
          sentClientRenderFunction: false
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function getChildFormatContext(parentContext, type, props) {
        switch (type) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return responseState.boundaryPrefix + generatedID.toString(16);
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id += "H" + localId.toString(32)), id + ":";
      }
      function encodeHTMLTextNode(text2) {
        return escapeTextForBrowser(text2);
      }
      var textSeparator = "<!-- -->";
      function pushTextInstance(target, text2, responseState, textEmbedded) {
        return text2 === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(encodeHTMLTextNode(text2)), true);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = escapeTextForBrowser(hyphenateStyleName(styleName));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = ' style="', styleAssign = ":", styleSeparator = ";";
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = true;
        for (var styleName in style)
          if (hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = escapeTextForBrowser(styleName), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim())) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = styleValue + "px" : valueChunk = "" + styleValue : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim()))), isFirst ? (isFirst = false, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = " ", attributeAssign = '="', attributeEnd = '"', attributeEmptyString = '=""';
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (
          // shouldIgnoreAttribute
          // We have already filtered out null/undefined and reserved words.
          !(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))
        ) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = attributeName;
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === true ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === false || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, name, attributeAssign, escapeTextForBrowser(value), attributeEnd);
          }
        }
      }
      var endOfStartTag = ">", endOfStartTagSelfClosing = "/>";
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push("" + html));
        }
      }
      var didWarnDefaultInputValue = false, didWarnDefaultChecked = false, didWarnDefaultSelectValue = false, didWarnDefaultTextareaValue = false, didWarnInvalidOptionChildren = false, didWarnInvalidOptionInnerHTML = false, didWarnSelectedSetOnOption = false;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array = isArray(value);
            props.multiple && !array ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = true), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React270.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = true, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = ' selected=""';
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = true);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = true, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i = 0; i < selectedValue.length; i++) {
              checkAttributeStringCoercion(selectedValue[i], "value");
              var v = "" + selectedValue[i];
              if (v === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = true), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = true), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = true), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(encodeHTMLTextNode("" + value))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(encodeHTMLTextNode(children)), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, propKey, attributeAssign, escapeTextForBrowser(propValue), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = `
`;
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, html) : (checkHtmlStringCoercion(html), target.push("" + html)));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = "<" + tag, validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = "<!DOCTYPE html>";
      function pushStartInstance(target, type, props, responseState, formatContext) {
        switch (validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type.indexOf("-") === -1 && typeof props.is != "string" && type.toLowerCase() !== type && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type, responseState);
          default:
            return type.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type, responseState) : pushStartCustomElement(target, props, type, responseState);
        }
      }
      var endTag1 = "</", endTag2 = ">";
      function pushEndInstance(target, type, props) {
        switch (type) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, type, endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i = 0; i < bootstrapChunks.length - 1; i++)
          writeChunk(destination, bootstrapChunks[i]);
        return i < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i]) : true;
      }
      var placeholder1 = '<template id="', placeholder2 = '"></template>';
      function writePlaceholder(destination, responseState, id) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = id.toString(16);
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = "<!--$-->", startPendingSuspenseBoundary1 = '<!--$?--><template id="', startPendingSuspenseBoundary2 = '"></template>', startClientRenderedSuspenseBoundary = "<!--$!-->", endSuspenseBoundary = "<!--/$-->", clientRenderedSuspenseBoundaryError1 = "<template", clientRenderedSuspenseBoundaryErrorAttrInterstitial = '"', clientRenderedSuspenseBoundaryError1A = ' data-dgst="', clientRenderedSuspenseBoundaryError1B = ' data-msg="', clientRenderedSuspenseBoundaryError1C = ' data-stck="', clientRenderedSuspenseBoundaryError2 = "></template>";
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, escapeTextForBrowser(errorDigest)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, escapeTextForBrowser(errorMesssage)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, escapeTextForBrowser(errorComponentStack)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = '<div hidden id="', startSegmentHTML2 = '">', endSegmentHTML = "</div>", startSegmentSVG = '<svg aria-hidden="true" style="display:none" id="', startSegmentSVG2 = '">', endSegmentSVG = "</svg>", startSegmentMathML = '<math aria-hidden="true" style="display:none" id="', startSegmentMathML2 = '">', endSegmentMathML = "</math>", startSegmentTable = '<table hidden id="', startSegmentTable2 = '">', endSegmentTable = "</table>", startSegmentTableBody = '<table hidden><tbody id="', startSegmentTableBody2 = '">', endSegmentTableBody = "</tbody></table>", startSegmentTableRow = '<table hidden><tr id="', startSegmentTableRow2 = '">', endSegmentTableRow = "</tr></table>", startSegmentColGroup = '<table hidden><colgroup id="', startSegmentColGroup2 = '">', endSegmentColGroup = "</colgroup></table>";
      function writeStartSegment(destination, responseState, formatContext, id) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = completeSegmentFunction + ';$RS("', completeSegmentScript1Partial = '$RS("', completeSegmentScript2 = '","', completeSegmentScript3 = '")<\/script>';
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = true, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = contentSegmentID.toString(16);
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = completeBoundaryFunction + ';$RC("', completeBoundaryScript1Partial = '$RC("', completeBoundaryScript2 = '","', completeBoundaryScript3 = '")<\/script>';
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = true, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = contentSegmentID.toString(16);
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = clientRenderFunction + ';$RX("', clientRenderScript1Partial = '$RX("', clientRenderScript1A = '"', clientRenderScript2 = ")<\/script>", clientRenderErrorScriptArgInterstitial = ",";
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = true, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorDigest || ""))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorMessage || ""))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorComponentStack))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match2) {
          switch (match2) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      function createResponseState$1(generateStaticMarkup, identifierPrefix) {
        var responseState = createResponseState(identifierPrefix, void 0);
        return {
          // Keep this in sync with ReactDOMServerFormatConfig
          bootstrapChunks: responseState.bootstrapChunks,
          startInlineScript: responseState.startInlineScript,
          placeholderPrefix: responseState.placeholderPrefix,
          segmentPrefix: responseState.segmentPrefix,
          boundaryPrefix: responseState.boundaryPrefix,
          idPrefix: responseState.idPrefix,
          nextSuspenseID: responseState.nextSuspenseID,
          sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
          sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
          sentClientRenderFunction: responseState.sentClientRenderFunction,
          // This is an extra field for the legacy renderer
          generateStaticMarkup
        };
      }
      function createRootFormatContext() {
        return {
          insertionMode: HTML_MODE,
          // We skip the root mode because we don't want to emit the DOCTYPE in legacy mode.
          selectedValue: null
        };
      }
      function pushTextInstance$1(target, text2, responseState, textEmbedded) {
        return responseState.generateStaticMarkup ? (target.push(escapeTextForBrowser(text2)), false) : pushTextInstance(target, text2, responseState, textEmbedded);
      }
      function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
        if (!responseState.generateStaticMarkup)
          return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
      }
      function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? true : writeStartCompletedSuspenseBoundary(destination);
      }
      function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
        return responseState.generateStaticMarkup ? true : writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
      }
      function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? true : writeEndCompletedSuspenseBoundary(destination);
      }
      function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? true : writeEndClientRenderedSuspenseBoundary(destination);
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0)
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match2 && match2[1] || "";
            }
          return `
` + prefix + name;
        }
      }
      var reentry = false, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = false, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
      }
      function shouldConstruct(Component9) {
        var prototype = Component9.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values2, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = true, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type, unmaskedContext) {
        {
          var contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return context;
        }
      }
      function processChildContext(instance, type, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = true, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue2 = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue2 = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context, nextValue) {
        var prevValue;
        prevValue = context._currentValue2, context._currentValue2 = nextValue, context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer2 = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context && error("The parent context is not the expected context. This is probably a bug in React.");
        {
          var _value = prevSnapshot.parentValue;
          _value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue2 = _value, context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer2 = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context) {
        var value = context._currentValue2;
        return value;
      }
      function get2(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = true;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return false;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get2(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get2(inst);
          internals.replace = true, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get2(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context = readContext(contextType) : context = maskedLegacyContext;
        var instance = new ctor(props, context);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== true ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              // keep this warning in sync with ReactStrictModeWarning.js
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = true);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = false, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = true, i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
              var partial = oldQueue[i], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = false, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: false
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context) {
        var overflow = context.overflow, idWithLeadingBit = context.id, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = false, didScheduleRenderPhaseUpdate = false, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = false, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), false;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i]))
            return false;
        return true;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = false, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = true, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = false, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = true, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = false, localIdCounter = 0;
      }
      function finishHooks(Component9, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = false, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component9(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = false, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = false, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context) {
        return isInHookUserCodeInDev && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context);
      }
      function useContext32(context) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context);
      }
      function basicStateReducer(state, action4) {
        return typeof action4 == "function" ? action4(state) : action4;
      }
      function useState52(initialState) {
        return currentHookNameInDev = "useState", useReducer4(
          basicStateReducer,
          // useReducer has a special case to support lazy useState initializers
          initialState
        );
      }
      function useReducer4(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action4 = update.action;
                isInHookUserCodeInDev = true, newState = reducer(newState, action4), isInHookUserCodeInDev = false, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = true;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = false, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo28(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = true;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = false, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef66(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect5(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action4) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = true;
          var update = {
            action: action4,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback56(callback, deps) {
        return useMemo28(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition() {
        return resolveCurrentlyRenderingComponent(), [false, unsupportedStartTransition];
      }
      function useId28() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop21() {
      }
      var Dispatcher2 = {
        readContext: readContext$1,
        useContext: useContext32,
        useMemo: useMemo28,
        useReducer: useReducer4,
        useRef: useRef66,
        useState: useState52,
        useInsertionEffect: noop21,
        useLayoutEffect: useLayoutEffect5,
        useCallback: useCallback56,
        // useImperativeHandle is not run in the server environment
        useImperativeHandle: noop21,
        // Effects are not run in the server environment.
        useEffect: noop21,
        // Debugging effect
        useDebugValue: noop21,
        useDeferredValue,
        useTransition,
        useId: useId28,
        // Subscriptions are not setup in a server environment.
        useMutableSource,
        useSyncExternalStore
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler(error2) {
        return console.error(error2), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError2 === void 0 ? defaultErrorHandler : onError2,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          // Root segments are never embedded in Text on either edge
          false,
          false
        );
        rootSegment.parentFlushed = true;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: false,
          pendingTasks: 0,
          forceClientRender: false,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index, boundary2, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          // lazily assigned later
          index,
          parentFlushed: false,
          chunks: [],
          children: [],
          formatContext,
          boundary: boundary2,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type
        };
      }
      function pushFunctionComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type
        };
      }
      function pushClassComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary2, error2) {
        {
          var errorMessage;
          typeof error2 == "string" ? errorMessage = error2 : error2 && typeof error2.message == "string" ? errorMessage = error2.message : errorMessage = String(error2);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary2.errorMessage = errorMessage, boundary2.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error2) {
        var errorDigest = request.onError(error2);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error2) {
        var onShellError = request.onShellError;
        onShellError(error2);
        var onFatalError = request.onFatalError;
        onFatalError(error2), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error2)) : (request.status = CLOSING, request.fatalError = error2);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          // boundaries never require text embedding at their edges because comment nodes bound them
          false,
          false
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = false;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          // boundaries never require text embedding at their edges because comment nodes bound them
          false,
          false
        );
        contentRootSegment.parentFlushed = true, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error2) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = true, newBoundary.errorDigest = logRecoverableError(request, error2), captureBoundaryErrorDetailsDev(newBoundary, error2);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type, props) {
        pushBuiltInComponentStackInDEV(task, type);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
        segment.lastPushedText = false;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type), segment.lastPushedText = false, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component9) {
        return Component9.prototype && Component9.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component9, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component9(props, secondArg);
        return finishHooks(Component9, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component9, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component9) || "a component"), didWarnAboutReassigningProps = true);
        {
          var childContextTypes = Component9.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component9, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component9, props) {
        pushClassComponentStackInDEV(task, Component9);
        var maskedContext = getMaskedContext(Component9, task.legacyContext), instance = constructClassInstance(Component9, props, maskedContext);
        mountClassInstance(instance, Component9, props, maskedContext), finishClassComponent(request, task, instance, Component9, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = false, didWarnAboutGenerators = false, didWarnAboutMaps = false, hasWarnedAboutUsingContextAsConsumer = false;
      function renderIndeterminateComponent(request, task, Component9, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component9, task.legacyContext), pushFunctionComponentStackInDEV(task, Component9), Component9.prototype && typeof Component9.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component9) || "Unknown";
          didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = true);
        }
        var value = renderWithHooks(request, task, Component9, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component9) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = true);
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = true);
          }
          mountClassInstance(value, Component9, props, legacyContext), finishClassComponent(request, task, value, Component9, props);
        } else if (validateFunctionComponentInDev(Component9), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component9) {
        {
          if (Component9 && Component9.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component9.displayName || Component9.name || "Component"), typeof Component9.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true);
          }
          if (typeof Component9.contextType == "object" && Component9.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true);
          }
        }
      }
      function resolveDefaultProps(Component9, baseProps) {
        if (Component9 && Component9.defaultProps) {
          var props = assign({}, baseProps), defaultProps2 = Component9.defaultProps;
          for (var propName in defaultProps2)
            props[propName] === void 0 && (props[propName] = defaultProps2[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type, props, ref) {
        pushFunctionComponentStackInDEV(task, type.render);
        var children = renderWithHooks(request, task, type.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type, props, ref) {
        var innerType = type.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context, props) {
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = true, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var render = props.children;
        typeof render != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context), newChildren = render(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type, props) {
        var context = type._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context, value), renderNodeDestructive(request, task, children), task.context = popProvider(context), prevSnapshot !== task.context && error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component9 = init(payload), resolvedProps = resolveDefaultProps(Component9, props);
        renderElement(request, task, Component9, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type, props, ref) {
        if (typeof type == "function")
          if (shouldConstruct$1(type)) {
            renderClassComponent(request, task, type, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type, props);
            return;
          }
        if (typeof type == "string") {
          renderHostElement(request, task, type, props);
          return;
        }
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type == "object" && type !== null)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type, props);
              return;
            }
          }
        var info = "";
        throw (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
        iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = true), iterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = true);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x) {
          throw typeof x == "object" && x !== null && typeof x.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x) {
                throw typeof x == "object" && x !== null && typeof x.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step = iterator.next();
              if (!step.done) {
                var children = [];
                do
                  children.push(step.value), step = iterator.next();
                while (!step.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i = 0; i < totalChildren; i++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
          try {
            renderNode(request, task, children[i]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          // Adopt the parent segment's leading text embed
          segment.lastPushedText,
          // Assume we are text embedded at the trailing edge
          true
        );
        segment.children.push(newSegment), segment.lastPushedText = false;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x) {
          if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
            spawnNewSuspendedTask(request, task, x), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x;
        }
      }
      function erroredTask(request, boundary2, segment, error2) {
        var errorDigest = logRecoverableError(request, error2);
        if (boundary2 === null ? fatalError(request, error2) : (boundary2.pendingTasks--, boundary2.forceClientRender || (boundary2.forceClientRender = true, boundary2.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary2, error2), boundary2.parentFlushed && request.clientRenderedBoundaries.push(boundary2))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary2 = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary2, segment);
      }
      function abortTask(task, request, reason) {
        var boundary2 = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary2 === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary2.pendingTasks--, !boundary2.forceClientRender) {
            boundary2.forceClientRender = true;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary2.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary2, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary2.parentFlushed && request.clientRenderedBoundaries.push(boundary2);
          }
          if (boundary2.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary2.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary2, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = true, childSegment.status === COMPLETED && queueCompletedSegment(boundary2, childSegment);
        } else {
          var completedSegments = boundary2.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary2, segment) {
        if (boundary2 === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary2.pendingTasks--, !boundary2.forceClientRender) {
          if (boundary2.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary2, segment), boundary2.parentFlushed && request.completedBoundaries.push(boundary2), boundary2.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary2.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary2, segment);
            var completedSegments = boundary2.completedSegments;
            completedSegments.length === 1 && boundary2.parentFlushed && request.partialBoundaries.push(boundary2);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher2;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher2 && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = true, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = false, segment.textEmbedded = false, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r = true, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r = writeChunkAndReturn(destination, chunks[chunkIdx])), r;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary2 = segment.boundary;
        if (boundary2 === null)
          return flushSubtree(request, destination, segment);
        if (boundary2.parentFlushed = true, boundary2.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary2.errorDigest, boundary2.errorMessage, boundary2.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
        if (boundary2.pendingTasks > 0) {
          boundary2.rootSegmentID = request.nextSegmentId++, boundary2.completedSegments.length > 0 && request.partialBoundaries.push(boundary2);
          var id = boundary2.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary2.byteSize > request.progressiveChunkSize)
            return boundary2.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary2), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary2.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
          var completedSegments = boundary2.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary2) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary2.id, boundary2.errorDigest, boundary2.errorMessage, boundary2.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary2) {
        for (var completedSegments = boundary2.completedSegments, i = 0; i < completedSegments.length; i++) {
          var segment = completedSegments[i];
          flushPartiallyCompletedSegment(request, destination, boundary2, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary2.id, boundary2.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary2) {
        for (var completedSegments = boundary2.completedSegments, i = 0; i < completedSegments.length; i++) {
          var segment = completedSegments[i];
          if (!flushPartiallyCompletedSegment(request, destination, boundary2, segment))
            return i++, completedSegments.splice(0, i), false;
        }
        return completedSegments.splice(0, i), true;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary2, segment) {
        if (segment.status === FLUSHED)
          return true;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary2.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i;
          for (i = 0; i < clientRenderedBoundaries.length; i++) {
            var boundary2 = clientRenderedBoundaries[i];
            if (!flushClientRenderedBoundary(request, destination, boundary2)) {
              request.destination = null, i++, clientRenderedBoundaries.splice(0, i);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i);
          var completedBoundaries = request.completedBoundaries;
          for (i = 0; i < completedBoundaries.length; i++) {
            var _boundary = completedBoundaries[i];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i++, completedBoundaries.splice(0, i);
              return;
            }
          }
          completedBoundaries.splice(0, i);
          var partialBoundaries = request.partialBoundaries;
          for (i = 0; i < partialBoundaries.length; i++) {
            var _boundary2 = partialBoundaries[i];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i++, partialBoundaries.splice(0, i);
              return;
            }
          }
          partialBoundaries.splice(0, i);
          var largeBoundaries = request.completedBoundaries;
          for (i = 0; i < largeBoundaries.length; i++) {
            var _boundary3 = largeBoundaries[i];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i++, largeBoundaries.splice(0, i);
              return;
            }
          }
          largeBoundaries.splice(0, i);
        } finally {
          request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error2) {
          logRecoverableError(request, error2), fatalError(request, error2);
        }
      }
      function onError() {
      }
      function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
        var didFatal = false, fatalError2 = null, result = "", destination = {
          push: function(chunk) {
            return chunk !== null && (result += chunk), true;
          },
          destroy: function(error2) {
            didFatal = true, fatalError2 = error2;
          }
        }, readyToStream = false;
        function onShellReady() {
          readyToStream = true;
        }
        var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), 1 / 0, onError, void 0, onShellReady, void 0, void 0);
        if (startWork(request), abort(request, abortReason), startFlowing(request, destination), didFatal)
          throw fatalError2;
        if (!readyToStream)
          throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
        return result;
      }
      function renderToString(children, options) {
        return renderToStringImpl(children, options, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
      }
      function renderToStaticMarkup(children, options) {
        return renderToStringImpl(children, options, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
      }
      function renderToNodeStream() {
        throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
      }
      function renderToStaticNodeStream() {
        throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
      }
      exports.renderToNodeStream = renderToNodeStream, exports.renderToStaticMarkup = renderToStaticMarkup, exports.renderToStaticNodeStream = renderToStaticNodeStream, exports.renderToString = renderToString, exports.version = ReactVersion;
    })();
  }
});
var require_react_dom_server_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React270 = require_react(), ReactVersion = "18.2.0", ReactSharedInternals = React270.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      var VIEW_SIZE = 512, currentView = null, writtenBytes = 0;
      function beginWriting(destination) {
        currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0;
      }
      function writeChunk(destination, chunk) {
        if (chunk.length !== 0) {
          if (chunk.length > VIEW_SIZE) {
            writtenBytes > 0 && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), destination.enqueue(chunk);
            return;
          }
          var bytesToWrite = chunk, allowableBytes = currentView.length - writtenBytes;
          allowableBytes < bytesToWrite.length && (allowableBytes === 0 ? destination.enqueue(currentView) : (currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes), destination.enqueue(currentView), bytesToWrite = bytesToWrite.subarray(allowableBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), currentView.set(bytesToWrite, writtenBytes), writtenBytes += bytesToWrite.length;
        }
      }
      function writeChunkAndReturn(destination, chunk) {
        return writeChunk(destination, chunk), true;
      }
      function completeWriting(destination) {
        currentView && writtenBytes > 0 && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = null, writtenBytes = 0);
      }
      function close(destination) {
        destination.close();
      }
      var textEncoder = new TextEncoder();
      function stringToChunk(content) {
        return textEncoder.encode(content);
      }
      function stringToPrecomputedChunk(content) {
        return textEncoder.encode(content);
      }
      function closeWithError(destination, error2) {
        typeof destination.error == "function" ? destination.error(error2) : destination.close();
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), false;
        } catch {
          return true;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? true : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? false : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = true, true) : (illegalAttributeNameCache[attributeName] = true, error("Invalid attribute name: `%s`", attributeName), false);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return false;
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag)
              return false;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix2 = name.toLowerCase().slice(0, 5);
            return prefix2 !== "data-" && prefix2 !== "aria-";
          }
          default:
            return false;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          true,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize3 = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          false,
          // sanitizeURL
          false
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize3);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          false,
          // sanitizeURL
          false
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        false,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        true,
        // sanitizeURL
        false
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          true,
          // sanitizeURL
          true
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix2, key) {
        return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix2) {
          isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return true;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = true, true;
            if (name !== correctName)
              return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = true, true;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = true, false;
            if (name !== standardName)
              return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = true, true;
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
      function validateProperties(type, props) {
        isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = true, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return true;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = true, true;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = true, true;
            if (EVENT_NAME_REGEX.test(name))
              return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = true, true;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = true, true;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return true;
          if (lowerCasedName === "innerhtml")
            return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = true, true;
          if (lowerCasedName === "aria")
            return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = true, true;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = true, true;
          if (typeof value == "number" && isNaN(value))
            return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = true, true;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = true, true;
          } else if (!isReserved && name !== lowerCasedName)
            return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = true, true;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = true, true) : isReserved ? true : shouldRemoveAttributeWithWarning(name, value, propertyInfo, false) ? (warnedProperties$1[name] = true, false) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = true), true);
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = false, warnedForInfinityValue = false, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = true, error(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = true, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = true, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = true, error("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = true, error("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml3(string) {
        checkHtmlStringCoercion(string);
        var str = "" + string, match2 = matchHtmlRegExp.exec(str);
        if (!match2)
          return str;
        var escape2, html = "", index, lastIndex = 0;
        for (index = match2.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape2 = "&quot;";
              break;
            case 38:
              escape2 = "&amp;";
              break;
            case 39:
              escape2 = "&#x27;";
              break;
            case 60:
              escape2 = "&lt;";
              break;
            case 62:
              escape2 = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += str.substring(lastIndex, index)), lastIndex = index + 1, html += escape2;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      function escapeTextForBrowser(text2) {
        return typeof text2 == "boolean" || typeof text2 == "number" ? "" + text2 : escapeHtml3(text2);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = false;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = true, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var startInlineScript = stringToPrecomputedChunk("<script>"), endInlineScript = stringToPrecomputedChunk("<\/script>"), startScriptSrc = stringToPrecomputedChunk('<script src="'), startModuleSrc = stringToPrecomputedChunk('<script type="module" src="'), endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match2, prefix2, s, suffix) {
        return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">'), bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript), bootstrapScripts !== void 0)
          for (var i = 0; i < bootstrapScripts.length; i++)
            bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
          segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: false,
          sentCompleteBoundaryFunction: false,
          sentClientRenderFunction: false
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function createRootFormatContext(namespaceURI) {
        var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
        return createFormatContext(insertionMode, null);
      }
      function getChildFormatContext(parentContext, type, props) {
        switch (type) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id += "H" + localId.toString(32)), id + ":";
      }
      function encodeHTMLTextNode(text2) {
        return escapeTextForBrowser(text2);
      }
      var textSeparator = stringToPrecomputedChunk("<!-- -->");
      function pushTextInstance(target, text2, responseState, textEmbedded) {
        return text2 === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(stringToChunk(encodeHTMLTextNode(text2))), true);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = stringToPrecomputedChunk(' style="'), styleAssign = stringToPrecomputedChunk(":"), styleSeparator = stringToPrecomputedChunk(";");
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = true;
        for (var styleName in style)
          if (hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = stringToChunk(escapeTextForBrowser(styleName)), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()))) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = stringToChunk(styleValue + "px") : valueChunk = stringToChunk("" + styleValue) : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim())))), isFirst ? (isFirst = false, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = stringToPrecomputedChunk(" "), attributeAssign = stringToPrecomputedChunk('="'), attributeEnd = stringToPrecomputedChunk('"'), attributeEmptyString = stringToPrecomputedChunk('=""');
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (
          // shouldIgnoreAttribute
          // We have already filtered out null/undefined and reserved words.
          !(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))
        ) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === true ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === false || target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
      }
      var endOfStartTag = stringToPrecomputedChunk(">"), endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push(stringToChunk("" + html)));
        }
      }
      var didWarnDefaultInputValue = false, didWarnDefaultChecked = false, didWarnDefaultSelectValue = false, didWarnDefaultTextareaValue = false, didWarnInvalidOptionChildren = false, didWarnInvalidOptionInnerHTML = false, didWarnSelectedSetOnOption = false;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array = isArray(value);
            props.multiple && !array ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = true), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React270.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = true, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = true);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = true, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i = 0; i < selectedValue.length; i++) {
              checkAttributeStringCoercion(selectedValue[i], "value");
              var v = "" + selectedValue[i];
              if (v === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = true), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = true), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = true), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(stringToChunk(encodeHTMLTextNode("" + value)))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(stringToChunk(encodeHTMLTextNode(children))), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = stringToPrecomputedChunk(`
`);
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, stringToChunk(html)) : (checkHtmlStringCoercion(html), target.push(stringToChunk("" + html))));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = stringToPrecomputedChunk("<" + tag), validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
      function pushStartInstance(target, type, props, responseState, formatContext) {
        switch (validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type.indexOf("-") === -1 && typeof props.is != "string" && type.toLowerCase() !== type && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type, responseState);
          default:
            return type.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type, responseState) : pushStartCustomElement(target, props, type, responseState);
        }
      }
      var endTag1 = stringToPrecomputedChunk("</"), endTag2 = stringToPrecomputedChunk(">");
      function pushEndInstance(target, type, props) {
        switch (type) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, stringToChunk(type), endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i = 0; i < bootstrapChunks.length - 1; i++)
          writeChunk(destination, bootstrapChunks[i]);
        return i < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i]) : true;
      }
      var placeholder1 = stringToPrecomputedChunk('<template id="'), placeholder2 = stringToPrecomputedChunk('"></template>');
      function writePlaceholder(destination, responseState, id) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = stringToChunk(id.toString(16));
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->"), startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="'), startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>'), startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->"), endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->"), clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template"), clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"'), clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="'), clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="'), clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="'), clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack))), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="'), startSegmentHTML2 = stringToPrecomputedChunk('">'), endSegmentHTML = stringToPrecomputedChunk("</div>"), startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="'), startSegmentSVG2 = stringToPrecomputedChunk('">'), endSegmentSVG = stringToPrecomputedChunk("</svg>"), startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="'), startSegmentMathML2 = stringToPrecomputedChunk('">'), endSegmentMathML = stringToPrecomputedChunk("</math>"), startSegmentTable = stringToPrecomputedChunk('<table hidden id="'), startSegmentTable2 = stringToPrecomputedChunk('">'), endSegmentTable = stringToPrecomputedChunk("</table>"), startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="'), startSegmentTableBody2 = stringToPrecomputedChunk('">'), endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>"), startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="'), startSegmentTableRow2 = stringToPrecomputedChunk('">'), endSegmentTableRow = stringToPrecomputedChunk("</tr></table>"), startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="'), startSegmentColGroup2 = stringToPrecomputedChunk('">'), endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
      function writeStartSegment(destination, responseState, formatContext, id) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, stringToChunk(id.toString(16))), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("'), completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("'), completeSegmentScript2 = stringToPrecomputedChunk('","'), completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = true, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = stringToChunk(contentSegmentID.toString(16));
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("'), completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("'), completeBoundaryScript2 = stringToPrecomputedChunk('","'), completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = true, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = stringToChunk(contentSegmentID.toString(16));
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("'), clientRenderScript1Partial = stringToPrecomputedChunk('$RX("'), clientRenderScript1A = stringToPrecomputedChunk('"'), clientRenderScript2 = stringToPrecomputedChunk(")<\/script>"), clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = true, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match2) {
          switch (match2) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0)
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match2 && match2[1] || "";
            }
          return `
` + prefix + name;
        }
      }
      var reentry = false, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = false, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
      }
      function shouldConstruct(Component9) {
        var prototype = Component9.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values2, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = true, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type, unmaskedContext) {
        {
          var contextTypes = type.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return context;
        }
      }
      function processChildContext(instance, type, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = true, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context, nextValue) {
        var prevValue;
        prevValue = context._currentValue, context._currentValue = nextValue, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context && error("The parent context is not the expected context. This is probably a bug in React.");
        {
          var value = prevSnapshot.parentValue;
          value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue = value, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context) {
        var value = context._currentValue;
        return value;
      }
      function get2(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = true;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return false;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get2(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get2(inst);
          internals.replace = true, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get2(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context = readContext(contextType) : context = maskedLegacyContext;
        var instance = new ctor(props, context);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== true ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
            var componentName = getComponentNameFromType(type) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              // keep this warning in sync with ReactStrictModeWarning.js
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = true);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = false, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = true, i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
              var partial = oldQueue[i], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = false, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: false
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context) {
        var overflow = context.overflow, idWithLeadingBit = context.id, id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = false, didScheduleRenderPhaseUpdate = false, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = false, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), false;
        nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i]))
            return false;
        return true;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = false, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = true, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = false, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = true, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = false, localIdCounter = 0;
      }
      function finishHooks(Component9, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = false, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component9(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = false, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = false, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context) {
        return isInHookUserCodeInDev && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context);
      }
      function useContext32(context) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context);
      }
      function basicStateReducer(state, action4) {
        return typeof action4 == "function" ? action4(state) : action4;
      }
      function useState52(initialState) {
        return currentHookNameInDev = "useState", useReducer4(
          basicStateReducer,
          // useReducer has a special case to support lazy useState initializers
          initialState
        );
      }
      function useReducer4(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action4 = update.action;
                isInHookUserCodeInDev = true, newState = reducer(newState, action4), isInHookUserCodeInDev = false, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = true;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = false, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo28(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = true;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = false, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef66(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect5(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action4) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = true;
          var update = {
            action: action4,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback56(callback, deps) {
        return useMemo28(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition() {
        return resolveCurrentlyRenderingComponent(), [false, unsupportedStartTransition];
      }
      function useId28() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop21() {
      }
      var Dispatcher2 = {
        readContext: readContext$1,
        useContext: useContext32,
        useMemo: useMemo28,
        useReducer: useReducer4,
        useRef: useRef66,
        useState: useState52,
        useInsertionEffect: noop21,
        useLayoutEffect: useLayoutEffect5,
        useCallback: useCallback56,
        // useImperativeHandle is not run in the server environment
        useImperativeHandle: noop21,
        // Effects are not run in the server environment.
        useEffect: noop21,
        // Debugging effect
        useDebugValue: noop21,
        useDeferredValue,
        useTransition,
        useId: useId28,
        // Subscriptions are not setup in a server environment.
        useMutableSource,
        useSyncExternalStore
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler(error2) {
        return console.error(error2), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError === void 0 ? defaultErrorHandler : onError,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          // Root segments are never embedded in Text on either edge
          false,
          false
        );
        rootSegment.parentFlushed = true;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: false,
          pendingTasks: 0,
          forceClientRender: false,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index, boundary2, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          // lazily assigned later
          index,
          parentFlushed: false,
          chunks: [],
          children: [],
          formatContext,
          boundary: boundary2,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type
        };
      }
      function pushFunctionComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type
        };
      }
      function pushClassComponentStackInDEV(task, type) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary2, error2) {
        {
          var errorMessage;
          typeof error2 == "string" ? errorMessage = error2 : error2 && typeof error2.message == "string" ? errorMessage = error2.message : errorMessage = String(error2);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary2.errorMessage = errorMessage, boundary2.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error2) {
        var errorDigest = request.onError(error2);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error2) {
        var onShellError = request.onShellError;
        onShellError(error2);
        var onFatalError = request.onFatalError;
        onFatalError(error2), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error2)) : (request.status = CLOSING, request.fatalError = error2);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          // boundaries never require text embedding at their edges because comment nodes bound them
          false,
          false
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = false;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          // boundaries never require text embedding at their edges because comment nodes bound them
          false,
          false
        );
        contentRootSegment.parentFlushed = true, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error2) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = true, newBoundary.errorDigest = logRecoverableError(request, error2), captureBoundaryErrorDetailsDev(newBoundary, error2);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type, props) {
        pushBuiltInComponentStackInDEV(task, type);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
        segment.lastPushedText = false;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type), segment.lastPushedText = false, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component9) {
        return Component9.prototype && Component9.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component9, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component9(props, secondArg);
        return finishHooks(Component9, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component9, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component9) || "a component"), didWarnAboutReassigningProps = true);
        {
          var childContextTypes = Component9.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component9, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component9, props) {
        pushClassComponentStackInDEV(task, Component9);
        var maskedContext = getMaskedContext(Component9, task.legacyContext), instance = constructClassInstance(Component9, props, maskedContext);
        mountClassInstance(instance, Component9, props, maskedContext), finishClassComponent(request, task, instance, Component9, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = false, didWarnAboutGenerators = false, didWarnAboutMaps = false, hasWarnedAboutUsingContextAsConsumer = false;
      function renderIndeterminateComponent(request, task, Component9, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component9, task.legacyContext), pushFunctionComponentStackInDEV(task, Component9), Component9.prototype && typeof Component9.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component9) || "Unknown";
          didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = true);
        }
        var value = renderWithHooks(request, task, Component9, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component9) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = true);
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = true);
          }
          mountClassInstance(value, Component9, props, legacyContext), finishClassComponent(request, task, value, Component9, props);
        } else if (validateFunctionComponentInDev(Component9), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component9) {
        {
          if (Component9 && Component9.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component9.displayName || Component9.name || "Component"), typeof Component9.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true);
          }
          if (typeof Component9.contextType == "object" && Component9.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component9) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true);
          }
        }
      }
      function resolveDefaultProps(Component9, baseProps) {
        if (Component9 && Component9.defaultProps) {
          var props = assign({}, baseProps), defaultProps2 = Component9.defaultProps;
          for (var propName in defaultProps2)
            props[propName] === void 0 && (props[propName] = defaultProps2[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type, props, ref) {
        pushFunctionComponentStackInDEV(task, type.render);
        var children = renderWithHooks(request, task, type.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type, props, ref) {
        var innerType = type.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context, props) {
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = true, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var render = props.children;
        typeof render != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context), newChildren = render(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type, props) {
        var context = type._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context, value), renderNodeDestructive(request, task, children), task.context = popProvider(context), prevSnapshot !== task.context && error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component9 = init(payload), resolvedProps = resolveDefaultProps(Component9, props);
        renderElement(request, task, Component9, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type, props, ref) {
        if (typeof type == "function")
          if (shouldConstruct$1(type)) {
            renderClassComponent(request, task, type, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type, props);
            return;
          }
        if (typeof type == "string") {
          renderHostElement(request, task, type, props);
          return;
        }
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type == "object" && type !== null)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type, props);
              return;
            }
          }
        var info = "";
        throw (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
        iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = true), iterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = true);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x) {
          throw typeof x == "object" && x !== null && typeof x.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x) {
                throw typeof x == "object" && x !== null && typeof x.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step = iterator.next();
              if (!step.done) {
                var children = [];
                do
                  children.push(step.value), step = iterator.next();
                while (!step.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i = 0; i < totalChildren; i++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
          try {
            renderNode(request, task, children[i]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          // Adopt the parent segment's leading text embed
          segment.lastPushedText,
          // Assume we are text embedded at the trailing edge
          true
        );
        segment.children.push(newSegment), segment.lastPushedText = false;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x) {
          if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
            spawnNewSuspendedTask(request, task, x), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x;
        }
      }
      function erroredTask(request, boundary2, segment, error2) {
        var errorDigest = logRecoverableError(request, error2);
        if (boundary2 === null ? fatalError(request, error2) : (boundary2.pendingTasks--, boundary2.forceClientRender || (boundary2.forceClientRender = true, boundary2.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary2, error2), boundary2.parentFlushed && request.clientRenderedBoundaries.push(boundary2))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary2 = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary2, segment);
      }
      function abortTask(task, request, reason) {
        var boundary2 = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary2 === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary2.pendingTasks--, !boundary2.forceClientRender) {
            boundary2.forceClientRender = true;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary2.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary2, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary2.parentFlushed && request.clientRenderedBoundaries.push(boundary2);
          }
          if (boundary2.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary2.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary2, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = true, childSegment.status === COMPLETED && queueCompletedSegment(boundary2, childSegment);
        } else {
          var completedSegments = boundary2.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary2, segment) {
        if (boundary2 === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary2.pendingTasks--, !boundary2.forceClientRender) {
          if (boundary2.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary2, segment), boundary2.parentFlushed && request.completedBoundaries.push(boundary2), boundary2.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary2.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary2, segment);
            var completedSegments = boundary2.completedSegments;
            completedSegments.length === 1 && boundary2.parentFlushed && request.partialBoundaries.push(boundary2);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher2;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher2 && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = true, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = false, segment.textEmbedded = false, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r = true, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r = writeChunkAndReturn(destination, chunks[chunkIdx])), r;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary2 = segment.boundary;
        if (boundary2 === null)
          return flushSubtree(request, destination, segment);
        if (boundary2.parentFlushed = true, boundary2.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary2.errorDigest, boundary2.errorMessage, boundary2.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
        if (boundary2.pendingTasks > 0) {
          boundary2.rootSegmentID = request.nextSegmentId++, boundary2.completedSegments.length > 0 && request.partialBoundaries.push(boundary2);
          var id = boundary2.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary2.byteSize > request.progressiveChunkSize)
            return boundary2.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary2), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary2.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary(destination, request.responseState);
          var completedSegments = boundary2.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary2) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary2.id, boundary2.errorDigest, boundary2.errorMessage, boundary2.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary2) {
        for (var completedSegments = boundary2.completedSegments, i = 0; i < completedSegments.length; i++) {
          var segment = completedSegments[i];
          flushPartiallyCompletedSegment(request, destination, boundary2, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary2.id, boundary2.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary2) {
        for (var completedSegments = boundary2.completedSegments, i = 0; i < completedSegments.length; i++) {
          var segment = completedSegments[i];
          if (!flushPartiallyCompletedSegment(request, destination, boundary2, segment))
            return i++, completedSegments.splice(0, i), false;
        }
        return completedSegments.splice(0, i), true;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary2, segment) {
        if (segment.status === FLUSHED)
          return true;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary2.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        beginWriting();
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i;
          for (i = 0; i < clientRenderedBoundaries.length; i++) {
            var boundary2 = clientRenderedBoundaries[i];
            if (!flushClientRenderedBoundary(request, destination, boundary2)) {
              request.destination = null, i++, clientRenderedBoundaries.splice(0, i);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i);
          var completedBoundaries = request.completedBoundaries;
          for (i = 0; i < completedBoundaries.length; i++) {
            var _boundary = completedBoundaries[i];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i++, completedBoundaries.splice(0, i);
              return;
            }
          }
          completedBoundaries.splice(0, i), completeWriting(destination), beginWriting(destination);
          var partialBoundaries = request.partialBoundaries;
          for (i = 0; i < partialBoundaries.length; i++) {
            var _boundary2 = partialBoundaries[i];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i++, partialBoundaries.splice(0, i);
              return;
            }
          }
          partialBoundaries.splice(0, i);
          var largeBoundaries = request.completedBoundaries;
          for (i = 0; i < largeBoundaries.length; i++) {
            var _boundary3 = largeBoundaries[i];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i++, largeBoundaries.splice(0, i);
              return;
            }
          }
          largeBoundaries.splice(0, i);
        } finally {
          completeWriting(destination), request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2), fatalError(request, error2);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error2) {
          logRecoverableError(request, error2), fatalError(request, error2);
        }
      }
      function renderToReadableStream2(children, options) {
        return new Promise(function(resolve, reject) {
          var onFatalError, onAllReady, allReady = new Promise(function(res, rej) {
            onAllReady = res, onFatalError = rej;
          });
          function onShellReady() {
            var stream = new ReadableStream(
              {
                type: "bytes",
                pull: function(controller) {
                  startFlowing(request, controller);
                },
                cancel: function(reason) {
                  abort(request);
                }
              },
              // $FlowFixMe size() methods are not allowed on byte streams.
              {
                highWaterMark: 0
              }
            );
            stream.allReady = allReady, resolve(stream);
          }
          function onShellError(error2) {
            allReady.catch(function() {
            }), reject(error2);
          }
          var request = createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
          if (options && options.signal) {
            var signal = options.signal, listener = function() {
              abort(request, signal.reason), signal.removeEventListener("abort", listener);
            };
            signal.addEventListener("abort", listener);
          }
          startWork(request);
        });
      }
      exports.renderToReadableStream = renderToReadableStream2, exports.version = ReactVersion;
    })();
  }
});
var require_server_browser = __commonJS({
  "node_modules/react-dom/server.browser.js"(exports) {
    "use strict";
    var l, s;
    l = require_react_dom_server_legacy_browser_development(), s = require_react_dom_server_browser_development();
    exports.version = l.version;
    exports.renderToString = l.renderToString;
    exports.renderToStaticMarkup = l.renderToStaticMarkup;
    exports.renderToNodeStream = l.renderToNodeStream;
    exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
    exports.renderToReadableStream = s.renderToReadableStream;
  }
});
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends, __assign, __rest, __decorate, __param, __esDecorate, __runInitializers, __propKey, __setFunctionName, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __spreadArray, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet, __classPrivateFieldIn, __createBinding, __addDisposableResource, __disposeResources;
    (function(factory) {
      var root = typeof global == "object" ? global : typeof self == "object" ? self : typeof this == "object" ? this : {};
      typeof define == "function" && define.amd ? define("tslib", ["exports"], function(exports2) {
        factory(createExporter(root, createExporter(exports2)));
      }) : typeof module == "object" && typeof module.exports == "object" ? factory(createExporter(root, createExporter(module.exports))) : factory(createExporter(root));
      function createExporter(exports2, previous) {
        return exports2 !== root && (typeof Object.create == "function" ? Object.defineProperty(exports2, "__esModule", { value: true }) : exports2.__esModule = true), function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
      };
      __extends = function(d, b) {
        if (typeof b != "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }, __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        }
        return t;
      }, __rest = function(s, e) {
        var t = {};
        for (var p in s)
          Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
        if (s != null && typeof Object.getOwnPropertySymbols == "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
            e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
        return t;
      }, __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }, __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      }, __esDecorate = function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) {
          if (f !== void 0 && typeof f != "function")
            throw new TypeError("Function expected");
          return f;
        }
        for (var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value", target = !descriptorIn && ctor ? contextIn.static ? ctor : ctor.prototype : null, descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {}), _, done = false, i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn)
            context[p] = p === "access" ? {} : contextIn[p];
          for (var p in contextIn.access)
            context.access[p] = contextIn.access[p];
          context.addInitializer = function(f) {
            if (done)
              throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
          if (kind === "accessor") {
            if (result === void 0)
              continue;
            if (result === null || typeof result != "object")
              throw new TypeError("Object expected");
            (_ = accept(result.get)) && (descriptor.get = _), (_ = accept(result.set)) && (descriptor.set = _), (_ = accept(result.init)) && initializers.unshift(_);
          } else
            (_ = accept(result)) && (kind === "field" ? initializers.unshift(_) : descriptor[key] = _);
        }
        target && Object.defineProperty(target, contextIn.name, descriptor), done = true;
      }, __runInitializers = function(thisArg, initializers, value) {
        for (var useValue = arguments.length > 2, i = 0; i < initializers.length; i++)
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        return useValue ? value : void 0;
      }, __propKey = function(x) {
        return typeof x == "symbol" ? x : "".concat(x);
      }, __setFunctionName = function(f, name, prefix) {
        return typeof name == "symbol" && (name = name.description ? "[".concat(name.description, "]") : ""), Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
      }, __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
          return Reflect.metadata(metadataKey, metadataValue);
      }, __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator.throw(value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      }, __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          for (; g && (g = 0, op[0] && (_ = 0)), _; )
            try {
              if (f = 1, y && (t = op[0] & 2 ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              switch (y = 0, t && (op = [op[0] & 2, t.value]), op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  return _.label++, { value: op[1], done: false };
                case 5:
                  _.label++, y = op[1], op = [0];
                  continue;
                case 7:
                  op = _.ops.pop(), _.trys.pop();
                  continue;
                default:
                  if (t = _.trys, !(t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1], t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2], _.ops.push(op);
                    break;
                  }
                  t[2] && _.ops.pop(), _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e], y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      }, __exportStar = function(m, o) {
        for (var p in m)
          p !== "default" && !Object.prototype.hasOwnProperty.call(o, p) && __createBinding(o, m, p);
      }, __createBinding = Object.create ? function(o, m, k, k2) {
        k2 === void 0 && (k2 = k);
        var desc = Object.getOwnPropertyDescriptor(m, k);
        (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) && (desc = { enumerable: true, get: function() {
          return m[k];
        } }), Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        k2 === void 0 && (k2 = k), o[k2] = m[k];
      }, __values = function(o) {
        var s = typeof Symbol == "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length == "number")
          return {
            next: function() {
              return o && i >= o.length && (o = void 0), { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }, __read = function(o, n) {
        var m = typeof Symbol == "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          for (; (n === void 0 || n-- > 0) && !(r = i.next()).done; )
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            r && !r.done && (m = i.return) && m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      }, __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      }, __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      }, __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++)
            (ar || !(i in from)) && (ar || (ar = Array.prototype.slice.call(from, 0, i)), ar[i] = from[i]);
        return to.concat(ar || Array.prototype.slice.call(from));
      }, __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      }, __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          g[n] && (i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          });
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          f(v), q.shift(), q.length && resume(q[0][0], q[0][1]);
        }
      }, __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
          } : f;
        }
      }, __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values == "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      }, __makeTemplateObject = function(cooked, raw) {
        return Object.defineProperty ? Object.defineProperty(cooked, "raw", { value: raw }) : cooked.raw = raw, cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o.default = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null)
          for (var k in mod)
            k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
        return __setModuleDefault(result, mod), result;
      }, __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      }, __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      }, __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      }, __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver != "object" && typeof receiver != "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state == "function" ? receiver === state : state.has(receiver);
      }, __addDisposableResource = function(env, value, async) {
        if (value != null) {
          if (typeof value != "object" && typeof value != "function")
            throw new TypeError("Object expected.");
          var dispose;
          if (async) {
            if (!Symbol.asyncDispose)
              throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
          }
          if (dispose === void 0) {
            if (!Symbol.dispose)
              throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
          }
          if (typeof dispose != "function")
            throw new TypeError("Object not disposable.");
          env.stack.push({ value, dispose, async });
        } else
          async && env.stack.push({ async: true });
        return value;
      };
      var _SuppressedError = typeof SuppressedError == "function" ? SuppressedError : function(error, suppressed, message2) {
        var e = new Error(message2);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
      };
      __disposeResources = function(env) {
        function fail(e) {
          env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e, env.hasError = true;
        }
        function next() {
          for (; env.stack.length; ) {
            var rec = env.stack.pop();
            try {
              var result = rec.dispose && rec.dispose.call(rec.value);
              if (rec.async)
                return Promise.resolve(result).then(next, function(e) {
                  return fail(e), next();
                });
            } catch (e) {
              fail(e);
            }
          }
          if (env.hasError)
            throw env.error;
        }
        return next();
      }, exporter("__extends", __extends), exporter("__assign", __assign), exporter("__rest", __rest), exporter("__decorate", __decorate), exporter("__param", __param), exporter("__esDecorate", __esDecorate), exporter("__runInitializers", __runInitializers), exporter("__propKey", __propKey), exporter("__setFunctionName", __setFunctionName), exporter("__metadata", __metadata), exporter("__awaiter", __awaiter), exporter("__generator", __generator), exporter("__exportStar", __exportStar), exporter("__createBinding", __createBinding), exporter("__values", __values), exporter("__read", __read), exporter("__spread", __spread), exporter("__spreadArrays", __spreadArrays), exporter("__spreadArray", __spreadArray), exporter("__await", __await), exporter("__asyncGenerator", __asyncGenerator), exporter("__asyncDelegator", __asyncDelegator), exporter("__asyncValues", __asyncValues), exporter("__makeTemplateObject", __makeTemplateObject), exporter("__importStar", __importStar), exporter("__importDefault", __importDefault), exporter("__classPrivateFieldGet", __classPrivateFieldGet), exporter("__classPrivateFieldSet", __classPrivateFieldSet), exporter("__classPrivateFieldIn", __classPrivateFieldIn), exporter("__addDisposableResource", __addDisposableResource), exporter("__disposeResources", __disposeResources);
    });
  }
});
var require_error = __commonJS({
  "node_modules/@shopify/shopify-api/lib/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FeatureDeprecatedError = exports.BillingError = exports.InvalidRequestError = exports.UnsupportedClientType = exports.MissingRequiredArgument = exports.SessionStorageError = exports.MissingWebhookCallbackError = exports.InvalidWebhookError = exports.InvalidSession = exports.CookieNotFound = exports.BotActivityDetected = exports.InvalidOAuthError = exports.GraphqlQueryError = exports.RestResourceError = exports.HttpThrottlingError = exports.HttpInternalError = exports.HttpRetriableError = exports.HttpResponseError = exports.HttpMaxRetriesError = exports.HttpRequestError = exports.PrivateAppError = exports.SafeCompareError = exports.InvalidDeliveryMethodError = exports.MissingJwtTokenError = exports.InvalidJwtError = exports.InvalidHostError = exports.InvalidShopError = exports.InvalidHmacError = exports.ShopifyError = void 0;
    var tslib_1 = require_tslib(), ShopifyError = class extends Error {
      constructor(...args) {
        super(...args), Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports.ShopifyError = ShopifyError;
    var InvalidHmacError = class extends ShopifyError {
    };
    exports.InvalidHmacError = InvalidHmacError;
    var InvalidShopError = class extends ShopifyError {
    };
    exports.InvalidShopError = InvalidShopError;
    var InvalidHostError = class extends ShopifyError {
    };
    exports.InvalidHostError = InvalidHostError;
    var InvalidJwtError = class extends ShopifyError {
    };
    exports.InvalidJwtError = InvalidJwtError;
    var MissingJwtTokenError = class extends ShopifyError {
    };
    exports.MissingJwtTokenError = MissingJwtTokenError;
    var InvalidDeliveryMethodError = class extends ShopifyError {
    };
    exports.InvalidDeliveryMethodError = InvalidDeliveryMethodError;
    var SafeCompareError = class extends ShopifyError {
    };
    exports.SafeCompareError = SafeCompareError;
    var PrivateAppError = class extends ShopifyError {
    };
    exports.PrivateAppError = PrivateAppError;
    var HttpRequestError = class extends ShopifyError {
    };
    exports.HttpRequestError = HttpRequestError;
    var HttpMaxRetriesError = class extends ShopifyError {
    };
    exports.HttpMaxRetriesError = HttpMaxRetriesError;
    var HttpResponseError = class extends ShopifyError {
      constructor({ message: message2, code, statusText, body, headers: headers2 }) {
        super(message2), this.response = {
          code,
          statusText,
          body,
          headers: headers2
        };
      }
    };
    exports.HttpResponseError = HttpResponseError;
    var HttpRetriableError = class extends HttpResponseError {
    };
    exports.HttpRetriableError = HttpRetriableError;
    var HttpInternalError = class extends HttpRetriableError {
    };
    exports.HttpInternalError = HttpInternalError;
    var HttpThrottlingError = class extends HttpRetriableError {
      constructor(_a) {
        var { retryAfter } = _a, params = tslib_1.__rest(_a, ["retryAfter"]);
        super(params), this.response.retryAfter = retryAfter;
      }
    };
    exports.HttpThrottlingError = HttpThrottlingError;
    var RestResourceError = class extends ShopifyError {
    };
    exports.RestResourceError = RestResourceError;
    var GraphqlQueryError = class extends ShopifyError {
      constructor({ message: message2, response, headers: headers2 }) {
        super(message2), this.response = response, this.headers = headers2;
      }
    };
    exports.GraphqlQueryError = GraphqlQueryError;
    var InvalidOAuthError = class extends ShopifyError {
    };
    exports.InvalidOAuthError = InvalidOAuthError;
    var BotActivityDetected = class extends ShopifyError {
    };
    exports.BotActivityDetected = BotActivityDetected;
    var CookieNotFound = class extends ShopifyError {
    };
    exports.CookieNotFound = CookieNotFound;
    var InvalidSession = class extends ShopifyError {
    };
    exports.InvalidSession = InvalidSession;
    var InvalidWebhookError = class extends ShopifyError {
      constructor({ message: message2, response }) {
        super(message2), this.response = response;
      }
    };
    exports.InvalidWebhookError = InvalidWebhookError;
    var MissingWebhookCallbackError = class extends InvalidWebhookError {
    };
    exports.MissingWebhookCallbackError = MissingWebhookCallbackError;
    var SessionStorageError = class extends ShopifyError {
    };
    exports.SessionStorageError = SessionStorageError;
    var MissingRequiredArgument = class extends ShopifyError {
    };
    exports.MissingRequiredArgument = MissingRequiredArgument;
    var UnsupportedClientType = class extends ShopifyError {
    };
    exports.UnsupportedClientType = UnsupportedClientType;
    var InvalidRequestError = class extends ShopifyError {
    };
    exports.InvalidRequestError = InvalidRequestError;
    var BillingError = class extends ShopifyError {
      constructor({ message: message2, errorData }) {
        super(message2), this.message = message2, this.errorData = errorData;
      }
    };
    exports.BillingError = BillingError;
    var FeatureDeprecatedError = class extends ShopifyError {
    };
    exports.FeatureDeprecatedError = FeatureDeprecatedError;
  }
});
var require_types = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/http_client/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataType = void 0;
    var DataType;
    (function(DataType2) {
      DataType2.JSON = "application/json", DataType2.GraphQL = "application/graphql", DataType2.URLEncoded = "application/x-www-form-urlencoded";
    })(DataType = exports.DataType || (exports.DataType = {}));
  }
});
var require_base = __commonJS({
  "node_modules/@shopify/shopify-api/rest/base.js"(exports) {
    "use strict";
    var _Base_session;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Base = void 0;
    var tslib_1 = require_tslib(), error_1 = require_error(), types_1 = require_types(), Base = class {
      static setClassProperties({ Client, config }) {
        this.Client = Client, this.config = config;
      }
      static baseFind({ session, urlIds, params }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "get",
            session,
            urlIds,
            params
          });
          return {
            data: this.createInstancesFromResponse(session, response.body),
            headers: response.headers,
            pageInfo: response.pageInfo
          };
        });
      }
      static request({ session, http_method, operation, urlIds, params, body, entity }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let client = new this.Client({
            session,
            apiVersion: this.apiVersion
          }), path = this.getPath({ http_method, operation, urlIds, entity }), cleanParams = {};
          if (params)
            for (let key in params)
              params[key] !== null && (cleanParams[key] = params[key]);
          switch (http_method) {
            case "get":
              return client.get({ path, query: cleanParams });
            case "post":
              return client.post({
                path,
                query: cleanParams,
                data: body,
                type: types_1.DataType.JSON
              });
            case "put":
              return client.put({
                path,
                query: cleanParams,
                data: body,
                type: types_1.DataType.JSON
              });
            case "delete":
              return client.delete({ path, query: cleanParams });
            default:
              throw new Error(`Unrecognized HTTP method "${http_method}"`);
          }
        });
      }
      static getJsonBodyName() {
        return this.name.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
      }
      static getPath({ http_method, operation, urlIds, entity }) {
        let match2 = null, specificity = -1, potentialPaths = [];
        if (this.paths.forEach((path) => {
          if (http_method !== path.http_method || operation !== path.operation || path.ids.length <= specificity)
            return;
          potentialPaths.push(path);
          let pathUrlIds = Object.assign({}, urlIds);
          path.ids.forEach((id) => {
            !pathUrlIds[id] && entity && entity[id] && (pathUrlIds[id] = entity[id]);
          }), pathUrlIds = Object.entries(pathUrlIds).reduce((acc, [key, value]) => (value && (acc[key] = value), acc), {}), !(path.ids.reduce((acc, id) => pathUrlIds[id] ? acc : acc.concat(id), []).length > 0) && (specificity = path.ids.length, match2 = path.path.replace(/(<([^>]+)>)/g, (_m1, _m2, id) => `${pathUrlIds[id]}`));
        }), !match2) {
          let pathOptions = potentialPaths.map((path) => path.path);
          throw new error_1.RestResourceError(`Could not find a path for request. If you are trying to make a request to one of the following paths, ensure all relevant IDs are set. :
 - ${pathOptions.join(`
 - `)}`);
        }
        return this.customPrefix ? `${this.customPrefix}/${match2}` : match2;
      }
      static createInstancesFromResponse(session, data) {
        let instances = [];
        return this.resourceNames.forEach((resourceName) => {
          let singular = resourceName.singular, plural = resourceName.plural;
          data[plural] || Array.isArray(data[singular]) ? instances = instances.concat((data[plural] || data[singular]).reduce((acc, entry2) => acc.concat(this.createInstance(session, entry2)), [])) : data[singular] && instances.push(this.createInstance(session, data[singular]));
        }), instances;
      }
      static createInstance(session, data, prevInstance) {
        let instance = prevInstance || new this({ session });
        return data && instance.setData(data), instance;
      }
      get session() {
        return tslib_1.__classPrivateFieldGet(this, _Base_session, "f");
      }
      constructor({ session, fromData }) {
        _Base_session.set(this, void 0), tslib_1.__classPrivateFieldSet(this, _Base_session, session, "f"), fromData && this.setData(fromData);
      }
      save({ update = false } = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let { primaryKey, resourceNames } = this.resource(), method = this[primaryKey] ? "put" : "post", data = this.serialize(true), response = yield this.resource().request({
            http_method: method,
            operation: method,
            session: this.session,
            urlIds: {},
            body: { [this.resource().getJsonBodyName()]: data },
            entity: this
          }), flattenResourceNames = resourceNames.reduce((acc, obj) => acc.concat(Object.values(obj)), []), matchResourceName = Object.keys(response.body).filter((key) => flattenResourceNames.includes(key)), body = response.body[matchResourceName[0]];
          update && body && this.setData(body);
        });
      }
      saveAndUpdate() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          yield this.save({ update: true });
        });
      }
      delete() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          yield this.resource().request({
            http_method: "delete",
            operation: "delete",
            session: this.session,
            urlIds: {},
            entity: this
          });
        });
      }
      serialize(saving = false) {
        let { hasMany, hasOne, readOnlyAttributes } = this.resource();
        return Object.entries(this).reduce((acc, [attribute, value]) => (["#session"].includes(attribute) || saving && readOnlyAttributes.includes(attribute) || (attribute in hasMany && value ? acc[attribute] = value.reduce((attrAcc, entry2) => attrAcc.concat(this.serializeSubAttribute(entry2, saving)), []) : attribute in hasOne && value ? acc[attribute] = this.serializeSubAttribute(value, saving) : acc[attribute] = value), acc), {});
      }
      toJSON() {
        return this.serialize();
      }
      request(args) {
        return this.resource().request(args);
      }
      setData(data) {
        let { hasMany, hasOne } = this.resource();
        Object.entries(data).forEach(([attribute, val]) => {
          if (attribute in hasMany) {
            let HasManyResource = hasMany[attribute];
            this[attribute] = [], val.forEach((entry2) => {
              this[attribute].push(new HasManyResource({ session: this.session, fromData: entry2 }));
            });
          } else if (attribute in hasOne) {
            let HasOneResource = hasOne[attribute];
            this[attribute] = new HasOneResource({
              session: this.session,
              fromData: val
            });
          } else
            this[attribute] = val;
        });
      }
      resource() {
        return this.constructor;
      }
      serializeSubAttribute(attribute, saving) {
        return attribute.serialize ? attribute.serialize(saving) : this.resource().createInstance(this.session, attribute).serialize(saving);
      }
    };
    exports.Base = Base;
    _Base_session = /* @__PURE__ */ new WeakMap();
    Base.resourceNames = [];
    Base.primaryKey = "id";
    Base.customPrefix = null;
    Base.readOnlyAttributes = [];
    Base.hasOne = {};
    Base.hasMany = {};
    Base.paths = [];
  }
});
var require_types2 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BillingReplacementBehavior = exports.BillingInterval = exports.gdprTopics = exports.ClientType = exports.ShopifyHeader = exports.LATEST_API_VERSION = exports.LIBRARY_NAME = exports.ApiVersion = exports.LogSeverity = void 0;
    var LogSeverity;
    (function(LogSeverity2) {
      LogSeverity2[LogSeverity2.Error = 0] = "Error", LogSeverity2[LogSeverity2.Warning = 1] = "Warning", LogSeverity2[LogSeverity2.Info = 2] = "Info", LogSeverity2[LogSeverity2.Debug = 3] = "Debug";
    })(LogSeverity = exports.LogSeverity || (exports.LogSeverity = {}));
    var ApiVersion;
    (function(ApiVersion2) {
      ApiVersion2.October22 = "2022-10", ApiVersion2.January23 = "2023-01", ApiVersion2.April23 = "2023-04", ApiVersion2.July23 = "2023-07", ApiVersion2.October23 = "2023-10", ApiVersion2.Unstable = "unstable";
    })(ApiVersion = exports.ApiVersion || (exports.ApiVersion = {}));
    exports.LIBRARY_NAME = "Shopify API Library";
    exports.LATEST_API_VERSION = ApiVersion.October23;
    var ShopifyHeader;
    (function(ShopifyHeader2) {
      ShopifyHeader2.AccessToken = "X-Shopify-Access-Token", ShopifyHeader2.ApiVersion = "X-Shopify-API-Version", ShopifyHeader2.Domain = "X-Shopify-Shop-Domain", ShopifyHeader2.Hmac = "X-Shopify-Hmac-Sha256", ShopifyHeader2.Topic = "X-Shopify-Topic", ShopifyHeader2.WebhookId = "X-Shopify-Webhook-Id", ShopifyHeader2.StorefrontPrivateToken = "Shopify-Storefront-Private-Token", ShopifyHeader2.StorefrontSDKVariant = "X-SDK-Variant", ShopifyHeader2.StorefrontSDKVersion = "X-SDK-Version";
    })(ShopifyHeader = exports.ShopifyHeader || (exports.ShopifyHeader = {}));
    var ClientType;
    (function(ClientType2) {
      ClientType2.Rest = "rest", ClientType2.Graphql = "graphql";
    })(ClientType = exports.ClientType || (exports.ClientType = {}));
    exports.gdprTopics = [
      "CUSTOMERS_DATA_REQUEST",
      "CUSTOMERS_REDACT",
      "SHOP_REDACT"
    ];
    var BillingInterval;
    (function(BillingInterval2) {
      BillingInterval2.OneTime = "ONE_TIME", BillingInterval2.Every30Days = "EVERY_30_DAYS", BillingInterval2.Annual = "ANNUAL", BillingInterval2.Usage = "USAGE";
    })(BillingInterval = exports.BillingInterval || (exports.BillingInterval = {}));
    var BillingReplacementBehavior;
    (function(BillingReplacementBehavior2) {
      BillingReplacementBehavior2.ApplyImmediately = "APPLY_IMMEDIATELY", BillingReplacementBehavior2.ApplyOnNextBillingCycle = "APPLY_ON_NEXT_BILLING_CYCLE", BillingReplacementBehavior2.Standard = "STANDARD";
    })(BillingReplacementBehavior = exports.BillingReplacementBehavior || (exports.BillingReplacementBehavior = {}));
  }
});
var require_currency = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/currency.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Currency = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Currency = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.Currency = Currency;
    Currency.apiVersion = types_1.ApiVersion.October23;
    Currency.hasOne = {};
    Currency.hasMany = {};
    Currency.paths = [
      { http_method: "get", operation: "get", ids: [], path: "currencies.json" }
    ];
    Currency.resourceNames = [
      {
        singular: "currency",
        plural: "currencies"
      }
    ];
  }
});
var require_metafield = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/metafield.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Metafield = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Metafield = class extends base_1.Base {
      static find({ session, id, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, article_id, blog_id, collection_id, customer_id, draft_order_id, order_id, page_id, product_image_id, product_id, variant_id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, article_id, blog_id, collection_id, customer_id, draft_order_id, order_id, page_id, product_image_id, product_id, variant_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, namespace = null, key = null, type = null, fields = null, metafield = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "article_id", "blog_id", "collection_id", "customer_id", "draft_order_id", "order_id", "page_id", "product_image_id", "product_id", "variant_id", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "namespace", "key", "type", "fields", "metafield"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { article_id, blog_id, collection_id, customer_id, draft_order_id, order_id, page_id, product_image_id, product_id, variant_id },
            params: Object.assign({ limit, since_id, created_at_min, created_at_max, updated_at_min, updated_at_max, namespace, key, type, fields, metafield }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "article_id", "blog_id", "collection_id", "customer_id", "draft_order_id", "order_id", "page_id", "product_image_id", "product_id", "variant_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { article_id, blog_id, collection_id, customer_id, draft_order_id, order_id, page_id, product_image_id, product_id, variant_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Metafield = Metafield;
    Metafield.apiVersion = types_1.ApiVersion.October23;
    Metafield.hasOne = {};
    Metafield.hasMany = {};
    Metafield.paths = [
      { http_method: "delete", operation: "delete", ids: ["article_id", "id"], path: "articles/<article_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["blog_id", "id"], path: "blogs/<blog_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["blog_id", "id"], path: "blogs/<blog_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["collection_id", "id"], path: "collections/<collection_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["customer_id", "id"], path: "customers/<customer_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["draft_order_id", "id"], path: "draft_orders/<draft_order_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["id"], path: "metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["order_id", "id"], path: "orders/<order_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["page_id", "id"], path: "pages/<page_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["product_image_id", "id"], path: "product_images/<product_image_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["product_id", "id"], path: "products/<product_id>/metafields/<id>.json" },
      { http_method: "delete", operation: "delete", ids: ["variant_id", "id"], path: "variants/<variant_id>/metafields/<id>.json" },
      { http_method: "get", operation: "count", ids: ["article_id"], path: "articles/<article_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["blog_id"], path: "blogs/<blog_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["blog_id"], path: "blogs/<blog_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["collection_id"], path: "collections/<collection_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["customer_id"], path: "customers/<customer_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["draft_order_id"], path: "draft_orders/<draft_order_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: [], path: "metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["order_id"], path: "orders/<order_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["page_id"], path: "pages/<page_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["product_image_id"], path: "product_images/<product_image_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["product_id"], path: "products/<product_id>/metafields/count.json" },
      { http_method: "get", operation: "count", ids: ["variant_id"], path: "variants/<variant_id>/metafields/count.json" },
      { http_method: "get", operation: "get", ids: ["article_id"], path: "articles/<article_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["article_id", "id"], path: "articles/<article_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["blog_id"], path: "blogs/<blog_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["blog_id"], path: "blogs/<blog_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["blog_id", "id"], path: "blogs/<blog_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["blog_id", "id"], path: "blogs/<blog_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["collection_id"], path: "collections/<collection_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["collection_id", "id"], path: "collections/<collection_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["customer_id"], path: "customers/<customer_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["customer_id", "id"], path: "customers/<customer_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["draft_order_id"], path: "draft_orders/<draft_order_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["draft_order_id", "id"], path: "draft_orders/<draft_order_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "metafields.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["order_id"], path: "orders/<order_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["order_id", "id"], path: "orders/<order_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["page_id"], path: "pages/<page_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["page_id", "id"], path: "pages/<page_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["product_image_id"], path: "product_images/<product_image_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["product_image_id", "id"], path: "product_images/<product_image_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["product_id"], path: "products/<product_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["product_id", "id"], path: "products/<product_id>/metafields/<id>.json" },
      { http_method: "get", operation: "get", ids: ["variant_id"], path: "variants/<variant_id>/metafields.json" },
      { http_method: "get", operation: "get", ids: ["variant_id", "id"], path: "variants/<variant_id>/metafields/<id>.json" },
      { http_method: "post", operation: "post", ids: ["article_id"], path: "articles/<article_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["blog_id"], path: "blogs/<blog_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["blog_id"], path: "blogs/<blog_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["collection_id"], path: "collections/<collection_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["customer_id"], path: "customers/<customer_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["draft_order_id"], path: "draft_orders/<draft_order_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: [], path: "metafields.json" },
      { http_method: "post", operation: "post", ids: ["order_id"], path: "orders/<order_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["page_id"], path: "pages/<page_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["product_image_id"], path: "product_images/<product_image_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["product_id"], path: "products/<product_id>/metafields.json" },
      { http_method: "post", operation: "post", ids: ["variant_id"], path: "variants/<variant_id>/metafields.json" },
      { http_method: "put", operation: "put", ids: ["article_id", "id"], path: "articles/<article_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["blog_id", "id"], path: "blogs/<blog_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["blog_id", "id"], path: "blogs/<blog_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["collection_id", "id"], path: "collections/<collection_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["customer_id", "id"], path: "customers/<customer_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["draft_order_id", "id"], path: "draft_orders/<draft_order_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["order_id", "id"], path: "orders/<order_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["page_id", "id"], path: "pages/<page_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["product_image_id", "id"], path: "product_images/<product_image_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["product_id", "id"], path: "products/<product_id>/metafields/<id>.json" },
      { http_method: "put", operation: "put", ids: ["variant_id", "id"], path: "variants/<variant_id>/metafields/<id>.json" }
    ];
    Metafield.resourceNames = [
      {
        singular: "metafield",
        plural: "metafields"
      }
    ];
  }
});
var require_customer = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/customer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Customer = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), metafield_1 = require_metafield(), Customer = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, ids = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, limit = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "limit", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ ids, since_id, created_at_min, created_at_max, updated_at_min, updated_at_max, limit, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ created_at_min, created_at_max, updated_at_min, updated_at_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static orders(_a) {
        var { session, id, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "id", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "orders",
            session,
            urlIds: { id },
            params: Object.assign({ status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static search(_a) {
        var { session, order = null, query = null, limit = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order", "query", "limit", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "search",
            session,
            urlIds: {},
            params: Object.assign({ order, query, limit, fields }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      account_activation_url(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "account_activation_url",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      send_invite(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "send_invite",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Customer = Customer;
    Customer.apiVersion = types_1.ApiVersion.October23;
    Customer.hasOne = {
      metafield: metafield_1.Metafield
    };
    Customer.hasMany = {};
    Customer.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "customers/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "customers/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "customers.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "customers/<id>.json" },
      { http_method: "get", operation: "orders", ids: ["id"], path: "customers/<id>/orders.json" },
      { http_method: "get", operation: "search", ids: [], path: "customers/search.json" },
      { http_method: "post", operation: "account_activation_url", ids: ["id"], path: "customers/<id>/account_activation_url.json" },
      { http_method: "post", operation: "post", ids: [], path: "customers.json" },
      { http_method: "post", operation: "send_invite", ids: ["id"], path: "customers/<id>/send_invite.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "customers/<id>.json" }
    ];
    Customer.resourceNames = [
      {
        singular: "customer",
        plural: "customers"
      }
    ];
  }
});
var require_discount_code = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/discount_code.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiscountCode = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), DiscountCode = class extends base_1.Base {
      static find({ session, id, price_rule_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, price_rule_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, price_rule_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, price_rule_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, price_rule_id = null, batch_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "price_rule_id", "batch_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { price_rule_id, batch_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, times_used = null, times_used_min = null, times_used_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "times_used", "times_used_min", "times_used_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ times_used, times_used_min, times_used_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static get_all(_a) {
        var { session, price_rule_id = null, batch_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "price_rule_id", "batch_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "get_all",
            session,
            urlIds: { price_rule_id, batch_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static lookup(_a) {
        var { session, code = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "code"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "lookup",
            session,
            urlIds: {},
            params: Object.assign({ code }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      batch(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "batch",
            session: this.session,
            urlIds: { price_rule_id: this.price_rule_id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.DiscountCode = DiscountCode;
    DiscountCode.apiVersion = types_1.ApiVersion.October23;
    DiscountCode.hasOne = {};
    DiscountCode.hasMany = {};
    DiscountCode.paths = [
      { http_method: "delete", operation: "delete", ids: ["price_rule_id", "id"], path: "price_rules/<price_rule_id>/discount_codes/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "discount_codes/count.json" },
      { http_method: "get", operation: "get", ids: ["price_rule_id", "batch_id"], path: "price_rules/<price_rule_id>/batch/<batch_id>/discount_codes.json" },
      { http_method: "get", operation: "get", ids: ["price_rule_id"], path: "price_rules/<price_rule_id>/discount_codes.json" },
      { http_method: "get", operation: "get", ids: ["price_rule_id", "id"], path: "price_rules/<price_rule_id>/discount_codes/<id>.json" },
      { http_method: "get", operation: "get_all", ids: ["price_rule_id", "batch_id"], path: "price_rules/<price_rule_id>/batch/<batch_id>.json" },
      { http_method: "get", operation: "lookup", ids: [], path: "discount_codes/lookup.json" },
      { http_method: "post", operation: "batch", ids: ["price_rule_id"], path: "price_rules/<price_rule_id>/batch.json" },
      { http_method: "post", operation: "post", ids: ["price_rule_id"], path: "price_rules/<price_rule_id>/discount_codes.json" },
      { http_method: "put", operation: "put", ids: ["price_rule_id", "id"], path: "price_rules/<price_rule_id>/discount_codes/<id>.json" }
    ];
    DiscountCode.resourceNames = [
      {
        singular: "discount_code",
        plural: "discount_codes"
      }
    ];
  }
});
var require_abandoned_checkout = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/abandoned_checkout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbandonedCheckout = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), currency_1 = require_currency(), customer_1 = require_customer(), discount_code_1 = require_discount_code(), AbandonedCheckout = class extends base_1.Base {
      static checkouts(_a) {
        var { session, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, status = null, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "status", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "checkouts",
            session,
            urlIds: {},
            params: Object.assign({ since_id, created_at_min, created_at_max, updated_at_min, updated_at_max, status, limit }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.AbandonedCheckout = AbandonedCheckout;
    AbandonedCheckout.apiVersion = types_1.ApiVersion.October23;
    AbandonedCheckout.hasOne = {
      currency: currency_1.Currency,
      customer: customer_1.Customer
    };
    AbandonedCheckout.hasMany = {
      discount_codes: discount_code_1.DiscountCode
    };
    AbandonedCheckout.paths = [
      { http_method: "get", operation: "checkouts", ids: [], path: "checkouts.json" },
      { http_method: "get", operation: "checkouts", ids: [], path: "checkouts.json" }
    ];
    AbandonedCheckout.resourceNames = [
      {
        singular: "abandoned_checkout",
        plural: "abandoned_checkouts"
      }
    ];
  }
});
var require_access_scope = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/access_scope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccessScope = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), AccessScope = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.AccessScope = AccessScope;
    AccessScope.apiVersion = types_1.ApiVersion.October23;
    AccessScope.hasOne = {};
    AccessScope.hasMany = {};
    AccessScope.customPrefix = "/admin/oauth";
    AccessScope.paths = [
      { http_method: "get", operation: "get", ids: [], path: "access_scopes.json" }
    ];
    AccessScope.resourceNames = [
      {
        singular: "access_scope",
        plural: "access_scopes"
      }
    ];
  }
});
var require_apple_pay_certificate = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/apple_pay_certificate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplePayCertificate = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), ApplePayCertificate = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static csr(_a) {
        var { session, id } = _a, otherArgs = tslib_1.__rest(_a, ["session", "id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "csr",
            session,
            urlIds: { id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.ApplePayCertificate = ApplePayCertificate;
    ApplePayCertificate.apiVersion = types_1.ApiVersion.October23;
    ApplePayCertificate.hasOne = {};
    ApplePayCertificate.hasMany = {};
    ApplePayCertificate.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "apple_pay_certificates/<id>.json" },
      { http_method: "get", operation: "csr", ids: ["id"], path: "apple_pay_certificates/<id>/csr.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "apple_pay_certificates/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "apple_pay_certificates.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "apple_pay_certificates/<id>.json" }
    ];
    ApplePayCertificate.resourceNames = [
      {
        singular: "apple_pay_certificate",
        plural: "apple_pay_certificates"
      }
    ];
  }
});
var require_application_charge = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/application_charge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplicationCharge = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), currency_1 = require_currency(), ApplicationCharge = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ since_id, fields }, otherArgs)
          });
        });
      }
    };
    exports.ApplicationCharge = ApplicationCharge;
    ApplicationCharge.apiVersion = types_1.ApiVersion.October23;
    ApplicationCharge.hasOne = {
      currency: currency_1.Currency
    };
    ApplicationCharge.hasMany = {};
    ApplicationCharge.paths = [
      { http_method: "get", operation: "get", ids: [], path: "application_charges.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "application_charges/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "application_charges.json" }
    ];
    ApplicationCharge.resourceNames = [
      {
        singular: "application_charge",
        plural: "application_charges"
      }
    ];
  }
});
var require_application_credit = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/application_credit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplicationCredit = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), currency_1 = require_currency(), ApplicationCredit = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ fields }, otherArgs)
          });
        });
      }
    };
    exports.ApplicationCredit = ApplicationCredit;
    ApplicationCredit.apiVersion = types_1.ApiVersion.October23;
    ApplicationCredit.hasOne = {
      currency: currency_1.Currency
    };
    ApplicationCredit.hasMany = {};
    ApplicationCredit.paths = [
      { http_method: "get", operation: "get", ids: [], path: "application_credits.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "application_credits/<id>.json" }
    ];
    ApplicationCredit.resourceNames = [
      {
        singular: "application_credit",
        plural: "application_credits"
      }
    ];
  }
});
var require_article = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/article.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Article = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), metafield_1 = require_metafield(), Article = class extends base_1.Base {
      static find({ session, id, blog_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, blog_id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, blog_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, blog_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, blog_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, handle = null, tag = null, author = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "blog_id", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "handle", "tag", "author", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { blog_id },
            params: Object.assign({ limit, since_id, created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status, handle, tag, author, fields }, otherArgs)
          });
        });
      }
      static authors(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "authors",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static count(_a) {
        var { session, blog_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "blog_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { blog_id },
            params: Object.assign({ created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static tags(_a) {
        var { session, blog_id = null, limit = null, popular = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "blog_id", "limit", "popular"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "tags",
            session,
            urlIds: { blog_id },
            params: Object.assign({ limit, popular }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Article = Article;
    Article.apiVersion = types_1.ApiVersion.October23;
    Article.hasOne = {};
    Article.hasMany = {
      metafields: metafield_1.Metafield
    };
    Article.paths = [
      { http_method: "delete", operation: "delete", ids: ["blog_id", "id"], path: "blogs/<blog_id>/articles/<id>.json" },
      { http_method: "get", operation: "authors", ids: [], path: "articles/authors.json" },
      { http_method: "get", operation: "count", ids: ["blog_id"], path: "blogs/<blog_id>/articles/count.json" },
      { http_method: "get", operation: "get", ids: ["blog_id"], path: "blogs/<blog_id>/articles.json" },
      { http_method: "get", operation: "get", ids: ["blog_id", "id"], path: "blogs/<blog_id>/articles/<id>.json" },
      { http_method: "get", operation: "tags", ids: [], path: "articles/tags.json" },
      { http_method: "get", operation: "tags", ids: ["blog_id"], path: "blogs/<blog_id>/articles/tags.json" },
      { http_method: "post", operation: "post", ids: ["blog_id"], path: "blogs/<blog_id>/articles.json" },
      { http_method: "put", operation: "put", ids: ["blog_id", "id"], path: "blogs/<blog_id>/articles/<id>.json" }
    ];
    Article.resourceNames = [
      {
        singular: "article",
        plural: "articles"
      }
    ];
  }
});
var require_asset = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/asset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Asset = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Asset = class extends base_1.Base {
      static delete({ session, theme_id = null, asset = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { theme_id },
            params: { asset }
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, theme_id = null, fields = null, asset = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "theme_id", "fields", "asset"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { theme_id },
            params: Object.assign({ fields, asset }, otherArgs)
          });
        });
      }
    };
    exports.Asset = Asset;
    Asset.apiVersion = types_1.ApiVersion.October23;
    Asset.hasOne = {};
    Asset.hasMany = {};
    Asset.paths = [
      { http_method: "delete", operation: "delete", ids: ["theme_id"], path: "themes/<theme_id>/assets.json" },
      { http_method: "get", operation: "get", ids: ["theme_id"], path: "themes/<theme_id>/assets.json" },
      { http_method: "get", operation: "get", ids: ["theme_id"], path: "themes/<theme_id>/assets.json" },
      { http_method: "put", operation: "put", ids: ["theme_id"], path: "themes/<theme_id>/assets.json" }
    ];
    Asset.primaryKey = "key";
    Asset.resourceNames = [
      {
        singular: "asset",
        plural: "assets"
      }
    ];
  }
});
var require_assigned_fulfillment_order = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/assigned_fulfillment_order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssignedFulfillmentOrder = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), AssignedFulfillmentOrder = class extends base_1.Base {
      static all(_a) {
        var { session, assignment_status = null, location_ids = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "assignment_status", "location_ids"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ assignment_status, location_ids }, otherArgs)
          });
        });
      }
    };
    exports.AssignedFulfillmentOrder = AssignedFulfillmentOrder;
    AssignedFulfillmentOrder.apiVersion = types_1.ApiVersion.October23;
    AssignedFulfillmentOrder.hasOne = {};
    AssignedFulfillmentOrder.hasMany = {};
    AssignedFulfillmentOrder.paths = [
      { http_method: "get", operation: "get", ids: [], path: "assigned_fulfillment_orders.json" }
    ];
    AssignedFulfillmentOrder.resourceNames = [
      {
        singular: "fulfillment_order",
        plural: "fulfillment_orders"
      }
    ];
  }
});
var require_balance = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/balance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Balance = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Balance = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.Balance = Balance;
    Balance.apiVersion = types_1.ApiVersion.October23;
    Balance.hasOne = {};
    Balance.hasMany = {};
    Balance.paths = [
      { http_method: "get", operation: "get", ids: [], path: "shopify_payments/balance.json" }
    ];
    Balance.resourceNames = [
      {
        singular: "balance",
        plural: "balances"
      }
    ];
  }
});
var require_blog = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/blog.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Blog = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), metafield_1 = require_metafield(), Blog = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, handle = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "handle", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, since_id, handle, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Blog = Blog;
    Blog.apiVersion = types_1.ApiVersion.October23;
    Blog.hasOne = {};
    Blog.hasMany = {
      metafields: metafield_1.Metafield
    };
    Blog.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "blogs/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "blogs/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "blogs.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "blogs/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "blogs.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "blogs/<id>.json" }
    ];
    Blog.resourceNames = [
      {
        singular: "blog",
        plural: "blogs"
      }
    ];
  }
});
var require_cancellation_request = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/cancellation_request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancellationRequest = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), CancellationRequest = class extends base_1.Base {
      accept(_a) {
        var { message: message2 = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "accept",
            session: this.session,
            urlIds: { fulfillment_order_id: this.fulfillment_order_id },
            params: Object.assign({ message: message2 }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      reject(_a) {
        var { message: message2 = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "reject",
            session: this.session,
            urlIds: { fulfillment_order_id: this.fulfillment_order_id },
            params: Object.assign({ message: message2 }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.CancellationRequest = CancellationRequest;
    CancellationRequest.apiVersion = types_1.ApiVersion.October23;
    CancellationRequest.hasOne = {};
    CancellationRequest.hasMany = {};
    CancellationRequest.paths = [
      { http_method: "post", operation: "accept", ids: ["fulfillment_order_id"], path: "fulfillment_orders/<fulfillment_order_id>/cancellation_request/accept.json" },
      { http_method: "post", operation: "post", ids: ["fulfillment_order_id"], path: "fulfillment_orders/<fulfillment_order_id>/cancellation_request.json" },
      { http_method: "post", operation: "reject", ids: ["fulfillment_order_id"], path: "fulfillment_orders/<fulfillment_order_id>/cancellation_request/reject.json" }
    ];
    CancellationRequest.resourceNames = [
      {
        singular: "cancellation_request",
        plural: "cancellation_requests"
      }
    ];
  }
});
var require_carrier_service = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/carrier_service.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CarrierService = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), CarrierService = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.CarrierService = CarrierService;
    CarrierService.apiVersion = types_1.ApiVersion.October23;
    CarrierService.hasOne = {};
    CarrierService.hasMany = {};
    CarrierService.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "carrier_services/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "carrier_services.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "carrier_services/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "carrier_services.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "carrier_services/<id>.json" }
    ];
    CarrierService.resourceNames = [
      {
        singular: "carrier_service",
        plural: "carrier_services"
      }
    ];
  }
});
var require_fulfillment = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/fulfillment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fulfillment = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Fulfillment = class extends base_1.Base {
      static find({ session, id, order_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, order_id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, fulfillment_order_id = null, order_id = null, created_at_max = null, created_at_min = null, fields = null, limit = null, since_id = null, updated_at_max = null, updated_at_min = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fulfillment_order_id", "order_id", "created_at_max", "created_at_min", "fields", "limit", "since_id", "updated_at_max", "updated_at_min"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { fulfillment_order_id, order_id },
            params: Object.assign({ created_at_max, created_at_min, fields, limit, since_id, updated_at_max, updated_at_min }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, order_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { order_id },
            params: Object.assign({ created_at_min, created_at_max, updated_at_min, updated_at_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      cancel(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "cancel",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      update_tracking(_a) {
        var { notify_customer = null, tracking_info = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["notify_customer", "tracking_info", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "update_tracking",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({ notify_customer, tracking_info }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Fulfillment = Fulfillment;
    Fulfillment.apiVersion = types_1.ApiVersion.October23;
    Fulfillment.hasOne = {};
    Fulfillment.hasMany = {};
    Fulfillment.paths = [
      { http_method: "get", operation: "count", ids: ["order_id"], path: "orders/<order_id>/fulfillments/count.json" },
      { http_method: "get", operation: "get", ids: ["fulfillment_order_id"], path: "fulfillment_orders/<fulfillment_order_id>/fulfillments.json" },
      { http_method: "get", operation: "get", ids: ["order_id"], path: "orders/<order_id>/fulfillments.json" },
      { http_method: "get", operation: "get", ids: ["order_id", "id"], path: "orders/<order_id>/fulfillments/<id>.json" },
      { http_method: "post", operation: "cancel", ids: ["id"], path: "fulfillments/<id>/cancel.json" },
      { http_method: "post", operation: "post", ids: [], path: "fulfillments.json" },
      { http_method: "post", operation: "update_tracking", ids: ["id"], path: "fulfillments/<id>/update_tracking.json" }
    ];
    Fulfillment.resourceNames = [
      {
        singular: "fulfillment",
        plural: "fulfillments"
      }
    ];
  }
});
var require_transaction = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transaction = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Transaction = class extends base_1.Base {
      static find({ session, id, order_id = null, fields = null, in_shop_currency = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, order_id },
            params: { fields, in_shop_currency }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, since_id = null, fields = null, in_shop_currency = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "since_id", "fields", "in_shop_currency"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { order_id },
            params: Object.assign({ since_id, fields, in_shop_currency }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, order_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { order_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Transaction = Transaction;
    Transaction.apiVersion = types_1.ApiVersion.October23;
    Transaction.hasOne = {};
    Transaction.hasMany = {};
    Transaction.paths = [
      { http_method: "get", operation: "count", ids: ["order_id"], path: "orders/<order_id>/transactions/count.json" },
      { http_method: "get", operation: "get", ids: ["order_id"], path: "orders/<order_id>/transactions.json" },
      { http_method: "get", operation: "get", ids: ["order_id", "id"], path: "orders/<order_id>/transactions/<id>.json" },
      { http_method: "post", operation: "post", ids: ["order_id"], path: "orders/<order_id>/transactions.json" }
    ];
    Transaction.resourceNames = [
      {
        singular: "transaction",
        plural: "transactions"
      }
    ];
  }
});
var require_refund = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/refund.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Refund = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), transaction_1 = require_transaction(), Refund = class extends base_1.Base {
      static find({ session, id, order_id = null, fields = null, in_shop_currency = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, order_id },
            params: { fields, in_shop_currency }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, limit = null, fields = null, in_shop_currency = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "limit", "fields", "in_shop_currency"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { order_id },
            params: Object.assign({ limit, fields, in_shop_currency }, otherArgs)
          });
        });
      }
      calculate(_a) {
        var { shipping = null, refund_line_items = null, currency = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["shipping", "refund_line_items", "currency", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "calculate",
            session: this.session,
            urlIds: { order_id: this.order_id },
            params: Object.assign({ shipping, refund_line_items, currency }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Refund = Refund;
    Refund.apiVersion = types_1.ApiVersion.October23;
    Refund.hasOne = {};
    Refund.hasMany = {
      transactions: transaction_1.Transaction
    };
    Refund.paths = [
      { http_method: "get", operation: "get", ids: ["order_id"], path: "orders/<order_id>/refunds.json" },
      { http_method: "get", operation: "get", ids: ["order_id", "id"], path: "orders/<order_id>/refunds/<id>.json" },
      { http_method: "post", operation: "calculate", ids: ["order_id"], path: "orders/<order_id>/refunds/calculate.json" },
      { http_method: "post", operation: "post", ids: ["order_id"], path: "orders/<order_id>/refunds.json" }
    ];
    Refund.resourceNames = [
      {
        singular: "refund",
        plural: "refunds"
      }
    ];
  }
});
var require_order = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Order = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), customer_1 = require_customer(), discount_code_1 = require_discount_code(), fulfillment_1 = require_fulfillment(), refund_1 = require_refund(), Order = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, ids = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, processed_at_min = null, processed_at_max = null, attribution_app_id = null, status = null, financial_status = null, fulfillment_status = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "processed_at_min", "processed_at_max", "attribution_app_id", "status", "financial_status", "fulfillment_status", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ ids, limit, since_id, created_at_min, created_at_max, updated_at_min, updated_at_max, processed_at_min, processed_at_max, attribution_app_id, status, financial_status, fulfillment_status, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, status = null, financial_status = null, fulfillment_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "status", "financial_status", "fulfillment_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ created_at_min, created_at_max, updated_at_min, updated_at_max, status, financial_status, fulfillment_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      cancel(_a) {
        var { amount = null, currency = null, restock = null, reason = null, email = null, refund = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["amount", "currency", "restock", "reason", "email", "refund", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "cancel",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({ amount, currency, restock, reason, email, refund }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      close(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "close",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      open(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "open",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Order = Order;
    Order.apiVersion = types_1.ApiVersion.October23;
    Order.hasOne = {
      customer: customer_1.Customer
    };
    Order.hasMany = {
      discount_codes: discount_code_1.DiscountCode,
      fulfillments: fulfillment_1.Fulfillment,
      refunds: refund_1.Refund
    };
    Order.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "orders/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "orders/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "orders.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "orders/<id>.json" },
      { http_method: "post", operation: "cancel", ids: ["id"], path: "orders/<id>/cancel.json" },
      { http_method: "post", operation: "close", ids: ["id"], path: "orders/<id>/close.json" },
      { http_method: "post", operation: "open", ids: ["id"], path: "orders/<id>/open.json" },
      { http_method: "post", operation: "post", ids: [], path: "orders.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "orders/<id>.json" }
    ];
    Order.resourceNames = [
      {
        singular: "order",
        plural: "orders"
      }
    ];
  }
});
var require_gift_card = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/gift_card.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GiftCard = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), balance_1 = require_balance(), currency_1 = require_currency(), GiftCard = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, status = null, limit = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "status", "limit", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ status, limit, since_id, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static search(_a) {
        var { session, order = null, query = null, limit = null, fields = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order", "query", "limit", "fields", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "search",
            session,
            urlIds: {},
            params: Object.assign({ order, query, limit, fields, created_at_min, created_at_max, updated_at_min, updated_at_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      disable(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "disable",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.GiftCard = GiftCard;
    GiftCard.apiVersion = types_1.ApiVersion.October23;
    GiftCard.hasOne = {
      balance: balance_1.Balance,
      currency: currency_1.Currency
    };
    GiftCard.hasMany = {};
    GiftCard.paths = [
      { http_method: "get", operation: "count", ids: [], path: "gift_cards/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "gift_cards.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "gift_cards/<id>.json" },
      { http_method: "get", operation: "search", ids: [], path: "gift_cards/search.json" },
      { http_method: "post", operation: "disable", ids: ["id"], path: "gift_cards/<id>/disable.json" },
      { http_method: "post", operation: "post", ids: [], path: "gift_cards.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "gift_cards/<id>.json" }
    ];
    GiftCard.resourceNames = [
      {
        singular: "gift_card",
        plural: "gift_cards"
      }
    ];
  }
});
var require_checkout = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/checkout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Checkout = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), discount_code_1 = require_discount_code(), order_1 = require_order(), gift_card_1 = require_gift_card(), Checkout = class extends base_1.Base {
      static find({ session, token }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { token },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static shipping_rates(_a) {
        var { session, token } = _a, otherArgs = tslib_1.__rest(_a, ["session", "token"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "shipping_rates",
            session,
            urlIds: { token },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      complete(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "complete",
            session: this.session,
            urlIds: { token: this.token },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Checkout = Checkout;
    Checkout.apiVersion = types_1.ApiVersion.October23;
    Checkout.hasOne = {
      discount_code: discount_code_1.DiscountCode,
      order: order_1.Order
    };
    Checkout.hasMany = {
      gift_cards: gift_card_1.GiftCard
    };
    Checkout.paths = [
      { http_method: "get", operation: "get", ids: ["token"], path: "checkouts/<token>.json" },
      { http_method: "get", operation: "shipping_rates", ids: ["token"], path: "checkouts/<token>/shipping_rates.json" },
      { http_method: "post", operation: "complete", ids: ["token"], path: "checkouts/<token>/complete.json" },
      { http_method: "post", operation: "post", ids: [], path: "checkouts.json" },
      { http_method: "put", operation: "put", ids: ["token"], path: "checkouts/<token>.json" }
    ];
    Checkout.primaryKey = "token";
    Checkout.resourceNames = [
      {
        singular: "checkout",
        plural: "checkouts"
      }
    ];
  }
});
var require_collect = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/collect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collect = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Collect = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, since_id, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Collect = Collect;
    Collect.apiVersion = types_1.ApiVersion.October23;
    Collect.hasOne = {};
    Collect.hasMany = {};
    Collect.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "collects/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "collects/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "collects.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "collects/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "collects.json" }
    ];
    Collect.resourceNames = [
      {
        singular: "collect",
        plural: "collects"
      }
    ];
  }
});
var require_image = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/image.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Image = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Image2 = class extends base_1.Base {
      static find({ session, id, product_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, product_id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, product_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, product_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, product_id = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { product_id },
            params: Object.assign({ since_id, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, product_id = null, since_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id", "since_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { product_id },
            params: Object.assign({ since_id }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Image = Image2;
    Image2.apiVersion = types_1.ApiVersion.October23;
    Image2.hasOne = {};
    Image2.hasMany = {};
    Image2.paths = [
      { http_method: "delete", operation: "delete", ids: ["product_id", "id"], path: "products/<product_id>/images/<id>.json" },
      { http_method: "get", operation: "count", ids: ["product_id"], path: "products/<product_id>/images/count.json" },
      { http_method: "get", operation: "get", ids: ["product_id"], path: "products/<product_id>/images.json" },
      { http_method: "get", operation: "get", ids: ["product_id", "id"], path: "products/<product_id>/images/<id>.json" },
      { http_method: "post", operation: "post", ids: ["product_id"], path: "products/<product_id>/images.json" },
      { http_method: "put", operation: "put", ids: ["product_id", "id"], path: "products/<product_id>/images/<id>.json" }
    ];
    Image2.resourceNames = [
      {
        singular: "image",
        plural: "images"
      }
    ];
  }
});
var require_collection = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/collection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collection = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), image_1 = require_image(), Collection = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static products(_a) {
        var { session, id, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "id", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "products",
            session,
            urlIds: { id },
            params: Object.assign({ limit }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Collection = Collection;
    Collection.apiVersion = types_1.ApiVersion.October23;
    Collection.hasOne = {
      image: image_1.Image
    };
    Collection.hasMany = {};
    Collection.paths = [
      { http_method: "get", operation: "get", ids: ["id"], path: "collections/<id>.json" },
      { http_method: "get", operation: "products", ids: ["id"], path: "collections/<id>/products.json" }
    ];
    Collection.resourceNames = [
      {
        singular: "collection",
        plural: "collections"
      }
    ];
  }
});
var require_collection_listing = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/collection_listing.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CollectionListing = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), image_1 = require_image(), CollectionListing = class extends base_1.Base {
      static find({ session, collection_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { collection_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, collection_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { collection_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit }, otherArgs)
          });
        });
      }
      static product_ids(_a) {
        var { session, collection_id, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "collection_id", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "product_ids",
            session,
            urlIds: { collection_id },
            params: Object.assign({ limit }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.CollectionListing = CollectionListing;
    CollectionListing.apiVersion = types_1.ApiVersion.October23;
    CollectionListing.hasOne = {
      image: image_1.Image
    };
    CollectionListing.hasMany = {};
    CollectionListing.paths = [
      { http_method: "delete", operation: "delete", ids: ["collection_id"], path: "collection_listings/<collection_id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "collection_listings.json" },
      { http_method: "get", operation: "get", ids: ["collection_id"], path: "collection_listings/<collection_id>.json" },
      { http_method: "get", operation: "product_ids", ids: ["collection_id"], path: "collection_listings/<collection_id>/product_ids.json" },
      { http_method: "put", operation: "put", ids: ["collection_id"], path: "collection_listings/<collection_id>.json" }
    ];
    CollectionListing.primaryKey = "collection_id";
    CollectionListing.resourceNames = [
      {
        singular: "collection_listing",
        plural: "collection_listings"
      }
    ];
  }
});
var require_comment = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/comment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Comment = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Comment = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, fields = null, published_status = null, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "fields", "published_status", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, since_id, created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, fields, published_status, status }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status, status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      approve(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "approve",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      not_spam(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "not_spam",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      remove(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "remove",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      restore(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "restore",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      spam(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "spam",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Comment = Comment;
    Comment.apiVersion = types_1.ApiVersion.October23;
    Comment.hasOne = {};
    Comment.hasMany = {};
    Comment.paths = [
      { http_method: "get", operation: "count", ids: [], path: "comments/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "comments.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "comments/<id>.json" },
      { http_method: "post", operation: "approve", ids: ["id"], path: "comments/<id>/approve.json" },
      { http_method: "post", operation: "not_spam", ids: ["id"], path: "comments/<id>/not_spam.json" },
      { http_method: "post", operation: "post", ids: [], path: "comments.json" },
      { http_method: "post", operation: "remove", ids: ["id"], path: "comments/<id>/remove.json" },
      { http_method: "post", operation: "restore", ids: ["id"], path: "comments/<id>/restore.json" },
      { http_method: "post", operation: "spam", ids: ["id"], path: "comments/<id>/spam.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "comments/<id>.json" }
    ];
    Comment.resourceNames = [
      {
        singular: "comment",
        plural: "comments"
      }
    ];
  }
});
var require_province = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/province.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Province = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Province = class extends base_1.Base {
      static find({ session, id, country_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, country_id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, country_id = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "country_id", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { country_id },
            params: Object.assign({ since_id, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, country_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "country_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { country_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Province = Province;
    Province.apiVersion = types_1.ApiVersion.October23;
    Province.hasOne = {};
    Province.hasMany = {};
    Province.paths = [
      { http_method: "get", operation: "count", ids: ["country_id"], path: "countries/<country_id>/provinces/count.json" },
      { http_method: "get", operation: "get", ids: ["country_id"], path: "countries/<country_id>/provinces.json" },
      { http_method: "get", operation: "get", ids: ["country_id", "id"], path: "countries/<country_id>/provinces/<id>.json" },
      { http_method: "put", operation: "put", ids: ["country_id", "id"], path: "countries/<country_id>/provinces/<id>.json" }
    ];
    Province.resourceNames = [
      {
        singular: "province",
        plural: "provinces"
      }
    ];
  }
});
var require_country = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/country.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Country = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), province_1 = require_province(), Country = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ since_id, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Country = Country;
    Country.apiVersion = types_1.ApiVersion.October23;
    Country.hasOne = {};
    Country.hasMany = {
      provinces: province_1.Province
    };
    Country.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "countries/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "countries/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "countries.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "countries/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "countries.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "countries/<id>.json" }
    ];
    Country.resourceNames = [
      {
        singular: "country",
        plural: "countries"
      }
    ];
  }
});
var require_custom_collection = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/custom_collection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomCollection = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), CustomCollection = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, ids = null, since_id = null, title = null, product_id = null, handle = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "ids", "since_id", "title", "product_id", "handle", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, ids, since_id, title, product_id, handle, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, title = null, product_id = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "title", "product_id", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ title, product_id, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.CustomCollection = CustomCollection;
    CustomCollection.apiVersion = types_1.ApiVersion.October23;
    CustomCollection.hasOne = {};
    CustomCollection.hasMany = {};
    CustomCollection.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "custom_collections/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "custom_collections/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "custom_collections.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "custom_collections/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "custom_collections.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "custom_collections/<id>.json" }
    ];
    CustomCollection.resourceNames = [
      {
        singular: "custom_collection",
        plural: "custom_collections"
      }
    ];
  }
});
var require_customer_address = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/customer_address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomerAddress = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), CustomerAddress = class extends base_1.Base {
      static getJsonBodyName() {
        return "address";
      }
      static find({ session, id, customer_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, customer_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, customer_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, customer_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, customer_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "customer_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { customer_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
      default(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "put",
            operation: "default",
            session: this.session,
            urlIds: { id: this.id, customer_id: this.customer_id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      set(_a) {
        var { address_ids = null, operation = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["address_ids", "operation", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "put",
            operation: "set",
            session: this.session,
            urlIds: { customer_id: this.customer_id },
            params: Object.assign({ address_ids, operation }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.CustomerAddress = CustomerAddress;
    CustomerAddress.apiVersion = types_1.ApiVersion.October23;
    CustomerAddress.hasOne = {};
    CustomerAddress.hasMany = {};
    CustomerAddress.paths = [
      { http_method: "delete", operation: "delete", ids: ["customer_id", "id"], path: "customers/<customer_id>/addresses/<id>.json" },
      { http_method: "get", operation: "get", ids: ["customer_id"], path: "customers/<customer_id>/addresses.json" },
      { http_method: "get", operation: "get", ids: ["customer_id", "id"], path: "customers/<customer_id>/addresses/<id>.json" },
      { http_method: "post", operation: "post", ids: ["customer_id"], path: "customers/<customer_id>/addresses.json" },
      { http_method: "put", operation: "default", ids: ["customer_id", "id"], path: "customers/<customer_id>/addresses/<id>/default.json" },
      { http_method: "put", operation: "put", ids: ["customer_id", "id"], path: "customers/<customer_id>/addresses/<id>.json" },
      { http_method: "put", operation: "set", ids: ["customer_id"], path: "customers/<customer_id>/addresses/set.json" }
    ];
    CustomerAddress.resourceNames = [
      {
        singular: "customer_address",
        plural: "customer_addresses"
      },
      {
        singular: "address",
        plural: "addresses"
      }
    ];
  }
});
var require_deprecated_api_call = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/deprecated_api_call.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeprecatedApiCall = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), DeprecatedApiCall = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.DeprecatedApiCall = DeprecatedApiCall;
    DeprecatedApiCall.apiVersion = types_1.ApiVersion.October23;
    DeprecatedApiCall.hasOne = {};
    DeprecatedApiCall.hasMany = {};
    DeprecatedApiCall.paths = [
      { http_method: "get", operation: "get", ids: [], path: "deprecated_api_calls.json" }
    ];
    DeprecatedApiCall.resourceNames = [
      {
        singular: "deprecated_api_call",
        plural: "deprecated_api_calls"
      }
    ];
  }
});
var require_dispute = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/dispute.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Dispute = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Dispute = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, last_id = null, status = null, initiated_at = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "last_id", "status", "initiated_at"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ since_id, last_id, status, initiated_at }, otherArgs)
          });
        });
      }
    };
    exports.Dispute = Dispute;
    Dispute.apiVersion = types_1.ApiVersion.October23;
    Dispute.hasOne = {};
    Dispute.hasMany = {};
    Dispute.paths = [
      { http_method: "get", operation: "get", ids: [], path: "shopify_payments/disputes.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "shopify_payments/disputes/<id>.json" }
    ];
    Dispute.resourceNames = [
      {
        singular: "dispute",
        plural: "disputes"
      }
    ];
  }
});
var require_dispute_evidence = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/dispute_evidence.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisputeEvidence = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), fulfillment_1 = require_fulfillment(), DisputeEvidence = class extends base_1.Base {
      static find({ session, dispute_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { dispute_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
    };
    exports.DisputeEvidence = DisputeEvidence;
    DisputeEvidence.apiVersion = types_1.ApiVersion.October23;
    DisputeEvidence.hasOne = {};
    DisputeEvidence.hasMany = {
      fulfillments: fulfillment_1.Fulfillment
    };
    DisputeEvidence.paths = [
      { http_method: "get", operation: "get", ids: ["dispute_id"], path: "shopify_payments/disputes/<dispute_id>/dispute_evidences.json" },
      { http_method: "put", operation: "put", ids: ["dispute_id"], path: "shopify_payments/disputes/<dispute_id>/dispute_evidences.json" }
    ];
    DisputeEvidence.primaryKey = "dispute_id";
    DisputeEvidence.resourceNames = [
      {
        singular: "dispute_evidence",
        plural: "dispute_evidences"
      }
    ];
  }
});
var require_dispute_file_upload = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/dispute_file_upload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisputeFileUpload = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), DisputeFileUpload = class extends base_1.Base {
      static delete({ session, id, dispute_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, dispute_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
    };
    exports.DisputeFileUpload = DisputeFileUpload;
    DisputeFileUpload.apiVersion = types_1.ApiVersion.October23;
    DisputeFileUpload.hasOne = {};
    DisputeFileUpload.hasMany = {};
    DisputeFileUpload.paths = [
      { http_method: "delete", operation: "delete", ids: ["dispute_id", "id"], path: "shopify_payments/disputes/<dispute_id>/dispute_file_uploads/<id>.json" },
      { http_method: "post", operation: "post", ids: ["dispute_id"], path: "shopify_payments/disputes/<dispute_id>/dispute_file_uploads.json" }
    ];
    DisputeFileUpload.resourceNames = [
      {
        singular: "dispute_file_upload",
        plural: "dispute_file_uploads"
      }
    ];
  }
});
var require_draft_order = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/draft_order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DraftOrder = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), customer_1 = require_customer(), DraftOrder = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, fields = null, limit = null, since_id = null, updated_at_min = null, updated_at_max = null, ids = null, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields", "limit", "since_id", "updated_at_min", "updated_at_max", "ids", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ fields, limit, since_id, updated_at_min, updated_at_max, ids, status }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, since_id = null, status = null, updated_at_max = null, updated_at_min = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "status", "updated_at_max", "updated_at_min"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ since_id, status, updated_at_max, updated_at_min }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      send_invoice(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "send_invoice",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      complete(_a) {
        var { payment_gateway_id = null, payment_pending = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["payment_gateway_id", "payment_pending", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "put",
            operation: "complete",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({ payment_gateway_id, payment_pending }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.DraftOrder = DraftOrder;
    DraftOrder.apiVersion = types_1.ApiVersion.October23;
    DraftOrder.hasOne = {
      customer: customer_1.Customer
    };
    DraftOrder.hasMany = {};
    DraftOrder.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "draft_orders/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "draft_orders/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "draft_orders.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "draft_orders/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "draft_orders.json" },
      { http_method: "post", operation: "send_invoice", ids: ["id"], path: "draft_orders/<id>/send_invoice.json" },
      { http_method: "put", operation: "complete", ids: ["id"], path: "draft_orders/<id>/complete.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "draft_orders/<id>.json" }
    ];
    DraftOrder.resourceNames = [
      {
        singular: "draft_order",
        plural: "draft_orders"
      }
    ];
  }
});
var require_event = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Event = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Event2 = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, product_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, filter = null, verb = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "product_id", "limit", "since_id", "created_at_min", "created_at_max", "filter", "verb", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { order_id, product_id },
            params: Object.assign({ limit, since_id, created_at_min, created_at_max, filter, verb, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, created_at_min = null, created_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "created_at_min", "created_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ created_at_min, created_at_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Event = Event2;
    Event2.apiVersion = types_1.ApiVersion.October23;
    Event2.hasOne = {};
    Event2.hasMany = {};
    Event2.paths = [
      { http_method: "get", operation: "count", ids: [], path: "events/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "events.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "events/<id>.json" },
      { http_method: "get", operation: "get", ids: ["order_id"], path: "orders/<order_id>/events.json" },
      { http_method: "get", operation: "get", ids: ["product_id"], path: "products/<product_id>/events.json" }
    ];
    Event2.resourceNames = [
      {
        singular: "event",
        plural: "events"
      }
    ];
  }
});
var require_fulfillment_event = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/fulfillment_event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FulfillmentEvent = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), country_1 = require_country(), province_1 = require_province(), FulfillmentEvent = class extends base_1.Base {
      static getJsonBodyName() {
        return "event";
      }
      static find({ session, id, order_id = null, fulfillment_id = null, event_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, order_id, fulfillment_id },
            params: { event_id }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, order_id = null, fulfillment_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, order_id, fulfillment_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, fulfillment_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "fulfillment_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { order_id, fulfillment_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.FulfillmentEvent = FulfillmentEvent;
    FulfillmentEvent.apiVersion = types_1.ApiVersion.October23;
    FulfillmentEvent.hasOne = {
      country: country_1.Country,
      province: province_1.Province
    };
    FulfillmentEvent.hasMany = {};
    FulfillmentEvent.paths = [
      { http_method: "delete", operation: "delete", ids: ["order_id", "fulfillment_id", "id"], path: "orders/<order_id>/fulfillments/<fulfillment_id>/events/<id>.json" },
      { http_method: "get", operation: "get", ids: ["order_id", "fulfillment_id"], path: "orders/<order_id>/fulfillments/<fulfillment_id>/events.json" },
      { http_method: "get", operation: "get", ids: ["order_id", "fulfillment_id", "id"], path: "orders/<order_id>/fulfillments/<fulfillment_id>/events/<id>.json" },
      { http_method: "post", operation: "post", ids: ["order_id", "fulfillment_id"], path: "orders/<order_id>/fulfillments/<fulfillment_id>/events.json" }
    ];
    FulfillmentEvent.resourceNames = [
      {
        singular: "fulfillment_event",
        plural: "fulfillment_events"
      }
    ];
  }
});
var require_fulfillment_order = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/fulfillment_order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FulfillmentOrder = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), FulfillmentOrder = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, order_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { order_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
      cancel(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "cancel",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      close(_a) {
        var { message: message2 = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "close",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({ message: message2 }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      hold(_a) {
        var { fulfillment_hold = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["fulfillment_hold", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "hold",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({ fulfillment_hold }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      move(_a) {
        var { fulfillment_order = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["fulfillment_order", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "move",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({ fulfillment_order }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      open(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "open",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      release_hold(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "release_hold",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      reschedule(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "reschedule",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      set_fulfillment_orders_deadline(_a) {
        var { fulfillment_order_ids = null, fulfillment_deadline = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["fulfillment_order_ids", "fulfillment_deadline", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "set_fulfillment_orders_deadline",
            session: this.session,
            urlIds: {},
            params: Object.assign({ fulfillment_order_ids, fulfillment_deadline }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.FulfillmentOrder = FulfillmentOrder;
    FulfillmentOrder.apiVersion = types_1.ApiVersion.October23;
    FulfillmentOrder.hasOne = {};
    FulfillmentOrder.hasMany = {};
    FulfillmentOrder.paths = [
      { http_method: "get", operation: "get", ids: ["id"], path: "fulfillment_orders/<id>.json" },
      { http_method: "get", operation: "get", ids: ["order_id"], path: "orders/<order_id>/fulfillment_orders.json" },
      { http_method: "post", operation: "cancel", ids: ["id"], path: "fulfillment_orders/<id>/cancel.json" },
      { http_method: "post", operation: "close", ids: ["id"], path: "fulfillment_orders/<id>/close.json" },
      { http_method: "post", operation: "hold", ids: ["id"], path: "fulfillment_orders/<id>/hold.json" },
      { http_method: "post", operation: "move", ids: ["id"], path: "fulfillment_orders/<id>/move.json" },
      { http_method: "post", operation: "open", ids: ["id"], path: "fulfillment_orders/<id>/open.json" },
      { http_method: "post", operation: "release_hold", ids: ["id"], path: "fulfillment_orders/<id>/release_hold.json" },
      { http_method: "post", operation: "reschedule", ids: ["id"], path: "fulfillment_orders/<id>/reschedule.json" },
      { http_method: "post", operation: "set_fulfillment_orders_deadline", ids: [], path: "fulfillment_orders/set_fulfillment_orders_deadline.json" }
    ];
    FulfillmentOrder.resourceNames = [
      {
        singular: "fulfillment_order",
        plural: "fulfillment_orders"
      }
    ];
  }
});
var require_fulfillment_request = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/fulfillment_request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FulfillmentRequest = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), FulfillmentRequest = class extends base_1.Base {
      accept(_a) {
        var { message: message2 = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "accept",
            session: this.session,
            urlIds: { fulfillment_order_id: this.fulfillment_order_id },
            params: Object.assign({ message: message2 }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      reject(_a) {
        var { message: message2 = null, reason = null, line_items = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "reason", "line_items", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "reject",
            session: this.session,
            urlIds: { fulfillment_order_id: this.fulfillment_order_id },
            params: Object.assign({ message: message2, reason, line_items }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.FulfillmentRequest = FulfillmentRequest;
    FulfillmentRequest.apiVersion = types_1.ApiVersion.October23;
    FulfillmentRequest.hasOne = {};
    FulfillmentRequest.hasMany = {};
    FulfillmentRequest.paths = [
      { http_method: "post", operation: "accept", ids: ["fulfillment_order_id"], path: "fulfillment_orders/<fulfillment_order_id>/fulfillment_request/accept.json" },
      { http_method: "post", operation: "post", ids: ["fulfillment_order_id"], path: "fulfillment_orders/<fulfillment_order_id>/fulfillment_request.json" },
      { http_method: "post", operation: "reject", ids: ["fulfillment_order_id"], path: "fulfillment_orders/<fulfillment_order_id>/fulfillment_request/reject.json" }
    ];
    FulfillmentRequest.resourceNames = [
      {
        singular: "submitted_fulfillment_order",
        plural: "submitted_fulfillment_orders"
      },
      {
        singular: "fulfillment_order",
        plural: "fulfillment_orders"
      }
    ];
  }
});
var require_fulfillment_service = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/fulfillment_service.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FulfillmentService = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), FulfillmentService = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, scope = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "scope"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ scope }, otherArgs)
          });
        });
      }
    };
    exports.FulfillmentService = FulfillmentService;
    FulfillmentService.apiVersion = types_1.ApiVersion.October23;
    FulfillmentService.hasOne = {};
    FulfillmentService.hasMany = {};
    FulfillmentService.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "fulfillment_services/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "fulfillment_services.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "fulfillment_services/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "fulfillment_services.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "fulfillment_services/<id>.json" }
    ];
    FulfillmentService.resourceNames = [
      {
        singular: "fulfillment_service",
        plural: "fulfillment_services"
      }
    ];
  }
});
var require_gift_card_adjustment = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/gift_card_adjustment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GiftCardAdjustment = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), GiftCardAdjustment = class extends base_1.Base {
      static getJsonBodyName() {
        return "adjustment";
      }
      static find({ session, id, gift_card_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, gift_card_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, gift_card_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "gift_card_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { gift_card_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.GiftCardAdjustment = GiftCardAdjustment;
    GiftCardAdjustment.apiVersion = types_1.ApiVersion.October23;
    GiftCardAdjustment.hasOne = {};
    GiftCardAdjustment.hasMany = {};
    GiftCardAdjustment.paths = [
      { http_method: "get", operation: "get", ids: ["gift_card_id"], path: "gift_cards/<gift_card_id>/adjustments.json" },
      { http_method: "get", operation: "get", ids: ["gift_card_id", "id"], path: "gift_cards/<gift_card_id>/adjustments/<id>.json" },
      { http_method: "post", operation: "post", ids: ["gift_card_id"], path: "gift_cards/<gift_card_id>/adjustments.json" }
    ];
    GiftCardAdjustment.resourceNames = [
      {
        singular: "gift_card_adjustment",
        plural: "gift_card_adjustments"
      }
    ];
  }
});
var require_inventory_item = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/inventory_item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InventoryItem = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), InventoryItem = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, ids = null, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ ids, limit }, otherArgs)
          });
        });
      }
    };
    exports.InventoryItem = InventoryItem;
    InventoryItem.apiVersion = types_1.ApiVersion.October23;
    InventoryItem.hasOne = {};
    InventoryItem.hasMany = {};
    InventoryItem.paths = [
      { http_method: "get", operation: "get", ids: [], path: "inventory_items.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "inventory_items/<id>.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "inventory_items/<id>.json" }
    ];
    InventoryItem.resourceNames = [
      {
        singular: "inventory_item",
        plural: "inventory_items"
      }
    ];
  }
});
var require_inventory_level = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/inventory_level.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InventoryLevel = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), InventoryLevel = class extends base_1.Base {
      static delete({ session, inventory_item_id = null, location_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: {},
            params: { inventory_item_id, location_id }
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, inventory_item_ids = null, location_ids = null, limit = null, updated_at_min = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "inventory_item_ids", "location_ids", "limit", "updated_at_min"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ inventory_item_ids, location_ids, limit, updated_at_min }, otherArgs)
          });
        });
      }
      adjust(_a) {
        var { inventory_item_id = null, location_id = null, available_adjustment = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["inventory_item_id", "location_id", "available_adjustment", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "adjust",
            session: this.session,
            urlIds: {},
            params: Object.assign({ inventory_item_id, location_id, available_adjustment }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      connect(_a) {
        var { inventory_item_id = null, location_id = null, relocate_if_necessary = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["inventory_item_id", "location_id", "relocate_if_necessary", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "connect",
            session: this.session,
            urlIds: {},
            params: Object.assign({ inventory_item_id, location_id, relocate_if_necessary }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      set(_a) {
        var { inventory_item_id = null, location_id = null, available = null, disconnect_if_necessary = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["inventory_item_id", "location_id", "available", "disconnect_if_necessary", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "set",
            session: this.session,
            urlIds: {},
            params: Object.assign({ inventory_item_id, location_id, available, disconnect_if_necessary }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.InventoryLevel = InventoryLevel;
    InventoryLevel.apiVersion = types_1.ApiVersion.October23;
    InventoryLevel.hasOne = {};
    InventoryLevel.hasMany = {};
    InventoryLevel.paths = [
      { http_method: "delete", operation: "delete", ids: [], path: "inventory_levels.json" },
      { http_method: "get", operation: "get", ids: [], path: "inventory_levels.json" },
      { http_method: "post", operation: "adjust", ids: [], path: "inventory_levels/adjust.json" },
      { http_method: "post", operation: "connect", ids: [], path: "inventory_levels/connect.json" },
      { http_method: "post", operation: "set", ids: [], path: "inventory_levels/set.json" }
    ];
    InventoryLevel.resourceNames = [
      {
        singular: "inventory_level",
        plural: "inventory_levels"
      }
    ];
  }
});
var require_location = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/location.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Location = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Location = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static inventory_levels(_a) {
        var { session, id } = _a, otherArgs = tslib_1.__rest(_a, ["session", "id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "inventory_levels",
            session,
            urlIds: { id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Location = Location;
    Location.apiVersion = types_1.ApiVersion.October23;
    Location.hasOne = {};
    Location.hasMany = {};
    Location.paths = [
      { http_method: "get", operation: "count", ids: [], path: "locations/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "locations.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "locations/<id>.json" },
      { http_method: "get", operation: "inventory_levels", ids: ["id"], path: "locations/<id>/inventory_levels.json" }
    ];
    Location.resourceNames = [
      {
        singular: "location",
        plural: "locations"
      }
    ];
  }
});
var require_locations_for_move = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/locations_for_move.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LocationsForMove = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), LocationsForMove = class extends base_1.Base {
      static all(_a) {
        var { session, fulfillment_order_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fulfillment_order_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { fulfillment_order_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.LocationsForMove = LocationsForMove;
    LocationsForMove.apiVersion = types_1.ApiVersion.October23;
    LocationsForMove.hasOne = {};
    LocationsForMove.hasMany = {};
    LocationsForMove.paths = [
      { http_method: "get", operation: "get", ids: ["fulfillment_order_id"], path: "fulfillment_orders/<fulfillment_order_id>/locations_for_move.json" }
    ];
    LocationsForMove.resourceNames = [
      {
        singular: "locations_for_move",
        plural: "locations_for_moves"
      }
    ];
  }
});
var require_marketing_event = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/marketing_event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MarketingEvent = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), MarketingEvent = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, offset = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "offset"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, offset }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      engagements(_a) {
        var { occurred_on = null, impressions_count = null, views_count = null, clicks_count = null, shares_count = null, favorites_count = null, comments_count = null, ad_spend = null, is_cumulative = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["occurred_on", "impressions_count", "views_count", "clicks_count", "shares_count", "favorites_count", "comments_count", "ad_spend", "is_cumulative", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "post",
            operation: "engagements",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({ occurred_on, impressions_count, views_count, clicks_count, shares_count, favorites_count, comments_count, ad_spend, is_cumulative }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.MarketingEvent = MarketingEvent;
    MarketingEvent.apiVersion = types_1.ApiVersion.October23;
    MarketingEvent.hasOne = {};
    MarketingEvent.hasMany = {};
    MarketingEvent.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "marketing_events/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "marketing_events/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "marketing_events.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "marketing_events/<id>.json" },
      { http_method: "post", operation: "engagements", ids: ["id"], path: "marketing_events/<id>/engagements.json" },
      { http_method: "post", operation: "post", ids: [], path: "marketing_events.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "marketing_events/<id>.json" }
    ];
    MarketingEvent.resourceNames = [
      {
        singular: "marketing_event",
        plural: "marketing_events"
      }
    ];
  }
});
var require_mobile_platform_application = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/mobile_platform_application.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MobilePlatformApplication = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), MobilePlatformApplication = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.MobilePlatformApplication = MobilePlatformApplication;
    MobilePlatformApplication.apiVersion = types_1.ApiVersion.October23;
    MobilePlatformApplication.hasOne = {};
    MobilePlatformApplication.hasMany = {};
    MobilePlatformApplication.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "mobile_platform_applications/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "mobile_platform_applications.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "mobile_platform_applications/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "mobile_platform_applications.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "mobile_platform_applications/<id>.json" }
    ];
    MobilePlatformApplication.resourceNames = [
      {
        singular: "mobile_platform_application",
        plural: "mobile_platform_applications"
      }
    ];
  }
});
var require_order_risk = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/order_risk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrderRisk = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), OrderRisk = class extends base_1.Base {
      static getJsonBodyName() {
        return "risk";
      }
      static find({ session, id, order_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, order_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, order_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, order_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, order_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { order_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.OrderRisk = OrderRisk;
    OrderRisk.apiVersion = types_1.ApiVersion.October23;
    OrderRisk.hasOne = {};
    OrderRisk.hasMany = {};
    OrderRisk.paths = [
      { http_method: "delete", operation: "delete", ids: ["order_id", "id"], path: "orders/<order_id>/risks/<id>.json" },
      { http_method: "get", operation: "get", ids: ["order_id"], path: "orders/<order_id>/risks.json" },
      { http_method: "get", operation: "get", ids: ["order_id", "id"], path: "orders/<order_id>/risks/<id>.json" },
      { http_method: "post", operation: "post", ids: ["order_id"], path: "orders/<order_id>/risks.json" },
      { http_method: "put", operation: "put", ids: ["order_id", "id"], path: "orders/<order_id>/risks/<id>.json" }
    ];
    OrderRisk.resourceNames = [
      {
        singular: "risk",
        plural: "risks"
      }
    ];
  }
});
var require_page = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/page.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Page = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), metafield_1 = require_metafield(), Page2 = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, title = null, handle = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, fields = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "title", "handle", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "fields", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, since_id, title, handle, created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, fields, published_status }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, title = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "title", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ title, created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Page = Page2;
    Page2.apiVersion = types_1.ApiVersion.October23;
    Page2.hasOne = {
      metafield: metafield_1.Metafield
    };
    Page2.hasMany = {};
    Page2.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "pages/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "pages/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "pages.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "pages/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "pages.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "pages/<id>.json" }
    ];
    Page2.resourceNames = [
      {
        singular: "page",
        plural: "pages"
      }
    ];
  }
});
var require_payment = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/payment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Payment = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), transaction_1 = require_transaction(), checkout_1 = require_checkout(), Payment = class extends base_1.Base {
      static find({ session, id, checkout_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, checkout_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, checkout_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "checkout_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { checkout_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, checkout_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "checkout_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { checkout_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Payment = Payment;
    Payment.apiVersion = types_1.ApiVersion.October23;
    Payment.hasOne = {
      transaction: transaction_1.Transaction,
      checkout: checkout_1.Checkout
    };
    Payment.hasMany = {};
    Payment.paths = [
      { http_method: "get", operation: "count", ids: ["checkout_id"], path: "checkouts/<checkout_id>/payments/count.json" },
      { http_method: "get", operation: "get", ids: ["checkout_id"], path: "checkouts/<checkout_id>/payments.json" },
      { http_method: "get", operation: "get", ids: ["checkout_id", "id"], path: "checkouts/<checkout_id>/payments/<id>.json" },
      { http_method: "post", operation: "post", ids: ["checkout_id"], path: "checkouts/<checkout_id>/payments.json" }
    ];
    Payment.resourceNames = [
      {
        singular: "payment",
        plural: "payments"
      }
    ];
  }
});
var require_payment_gateway = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/payment_gateway.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PaymentGateway = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), PaymentGateway = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.PaymentGateway = PaymentGateway;
    PaymentGateway.apiVersion = types_1.ApiVersion.October23;
    PaymentGateway.hasOne = {};
    PaymentGateway.hasMany = {};
    PaymentGateway.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "payment_gateways/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "payment_gateways.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "payment_gateways/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "payment_gateways.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "payment_gateways/<id>.json" }
    ];
    PaymentGateway.resourceNames = [
      {
        singular: "payment_gateway",
        plural: "payment_gateways"
      }
    ];
  }
});
var require_payment_transaction = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/payment_transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PaymentTransaction = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), currency_1 = require_currency(), PaymentTransaction = class extends base_1.Base {
      static transactions(_a) {
        var { session, since_id = null, last_id = null, test = null, payout_id = null, payout_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "last_id", "test", "payout_id", "payout_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "transactions",
            session,
            urlIds: {},
            params: Object.assign({ since_id, last_id, test, payout_id, payout_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.PaymentTransaction = PaymentTransaction;
    PaymentTransaction.apiVersion = types_1.ApiVersion.October23;
    PaymentTransaction.hasOne = {
      currency: currency_1.Currency
    };
    PaymentTransaction.hasMany = {};
    PaymentTransaction.paths = [
      { http_method: "get", operation: "transactions", ids: [], path: "shopify_payments/balance/transactions.json" }
    ];
    PaymentTransaction.resourceNames = [
      {
        singular: "payment_transaction",
        plural: "payment_transactions"
      }
    ];
  }
});
var require_payout = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/payout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Payout = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Payout = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, last_id = null, date_min = null, date_max = null, date = null, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "last_id", "date_min", "date_max", "date", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ since_id, last_id, date_min, date_max, date, status }, otherArgs)
          });
        });
      }
    };
    exports.Payout = Payout;
    Payout.apiVersion = types_1.ApiVersion.October23;
    Payout.hasOne = {};
    Payout.hasMany = {};
    Payout.paths = [
      { http_method: "get", operation: "get", ids: [], path: "shopify_payments/payouts.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "shopify_payments/payouts/<id>.json" }
    ];
    Payout.resourceNames = [
      {
        singular: "payout",
        plural: "payouts"
      }
    ];
  }
});
var require_policy = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/policy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Policy = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Policy = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.Policy = Policy;
    Policy.apiVersion = types_1.ApiVersion.October23;
    Policy.hasOne = {};
    Policy.hasMany = {};
    Policy.paths = [
      { http_method: "get", operation: "get", ids: [], path: "policies.json" }
    ];
    Policy.resourceNames = [
      {
        singular: "policy",
        plural: "policies"
      }
    ];
  }
});
var require_price_rule = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/price_rule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PriceRule = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), PriceRule = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, starts_at_min = null, starts_at_max = null, ends_at_min = null, ends_at_max = null, times_used = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "starts_at_min", "starts_at_max", "ends_at_min", "ends_at_max", "times_used"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, since_id, created_at_min, created_at_max, updated_at_min, updated_at_max, starts_at_min, starts_at_max, ends_at_min, ends_at_max, times_used }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.PriceRule = PriceRule;
    PriceRule.apiVersion = types_1.ApiVersion.October23;
    PriceRule.hasOne = {};
    PriceRule.hasMany = {};
    PriceRule.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "price_rules/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "price_rules/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "price_rules.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "price_rules/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "price_rules.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "price_rules/<id>.json" }
    ];
    PriceRule.resourceNames = [
      {
        singular: "price_rule",
        plural: "price_rules"
      }
    ];
  }
});
var require_variant = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/variant.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variant = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Variant = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, product_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id, product_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, product_id = null, limit = null, presentment_currencies = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id", "limit", "presentment_currencies", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { product_id },
            params: Object.assign({ limit, presentment_currencies, since_id, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, product_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { product_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Variant = Variant;
    Variant.apiVersion = types_1.ApiVersion.October23;
    Variant.hasOne = {};
    Variant.hasMany = {};
    Variant.paths = [
      { http_method: "delete", operation: "delete", ids: ["product_id", "id"], path: "products/<product_id>/variants/<id>.json" },
      { http_method: "get", operation: "count", ids: ["product_id"], path: "products/<product_id>/variants/count.json" },
      { http_method: "get", operation: "get", ids: ["product_id"], path: "products/<product_id>/variants.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "variants/<id>.json" },
      { http_method: "post", operation: "post", ids: ["product_id"], path: "products/<product_id>/variants.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "variants/<id>.json" }
    ];
    Variant.readOnlyAttributes = [
      "inventory_quantity"
    ];
    Variant.resourceNames = [
      {
        singular: "variant",
        plural: "variants"
      }
    ];
  }
});
var require_product = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/product.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Product = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), image_1 = require_image(), variant_1 = require_variant(), Product = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, ids = null, limit = null, since_id = null, title = null, vendor = null, handle = null, product_type = null, status = null, collection_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null, presentment_currencies = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "limit", "since_id", "title", "vendor", "handle", "product_type", "status", "collection_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "fields", "presentment_currencies"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ ids, limit, since_id, title, vendor, handle, product_type, status, collection_id, created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status, fields, presentment_currencies }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, vendor = null, product_type = null, collection_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "vendor", "product_type", "collection_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ vendor, product_type, collection_id, created_at_min, created_at_max, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Product = Product;
    Product.apiVersion = types_1.ApiVersion.October23;
    Product.hasOne = {};
    Product.hasMany = {
      images: image_1.Image,
      variants: variant_1.Variant
    };
    Product.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "products/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "products/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "products.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "products/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "products.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "products/<id>.json" }
    ];
    Product.resourceNames = [
      {
        singular: "product",
        plural: "products"
      }
    ];
  }
});
var require_product_listing = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/product_listing.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProductListing = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), image_1 = require_image(), variant_1 = require_variant(), ProductListing = class extends base_1.Base {
      static find({ session, product_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { product_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, product_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { product_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, product_ids = null, limit = null, collection_id = null, updated_at_min = null, handle = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_ids", "limit", "collection_id", "updated_at_min", "handle"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ product_ids, limit, collection_id, updated_at_min, handle }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static product_ids(_a) {
        var { session, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "product_ids",
            session,
            urlIds: {},
            params: Object.assign({ limit }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.ProductListing = ProductListing;
    ProductListing.apiVersion = types_1.ApiVersion.October23;
    ProductListing.hasOne = {};
    ProductListing.hasMany = {
      images: image_1.Image,
      variants: variant_1.Variant
    };
    ProductListing.paths = [
      { http_method: "delete", operation: "delete", ids: ["product_id"], path: "product_listings/<product_id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "product_listings/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "product_listings.json" },
      { http_method: "get", operation: "get", ids: ["product_id"], path: "product_listings/<product_id>.json" },
      { http_method: "get", operation: "product_ids", ids: [], path: "product_listings/product_ids.json" },
      { http_method: "put", operation: "put", ids: ["product_id"], path: "product_listings/<product_id>.json" }
    ];
    ProductListing.primaryKey = "product_id";
    ProductListing.resourceNames = [
      {
        singular: "product_listing",
        plural: "product_listings"
      }
    ];
  }
});
var require_product_resource_feedback = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/product_resource_feedback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProductResourceFeedback = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), ProductResourceFeedback = class extends base_1.Base {
      static getJsonBodyName() {
        return "resource_feedback";
      }
      static all(_a) {
        var { session, product_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { product_id },
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.ProductResourceFeedback = ProductResourceFeedback;
    ProductResourceFeedback.apiVersion = types_1.ApiVersion.October23;
    ProductResourceFeedback.hasOne = {};
    ProductResourceFeedback.hasMany = {};
    ProductResourceFeedback.paths = [
      { http_method: "get", operation: "get", ids: ["product_id"], path: "products/<product_id>/resource_feedback.json" },
      { http_method: "post", operation: "post", ids: ["product_id"], path: "products/<product_id>/resource_feedback.json" }
    ];
    ProductResourceFeedback.resourceNames = [
      {
        singular: "product_resource_feedback",
        plural: "product_resource_feedbacks"
      }
    ];
  }
});
var require_recurring_application_charge = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/recurring_application_charge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RecurringApplicationCharge = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), currency_1 = require_currency(), RecurringApplicationCharge = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ since_id, fields }, otherArgs)
          });
        });
      }
      customize(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "put",
            operation: "customize",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.RecurringApplicationCharge = RecurringApplicationCharge;
    RecurringApplicationCharge.apiVersion = types_1.ApiVersion.October23;
    RecurringApplicationCharge.hasOne = {
      currency: currency_1.Currency
    };
    RecurringApplicationCharge.hasMany = {};
    RecurringApplicationCharge.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "recurring_application_charges/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "recurring_application_charges.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "recurring_application_charges/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "recurring_application_charges.json" },
      { http_method: "put", operation: "customize", ids: ["id"], path: "recurring_application_charges/<id>/customize.json" }
    ];
    RecurringApplicationCharge.resourceNames = [
      {
        singular: "recurring_application_charge",
        plural: "recurring_application_charges"
      }
    ];
  }
});
var require_redirect = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/redirect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Redirect = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Redirect = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, path = null, target = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "path", "target", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, since_id, path, target, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, path = null, target = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "path", "target"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ path, target }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Redirect = Redirect;
    Redirect.apiVersion = types_1.ApiVersion.October23;
    Redirect.hasOne = {};
    Redirect.hasMany = {};
    Redirect.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "redirects/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "redirects/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "redirects.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "redirects/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "redirects.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "redirects/<id>.json" }
    ];
    Redirect.resourceNames = [
      {
        singular: "redirect",
        plural: "redirects"
      }
    ];
  }
});
var require_report = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/report.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Report = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Report = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, ids = null, limit = null, since_id = null, updated_at_min = null, updated_at_max = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "limit", "since_id", "updated_at_min", "updated_at_max", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ ids, limit, since_id, updated_at_min, updated_at_max, fields }, otherArgs)
          });
        });
      }
    };
    exports.Report = Report;
    Report.apiVersion = types_1.ApiVersion.October23;
    Report.hasOne = {};
    Report.hasMany = {};
    Report.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "reports/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "reports.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "reports/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "reports.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "reports/<id>.json" }
    ];
    Report.resourceNames = [
      {
        singular: "report",
        plural: "reports"
      }
    ];
  }
});
var require_resource_feedback = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/resource_feedback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResourceFeedback = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), ResourceFeedback = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.ResourceFeedback = ResourceFeedback;
    ResourceFeedback.apiVersion = types_1.ApiVersion.October23;
    ResourceFeedback.hasOne = {};
    ResourceFeedback.hasMany = {};
    ResourceFeedback.paths = [
      { http_method: "get", operation: "get", ids: [], path: "resource_feedback.json" },
      { http_method: "post", operation: "post", ids: [], path: "resource_feedback.json" }
    ];
    ResourceFeedback.resourceNames = [
      {
        singular: "resource_feedback",
        plural: "resource_feedbacks"
      }
    ];
  }
});
var require_script_tag = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/script_tag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScriptTag = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), ScriptTag = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, src = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "src", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, since_id, created_at_min, created_at_max, updated_at_min, updated_at_max, src, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, src = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "src"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ src }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.ScriptTag = ScriptTag;
    ScriptTag.apiVersion = types_1.ApiVersion.October23;
    ScriptTag.hasOne = {};
    ScriptTag.hasMany = {};
    ScriptTag.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "script_tags/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "script_tags/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "script_tags.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "script_tags/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "script_tags.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "script_tags/<id>.json" }
    ];
    ScriptTag.resourceNames = [
      {
        singular: "script_tag",
        plural: "script_tags"
      }
    ];
  }
});
var require_shipping_zone = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/shipping_zone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ShippingZone = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), country_1 = require_country(), province_1 = require_province(), ShippingZone = class extends base_1.Base {
      static all(_a) {
        var { session, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ fields }, otherArgs)
          });
        });
      }
    };
    exports.ShippingZone = ShippingZone;
    ShippingZone.apiVersion = types_1.ApiVersion.October23;
    ShippingZone.hasOne = {};
    ShippingZone.hasMany = {
      countries: country_1.Country,
      provinces: province_1.Province
    };
    ShippingZone.paths = [
      { http_method: "get", operation: "get", ids: [], path: "shipping_zones.json" }
    ];
    ShippingZone.resourceNames = [
      {
        singular: "shipping_zone",
        plural: "shipping_zones"
      }
    ];
  }
});
var require_shop = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/shop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Shop = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Shop = class extends base_1.Base {
      static all(_a) {
        var { session, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ fields }, otherArgs)
          });
        });
      }
    };
    exports.Shop = Shop;
    Shop.apiVersion = types_1.ApiVersion.October23;
    Shop.hasOne = {};
    Shop.hasMany = {};
    Shop.paths = [
      { http_method: "get", operation: "get", ids: [], path: "shop.json" }
    ];
    Shop.resourceNames = [
      {
        singular: "shop",
        plural: "shops"
      }
    ];
  }
});
var require_smart_collection = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/smart_collection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SmartCollection = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), SmartCollection = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, ids = null, since_id = null, title = null, product_id = null, handle = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "ids", "since_id", "title", "product_id", "handle", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, ids, since_id, title, product_id, handle, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status, fields }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, title = null, product_id = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "title", "product_id", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ title, product_id, updated_at_min, updated_at_max, published_at_min, published_at_max, published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      order(_a) {
        var { products = null, sort_order = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["products", "sort_order", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "put",
            operation: "order",
            session: this.session,
            urlIds: { id: this.id },
            params: Object.assign({ products, sort_order }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.SmartCollection = SmartCollection;
    SmartCollection.apiVersion = types_1.ApiVersion.October23;
    SmartCollection.hasOne = {};
    SmartCollection.hasMany = {};
    SmartCollection.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "smart_collections/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "smart_collections/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "smart_collections.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "smart_collections/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "smart_collections.json" },
      { http_method: "put", operation: "order", ids: ["id"], path: "smart_collections/<id>/order.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "smart_collections/<id>.json" }
    ];
    SmartCollection.resourceNames = [
      {
        singular: "smart_collection",
        plural: "smart_collections"
      }
    ];
  }
});
var require_storefront_access_token = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/storefront_access_token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StorefrontAccessToken = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), StorefrontAccessToken = class extends base_1.Base {
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
        });
      }
    };
    exports.StorefrontAccessToken = StorefrontAccessToken;
    StorefrontAccessToken.apiVersion = types_1.ApiVersion.October23;
    StorefrontAccessToken.hasOne = {};
    StorefrontAccessToken.hasMany = {};
    StorefrontAccessToken.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "storefront_access_tokens/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "storefront_access_tokens.json" },
      { http_method: "post", operation: "post", ids: [], path: "storefront_access_tokens.json" }
    ];
    StorefrontAccessToken.resourceNames = [
      {
        singular: "storefront_access_token",
        plural: "storefront_access_tokens"
      }
    ];
  }
});
var require_tender_transaction = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/tender_transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TenderTransaction = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), TenderTransaction = class extends base_1.Base {
      static all(_a) {
        var { session, limit = null, since_id = null, processed_at_min = null, processed_at_max = null, processed_at = null, order = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "processed_at_min", "processed_at_max", "processed_at", "order"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, since_id, processed_at_min, processed_at_max, processed_at, order }, otherArgs)
          });
        });
      }
    };
    exports.TenderTransaction = TenderTransaction;
    TenderTransaction.apiVersion = types_1.ApiVersion.October23;
    TenderTransaction.hasOne = {};
    TenderTransaction.hasMany = {};
    TenderTransaction.paths = [
      { http_method: "get", operation: "get", ids: [], path: "tender_transactions.json" }
    ];
    TenderTransaction.resourceNames = [
      {
        singular: "tender_transaction",
        plural: "tender_transactions"
      }
    ];
  }
});
var require_theme = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/theme.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Theme = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Theme = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ fields }, otherArgs)
          });
        });
      }
    };
    exports.Theme = Theme;
    Theme.apiVersion = types_1.ApiVersion.October23;
    Theme.hasOne = {};
    Theme.hasMany = {};
    Theme.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "themes/<id>.json" },
      { http_method: "get", operation: "get", ids: [], path: "themes.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "themes/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "themes.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "themes/<id>.json" }
    ];
    Theme.resourceNames = [
      {
        singular: "theme",
        plural: "themes"
      }
    ];
  }
});
var require_usage_charge = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/usage_charge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsageCharge = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), currency_1 = require_currency(), UsageCharge = class extends base_1.Base {
      static find({ session, id, recurring_application_charge_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id, recurring_application_charge_id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, recurring_application_charge_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "recurring_application_charge_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: { recurring_application_charge_id },
            params: Object.assign({ fields }, otherArgs)
          });
        });
      }
    };
    exports.UsageCharge = UsageCharge;
    UsageCharge.apiVersion = types_1.ApiVersion.October23;
    UsageCharge.hasOne = {
      currency: currency_1.Currency
    };
    UsageCharge.hasMany = {};
    UsageCharge.paths = [
      { http_method: "get", operation: "get", ids: ["recurring_application_charge_id"], path: "recurring_application_charges/<recurring_application_charge_id>/usage_charges.json" },
      { http_method: "get", operation: "get", ids: ["recurring_application_charge_id", "id"], path: "recurring_application_charges/<recurring_application_charge_id>/usage_charges/<id>.json" },
      { http_method: "post", operation: "post", ids: ["recurring_application_charge_id"], path: "recurring_application_charges/<recurring_application_charge_id>/usage_charges.json" }
    ];
    UsageCharge.resourceNames = [
      {
        singular: "usage_charge",
        plural: "usage_charges"
      }
    ];
  }
});
var require_user = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/user.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.User = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), User = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, limit = null, page_info = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "page_info"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ limit, page_info }, otherArgs)
          });
        });
      }
      static current(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "current",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.User = User;
    User.apiVersion = types_1.ApiVersion.October23;
    User.hasOne = {};
    User.hasMany = {};
    User.paths = [
      { http_method: "get", operation: "current", ids: [], path: "users/current.json" },
      { http_method: "get", operation: "get", ids: [], path: "users.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "users/<id>.json" }
    ];
    User.resourceNames = [
      {
        singular: "user",
        plural: "users"
      }
    ];
  }
});
var require_webhook = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/webhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Webhook = void 0;
    var tslib_1 = require_tslib(), base_1 = require_base(), types_1 = require_types2(), Webhook = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let result = yield this.baseFind({
            session,
            urlIds: { id },
            params: { fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, address = null, created_at_max = null, created_at_min = null, fields = null, limit = null, since_id = null, topic = null, updated_at_min = null, updated_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "address", "created_at_max", "created_at_min", "fields", "limit", "since_id", "topic", "updated_at_min", "updated_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ address, created_at_max, created_at_min, fields, limit, since_id, topic, updated_at_min, updated_at_max }, otherArgs)
          });
        });
      }
      static count(_a) {
        var { session, address = null, topic = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "address", "topic"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ address, topic }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Webhook = Webhook;
    Webhook.apiVersion = types_1.ApiVersion.October23;
    Webhook.hasOne = {};
    Webhook.hasMany = {};
    Webhook.paths = [
      { http_method: "delete", operation: "delete", ids: ["id"], path: "webhooks/<id>.json" },
      { http_method: "get", operation: "count", ids: [], path: "webhooks/count.json" },
      { http_method: "get", operation: "get", ids: [], path: "webhooks.json" },
      { http_method: "get", operation: "get", ids: ["id"], path: "webhooks/<id>.json" },
      { http_method: "post", operation: "post", ids: [], path: "webhooks.json" },
      { http_method: "put", operation: "put", ids: ["id"], path: "webhooks/<id>.json" }
    ];
    Webhook.resourceNames = [
      {
        singular: "webhook",
        plural: "webhooks"
      }
    ];
  }
});
var require__ = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2023-10/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.restResources = void 0;
    var abandoned_checkout_1 = require_abandoned_checkout(), access_scope_1 = require_access_scope(), apple_pay_certificate_1 = require_apple_pay_certificate(), application_charge_1 = require_application_charge(), application_credit_1 = require_application_credit(), article_1 = require_article(), asset_1 = require_asset(), assigned_fulfillment_order_1 = require_assigned_fulfillment_order(), balance_1 = require_balance(), blog_1 = require_blog(), cancellation_request_1 = require_cancellation_request(), carrier_service_1 = require_carrier_service(), checkout_1 = require_checkout(), collect_1 = require_collect(), collection_1 = require_collection(), collection_listing_1 = require_collection_listing(), comment_1 = require_comment(), country_1 = require_country(), currency_1 = require_currency(), custom_collection_1 = require_custom_collection(), customer_1 = require_customer(), customer_address_1 = require_customer_address(), deprecated_api_call_1 = require_deprecated_api_call(), discount_code_1 = require_discount_code(), dispute_1 = require_dispute(), dispute_evidence_1 = require_dispute_evidence(), dispute_file_upload_1 = require_dispute_file_upload(), draft_order_1 = require_draft_order(), event_1 = require_event(), fulfillment_1 = require_fulfillment(), fulfillment_event_1 = require_fulfillment_event(), fulfillment_order_1 = require_fulfillment_order(), fulfillment_request_1 = require_fulfillment_request(), fulfillment_service_1 = require_fulfillment_service(), gift_card_1 = require_gift_card(), gift_card_adjustment_1 = require_gift_card_adjustment(), image_1 = require_image(), inventory_item_1 = require_inventory_item(), inventory_level_1 = require_inventory_level(), location_1 = require_location(), locations_for_move_1 = require_locations_for_move(), marketing_event_1 = require_marketing_event(), metafield_1 = require_metafield(), mobile_platform_application_1 = require_mobile_platform_application(), order_1 = require_order(), order_risk_1 = require_order_risk(), page_1 = require_page(), payment_1 = require_payment(), payment_gateway_1 = require_payment_gateway(), payment_transaction_1 = require_payment_transaction(), payout_1 = require_payout(), policy_1 = require_policy(), price_rule_1 = require_price_rule(), product_1 = require_product(), product_listing_1 = require_product_listing(), product_resource_feedback_1 = require_product_resource_feedback(), province_1 = require_province(), recurring_application_charge_1 = require_recurring_application_charge(), redirect_1 = require_redirect(), refund_1 = require_refund(), report_1 = require_report(), resource_feedback_1 = require_resource_feedback(), script_tag_1 = require_script_tag(), shipping_zone_1 = require_shipping_zone(), shop_1 = require_shop(), smart_collection_1 = require_smart_collection(), storefront_access_token_1 = require_storefront_access_token(), tender_transaction_1 = require_tender_transaction(), theme_1 = require_theme(), transaction_1 = require_transaction(), usage_charge_1 = require_usage_charge(), user_1 = require_user(), variant_1 = require_variant(), webhook_1 = require_webhook();
    exports.restResources = {
      AbandonedCheckout: abandoned_checkout_1.AbandonedCheckout,
      AccessScope: access_scope_1.AccessScope,
      ApplePayCertificate: apple_pay_certificate_1.ApplePayCertificate,
      ApplicationCharge: application_charge_1.ApplicationCharge,
      ApplicationCredit: application_credit_1.ApplicationCredit,
      Article: article_1.Article,
      Asset: asset_1.Asset,
      AssignedFulfillmentOrder: assigned_fulfillment_order_1.AssignedFulfillmentOrder,
      Balance: balance_1.Balance,
      Blog: blog_1.Blog,
      CancellationRequest: cancellation_request_1.CancellationRequest,
      CarrierService: carrier_service_1.CarrierService,
      Checkout: checkout_1.Checkout,
      Collect: collect_1.Collect,
      Collection: collection_1.Collection,
      CollectionListing: collection_listing_1.CollectionListing,
      Comment: comment_1.Comment,
      Country: country_1.Country,
      Currency: currency_1.Currency,
      CustomCollection: custom_collection_1.CustomCollection,
      Customer: customer_1.Customer,
      CustomerAddress: customer_address_1.CustomerAddress,
      DeprecatedApiCall: deprecated_api_call_1.DeprecatedApiCall,
      DiscountCode: discount_code_1.DiscountCode,
      Dispute: dispute_1.Dispute,
      DisputeEvidence: dispute_evidence_1.DisputeEvidence,
      DisputeFileUpload: dispute_file_upload_1.DisputeFileUpload,
      DraftOrder: draft_order_1.DraftOrder,
      Event: event_1.Event,
      Fulfillment: fulfillment_1.Fulfillment,
      FulfillmentEvent: fulfillment_event_1.FulfillmentEvent,
      FulfillmentOrder: fulfillment_order_1.FulfillmentOrder,
      FulfillmentRequest: fulfillment_request_1.FulfillmentRequest,
      FulfillmentService: fulfillment_service_1.FulfillmentService,
      GiftCard: gift_card_1.GiftCard,
      GiftCardAdjustment: gift_card_adjustment_1.GiftCardAdjustment,
      Image: image_1.Image,
      InventoryItem: inventory_item_1.InventoryItem,
      InventoryLevel: inventory_level_1.InventoryLevel,
      Location: location_1.Location,
      LocationsForMove: locations_for_move_1.LocationsForMove,
      MarketingEvent: marketing_event_1.MarketingEvent,
      Metafield: metafield_1.Metafield,
      MobilePlatformApplication: mobile_platform_application_1.MobilePlatformApplication,
      Order: order_1.Order,
      OrderRisk: order_risk_1.OrderRisk,
      Page: page_1.Page,
      Payment: payment_1.Payment,
      PaymentGateway: payment_gateway_1.PaymentGateway,
      PaymentTransaction: payment_transaction_1.PaymentTransaction,
      Payout: payout_1.Payout,
      Policy: policy_1.Policy,
      PriceRule: price_rule_1.PriceRule,
      Product: product_1.Product,
      ProductListing: product_listing_1.ProductListing,
      ProductResourceFeedback: product_resource_feedback_1.ProductResourceFeedback,
      Province: province_1.Province,
      RecurringApplicationCharge: recurring_application_charge_1.RecurringApplicationCharge,
      Redirect: redirect_1.Redirect,
      Refund: refund_1.Refund,
      Report: report_1.Report,
      ResourceFeedback: resource_feedback_1.ResourceFeedback,
      ScriptTag: script_tag_1.ScriptTag,
      ShippingZone: shipping_zone_1.ShippingZone,
      Shop: shop_1.Shop,
      SmartCollection: smart_collection_1.SmartCollection,
      StorefrontAccessToken: storefront_access_token_1.StorefrontAccessToken,
      TenderTransaction: tender_transaction_1.TenderTransaction,
      Theme: theme_1.Theme,
      Transaction: transaction_1.Transaction,
      UsageCharge: usage_charge_1.UsageCharge,
      User: user_1.User,
      Variant: variant_1.Variant,
      Webhook: webhook_1.Webhook
    };
  }
});
var require_crypto2 = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/crypto/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = exports.setCrypto = void 0;
    var cryptoVar;
    exports.crypto = cryptoVar;
    try {
      exports.crypto = cryptoVar = crypto;
    } catch {
    }
    function setCrypto(crypto2) {
      exports.crypto = cryptoVar = crypto2;
    }
    exports.setCrypto = setCrypto;
  }
});
var require_types3 = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/crypto/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashFormat = void 0;
    var HashFormat;
    (function(HashFormat2) {
      HashFormat2.Base64 = "base64", HashFormat2.Hex = "hex";
    })(HashFormat = exports.HashFormat || (exports.HashFormat = {}));
  }
});
var require_utils = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/crypto/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashString = exports.asBase64 = exports.asHex = exports.createSHA256HMAC = void 0;
    var tslib_1 = require_tslib(), error_1 = require_error(), crypto_1 = require_crypto2(), types_1 = require_types3();
    function createSHA256HMAC(secret, payload, returnFormat = types_1.HashFormat.Base64) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let cryptoLib = typeof (crypto_1.crypto === null || crypto_1.crypto === void 0 ? void 0 : crypto_1.crypto.webcrypto) > "u" ? crypto_1.crypto : crypto_1.crypto.webcrypto, enc = new TextEncoder(), key = yield cryptoLib.subtle.importKey("raw", enc.encode(secret), {
          name: "HMAC",
          hash: { name: "SHA-256" }
        }, false, ["sign"]), signature = yield cryptoLib.subtle.sign("HMAC", key, enc.encode(payload));
        return returnFormat === types_1.HashFormat.Base64 ? asBase64(signature) : asHex(signature);
      });
    }
    exports.createSHA256HMAC = createSHA256HMAC;
    function asHex(buffer) {
      return [...new Uint8Array(buffer)].map((byte) => byte.toString(16).padStart(2, "0")).join("");
    }
    exports.asHex = asHex;
    var LookupTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    function asBase64(buffer) {
      let output = "", input = new Uint8Array(buffer);
      for (let i = 0; i < input.length; ) {
        let byte1 = input[i++], byte2 = input[i++], byte3 = input[i++], enc1 = byte1 >> 2, enc2 = (byte1 & 3) << 4 | byte2 >> 4, enc3 = (byte2 & 15) << 2 | byte3 >> 6, enc4 = byte3 & 63;
        isNaN(byte2) && (enc3 = 64), isNaN(byte3) && (enc4 = 64), output += LookupTable[enc1] + LookupTable[enc2] + LookupTable[enc3] + LookupTable[enc4];
      }
      return output;
    }
    exports.asBase64 = asBase64;
    function hashString(str, returnFormat) {
      let buffer = new TextEncoder().encode(str);
      switch (returnFormat) {
        case types_1.HashFormat.Base64:
          return asBase64(buffer);
        case types_1.HashFormat.Hex:
          return asHex(buffer);
        default:
          throw new error_1.ShopifyError(`Unrecognized hash format '${returnFormat}'`);
      }
    }
    exports.hashString = hashString;
  }
});
var require_utils2 = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/http/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitN = void 0;
    function splitN(str, sep, maxNumParts) {
      let parts = str.split(sep), maxParts = Math.min(Math.abs(maxNumParts), parts.length);
      return [...parts.slice(0, maxParts - 1), parts.slice(maxParts - 1).join(sep)];
    }
    exports.splitN = splitN;
  }
});
var require_headers = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/http/headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flatHeaders = exports.removeHeader = exports.canonicalizeHeaders = exports.addHeader = exports.setHeader = exports.getHeader = exports.getHeaders = exports.canonicalizeHeaderName = void 0;
    function canonicalizeHeaderName(hdr) {
      return hdr.replace(/(^|-)(\w+)/g, (_fullMatch, start, letters) => start + letters.slice(0, 1).toUpperCase() + letters.slice(1).toLowerCase());
    }
    exports.canonicalizeHeaderName = canonicalizeHeaderName;
    function getHeaders(headers2, needle_) {
      let result = [];
      if (!headers2)
        return result;
      let needle = canonicalizeHeaderName(needle_);
      for (let [key, values2] of Object.entries(headers2))
        canonicalizeHeaderName(key) === needle && (Array.isArray(values2) ? result.push(...values2) : result.push(values2));
      return result;
    }
    exports.getHeaders = getHeaders;
    function getHeader(headers2, needle) {
      var _a;
      if (headers2)
        return (_a = getHeaders(headers2, needle)) === null || _a === void 0 ? void 0 : _a[0];
    }
    exports.getHeader = getHeader;
    function setHeader(headers2, key, value) {
      canonicalizeHeaders(headers2), headers2[canonicalizeHeaderName(key)] = [value];
    }
    exports.setHeader = setHeader;
    function addHeader(headers2, key, value) {
      canonicalizeHeaders(headers2);
      let canonKey = canonicalizeHeaderName(key), list2 = headers2[canonKey];
      list2 ? Array.isArray(list2) || (list2 = [list2]) : list2 = [], headers2[canonKey] = list2, list2.push(value);
    }
    exports.addHeader = addHeader;
    function canonicalizeValue(value) {
      return typeof value == "number" ? value.toString() : value;
    }
    function canonicalizeHeaders(hdr) {
      for (let [key, values2] of Object.entries(hdr)) {
        let canonKey = canonicalizeHeaderName(key);
        hdr[canonKey] || (hdr[canonKey] = []), Array.isArray(hdr[canonKey]) || (hdr[canonKey] = [canonicalizeValue(hdr[canonKey])]), key !== canonKey && (delete hdr[key], hdr[canonKey].push(...[values2].flat().map((value) => canonicalizeValue(value))));
      }
      return hdr;
    }
    exports.canonicalizeHeaders = canonicalizeHeaders;
    function removeHeader(headers2, needle) {
      canonicalizeHeaders(headers2);
      let canonKey = canonicalizeHeaderName(needle);
      delete headers2[canonKey];
    }
    exports.removeHeader = removeHeader;
    function flatHeaders(headers2) {
      return Object.entries(headers2).flatMap(([header, values2]) => Array.isArray(values2) ? values2.map((value) => [header, value]) : [[header, values2]]);
    }
    exports.flatHeaders = flatHeaders;
  }
});
var require_cookies = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/http/cookies.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Cookies = void 0;
    var tslib_1 = require_tslib(), utils_1 = require_utils(), utils_2 = require_utils2(), headers_1 = require_headers(), Cookies = class {
      static parseCookies(hdrs) {
        let entries = hdrs.filter((hdr) => hdr.trim().length > 0).map((cookieDef) => {
          let [keyval, ...opts] = cookieDef.split(";"), [name, value] = (0, utils_2.splitN)(keyval, "=", 2).map((value2) => value2.trim());
          return [
            name,
            Object.assign({
              name,
              value
            }, Object.fromEntries(opts.map((opt) => (0, utils_2.splitN)(opt, "=", 2).map((value2) => value2.trim()))))
          ];
        }), jar = Object.fromEntries(entries);
        for (let cookie of Object.values(jar))
          typeof cookie.expires == "string" && (cookie.expires = new Date(cookie.expires));
        return jar;
      }
      static encodeCookie(data) {
        let result = "";
        return result += `${data.name}=${data.value};`, result += Object.entries(data).filter(([key]) => !["name", "value", "expires"].includes(key)).map(([key, value]) => `${key}=${value}`).join("; "), data.expires && (result += ";", result += `expires=${data.expires.toUTCString()}`), result;
      }
      constructor(request, response, { keys = [] } = {}) {
        var _a, _b;
        this.response = response, this.receivedCookieJar = {}, this.outgoingCookieJar = {}, this.keys = [], keys && (this.keys = keys);
        let cookieReqHdr = (_a = (0, headers_1.getHeader)(request.headers, "Cookie")) !== null && _a !== void 0 ? _a : "";
        this.receivedCookieJar = Cookies.parseCookies(cookieReqHdr.split(";"));
        let cookieResHdr = (_b = (0, headers_1.getHeaders)(response.headers, "Set-Cookie")) !== null && _b !== void 0 ? _b : [];
        this.outgoingCookieJar = Cookies.parseCookies(cookieResHdr);
      }
      toHeaders() {
        return Object.values(this.outgoingCookieJar).map((cookie) => Cookies.encodeCookie(cookie));
      }
      updateHeader() {
        this.response.headers || (this.response.headers = {}), (0, headers_1.removeHeader)(this.response.headers, "Set-Cookie"), this.toHeaders().map((hdr) => (0, headers_1.addHeader)(this.response.headers, "Set-Cookie", hdr));
      }
      get(name) {
        var _a;
        return (_a = this.receivedCookieJar[name]) === null || _a === void 0 ? void 0 : _a.value;
      }
      deleteCookie(name) {
        this.set(name, "", {
          path: "/",
          expires: /* @__PURE__ */ new Date(0)
        });
      }
      getAndVerify(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let value = this.get(name);
          if (value && (yield this.isSignedCookieValid(name)))
            return value;
        });
      }
      get canSign() {
        var _a;
        return ((_a = this.keys) === null || _a === void 0 ? void 0 : _a.length) > 0;
      }
      set(name, value, opts = {}) {
        this.outgoingCookieJar[name] = Object.assign(Object.assign({}, opts), {
          name,
          value
        }), this.updateHeader();
      }
      setAndSign(name, value, opts = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (!this.canSign)
            throw Error("No keys provided for signing.");
          this.set(name, value, opts);
          let sigName = `${name}.sig`, signature = yield (0, utils_1.createSHA256HMAC)(this.keys[0], value);
          this.set(sigName, signature, opts), this.updateHeader();
        });
      }
      isSignedCookieValid(cookieName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let signedCookieName = `${cookieName}.sig`;
          if (!this.get(cookieName) || !this.get(signedCookieName))
            return this.deleteCookie(signedCookieName), this.deleteCookie(cookieName), false;
          let value = this.get(cookieName), signature = this.get(signedCookieName);
          return (yield Promise.all(this.keys.map((key) => (0, utils_1.createSHA256HMAC)(key, value)))).includes(signature) ? true : (this.deleteCookie(signedCookieName), this.deleteCookie(cookieName), false);
        });
      }
    };
    exports.Cookies = Cookies;
  }
});
var require_types4 = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/http/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});
var require_http = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/http/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setAbstractConvertHeadersFunc = exports.abstractConvertHeaders = exports.setAbstractConvertResponseFunc = exports.abstractConvertResponse = exports.setAbstractConvertIncomingResponseFunc = exports.abstractConvertIncomingResponse = exports.setAbstractConvertRequestFunc = exports.abstractConvertRequest = exports.setAbstractFetchFunc = exports.abstractFetch = exports.isOK = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_cookies(), exports);
    tslib_1.__exportStar(require_headers(), exports);
    tslib_1.__exportStar(require_utils2(), exports);
    tslib_1.__exportStar(require_types4(), exports);
    function isOK(resp) {
      return resp.statusCode >= 200 && resp.statusCode <= 299;
    }
    exports.isOK = isOK;
    var abstractFetch = () => {
      throw new Error("Missing adapter implementation for 'abstractFetch' - make sure to import the appropriate adapter for your platform");
    };
    exports.abstractFetch = abstractFetch;
    function setAbstractFetchFunc(func) {
      exports.abstractFetch = func;
    }
    exports.setAbstractFetchFunc = setAbstractFetchFunc;
    var abstractConvertRequest = () => {
      throw new Error("Missing adapter implementation for 'abstractConvertRequest' - make sure to import the appropriate adapter for your platform");
    };
    exports.abstractConvertRequest = abstractConvertRequest;
    function setAbstractConvertRequestFunc(func) {
      exports.abstractConvertRequest = func;
    }
    exports.setAbstractConvertRequestFunc = setAbstractConvertRequestFunc;
    var abstractConvertIncomingResponse = () => Promise.resolve({});
    exports.abstractConvertIncomingResponse = abstractConvertIncomingResponse;
    function setAbstractConvertIncomingResponseFunc(func) {
      exports.abstractConvertIncomingResponse = func;
    }
    exports.setAbstractConvertIncomingResponseFunc = setAbstractConvertIncomingResponseFunc;
    var abstractConvertResponse = () => {
      throw new Error("Missing adapter implementation for 'abstractConvertResponse' - make sure to import the appropriate adapter for your platform");
    };
    exports.abstractConvertResponse = abstractConvertResponse;
    function setAbstractConvertResponseFunc(func) {
      exports.abstractConvertResponse = func;
    }
    exports.setAbstractConvertResponseFunc = setAbstractConvertResponseFunc;
    var abstractConvertHeaders = () => {
      throw new Error("Missing adapter implementation for 'abstractConvertHeaders' - make sure to import the appropriate adapter for your platform");
    };
    exports.abstractConvertHeaders = abstractConvertHeaders;
    function setAbstractConvertHeadersFunc(func) {
      exports.abstractConvertHeaders = func;
    }
    exports.setAbstractConvertHeadersFunc = setAbstractConvertHeadersFunc;
  }
});
var require_crypto3 = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/crypto/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_types3(), exports);
    tslib_1.__exportStar(require_crypto2(), exports);
    tslib_1.__exportStar(require_utils(), exports);
  }
});
var require_types5 = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/platform/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});
var require_runtime_string = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/platform/runtime-string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setAbstractRuntimeString = exports.abstractRuntimeString = void 0;
    var abstractRuntimeString = () => {
      throw new Error("Missing adapter implementation for 'abstractRuntimeString' - make sure to import the appropriate adapter for your platform");
    };
    exports.abstractRuntimeString = abstractRuntimeString;
    function setAbstractRuntimeString(func) {
      exports.abstractRuntimeString = func;
    }
    exports.setAbstractRuntimeString = setAbstractRuntimeString;
  }
});
var require_platform = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/platform/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_types5(), exports);
    tslib_1.__exportStar(require_runtime_string(), exports);
  }
});
var require_runtime = __commonJS({
  "node_modules/@shopify/shopify-api/runtime/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_http(), exports);
    tslib_1.__exportStar(require_crypto3(), exports);
    tslib_1.__exportStar(require_platform(), exports);
  }
});
var require_adapter = __commonJS({
  "node_modules/@shopify/shopify-api/adapters/web-api/adapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.webApiRuntimeString = exports.webApiFetch = exports.webApiConvertResponse = exports.webApiConvertHeaders = exports.webApiConvertRequest = void 0;
    var tslib_1 = require_tslib(), runtime_1 = require_runtime();
    function webApiConvertRequest(adapterArgs) {
      var _a;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let request = adapterArgs.rawRequest, headers2 = {};
        for (let [key, value] of request.headers.entries())
          (0, runtime_1.addHeader)(headers2, key, value);
        return {
          headers: headers2,
          method: (_a = request.method) !== null && _a !== void 0 ? _a : "GET",
          url: new URL(request.url).toString()
        };
      });
    }
    exports.webApiConvertRequest = webApiConvertRequest;
    function webApiConvertHeaders(headers2, _adapterArgs) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let remixHeaders = new Headers();
        return (0, runtime_1.flatHeaders)(headers2 ?? {}).forEach(([key, value]) => remixHeaders.append(key, value)), Promise.resolve(remixHeaders);
      });
    }
    exports.webApiConvertHeaders = webApiConvertHeaders;
    function webApiConvertResponse(resp, adapterArgs) {
      var _a;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Response(resp.body, {
          status: resp.statusCode,
          statusText: resp.statusText,
          headers: yield webApiConvertHeaders((_a = resp.headers) !== null && _a !== void 0 ? _a : {}, adapterArgs)
        });
      });
    }
    exports.webApiConvertResponse = webApiConvertResponse;
    function webApiFetch({ headers: headers2, method, url, body }) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let resp = yield fetch(url, {
          method,
          headers: (0, runtime_1.flatHeaders)(headers2),
          body
        }), respBody = yield resp.text();
        return {
          statusCode: resp.status,
          statusText: resp.statusText,
          body: respBody,
          headers: (0, runtime_1.canonicalizeHeaders)(Object.fromEntries(resp.headers.entries()))
        };
      });
    }
    exports.webApiFetch = webApiFetch;
    function webApiRuntimeString() {
      return "Web API";
    }
    exports.webApiRuntimeString = webApiRuntimeString;
  }
});
var require_web_api = __commonJS({
  "node_modules/@shopify/shopify-api/adapters/web-api/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var runtime_1 = require_runtime(), adapter_1 = require_adapter();
    (0, runtime_1.setAbstractFetchFunc)(adapter_1.webApiFetch);
    (0, runtime_1.setAbstractConvertRequestFunc)(adapter_1.webApiConvertRequest);
    (0, runtime_1.setAbstractConvertResponseFunc)(adapter_1.webApiConvertResponse);
    (0, runtime_1.setAbstractConvertHeadersFunc)(adapter_1.webApiConvertHeaders);
    (0, runtime_1.setAbstractRuntimeString)(adapter_1.webApiRuntimeString);
  }
});
var esm_exports3 = {};
__export(esm_exports3, {
  compare: () => compare,
  compareVersions: () => compareVersions,
  satisfies: () => satisfies,
  validate: () => validate
});
var compareVersions;
var validate;
var compare;
var satisfies;
var semver;
var validateAndParse;
var isWildcard;
var tryParse;
var forceType;
var compareStrings;
var compareSegments;
var operatorResMap;
var allowedOperators;
var assertValidOperator;
var init_esm3 = __esm({
  "node_modules/compare-versions/lib/esm/index.js"() {
    compareVersions = (v1, v2) => {
      let n1 = validateAndParse(v1), n2 = validateAndParse(v2), p1 = n1.pop(), p2 = n2.pop(), r = compareSegments(n1, n2);
      return r !== 0 ? r : p1 && p2 ? compareSegments(p1.split("."), p2.split(".")) : p1 || p2 ? p1 ? -1 : 1 : 0;
    }, validate = (version) => typeof version == "string" && /^[v\d]/.test(version) && semver.test(version), compare = (v1, v2, operator) => {
      assertValidOperator(operator);
      let res = compareVersions(v1, v2);
      return operatorResMap[operator].includes(res);
    }, satisfies = (version, range) => {
      let m = range.match(/^([<>=~^]+)/), op = m ? m[1] : "=";
      if (op !== "^" && op !== "~")
        return compare(version, range, op);
      let [v1, v2, v3, , vp] = validateAndParse(version), [r1, r2, r3, , rp] = validateAndParse(range), v = [v1, v2, v3], r = [r1, r2 ?? "x", r3 ?? "x"];
      if (rp && (!vp || compareSegments(v, r) !== 0 || compareSegments(vp.split("."), rp.split(".")) === -1))
        return false;
      let nonZero = r.findIndex((v4) => v4 !== "0") + 1, i = op === "~" ? 2 : nonZero > 1 ? nonZero : 1;
      return !(compareSegments(v.slice(0, i), r.slice(0, i)) !== 0 || compareSegments(v.slice(i), r.slice(i)) === -1);
    }, semver = /^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i, validateAndParse = (version) => {
      if (typeof version != "string")
        throw new TypeError("Invalid argument expected string");
      let match2 = version.match(semver);
      if (!match2)
        throw new Error(`Invalid argument not valid semver ('${version}' received)`);
      return match2.shift(), match2;
    }, isWildcard = (s) => s === "*" || s === "x" || s === "X", tryParse = (v) => {
      let n = parseInt(v, 10);
      return isNaN(n) ? v : n;
    }, forceType = (a, b) => typeof a != typeof b ? [String(a), String(b)] : [a, b], compareStrings = (a, b) => {
      if (isWildcard(a) || isWildcard(b))
        return 0;
      let [ap, bp] = forceType(tryParse(a), tryParse(b));
      return ap > bp ? 1 : ap < bp ? -1 : 0;
    }, compareSegments = (a, b) => {
      for (let i = 0; i < Math.max(a.length, b.length); i++) {
        let r = compareStrings(a[i] || "0", b[i] || "0");
        if (r !== 0)
          return r;
      }
      return 0;
    }, operatorResMap = {
      ">": [1],
      ">=": [0, 1],
      "=": [0],
      "<=": [-1, 0],
      "<": [-1]
    }, allowedOperators = Object.keys(operatorResMap), assertValidOperator = (op) => {
      if (typeof op != "string")
        throw new TypeError(`Invalid operator type, expected string but got ${typeof op}`);
      if (allowedOperators.indexOf(op) === -1)
        throw new Error(`Invalid operator, expected one of ${allowedOperators.join("|")}`);
    };
  }
});
var require_version = __commonJS({
  "node_modules/@shopify/shopify-api/lib/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SHOPIFY_API_LIBRARY_VERSION = void 0;
    exports.SHOPIFY_API_LIBRARY_VERSION = "8.1.1";
  }
});
var require_log = __commonJS({
  "node_modules/@shopify/shopify-api/lib/logger/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.log = void 0;
    var types_1 = require_types2();
    function log(config) {
      return function(severity, message2, context = {}) {
        if (severity > config.logger.level)
          return;
        let prefix = [];
        config.logger.timestamps && prefix.push(`${(/* @__PURE__ */ new Date()).toISOString().slice(0, -5)}Z`);
        let packageString = context.package || "shopify-api";
        switch (delete context.package, severity) {
          case types_1.LogSeverity.Debug:
            packageString = `${packageString}/DEBUG`;
            break;
          case types_1.LogSeverity.Info:
            packageString = `${packageString}/INFO`;
            break;
          case types_1.LogSeverity.Warning:
            packageString = `${packageString}/WARNING`;
            break;
          case types_1.LogSeverity.Error:
            packageString = `${packageString}/ERROR`;
            break;
        }
        prefix.push(packageString);
        let contextParts = [];
        Object.entries(context).forEach(([key, value]) => {
          contextParts.push(`${key}: ${value}`);
        });
        let suffix = "";
        contextParts.length > 0 && (suffix = ` | {${contextParts.join(", ")}}`), config.logger.log(severity, `[${prefix.join("] [")}] ${message2}${suffix}`);
      };
    }
    exports.log = log;
  }
});
var require_logger = __commonJS({
  "node_modules/@shopify/shopify-api/lib/logger/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logger = void 0;
    var tslib_1 = require_tslib(), compare_versions_1 = (init_esm3(), __toCommonJS(esm_exports3)), types_1 = require_types2(), error_1 = require_error(), version_1 = require_version(), log_1 = require_log();
    function logger(config) {
      let logFunction = (0, log_1.log)(config);
      return {
        log: logFunction,
        debug: (message2, context = {}) => tslib_1.__awaiter(this, void 0, void 0, function* () {
          return logFunction(types_1.LogSeverity.Debug, message2, context);
        }),
        info: (message2, context = {}) => tslib_1.__awaiter(this, void 0, void 0, function* () {
          return logFunction(types_1.LogSeverity.Info, message2, context);
        }),
        warning: (message2, context = {}) => tslib_1.__awaiter(this, void 0, void 0, function* () {
          return logFunction(types_1.LogSeverity.Warning, message2, context);
        }),
        error: (message2, context = {}) => tslib_1.__awaiter(this, void 0, void 0, function* () {
          return logFunction(types_1.LogSeverity.Error, message2, context);
        }),
        deprecated: deprecated(logFunction)
      };
    }
    exports.logger = logger;
    function deprecated(logFunction) {
      return function(version, message2) {
        if ((0, compare_versions_1.compare)(version_1.SHOPIFY_API_LIBRARY_VERSION, version, ">="))
          throw new error_1.FeatureDeprecatedError(`Feature was deprecated in version ${version}`);
        return logFunction(types_1.LogSeverity.Warning, `[Deprecated | ${version}] ${message2}`);
      };
    }
  }
});
var require_load_rest_resources = __commonJS({
  "node_modules/@shopify/shopify-api/rest/load-rest-resources.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadRestResources = void 0;
    var logger_1 = require_logger();
    function loadRestResources({ resources, config, RestClient }) {
      let firstResource = Object.keys(resources)[0];
      return config.apiVersion !== resources[firstResource].apiVersion && (0, logger_1.logger)(config).warning(`Loading REST resources for API version ${resources[firstResource].apiVersion}, which doesn't match the default ${config.apiVersion}`), Object.fromEntries(Object.entries(resources).map(([name, resource]) => {
        class NewResource extends resource {
        }
        return NewResource.setClassProperties({
          Client: RestClient,
          config
        }), Object.entries(NewResource.hasOne).map(([_attribute, klass]) => {
          klass.setClassProperties({
            Client: RestClient,
            config
          });
        }), Object.entries(NewResource.hasMany).map(([_attribute, klass]) => {
          klass.setClassProperties({
            Client: RestClient,
            config
          });
        }), Reflect.defineProperty(NewResource, "name", {
          value: name
        }), [name, NewResource];
      }));
    }
    exports.loadRestResources = loadRestResources;
  }
});
var require_scopes = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/scopes/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthScopes = void 0;
    var AuthScopes = class {
      constructor(scopes) {
        let scopesArray = [];
        typeof scopes == "string" ? scopesArray = scopes.split(new RegExp(`${AuthScopes.SCOPE_DELIMITER}\\s*`)) : Array.isArray(scopes) ? scopesArray = scopes : scopes && (scopesArray = Array.from(scopes.expandedScopes)), scopesArray = scopesArray.map((scope) => scope.trim()).filter((scope) => scope.length);
        let impliedScopes = this.getImpliedScopes(scopesArray), scopeSet = new Set(scopesArray), impliedSet = new Set(impliedScopes);
        this.compressedScopes = new Set([...scopeSet].filter((x) => !impliedSet.has(x))), this.expandedScopes = /* @__PURE__ */ new Set([...scopeSet, ...impliedSet]);
      }
      has(scope) {
        let other;
        return scope instanceof AuthScopes ? other = scope : other = new AuthScopes(scope), other.toArray().filter((x) => !this.expandedScopes.has(x)).length === 0;
      }
      equals(otherScopes) {
        let other;
        return otherScopes instanceof AuthScopes ? other = otherScopes : other = new AuthScopes(otherScopes), this.compressedScopes.size === other.compressedScopes.size && this.toArray().filter((x) => !other.has(x)).length === 0;
      }
      toString() {
        return this.toArray().join(AuthScopes.SCOPE_DELIMITER);
      }
      toArray() {
        return [...this.compressedScopes];
      }
      getImpliedScopes(scopesArray) {
        return scopesArray.reduce((array, current) => {
          let matches2 = current.match(/^(unauthenticated_)?write_(.*)$/);
          return matches2 && array.push(`${matches2[1] ? matches2[1] : ""}read_${matches2[2]}`), array;
        }, []);
      }
    };
    exports.AuthScopes = AuthScopes;
    AuthScopes.SCOPE_DELIMITER = ",";
  }
});
var require_config = __commonJS({
  "node_modules/@shopify/shopify-api/lib/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateConfig = void 0;
    var tslib_1 = require_tslib(), error_1 = require_error(), types_1 = require_types2(), scopes_1 = require_scopes(), logger_1 = require_logger();
    function validateConfig(params) {
      var _a;
      let config = {
        apiKey: "",
        apiSecretKey: "",
        scopes: new scopes_1.AuthScopes([]),
        hostName: "",
        hostScheme: "https",
        apiVersion: types_1.LATEST_API_VERSION,
        isEmbeddedApp: true,
        isCustomStoreApp: false,
        logger: {
          log: defaultLogFunction,
          level: types_1.LogSeverity.Info,
          httpRequests: false,
          timestamps: false
        },
        future: {}
      }, mandatory = ["apiSecretKey", "hostName"];
      (!("isCustomStoreApp" in params) || !params.isCustomStoreApp) && (mandatory.push("apiKey"), mandatory.push("scopes")), "isCustomStoreApp" in params && params.isCustomStoreApp && (!("adminApiAccessToken" in params) || ((_a = params.adminApiAccessToken) === null || _a === void 0 ? void 0 : _a.length) === 0) && mandatory.push("adminApiAccessToken");
      let missing = [];
      if (mandatory.forEach((key) => {
        notEmpty(params[key]) || missing.push(key);
      }), missing.length)
        throw new error_1.ShopifyError(`Cannot initialize Shopify API Library. Missing values for: ${missing.join(", ")}`);
      let { hostScheme, isCustomStoreApp, adminApiAccessToken, userAgentPrefix, logger, privateAppStorefrontAccessToken, customShopDomains, billing } = params, mandatoryParams = tslib_1.__rest(params, ["hostScheme", "isCustomStoreApp", "adminApiAccessToken", "userAgentPrefix", "logger", "privateAppStorefrontAccessToken", "customShopDomains", "billing"]);
      return Object.assign(config, mandatoryParams, {
        hostName: params.hostName.replace(/\/$/, ""),
        scopes: params.scopes instanceof scopes_1.AuthScopes ? params.scopes : new scopes_1.AuthScopes(params.scopes),
        hostScheme: hostScheme ?? config.hostScheme,
        isCustomStoreApp: isCustomStoreApp ?? config.isCustomStoreApp,
        adminApiAccessToken: adminApiAccessToken ?? config.adminApiAccessToken,
        userAgentPrefix: userAgentPrefix ?? config.userAgentPrefix,
        logger: Object.assign(Object.assign({}, config.logger), logger || {}),
        privateAppStorefrontAccessToken: privateAppStorefrontAccessToken ?? config.privateAppStorefrontAccessToken,
        customShopDomains: customShopDomains ?? config.customShopDomains,
        billing: billing ?? config.billing
      }), config.isCustomStoreApp && params.adminApiAccessToken === params.apiSecretKey && (0, logger_1.logger)(config).warning("adminApiAccessToken is set to the same value as apiSecretKey. adminApiAccessToken should be set to the Admin API access token for custom store apps; apiSecretKey should be set to the custom store app's API secret key."), config;
    }
    exports.validateConfig = validateConfig;
    function notEmpty(value) {
      return value == null ? false : typeof value == "string" || Array.isArray(value) ? value.length > 0 : true;
    }
    function defaultLogFunction(severity, message2) {
      switch (severity) {
        case types_1.LogSeverity.Debug:
          console.debug(message2);
          break;
        case types_1.LogSeverity.Info:
          console.log(message2);
          break;
        case types_1.LogSeverity.Warning:
          console.warn(message2);
          break;
        case types_1.LogSeverity.Error:
          console.error(message2);
          break;
      }
    }
  }
});
var require_network = __commonJS({
  "node_modules/@shopify/network/build/cjs/network.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Method = void 0;
    (function(Method) {
      Method.Get = "GET", Method.Post = "POST", Method.Put = "PUT", Method.Patch = "PATCH", Method.Delete = "DELETE", Method.Head = "HEAD", Method.Options = "OPTIONS", Method.Connect = "CONNECT";
    })(exports.Method || (exports.Method = {}));
    exports.StatusCode = void 0;
    (function(StatusCode) {
      StatusCode[StatusCode.Continue = 100] = "Continue", StatusCode[StatusCode.SwitchingProtocols = 101] = "SwitchingProtocols", StatusCode[StatusCode.Ok = 200] = "Ok", StatusCode[StatusCode.Created = 201] = "Created", StatusCode[StatusCode.Accepted = 202] = "Accepted", StatusCode[StatusCode.NonAuthoritativeInformation = 203] = "NonAuthoritativeInformation", StatusCode[StatusCode.NoContent = 204] = "NoContent", StatusCode[StatusCode.ResetContent = 205] = "ResetContent", StatusCode[StatusCode.PartialContent = 206] = "PartialContent", StatusCode[StatusCode.MultipleChoices = 300] = "MultipleChoices", StatusCode[StatusCode.MovedPermanently = 301] = "MovedPermanently", StatusCode[StatusCode.Found = 302] = "Found", StatusCode[StatusCode.SeeOther = 303] = "SeeOther", StatusCode[StatusCode.NotModified = 304] = "NotModified", StatusCode[StatusCode.UseProxy = 305] = "UseProxy", StatusCode[StatusCode.TemporaryRedirect = 307] = "TemporaryRedirect", StatusCode[StatusCode.BadRequest = 400] = "BadRequest", StatusCode[StatusCode.Unauthorized = 401] = "Unauthorized", StatusCode[StatusCode.PaymentRequired = 402] = "PaymentRequired", StatusCode[StatusCode.Forbidden = 403] = "Forbidden", StatusCode[StatusCode.NotFound = 404] = "NotFound", StatusCode[StatusCode.MethodNotAllowed = 405] = "MethodNotAllowed", StatusCode[StatusCode.NotAcceptable = 406] = "NotAcceptable", StatusCode[StatusCode.ProxyAuthenticationRequired = 407] = "ProxyAuthenticationRequired", StatusCode[StatusCode.RequestTimeout = 408] = "RequestTimeout", StatusCode[StatusCode.Conflict = 409] = "Conflict", StatusCode[StatusCode.Gone = 410] = "Gone", StatusCode[StatusCode.LengthRequired = 411] = "LengthRequired", StatusCode[StatusCode.PreconditionFailed = 412] = "PreconditionFailed", StatusCode[StatusCode.RequestEntityTooLarge = 413] = "RequestEntityTooLarge", StatusCode[StatusCode.RequestUriTooLong = 414] = "RequestUriTooLong", StatusCode[StatusCode.UnsupportedMediaType = 415] = "UnsupportedMediaType", StatusCode[StatusCode.RequestedRangeNotSatisfiable = 416] = "RequestedRangeNotSatisfiable", StatusCode[StatusCode.ExpectationFailed = 417] = "ExpectationFailed", StatusCode[StatusCode.ImATeapot = 418] = "ImATeapot", StatusCode[StatusCode.UnprocessableEntity = 422] = "UnprocessableEntity", StatusCode[StatusCode.TooManyRequests = 429] = "TooManyRequests", StatusCode[StatusCode.InternalServerError = 500] = "InternalServerError", StatusCode[StatusCode.NotImplemented = 501] = "NotImplemented", StatusCode[StatusCode.BadGateway = 502] = "BadGateway", StatusCode[StatusCode.ServiceUnavailable = 503] = "ServiceUnavailable", StatusCode[StatusCode.GatewayTimeout = 504] = "GatewayTimeout", StatusCode[StatusCode.HttpVersionNotSupported = 505] = "HttpVersionNotSupported";
    })(exports.StatusCode || (exports.StatusCode = {}));
    exports.Header = void 0;
    (function(Header5) {
      Header5.Accept = "Accept", Header5.AcceptEncoding = "Accept-Encoding", Header5.AcceptLanguage = "Accept-Language", Header5.AccessControlAllowCredentials = "Access-Control-Allow-Credentials", Header5.AccessControlAllowHeaders = "Access-Control-Allow-Headers", Header5.AccessControlAllowMethods = "Access-Control-Allow-Methods", Header5.AccessControlAllowOrigin = "Access-Control-Allow-Origin", Header5.AccessControlExposeHeaders = "Access-Control-Expose-Headers", Header5.AccessControlMaxAge = "Access-Control-Max-Age", Header5.AccessControlRequestHeaders = "Access-Control-Request-Headers", Header5.AccessControlRequestMethod = "Access-Control-Request-Method", Header5.Authorization = "Authorization", Header5.CacheControl = "Cache-Control", Header5.CacheStatus = "Cache-Status", Header5.Connection = "Connection", Header5.ContentDisposition = "Content-Disposition", Header5.ContentEncoding = "Content-Encoding", Header5.ContentLength = "Content-Length", Header5.ContentSecurityPolicy = "Content-Security-Policy", Header5.ContentSecurityPolicyReportOnly = "Content-Security-Policy-Report-Only", Header5.ContentType = "Content-Type", Header5.ContentTypeOptions = "X-Content-Type-Options", Header5.Cookie = "Cookie", Header5.DownloadOptions = "X-Download-Options", Header5.ETag = "ETag", Header5.Forwarded = "Forwarded", Header5.ForwardedFor = "X-Forwarded-For", Header5.ForwardedHost = "X-Forwarded-Host", Header5.ForwardedProtocol = "X-Forwarded-Proto", Header5.FrameOptions = "X-Frame-Options", Header5.Host = "Host", Header5.IfNoneMatch = "If-None-Match", Header5.Location = "Location", Header5.Origin = "Origin", Header5.ReferrerPolicy = "Referrer-Policy", Header5.ServerTiming = "Server-Timing", Header5.StrictTransportSecurity = "Strict-Transport-Security", Header5.TimingAllowOrigin = "Timing-Allow-Origin", Header5.Trailer = "Trailer", Header5.TransferEncoding = "Transfer-Encoding", Header5.UserAgent = "User-Agent", Header5.WwwAuthenticate = "WWW-Authenticate", Header5.XhrRedirectedTo = "X-XHR-Redirected-To", Header5.XhrReferer = "X-XHR-Referer", Header5.XssProtecton = "X-XSS-Protection", Header5.XContentTypeOptions = "X-Content-Type-Options", Header5.XDownloadOptions = "X-Download-Options", Header5.XForwardedFor = "X-Forwarded-For", Header5.XForwardedHost = "X-Forwarded-Host", Header5.XForwardedProto = "X-Forwarded-Proto", Header5.XFrameOptions = "X-Frame-Options", Header5.XXhrRedirectedTo = "X-XHR-Redirected-To", Header5.XXhrReferer = "X-XHR-Referer", Header5.XXssProtecton = "X-XSS-Protection", Header5.XXssProtection = "X-XSS-Protection";
    })(exports.Header || (exports.Header = {}));
    exports.CspDirective = void 0;
    (function(CspDirective) {
      CspDirective.ChildSrc = "child-src", CspDirective.ConnectSrc = "connect-src", CspDirective.DefaultSrc = "default-src", CspDirective.FontSrc = "font-src", CspDirective.FrameSrc = "frame-src", CspDirective.ImgSrc = "img-src", CspDirective.ManifestSrc = "manifest-src", CspDirective.MediaSrc = "media-src", CspDirective.ObjectSrc = "object-src", CspDirective.PrefetchSrc = "prefetch-src", CspDirective.ScriptSrc = "script-src", CspDirective.StyleSrc = "style-src", CspDirective.WebrtcSrc = "webrtc-src", CspDirective.WorkerSrc = "worker-src", CspDirective.BaseUri = "base-uri", CspDirective.PluginTypes = "plugin-types", CspDirective.Sandbox = "sandbox", CspDirective.FormAction = "form-action", CspDirective.FrameAncestors = "frame-ancestors", CspDirective.ReportUri = "report-uri", CspDirective.BlockAllMixedContent = "block-all-mixed-content", CspDirective.RequireSriFor = "require-sri-for", CspDirective.UpgradeInsecureRequests = "upgrade-insecure-requests";
    })(exports.CspDirective || (exports.CspDirective = {}));
    exports.CspSandboxAllow = void 0;
    (function(CspSandboxAllow) {
      CspSandboxAllow.Forms = "allow-forms", CspSandboxAllow.SameOrigin = "allow-same-origin", CspSandboxAllow.Scripts = "allow-scripts", CspSandboxAllow.Popups = "allow-popups", CspSandboxAllow.Modals = "allow-modals", CspSandboxAllow.OrientationLock = "allow-orientation-lock", CspSandboxAllow.PointerLock = "allow-pointer-lock", CspSandboxAllow.Presentation = "allow-presentation", CspSandboxAllow.PopupsToEscapeSandbox = "allow-popups-to-escape-sandbox", CspSandboxAllow.TopNavigation = "allow-top-navigation";
    })(exports.CspSandboxAllow || (exports.CspSandboxAllow = {}));
    exports.SpecialSource = void 0;
    (function(SpecialSource) {
      SpecialSource.Any = "*", SpecialSource.Self = "'self'", SpecialSource.UnsafeInline = "'unsafe-inline'", SpecialSource.UnsafeEval = "'unsafe-eval'", SpecialSource.None = "'none'", SpecialSource.StrictDynamic = "'strict-dynamic'", SpecialSource.ReportSample = "'report-sample'", SpecialSource.Data = "data:", SpecialSource.Blob = "blob:", SpecialSource.FileSystem = "filesystem:";
    })(exports.SpecialSource || (exports.SpecialSource = {}));
    exports.SriAsset = void 0;
    (function(SriAsset) {
      SriAsset.Script = "script", SriAsset.Style = "style";
    })(exports.SriAsset || (exports.SriAsset = {}));
    exports.HashAlgorithm = void 0;
    (function(HashAlgorithm) {
      HashAlgorithm.Sha256 = "sha256", HashAlgorithm.Sha384 = "sha384", HashAlgorithm.Sha512 = "sha512";
    })(exports.HashAlgorithm || (exports.HashAlgorithm = {}));
    exports.ResponseType = void 0;
    (function(ResponseType) {
      ResponseType.Informational = "1xx", ResponseType.Success = "2xx", ResponseType.Redirection = "3xx", ResponseType.ClientError = "4xx", ResponseType.ServerError = "5xx", ResponseType.Unknown = "Unknown";
    })(exports.ResponseType || (exports.ResponseType = {}));
    function getResponseType(status) {
      return status >= 100 && status < 200 ? exports.ResponseType.Informational : status >= 200 && status < 300 ? exports.ResponseType.Success : status >= 300 && status < 400 ? exports.ResponseType.Redirection : status >= 400 && status < 500 ? exports.ResponseType.ClientError : status >= 500 && status < 600 ? exports.ResponseType.ServerError : exports.ResponseType.Unknown;
    }
    function nonceSource(nonce) {
      return `'nonce-${nonce}'`;
    }
    function hashSource(hashAlgorithm, value) {
      return `'${hashAlgorithm}-${value}'`;
    }
    exports.CacheControl = void 0;
    (function(CacheControl) {
      CacheControl.NoCache = "no-cache", CacheControl.NoStore = "no-store", CacheControl.MustRevalidate = "must-revalidate", CacheControl.MaxAge = "max-age";
    })(exports.CacheControl || (exports.CacheControl = {}));
    var noCache = `${exports.CacheControl.NoCache},${exports.CacheControl.NoStore},${exports.CacheControl.MustRevalidate},${exports.CacheControl.MaxAge}=0`;
    exports.getResponseType = getResponseType;
    exports.hashSource = hashSource;
    exports.noCache = noCache;
    exports.nonceSource = nonceSource;
  }
});
var require_cjs = __commonJS({
  "node_modules/@shopify/network/build/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var network = require_network();
    Object.defineProperty(exports, "CacheControl", {
      enumerable: true,
      get: function() {
        return network.CacheControl;
      }
    });
    Object.defineProperty(exports, "CspDirective", {
      enumerable: true,
      get: function() {
        return network.CspDirective;
      }
    });
    Object.defineProperty(exports, "CspSandboxAllow", {
      enumerable: true,
      get: function() {
        return network.CspSandboxAllow;
      }
    });
    Object.defineProperty(exports, "HashAlgorithm", {
      enumerable: true,
      get: function() {
        return network.HashAlgorithm;
      }
    });
    Object.defineProperty(exports, "Header", {
      enumerable: true,
      get: function() {
        return network.Header;
      }
    });
    Object.defineProperty(exports, "Method", {
      enumerable: true,
      get: function() {
        return network.Method;
      }
    });
    Object.defineProperty(exports, "ResponseType", {
      enumerable: true,
      get: function() {
        return network.ResponseType;
      }
    });
    Object.defineProperty(exports, "SpecialSource", {
      enumerable: true,
      get: function() {
        return network.SpecialSource;
      }
    });
    Object.defineProperty(exports, "SriAsset", {
      enumerable: true,
      get: function() {
        return network.SriAsset;
      }
    });
    Object.defineProperty(exports, "StatusCode", {
      enumerable: true,
      get: function() {
        return network.StatusCode;
      }
    });
    exports.getResponseType = network.getResponseType;
    exports.hashSource = network.hashSource;
    exports.noCache = network.noCache;
    exports.nonceSource = network.nonceSource;
  }
});
var require_network2 = __commonJS({
  "node_modules/@shopify/network/index.js"(exports, module) {
    module.exports = require_cjs();
  }
});
var require_processed_query = __commonJS({
  "node_modules/@shopify/shopify-api/lib/utils/processed-query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ProcessedQuery = class {
      static stringify(keyValuePairs) {
        return !keyValuePairs || Object.keys(keyValuePairs).length === 0 ? "" : new ProcessedQuery().putAll(keyValuePairs).stringify();
      }
      constructor() {
        this.processedQuery = new URLSearchParams();
      }
      putAll(keyValuePairs) {
        return Object.entries(keyValuePairs).forEach(([key, value]) => this.put(key, value)), this;
      }
      put(key, value) {
        Array.isArray(value) ? this.putArray(key, value) : value?.constructor === Object ? this.putObject(key, value) : this.putSimple(key, value);
      }
      putArray(key, value) {
        value.forEach((arrayValue) => this.processedQuery.append(`${key}[]`, `${arrayValue}`));
      }
      putObject(key, value) {
        Object.entries(value).forEach(([entry2, entryValue]) => {
          this.processedQuery.append(`${key}[${entry2}]`, `${entryValue}`);
        });
      }
      putSimple(key, value) {
        this.processedQuery.append(key, `${value}`);
      }
      stringify(omitQuestionMark = false) {
        let queryString = this.processedQuery.toString();
        return omitQuestionMark ? queryString : `?${queryString}`;
      }
    };
    exports.default = ProcessedQuery;
  }
});
var require_http_client = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/http_client/http_client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpClientClass = exports.HttpClient = void 0;
    var tslib_1 = require_tslib(), network_1 = require_network2(), ShopifyErrors = tslib_1.__importStar(require_error()), types_1 = require_types2(), version_1 = require_version(), processed_query_1 = tslib_1.__importDefault(require_processed_query()), crypto_1 = require_crypto3(), types_2 = require_types3(), http_1 = require_http(), platform_1 = require_platform(), logger_1 = require_logger(), types_3 = require_types(), HttpClient = class {
      constructor(params) {
        this.loggedDeprecations = {}, this.domain = params.domain;
      }
      /**
       * Performs a GET request on the given path.
       */
      get(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return this.request(Object.assign({ method: network_1.Method.Get }, params));
        });
      }
      /**
       * Performs a POST request on the given path.
       */
      post(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return this.request(Object.assign({ method: network_1.Method.Post }, params));
        });
      }
      /**
       * Performs a PUT request on the given path.
       */
      put(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return this.request(Object.assign({ method: network_1.Method.Put }, params));
        });
      }
      /**
       * Performs a DELETE request on the given path.
       */
      delete(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          return this.request(Object.assign({ method: network_1.Method.Delete }, params));
        });
      }
      request(params) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let maxTries = params.tries ? params.tries : 1;
          if (maxTries <= 0)
            throw new ShopifyErrors.HttpRequestError(`Number of tries must be >= 0, got ${maxTries}`);
          let userAgent = `${types_1.LIBRARY_NAME} v${version_1.SHOPIFY_API_LIBRARY_VERSION} | ${(0, platform_1.abstractRuntimeString)()}`;
          this.httpClass().config.userAgentPrefix && (userAgent = `${this.httpClass().config.userAgentPrefix} | ${userAgent}`), params.extraHeaders && (params.extraHeaders["user-agent"] ? (userAgent = `${params.extraHeaders["user-agent"]} | ${userAgent}`, delete params.extraHeaders["user-agent"]) : params.extraHeaders["User-Agent"] && (userAgent = `${params.extraHeaders["User-Agent"]} | ${userAgent}`));
          let headers2 = Object.assign(Object.assign({}, params.extraHeaders), { "User-Agent": userAgent }), body;
          if (params.method === network_1.Method.Post || params.method === network_1.Method.Put) {
            let type = (_a = params.type) !== null && _a !== void 0 ? _a : types_3.DataType.JSON, data = params.data;
            if (data) {
              switch (type) {
                case types_3.DataType.JSON:
                  body = typeof data == "string" ? data : JSON.stringify(data);
                  break;
                case types_3.DataType.URLEncoded:
                  body = typeof data == "string" ? data : new URLSearchParams(data).toString();
                  break;
                case types_3.DataType.GraphQL:
                  body = data;
                  break;
              }
              headers2 = Object.assign(Object.assign({}, headers2), { "Content-Type": type, "Content-Length": new TextEncoder().encode(body).length });
            }
          }
          let url = `${this.httpClass().scheme}://${this.domain}${this.getRequestPath(params.path)}${processed_query_1.default.stringify(params.query)}`, request = {
            method: params.method,
            url,
            headers: (0, http_1.canonicalizeHeaders)(headers2),
            body
          };
          if (this.httpClass().config.logger.httpRequests) {
            let message2 = [
              "Making HTTP request",
              `${request.method} ${request.url}`,
              `Headers: ${JSON.stringify(headers2)}`
            ];
            body && message2.push(`Body: ${JSON.stringify(body).replace(/\n/g, "\\n  ")}`), (0, logger_1.logger)(this.httpClass().config).debug(message2.join("  -  "));
          }
          function sleep(waitTime) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
              return new Promise((resolve) => setTimeout(resolve, waitTime));
            });
          }
          let tries = 0;
          for (; tries < maxTries; )
            try {
              return yield this.doRequest(request);
            } catch (error) {
              if (tries++, error instanceof ShopifyErrors.HttpRetriableError) {
                if (tries < maxTries) {
                  let waitTime = this.httpClass().RETRY_WAIT_TIME;
                  error instanceof ShopifyErrors.HttpThrottlingError && error.response.retryAfter && (waitTime = error.response.retryAfter * 1e3), yield sleep(waitTime);
                  continue;
                }
                if (maxTries > 1)
                  throw new ShopifyErrors.HttpMaxRetriesError(`Exceeded maximum retry count of ${maxTries}. Last message: ${error.message}`);
              }
              throw error;
            }
          throw new ShopifyErrors.ShopifyError("Unexpected flow, reached maximum HTTP tries but did not throw an error");
        });
      }
      getRequestPath(path) {
        return `/${path.replace(/^\//, "")}`;
      }
      httpClass() {
        return this.constructor;
      }
      throwFailedRequest(body, response) {
        let errorMessages = [];
        body.errors && errorMessages.push(JSON.stringify(body.errors, null, 2));
        let xRequestId = (0, http_1.getHeader)(response.headers, "x-request-id");
        xRequestId && errorMessages.push(`If you report this error, please include this id: ${xRequestId}`);
        let errorMessage = errorMessages.length ? `:
${errorMessages.join(`
`)}` : "", headers2 = response.headers ? response.headers : {}, code = response.statusCode, statusText = response.statusText;
        switch (true) {
          case response.statusCode === network_1.StatusCode.TooManyRequests: {
            let retryAfter = (0, http_1.getHeader)(response.headers, "Retry-After");
            throw new ShopifyErrors.HttpThrottlingError({
              message: `Shopify is throttling requests${errorMessage}`,
              code,
              statusText,
              body,
              headers: headers2,
              retryAfter: retryAfter ? parseFloat(retryAfter) : void 0
            });
          }
          case response.statusCode >= network_1.StatusCode.InternalServerError:
            throw new ShopifyErrors.HttpInternalError({
              message: `Shopify internal error${errorMessage}`,
              code,
              statusText,
              body,
              headers: headers2
            });
          default:
            throw new ShopifyErrors.HttpResponseError({
              message: `Received an error response (${response.statusCode} ${response.statusText}) from Shopify${errorMessage}`,
              code,
              statusText,
              body,
              headers: headers2
            });
        }
      }
      doRequest(request) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let log = (0, logger_1.logger)(this.httpClass().config), response = yield (0, http_1.abstractFetch)(request);
          this.httpClass().config.logger.httpRequests && log.debug(`Completed HTTP request, received ${response.statusCode} ${response.statusText}`);
          let body = {};
          if (response.body)
            try {
              body = JSON.parse(response.body);
            } catch {
              body = response.body;
            }
          (0, http_1.isOK)(response) || this.throwFailedRequest(body, response);
          let deprecationReason = (0, http_1.getHeader)(response.headers, "X-Shopify-API-Deprecated-Reason");
          if (deprecationReason) {
            let deprecation = {
              message: deprecationReason,
              path: request.url
            };
            request.body && (deprecation.body = `${request.body.substring(0, 100)}...`);
            let depHash = yield (0, crypto_1.createSHA256HMAC)(this.httpClass().config.apiSecretKey, JSON.stringify(deprecation), types_2.HashFormat.Hex);
            if (!Object.keys(this.loggedDeprecations).includes(depHash) || Date.now() - this.loggedDeprecations[depHash] >= HttpClient.DEPRECATION_ALERT_DELAY) {
              this.loggedDeprecations[depHash] = Date.now();
              let stack = new Error().stack, message2 = `API Deprecation Notice ${(/* @__PURE__ */ new Date()).toLocaleString()} : ${JSON.stringify(deprecation)}  -  Stack Trace: ${stack}`;
              yield log.warning(message2);
            }
          }
          return {
            body,
            headers: (_a = response.headers) !== null && _a !== void 0 ? _a : {}
          };
        });
      }
    };
    exports.HttpClient = HttpClient;
    HttpClient.RETRY_WAIT_TIME = 1e3;
    HttpClient.DEPRECATION_ALERT_DELAY = 3e5;
    function httpClientClass(config, scheme = "https") {
      class NewHttpClient extends HttpClient {
      }
      return NewHttpClient.config = config, NewHttpClient.scheme = scheme, Reflect.defineProperty(NewHttpClient, "name", {
        value: "HttpClient"
      }), NewHttpClient;
    }
    exports.httpClientClass = httpClientClass;
  }
});
var require_rest_client = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/rest/rest_client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.restClientClass = exports.RestClient = void 0;
    var tslib_1 = require_tslib(), http_1 = require_http(), types_1 = require_types2(), ShopifyErrors = tslib_1.__importStar(require_error()), http_client_1 = require_http_client(), logger_1 = require_logger(), RestClient = class extends http_client_1.HttpClient {
      constructor(params) {
        super({ domain: params.session.shop });
        let config = this.restClass().config;
        if (!config.isCustomStoreApp && !params.session.accessToken)
          throw new ShopifyErrors.MissingRequiredArgument("Missing access token when creating REST client");
        if (params.apiVersion) {
          let message2 = params.apiVersion === config.apiVersion ? `REST client has a redundant API version override to the default ${params.apiVersion}` : `REST client overriding default API version ${config.apiVersion} with ${params.apiVersion}`;
          (0, logger_1.logger)(config).debug(message2);
        }
        this.session = params.session, this.apiVersion = params.apiVersion;
      }
      request(params) {
        let _super = Object.create(null, {
          request: { get: () => super.request }
        });
        var _a, _b, _c;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let customStoreAppAccessToken = (_a = this.restClass().config.adminApiAccessToken) !== null && _a !== void 0 ? _a : this.restClass().config.apiSecretKey;
          params.extraHeaders = Object.assign({ [types_1.ShopifyHeader.AccessToken]: this.restClass().config.isCustomStoreApp ? customStoreAppAccessToken : this.session.accessToken }, params.extraHeaders);
          let ret = yield _super.request.call(this, params), link = (0, http_1.getHeader)(ret.headers, "link");
          if (link !== void 0) {
            let pageInfo = {
              limit: !((_b = params.query) === null || _b === void 0) && _b.limit ? (_c = params.query) === null || _c === void 0 ? void 0 : _c.limit.toString() : RestClient.DEFAULT_LIMIT
            };
            if (link) {
              let links5 = link.split(", ");
              for (let link2 of links5) {
                let parsedLink = link2.match(RestClient.LINK_HEADER_REGEXP);
                if (!parsedLink)
                  continue;
                let linkRel = parsedLink[2], linkUrl = new URL(parsedLink[1]), linkFields = linkUrl.searchParams.get("fields"), linkPageToken = linkUrl.searchParams.get("page_info");
                if (!pageInfo.fields && linkFields && (pageInfo.fields = linkFields.split(",")), linkPageToken)
                  switch (linkRel) {
                    case "previous":
                      pageInfo.previousPageUrl = parsedLink[1], pageInfo.prevPage = this.buildRequestParams(parsedLink[1]);
                      break;
                    case "next":
                      pageInfo.nextPageUrl = parsedLink[1], pageInfo.nextPage = this.buildRequestParams(parsedLink[1]);
                      break;
                  }
              }
            }
            ret.pageInfo = pageInfo;
          }
          return ret;
        });
      }
      getRequestPath(path) {
        let cleanPath = super.getRequestPath(path);
        return cleanPath.startsWith("/admin") ? `${cleanPath.replace(/\.json$/, "")}.json` : `/admin/api/${this.apiVersion || this.restClass().config.apiVersion}${cleanPath.replace(/\.json$/, "")}.json`;
      }
      restClass() {
        return this.constructor;
      }
      buildRequestParams(newPageUrl) {
        let pattern = "^/admin/api/[^/]+/(.*).json$", url = new URL(newPageUrl);
        return {
          path: url.pathname.replace(new RegExp(pattern), "$1"),
          query: Object.fromEntries(url.searchParams.entries())
        };
      }
    };
    exports.RestClient = RestClient;
    RestClient.LINK_HEADER_REGEXP = /<([^<]+)>; rel="([^"]+)"/;
    RestClient.DEFAULT_LIMIT = "50";
    function restClientClass(params) {
      let { config } = params;
      class NewRestClient extends RestClient {
      }
      return NewRestClient.config = config, NewRestClient.scheme = "https", Reflect.defineProperty(NewRestClient, "name", {
        value: "RestClient"
      }), NewRestClient;
    }
    exports.restClientClass = restClientClass;
  }
});
var require_graphql_client = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/graphql/graphql_client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.graphqlClientClass = exports.GraphqlClient = void 0;
    var tslib_1 = require_tslib(), types_1 = require_types2(), http_client_1 = require_http_client(), types_2 = require_types(), logger_1 = require_logger(), ShopifyErrors = tslib_1.__importStar(require_error()), GraphqlClient = class {
      constructor(params) {
        this.baseApiPath = "/admin/api";
        let config = this.graphqlClass().config;
        if (!config.isCustomStoreApp && !params.session.accessToken)
          throw new ShopifyErrors.MissingRequiredArgument("Missing access token when creating GraphQL client");
        if (params.apiVersion) {
          let message2 = params.apiVersion === config.apiVersion ? `GraphQL client has a redundant API version override to the default ${params.apiVersion}` : `GraphQL client overriding default API version ${config.apiVersion} with ${params.apiVersion}`;
          (0, logger_1.logger)(config).debug(message2);
        }
        this.session = params.session, this.apiVersion = params.apiVersion, this.client = new (this.graphqlClass()).HttpClient({
          domain: this.session.shop
        });
      }
      query(params) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (typeof params.data == "string" && params.data.length === 0 || Object.entries(params.data).length === 0)
            throw new ShopifyErrors.MissingRequiredArgument("Query missing.");
          let apiHeaders = this.getApiHeaders();
          params.extraHeaders = Object.assign(Object.assign({}, apiHeaders), params.extraHeaders);
          let path = `${this.baseApiPath}/${this.apiVersion || this.graphqlClass().config.apiVersion}/graphql.json`, dataType;
          typeof params.data == "object" ? dataType = types_2.DataType.JSON : dataType = types_2.DataType.GraphQL;
          let result = yield this.client.post(Object.assign({ path, type: dataType }, params)), errors = result.body.errors;
          if (errors?.length > 0)
            throw new ShopifyErrors.GraphqlQueryError({
              message: (_b = (_a = errors[0]) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : "GraphQL query returned errors",
              response: result.body,
              headers: result.headers
            });
          return result;
        });
      }
      getApiHeaders() {
        let { config } = this.graphqlClass(), accessToken;
        if (config.isCustomStoreApp)
          accessToken = config.adminApiAccessToken;
        else if (accessToken = this.session.accessToken, !accessToken)
          throw new ShopifyErrors.MissingRequiredArgument("Session missing access token.");
        return {
          [types_1.ShopifyHeader.AccessToken]: accessToken
        };
      }
      graphqlClass() {
        return this.constructor;
      }
    };
    exports.GraphqlClient = GraphqlClient;
    function graphqlClientClass(params) {
      let { config } = params, { HttpClient } = params;
      HttpClient || (HttpClient = (0, http_client_1.httpClientClass)(params.config));
      class NewGraphqlClient extends GraphqlClient {
      }
      return NewGraphqlClient.config = config, NewGraphqlClient.HttpClient = HttpClient, Reflect.defineProperty(NewGraphqlClient, "name", {
        value: "GraphqlClient"
      }), NewGraphqlClient;
    }
    exports.graphqlClientClass = graphqlClientClass;
  }
});
var require_storefront_client = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/graphql/storefront_client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.storefrontClientClass = exports.StorefrontClient = void 0;
    var version_1 = require_version(), types_1 = require_types2(), http_client_1 = require_http_client(), logger_1 = require_logger(), error_1 = require_error(), graphql_client_1 = require_graphql_client(), StorefrontClient = class extends graphql_client_1.GraphqlClient {
      constructor(params) {
        super({ session: params.session, apiVersion: params.apiVersion }), this.baseApiPath = "/api";
        let config = this.storefrontClass().config;
        if (params.apiVersion) {
          let message2 = params.apiVersion === config.apiVersion ? `Storefront client has a redundant API version override to the default ${params.apiVersion}` : `Storefront client overriding default API version ${config.apiVersion} with ${params.apiVersion}`;
          (0, logger_1.logger)(config).debug(message2);
        }
      }
      getApiHeaders() {
        let config = this.storefrontClass().config, accessToken;
        if (config.isCustomStoreApp) {
          if (accessToken = config.privateAppStorefrontAccessToken, !accessToken)
            throw new error_1.MissingRequiredArgument("Custom store apps must set the privateAppStorefrontAccessToken property to call the Storefront API.");
        } else if (accessToken = this.session.accessToken, !accessToken)
          throw new error_1.MissingRequiredArgument("Session missing access token.");
        let sdkVariant = types_1.LIBRARY_NAME.toLowerCase().split(" ").join("-");
        return {
          [types_1.ShopifyHeader.StorefrontPrivateToken]: accessToken,
          [types_1.ShopifyHeader.StorefrontSDKVariant]: sdkVariant,
          [types_1.ShopifyHeader.StorefrontSDKVersion]: version_1.SHOPIFY_API_LIBRARY_VERSION
        };
      }
      storefrontClass() {
        return this.constructor;
      }
    };
    exports.StorefrontClient = StorefrontClient;
    function storefrontClientClass(params) {
      let { config } = params, { HttpClient } = params;
      HttpClient || (HttpClient = (0, http_client_1.httpClientClass)(config));
      class NewStorefrontClient extends StorefrontClient {
      }
      return NewStorefrontClient.config = config, NewStorefrontClient.HttpClient = HttpClient, Reflect.defineProperty(NewStorefrontClient, "name", {
        value: "StorefrontClient"
      }), NewStorefrontClient;
    }
    exports.storefrontClientClass = storefrontClientClass;
  }
});
var require_graphql_proxy = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/graphql/graphql_proxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.graphqlProxy = void 0;
    var tslib_1 = require_tslib(), ShopifyErrors = tslib_1.__importStar(require_error()), graphql_client_1 = require_graphql_client();
    function graphqlProxy(config) {
      return ({ session, rawBody }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!session.accessToken)
          throw new ShopifyErrors.InvalidSession("Cannot proxy query. Session not authenticated.");
        let GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config });
        return new GraphqlClient({ session }).query({
          data: rawBody
        });
      });
    }
    exports.graphqlProxy = graphqlProxy;
  }
});
var require_clients = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clientClasses = void 0;
    var http_client_1 = require_http_client(), rest_client_1 = require_rest_client(), graphql_client_1 = require_graphql_client(), storefront_client_1 = require_storefront_client(), graphql_proxy_1 = require_graphql_proxy();
    function clientClasses(config) {
      let HttpClient = (0, http_client_1.httpClientClass)(config);
      return {
        // We don't pass in the HttpClient because the RestClient inherits from it, and goes through the same setup process
        Rest: (0, rest_client_1.restClientClass)({ config }),
        Graphql: (0, graphql_client_1.graphqlClientClass)({ config, HttpClient }),
        Storefront: (0, storefront_client_1.storefrontClientClass)({ config, HttpClient }),
        graphqlProxy: (0, graphql_proxy_1.graphqlProxy)(config)
      };
    }
    exports.clientClasses = clientClasses;
  }
});
var require_isbot = __commonJS({
  "node_modules/isbot/index.js"(exports, module) {
    function _iterableToArrayLimit3(r, l) {
      var t = r == null ? null : typeof Symbol < "u" && r[Symbol.iterator] || r["@@iterator"];
      if (t != null) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r)).next, l === 0) {
            if (Object(t) !== t)
              return;
            f = false;
          } else
            for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
              ;
        } catch (r2) {
          o = true, n = r2;
        } finally {
          try {
            if (!f && t.return != null && (u = t.return(), Object(u) !== u))
              return;
          } finally {
            if (o)
              throw n;
          }
        }
        return a;
      }
    }
    function _classCallCheck2(instance, Constructor) {
      if (!(instance instanceof Constructor))
        throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties2(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false, descriptor.configurable = true, "value" in descriptor && (descriptor.writable = true), Object.defineProperty(target, _toPropertyKey2(descriptor.key), descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      return protoProps && _defineProperties2(Constructor.prototype, protoProps), staticProps && _defineProperties2(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", {
        writable: false
      }), Constructor;
    }
    function _defineProperty2(obj, key, value) {
      return key = _toPropertyKey2(key), key in obj ? Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value, obj;
    }
    function _slicedToArray3(arr, i) {
      return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
    }
    function _arrayWithHoles3(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _unsupportedIterableToArray3(o, minLen) {
      if (o) {
        if (typeof o == "string")
          return _arrayLikeToArray3(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray3(o, minLen);
      }
    }
    function _arrayLikeToArray3(arr, len) {
      (len == null || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _nonIterableRest3() {
      throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    function _toPrimitive2(input, hint) {
      if (typeof input != "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res != "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey2(arg) {
      var key = _toPrimitive2(arg, "string");
      return typeof key == "symbol" ? key : String(key);
    }
    function _classPrivateFieldGet2(receiver, privateMap) {
      var descriptor = _classExtractFieldDescriptor2(receiver, privateMap, "get");
      return _classApplyDescriptorGet2(receiver, descriptor);
    }
    function _classPrivateFieldSet2(receiver, privateMap, value) {
      var descriptor = _classExtractFieldDescriptor2(receiver, privateMap, "set");
      return _classApplyDescriptorSet2(receiver, descriptor, value), value;
    }
    function _classExtractFieldDescriptor2(receiver, privateMap, action4) {
      if (!privateMap.has(receiver))
        throw new TypeError("attempted to " + action4 + " private field on non-instance");
      return privateMap.get(receiver);
    }
    function _classApplyDescriptorGet2(receiver, descriptor) {
      return descriptor.get ? descriptor.get.call(receiver) : descriptor.value;
    }
    function _classApplyDescriptorSet2(receiver, descriptor, value) {
      if (descriptor.set)
        descriptor.set.call(receiver, value);
      else {
        if (!descriptor.writable)
          throw new TypeError("attempted to set read only private field");
        descriptor.value = value;
      }
    }
    function _classPrivateMethodGet2(receiver, privateSet, fn) {
      if (!privateSet.has(receiver))
        throw new TypeError("attempted to get private field on non-instance");
      return fn;
    }
    function _checkPrivateRedeclaration2(obj, privateCollection) {
      if (privateCollection.has(obj))
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
    function _classPrivateFieldInitSpec2(obj, privateMap, value) {
      _checkPrivateRedeclaration2(obj, privateMap), privateMap.set(obj, value);
    }
    function _classPrivateMethodInitSpec2(obj, privateSet) {
      _checkPrivateRedeclaration2(obj, privateSet), privateSet.add(obj);
    }
    var list2 = [
      " daum[ /]",
      " deusu/",
      " yadirectfetcher",
      "(?:^| )site",
      "(?:^|[^g])news",
      "@[a-z]",
      "\\(at\\)[a-z]",
      "\\(github\\.com/",
      "\\[at\\][a-z]",
      "^12345",
      "^<",
      "^[\\w \\.\\-\\(\\)]+(/v?\\d+(\\.\\d+)?(\\.\\d{1,10})?)?$",
      "^[^ ]{50,}$",
      "^active",
      "^ad muncher",
      "^amaya",
      "^anglesharp/",
      "^anonymous",
      "^avsdevicesdk/",
      "^axios/",
      "^bidtellect/",
      "^biglotron",
      "^btwebclient/",
      "^castro",
      "^clamav[ /]",
      "^client/",
      "^cobweb/",
      "^coccoc",
      "^custom",
      "^ddg[_-]android",
      "^discourse",
      "^dispatch/\\d",
      "^downcast/",
      "^duckduckgo",
      "^facebook",
      "^fdm[ /]\\d",
      "^getright/",
      "^gozilla/",
      "^hatena",
      "^hobbit",
      "^hotzonu",
      "^hwcdn/",
      "^jeode/",
      "^jetty/",
      "^jigsaw",
      "^linkdex",
      "^lwp[-: ]",
      "^metauri",
      "^microsoft bits",
      "^movabletype",
      "^mozilla/\\d\\.\\d \\(compatible;?\\)$",
      "^mozilla/\\d\\.\\d \\w*$",
      "^navermailapp",
      "^netsurf",
      "^offline explorer",
      "^php",
      "^postman",
      "^postrank",
      "^python",
      "^read",
      "^reed",
      "^restsharp/",
      "^snapchat",
      "^space bison",
      "^svn",
      "^swcd ",
      "^taringa",
      "^test certificate info",
      "^thumbor/",
      "^tumblr/",
      "^user-agent:mozilla",
      "^valid",
      "^venus/fedoraplanet",
      "^w3c",
      "^webbandit/",
      "^webcopier",
      "^wget",
      "^whatsapp",
      "^xenu link sleuth",
      "^yahoo",
      "^yandex",
      "^zdm/\\d",
      "^zoom marketplace/",
      "^{{.*}}$",
      "adbeat\\.com",
      "appinsights",
      "archive",
      "ask jeeves/teoma",
      "bit\\.ly/",
      "bluecoat drtr",
      "bot",
      "browsex",
      "burpcollaborator",
      "capture",
      "catch",
      "check",
      "chrome-lighthouse",
      "chromeframe",
      "cloud",
      "crawl",
      "cryptoapi",
      "dareboost",
      "datanyze",
      "dataprovider",
      "dejaclick",
      "dmbrowser",
      "download",
      "evc-batch/",
      "feed",
      "firephp",
      "freesafeip",
      "gomezagent",
      "google",
      "headlesschrome/",
      "http",
      "httrack",
      "hubspot marketing grader",
      "hydra",
      "ibisbrowser",
      "images",
      "inspect",
      "iplabel",
      "ips-agent",
      "java",
      "library",
      "mail\\.ru/",
      "manager",
      "monitor",
      "morningscore/",
      "neustar wpm",
      "nutch",
      "offbyone",
      "optimize",
      "pageburst",
      "pagespeed",
      "perl",
      "phantom",
      "pingdom",
      "powermarks",
      "preview",
      "proxy",
      "ptst[ /]\\d",
      "reader",
      "rexx;",
      "rigor",
      "rss",
      "scan",
      "scrape",
      "search",
      "serp ?reputation ?management",
      "server",
      "sogou",
      "sparkler/",
      "speedcurve",
      "spider",
      "splash",
      "statuscake",
      "stumbleupon\\.com",
      "supercleaner",
      "synapse",
      "synthetic",
      "torrent",
      "tracemyfile",
      "transcoder",
      "trendsmapresolver",
      "twingly recon",
      "url",
      "virtuoso",
      "wappalyzer",
      "webglance",
      "webkit2png",
      "websitemetadataretriever",
      "whatcms/",
      "wordpress",
      "zgrab"
    ];
    function amend2(list3) {
      try {
        new RegExp("(?<! cu)bot").test("dangerbot");
      } catch {
        return list3;
      }
      return [
        // Addresses: Cubot device
        ["bot", "(?<! cu)bot"],
        // Addresses: Android webview
        ["google", "(?<! (?:channel/|google/))google(?!(app|/google| pixel))"],
        // Addresses: libhttp browser
        ["http", "(?<!(?:lib))http"],
        // Addresses: java based browsers
        ["java", "java(?!;)"],
        // Addresses: Yandex Search App
        ["search", "(?<! ya(?:yandex)?)search"]
      ].forEach(function(_ref) {
        var _ref2 = _slicedToArray3(_ref, 2), search = _ref2[0], replace = _ref2[1], index = list3.lastIndexOf(search);
        ~index && list3.splice(index, 1, replace);
      }), list3;
    }
    amend2(list2);
    var flags22 = "i", _list2 = /* @__PURE__ */ new WeakMap(), _pattern2 = /* @__PURE__ */ new WeakMap(), _update3 = /* @__PURE__ */ new WeakSet(), _index3 = /* @__PURE__ */ new WeakSet(), Isbot2 = /* @__PURE__ */ function() {
      function Isbot3(patterns) {
        var _this = this;
        _classCallCheck2(this, Isbot3), _classPrivateMethodInitSpec2(this, _index3), _classPrivateMethodInitSpec2(this, _update3), _classPrivateFieldInitSpec2(this, _list2, {
          writable: true,
          value: void 0
        }), _classPrivateFieldInitSpec2(this, _pattern2, {
          writable: true,
          value: void 0
        }), _classPrivateFieldSet2(this, _list2, patterns || list2.slice()), _classPrivateMethodGet2(this, _update3, _update22).call(this);
        var isbot3 = function(ua) {
          return _this.test(ua);
        };
        return Object.defineProperties(isbot3, Object.entries(Object.getOwnPropertyDescriptors(Isbot3.prototype)).reduce(function(accumulator, _ref) {
          var _ref2 = _slicedToArray3(_ref, 2), prop = _ref2[0], descriptor = _ref2[1];
          return typeof descriptor.value == "function" && Object.assign(accumulator, _defineProperty2({}, prop, {
            value: _this[prop].bind(_this)
          })), typeof descriptor.get == "function" && Object.assign(accumulator, _defineProperty2({}, prop, {
            get: function() {
              return _this[prop];
            }
          })), accumulator;
        }, {}));
      }
      return _createClass2(Isbot3, [{
        key: "pattern",
        get: (
          /**
           * Get a clone of the pattern
           * @type RegExp
           */
          function() {
            return new RegExp(_classPrivateFieldGet2(this, _pattern2));
          }
        )
        /**
         * Match given string against out pattern
         * @param  {string} ua User Agent string
         * @returns {boolean}
         */
      }, {
        key: "test",
        value: function(ua) {
          return Boolean(ua) && _classPrivateFieldGet2(this, _pattern2).test(ua);
        }
        /**
         * Get the match for strings' known crawler pattern
         * @param  {string} ua User Agent string
         * @returns {string|null}
         */
      }, {
        key: "find",
        value: function() {
          var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", match2 = ua.match(_classPrivateFieldGet2(this, _pattern2));
          return match2 && match2[0];
        }
        /**
         * Get the patterns that match user agent string if any
         * @param  {string} ua User Agent string
         * @returns {string[]}
         */
      }, {
        key: "matches",
        value: function() {
          var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
          return _classPrivateFieldGet2(this, _list2).filter(function(entry2) {
            return new RegExp(entry2, flags22).test(ua);
          });
        }
        /**
         * Clear all patterns that match user agent
         * @param  {string} ua User Agent string
         * @returns {void}
         */
      }, {
        key: "clear",
        value: function() {
          var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
          this.exclude(this.matches(ua));
        }
        /**
         * Extent patterns for known crawlers
         * @param  {string[]} filters
         * @returns {void}
         */
      }, {
        key: "extend",
        value: function() {
          var _this2 = this, filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          [].push.apply(_classPrivateFieldGet2(this, _list2), filters.filter(function(rule) {
            return _classPrivateMethodGet2(_this2, _index3, _index22).call(_this2, rule) === -1;
          }).map(function(filter) {
            return filter.toLowerCase();
          })), _classPrivateMethodGet2(this, _update3, _update22).call(this);
        }
        /**
         * Exclude patterns from bot pattern rule
         * @param  {string[]} filters
         * @returns {void}
         */
      }, {
        key: "exclude",
        value: function() {
          for (var filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], length = filters.length; length--; ) {
            var index = _classPrivateMethodGet2(this, _index3, _index22).call(this, filters[length]);
            index > -1 && _classPrivateFieldGet2(this, _list2).splice(index, 1);
          }
          _classPrivateMethodGet2(this, _update3, _update22).call(this);
        }
        /**
         * Create a new Isbot instance using given list or self's list
         * @param  {string[]} [list]
         * @returns {Isbot}
         */
      }, {
        key: "spawn",
        value: function(list3) {
          return new Isbot3(list3 || _classPrivateFieldGet2(this, _list2));
        }
      }]), Isbot3;
    }();
    function _update22() {
      _classPrivateFieldSet2(this, _pattern2, new RegExp(_classPrivateFieldGet2(this, _list2).join("|"), flags22));
    }
    function _index22(rule) {
      return _classPrivateFieldGet2(this, _list2).indexOf(rule.toLowerCase());
    }
    var isbot2 = new Isbot2();
    module.exports = isbot2;
  }
});
var require_safe_compare = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/oauth/safe-compare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.safeCompare = void 0;
    var tslib_1 = require_tslib(), ShopifyErrors = tslib_1.__importStar(require_error()), safeCompare = (strA, strB) => {
      if (typeof strA == typeof strB) {
        let enc = new TextEncoder(), buffA = enc.encode(JSON.stringify(strA)), buffB = enc.encode(JSON.stringify(strB));
        if (buffA.length === buffB.length)
          return timingSafeEqual2(buffA, buffB);
      } else
        throw new ShopifyErrors.SafeCompareError(`Mismatched data types provided: ${typeof strA} and ${typeof strB}`);
      return false;
    };
    exports.safeCompare = safeCompare;
    function timingSafeEqual2(bufA, bufB) {
      let viewA = new Uint8Array(bufA), viewB = new Uint8Array(bufB), out = 0;
      for (let i = 0; i < viewA.length; i++)
        out |= viewA[i] ^ viewB[i];
      return out === 0;
    }
  }
});
var require_hmac_validator = __commonJS({
  "node_modules/@shopify/shopify-api/lib/utils/hmac-validator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCurrentTimeInSec = exports.validateHmac = exports.generateLocalHmac = void 0;
    var tslib_1 = require_tslib(), crypto_1 = require_crypto3(), types_1 = require_types3(), ShopifyErrors = tslib_1.__importStar(require_error()), safe_compare_1 = require_safe_compare(), processed_query_1 = tslib_1.__importDefault(require_processed_query()), HMAC_TIMESTAMP_PERMITTED_CLOCK_TOLERANCE_SEC = 90;
    function stringifyQueryForAdmin(query) {
      let processedQuery = new processed_query_1.default();
      return Object.keys(query).sort((val1, val2) => val1.localeCompare(val2)).forEach((key) => processedQuery.put(key, query[key])), processedQuery.stringify(true);
    }
    function stringifyQueryForAppProxy(query) {
      return Object.entries(query).sort(([val1], [val2]) => val1.localeCompare(val2)).reduce((acc, [key, value]) => `${acc}${key}=${Array.isArray(value) ? value.join(",") : value}`, "");
    }
    function generateLocalHmac(config) {
      return (params, signator = "admin") => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let { hmac, signature } = params, query = tslib_1.__rest(params, ["hmac", "signature"]), queryString = signator === "admin" ? stringifyQueryForAdmin(query) : stringifyQueryForAppProxy(query);
        return (0, crypto_1.createSHA256HMAC)(config.apiSecretKey, queryString, types_1.HashFormat.Hex);
      });
    }
    exports.generateLocalHmac = generateLocalHmac;
    function validateHmac(config) {
      return (query, { signator } = { signator: "admin" }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (signator === "admin" && !query.hmac)
          throw new ShopifyErrors.InvalidHmacError("Query does not contain an HMAC value.");
        if (signator === "appProxy" && !query.signature)
          throw new ShopifyErrors.InvalidHmacError("Query does not contain a signature value.");
        validateHmacTimestamp(query);
        let hmac = signator === "appProxy" ? query.signature : query.hmac, localHmac = yield generateLocalHmac(config)(query, signator);
        return (0, safe_compare_1.safeCompare)(hmac, localHmac);
      });
    }
    exports.validateHmac = validateHmac;
    function getCurrentTimeInSec() {
      return Math.trunc(Date.now() / 1e3);
    }
    exports.getCurrentTimeInSec = getCurrentTimeInSec;
    function validateHmacTimestamp(query) {
      if (Math.abs(getCurrentTimeInSec() - Number(query.timestamp)) > HMAC_TIMESTAMP_PERMITTED_CLOCK_TOLERANCE_SEC)
        throw new ShopifyErrors.InvalidHmacError("HMAC timestamp is outside of the tolerance range");
    }
  }
});
var require_decode_host = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/decode-host.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeHost = void 0;
    function decodeHost(host) {
      return atob(host);
    }
    exports.decodeHost = decodeHost;
  }
});
var require_shop_validator = __commonJS({
  "node_modules/@shopify/shopify-api/lib/utils/shop-validator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sanitizeHost = exports.sanitizeShop = void 0;
    var error_1 = require_error(), decode_host_1 = require_decode_host();
    function sanitizeShop(config) {
      return (shop, throwOnInvalid = false) => {
        let domainsRegex = ["myshopify\\.com", "shopify\\.com", "myshopify\\.io"];
        config.customShopDomains && domainsRegex.push(...config.customShopDomains.map((regex) => typeof regex == "string" ? regex : regex.source));
        let sanitizedShop = new RegExp(`^[a-zA-Z0-9][a-zA-Z0-9-_]*\\.(${domainsRegex.join("|")})[/]*$`).test(shop) ? shop : null;
        if (!sanitizedShop && throwOnInvalid)
          throw new error_1.InvalidShopError("Received invalid shop argument");
        return sanitizedShop;
      };
    }
    exports.sanitizeShop = sanitizeShop;
    function sanitizeHost() {
      return (host, throwOnInvalid = false) => {
        let sanitizedHost = /^[0-9a-zA-Z+/]+={0,2}$/.test(host) ? host : null;
        if (sanitizedHost) {
          let { hostname } = new URL(`https://${(0, decode_host_1.decodeHost)(sanitizedHost)}`), originsRegex = [
            "myshopify\\.com",
            "shopify\\.com",
            "myshopify\\.io",
            "spin\\.dev"
          ];
          new RegExp(`\\.(${originsRegex.join("|")})$`).test(hostname) || (sanitizedHost = null);
        }
        if (!sanitizedHost && throwOnInvalid)
          throw new error_1.InvalidHostError("Received invalid host argument");
        return sanitizedHost;
      };
    }
    exports.sanitizeHost = sanitizeHost;
  }
});
var require_types6 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/oauth/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STATE_COOKIE_NAME = exports.SESSION_COOKIE_NAME = void 0;
    exports.SESSION_COOKIE_NAME = "shopify_app_session";
    exports.STATE_COOKIE_NAME = "shopify_app_state";
  }
});
var require_nonce = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/oauth/nonce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nonce = void 0;
    var crypto_1 = require_crypto3();
    function nonce() {
      return (crypto_1.crypto.getRandomValues ? crypto_1.crypto.getRandomValues(new Uint8Array(15)) : crypto_1.crypto.randomBytes(15)).map((byte) => byte % 10).join("");
    }
    exports.nonce = nonce;
  }
});
var require_rng = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var getRandomValues, rnds8 = new Uint8Array(16);
    function rng() {
      if (!getRandomValues && (getRandomValues = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !getRandomValues))
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      return getRandomValues(rnds8);
    }
  }
});
var require_regex = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});
var require_validate = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate2(uuid) {
      return typeof uuid == "string" && _regex.default.test(uuid);
    }
    var _default = validate2;
    exports.default = _default;
  }
});
var require_stringify = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    exports.unsafeStringify = unsafeStringify;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i)
      byteToHex.push((i + 256).toString(16).slice(1));
    function unsafeStringify(arr, offset = 0) {
      return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
    }
    function stringify(arr, offset = 0) {
      let uuid = unsafeStringify(arr, offset);
      if (!(0, _validate.default)(uuid))
        throw TypeError("Stringified UUID is invalid");
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});
var require_v1 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng()), _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId, _clockseq, _lastMSecs = 0, _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0, b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId, clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        let seedBytes = options.random || (options.rng || _rng.default)();
        node == null && (node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]]), clockseq == null && (clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383);
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now(), nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1, dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0 && (clockseq = clockseq + 1 & 16383), (dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0 && (nsecs = 0), nsecs >= 1e4)
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      _lastMSecs = msecs, _lastNSecs = nsecs, _clockseq = clockseq, msecs += 122192928e5;
      let tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255, b[i++] = tl >>> 16 & 255, b[i++] = tl >>> 8 & 255, b[i++] = tl & 255;
      let tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255, b[i++] = tmh & 255, b[i++] = tmh >>> 24 & 15 | 16, b[i++] = tmh >>> 16 & 255, b[i++] = clockseq >>> 8 | 128, b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n)
        b[i + n] = node[n];
      return buf || (0, _stringify.unsafeStringify)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});
var require_parse = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse3(uuid) {
      if (!(0, _validate.default)(uuid))
        throw TypeError("Invalid UUID");
      let v, arr = new Uint8Array(16);
      return arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24, arr[1] = v >>> 16 & 255, arr[2] = v >>> 8 & 255, arr[3] = v & 255, arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, arr[5] = v & 255, arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, arr[7] = v & 255, arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, arr[9] = v & 255, arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, arr[11] = v / 4294967296 & 255, arr[12] = v >>> 24 & 255, arr[13] = v >>> 16 & 255, arr[14] = v >>> 8 & 255, arr[15] = v & 255, arr;
    }
    var _default = parse3;
    exports.default = _default;
  }
});
var require_v35 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.URL = exports.DNS = void 0;
    exports.default = v35;
    var _stringify = require_stringify(), _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      let bytes = [];
      for (let i = 0; i < str.length; ++i)
        bytes.push(str.charCodeAt(i));
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL2;
    function v35(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        var _namespace;
        if (typeof value == "string" && (value = stringToBytes(value)), typeof namespace == "string" && (namespace = (0, _parse.default)(namespace)), ((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16)
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        let bytes = new Uint8Array(16 + value.length);
        if (bytes.set(namespace), bytes.set(value, namespace.length), bytes = hashfunc(bytes), bytes[6] = bytes[6] & 15 | version, bytes[8] = bytes[8] & 63 | 128, buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i)
            buf[offset + i] = bytes[i];
          return buf;
        }
        return (0, _stringify.unsafeStringify)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch {
      }
      return generateUUID.DNS = DNS, generateUUID.URL = URL2, generateUUID;
    }
  }
});
var require_md5 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function md5(bytes) {
      if (typeof bytes == "string") {
        let msg = unescape(encodeURIComponent(bytes));
        bytes = new Uint8Array(msg.length);
        for (let i = 0; i < msg.length; ++i)
          bytes[i] = msg.charCodeAt(i);
      }
      return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
    }
    function md5ToHexEncodedArray(input) {
      let output = [], length32 = input.length * 32, hexTab = "0123456789abcdef";
      for (let i = 0; i < length32; i += 8) {
        let x = input[i >> 5] >>> i % 32 & 255, hex2 = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
        output.push(hex2);
      }
      return output;
    }
    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    function wordsToMd5(x, len) {
      x[len >> 5] |= 128 << len % 32, x[getOutputLength(len) - 1] = len;
      let a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
      for (let i = 0; i < x.length; i += 16) {
        let olda = a, oldb = b, oldc = c, oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936), d = md5ff(d, a, b, c, x[i + 1], 12, -389564586), c = md5ff(c, d, a, b, x[i + 2], 17, 606105819), b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330), a = md5ff(a, b, c, d, x[i + 4], 7, -176418897), d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426), c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341), b = md5ff(b, c, d, a, x[i + 7], 22, -45705983), a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416), d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417), c = md5ff(c, d, a, b, x[i + 10], 17, -42063), b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162), a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682), d = md5ff(d, a, b, c, x[i + 13], 12, -40341101), c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290), b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329), a = md5gg(a, b, c, d, x[i + 1], 5, -165796510), d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632), c = md5gg(c, d, a, b, x[i + 11], 14, 643717713), b = md5gg(b, c, d, a, x[i], 20, -373897302), a = md5gg(a, b, c, d, x[i + 5], 5, -701558691), d = md5gg(d, a, b, c, x[i + 10], 9, 38016083), c = md5gg(c, d, a, b, x[i + 15], 14, -660478335), b = md5gg(b, c, d, a, x[i + 4], 20, -405537848), a = md5gg(a, b, c, d, x[i + 9], 5, 568446438), d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690), c = md5gg(c, d, a, b, x[i + 3], 14, -187363961), b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501), a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467), d = md5gg(d, a, b, c, x[i + 2], 9, -51403784), c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473), b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734), a = md5hh(a, b, c, d, x[i + 5], 4, -378558), d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463), c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562), b = md5hh(b, c, d, a, x[i + 14], 23, -35309556), a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060), d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353), c = md5hh(c, d, a, b, x[i + 7], 16, -155497632), b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640), a = md5hh(a, b, c, d, x[i + 13], 4, 681279174), d = md5hh(d, a, b, c, x[i], 11, -358537222), c = md5hh(c, d, a, b, x[i + 3], 16, -722521979), b = md5hh(b, c, d, a, x[i + 6], 23, 76029189), a = md5hh(a, b, c, d, x[i + 9], 4, -640364487), d = md5hh(d, a, b, c, x[i + 12], 11, -421815835), c = md5hh(c, d, a, b, x[i + 15], 16, 530742520), b = md5hh(b, c, d, a, x[i + 2], 23, -995338651), a = md5ii(a, b, c, d, x[i], 6, -198630844), d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415), c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905), b = md5ii(b, c, d, a, x[i + 5], 21, -57434055), a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571), d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606), c = md5ii(c, d, a, b, x[i + 10], 15, -1051523), b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799), a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359), d = md5ii(d, a, b, c, x[i + 15], 10, -30611744), c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380), b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649), a = md5ii(a, b, c, d, x[i + 4], 6, -145523070), d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379), c = md5ii(c, d, a, b, x[i + 2], 15, 718787259), b = md5ii(b, c, d, a, x[i + 9], 21, -343485551), a = safeAdd(a, olda), b = safeAdd(b, oldb), c = safeAdd(c, oldc), d = safeAdd(d, oldd);
      }
      return [a, b, c, d];
    }
    function bytesToWords(input) {
      if (input.length === 0)
        return [];
      let length8 = input.length * 8, output = new Uint32Array(getOutputLength(length8));
      for (let i = 0; i < length8; i += 8)
        output[i >> 5] |= (input[i / 8] & 255) << i % 32;
      return output;
    }
    function safeAdd(x, y) {
      let lsw = (x & 65535) + (y & 65535);
      return (x >> 16) + (y >> 16) + (lsw >> 16) << 16 | lsw & 65535;
    }
    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    var _default = md5;
    exports.default = _default;
  }
});
var require_v3 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35()), _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default), _default = v3;
    exports.default = _default;
  }
});
var require_native = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/native.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var randomUUID = typeof crypto < "u" && crypto.randomUUID && crypto.randomUUID.bind(crypto), _default = {
      randomUUID
    };
    exports.default = _default;
  }
});
var require_v4 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _native = _interopRequireDefault(require_native()), _rng = _interopRequireDefault(require_rng()), _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      if (_native.default.randomUUID && !buf && !options)
        return _native.default.randomUUID();
      options = options || {};
      let rnds = options.random || (options.rng || _rng.default)();
      if (rnds[6] = rnds[6] & 15 | 64, rnds[8] = rnds[8] & 63 | 128, buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i)
          buf[offset + i] = rnds[i];
        return buf;
      }
      return (0, _stringify.unsafeStringify)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;
        case 1:
          return x ^ y ^ z;
        case 2:
          return x & y ^ x & z ^ y & z;
        case 3:
          return x ^ y ^ z;
      }
    }
    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }
    function sha1(bytes) {
      let K = [1518500249, 1859775393, 2400959708, 3395469782], H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      if (typeof bytes == "string") {
        let msg = unescape(encodeURIComponent(bytes));
        bytes = [];
        for (let i = 0; i < msg.length; ++i)
          bytes.push(msg.charCodeAt(i));
      } else
        Array.isArray(bytes) || (bytes = Array.prototype.slice.call(bytes));
      bytes.push(128);
      let l = bytes.length / 4 + 2, N = Math.ceil(l / 16), M = new Array(N);
      for (let i = 0; i < N; ++i) {
        let arr = new Uint32Array(16);
        for (let j = 0; j < 16; ++j)
          arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        M[i] = arr;
      }
      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32), M[N - 1][14] = Math.floor(M[N - 1][14]), M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
      for (let i = 0; i < N; ++i) {
        let W = new Uint32Array(80);
        for (let t = 0; t < 16; ++t)
          W[t] = M[i][t];
        for (let t = 16; t < 80; ++t)
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        let a = H[0], b = H[1], c = H[2], d = H[3], e = H[4];
        for (let t = 0; t < 80; ++t) {
          let s = Math.floor(t / 20), T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d, d = c, c = ROTL(b, 30) >>> 0, b = a, a = T;
        }
        H[0] = H[0] + a >>> 0, H[1] = H[1] + b >>> 0, H[2] = H[2] + c >>> 0, H[3] = H[3] + d >>> 0, H[4] = H[4] + e >>> 0;
      }
      return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
    }
    var _default = sha1;
    exports.default = _default;
  }
});
var require_v5 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35()), _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default), _default = v5;
    exports.default = _default;
  }
});
var require_nil = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});
var require_version2 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid))
        throw TypeError("Invalid UUID");
      return parseInt(uuid.slice(14, 15), 16);
    }
    var _default = version;
    exports.default = _default;
  }
});
var require_commonjs_browser = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    var _v = _interopRequireDefault(require_v1()), _v2 = _interopRequireDefault(require_v3()), _v3 = _interopRequireDefault(require_v4()), _v4 = _interopRequireDefault(require_v5()), _nil = _interopRequireDefault(require_nil()), _version = _interopRequireDefault(require_version2()), _validate = _interopRequireDefault(require_validate()), _stringify = _interopRequireDefault(require_stringify()), _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});
var require_session = __commonJS({
  "node_modules/@shopify/shopify-api/lib/session/session.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Session = void 0;
    var error_1 = require_error(), scopes_1 = require_scopes(), propertiesToSave = [
      "id",
      "shop",
      "state",
      "isOnline",
      "scope",
      "accessToken",
      "expires",
      "onlineAccessInfo"
    ], Session = class {
      static fromPropertyArray(entries) {
        if (!Array.isArray(entries))
          throw new error_1.InvalidSession("The parameter is not an array: a Session cannot be created from this object.");
        let obj = Object.fromEntries(entries.filter(([_key, value]) => value != null).map(([key, value]) => {
          switch (key.toLowerCase()) {
            case "isonline":
              return ["isOnline", value];
            case "accesstoken":
              return ["accessToken", value];
            case "onlineaccessinfo":
              return ["onlineAccessInfo", value];
            default:
              return [key.toLowerCase(), value];
          }
        }).map(([key, value]) => {
          switch (key) {
            case "isOnline":
              return typeof value == "string" ? [key, value.toString().toLowerCase() === "true"] : typeof value == "number" ? [key, Boolean(value)] : [key, value];
            case "scope":
              return [key, value.toString()];
            case "expires":
              return [key, value ? new Date(Number(value)) : void 0];
            case "onlineAccessInfo":
              return [
                key,
                {
                  associated_user: {
                    id: Number(value)
                  }
                }
              ];
            default:
              return [key, value];
          }
        }));
        return Object.setPrototypeOf(obj, Session.prototype), obj;
      }
      constructor(params) {
        Object.assign(this, params);
      }
      isActive(scopes) {
        return !this.isScopeChanged(scopes) && Boolean(this.accessToken) && !this.isExpired();
      }
      isScopeChanged(scopes) {
        return !(scopes instanceof scopes_1.AuthScopes ? scopes : new scopes_1.AuthScopes(scopes)).equals(this.scope);
      }
      isExpired() {
        return Boolean(this.expires && this.expires < /* @__PURE__ */ new Date());
      }
      toObject() {
        let object = {
          id: this.id,
          shop: this.shop,
          state: this.state,
          isOnline: this.isOnline
        };
        return this.scope && (object.scope = this.scope), this.expires && (object.expires = this.expires), this.accessToken && (object.accessToken = this.accessToken), this.onlineAccessInfo && (object.onlineAccessInfo = this.onlineAccessInfo), object;
      }
      equals(other) {
        if (!other || !(this.id === other.id && this.shop === other.shop && this.state === other.state && this.isOnline === other.isOnline))
          return false;
        let copyA = this.toPropertyArray();
        copyA.sort(([k1], [k2]) => k1 < k2 ? -1 : 1);
        let copyB = other.toPropertyArray();
        return copyB.sort(([k1], [k2]) => k1 < k2 ? -1 : 1), JSON.stringify(copyA) === JSON.stringify(copyB);
      }
      toPropertyArray() {
        return Object.entries(this).filter(([key, value]) => propertiesToSave.includes(key) && value !== void 0 && value !== null).map(([key, value]) => {
          var _a;
          switch (key) {
            case "expires":
              return [key, value ? value.getTime() : void 0];
            case "onlineAccessInfo":
              return [key, (_a = value?.associated_user) === null || _a === void 0 ? void 0 : _a.id];
            default:
              return [key, value];
          }
        });
      }
    };
    exports.Session = Session;
  }
});
var webcrypto_default;
var isCryptoKey;
var init_webcrypto = __esm({
  "node_modules/jose/dist/browser/runtime/webcrypto.js"() {
    webcrypto_default = crypto, isCryptoKey = (key) => key instanceof CryptoKey;
  }
});
var digest;
var digest_default;
var init_digest = __esm({
  "node_modules/jose/dist/browser/runtime/digest.js"() {
    init_webcrypto();
    digest = async (algorithm, data) => {
      let subtleDigest = `SHA-${algorithm.slice(-3)}`;
      return new Uint8Array(await webcrypto_default.subtle.digest(subtleDigest, data));
    }, digest_default = digest;
  }
});
function concat(...buffers) {
  let size2 = buffers.reduce((acc, { length }) => acc + length, 0), buf = new Uint8Array(size2), i = 0;
  return buffers.forEach((buffer) => {
    buf.set(buffer, i), i += buffer.length;
  }), buf;
}
function p2s(alg, p2sInput) {
  return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);
}
function writeUInt32BE(buf, value, offset) {
  if (value < 0 || value >= MAX_INT32)
    throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
  buf.set([value >>> 24, value >>> 16, value >>> 8, value & 255], offset);
}
function uint64be(value) {
  let high = Math.floor(value / MAX_INT32), low = value % MAX_INT32, buf = new Uint8Array(8);
  return writeUInt32BE(buf, high, 0), writeUInt32BE(buf, low, 4), buf;
}
function uint32be(value) {
  let buf = new Uint8Array(4);
  return writeUInt32BE(buf, value), buf;
}
function lengthAndInput(input) {
  return concat(uint32be(input.length), input);
}
async function concatKdf(secret, bits, value) {
  let iterations = Math.ceil((bits >> 3) / 32), res = new Uint8Array(iterations * 32);
  for (let iter = 0; iter < iterations; iter++) {
    let buf = new Uint8Array(4 + secret.length + value.length);
    buf.set(uint32be(iter + 1)), buf.set(secret, 4), buf.set(value, 4 + secret.length), res.set(await digest_default("sha256", buf), iter * 32);
  }
  return res.slice(0, bits >> 3);
}
var encoder;
var decoder;
var MAX_INT32;
var init_buffer_utils = __esm({
  "node_modules/jose/dist/browser/lib/buffer_utils.js"() {
    init_digest();
    encoder = new TextEncoder(), decoder = new TextDecoder(), MAX_INT32 = 2 ** 32;
  }
});
var encodeBase64;
var encode;
var decodeBase64;
var decode;
var init_base64url = __esm({
  "node_modules/jose/dist/browser/runtime/base64url.js"() {
    init_buffer_utils();
    encodeBase64 = (input) => {
      let unencoded = input;
      typeof unencoded == "string" && (unencoded = encoder.encode(unencoded));
      let CHUNK_SIZE = 32768, arr = [];
      for (let i = 0; i < unencoded.length; i += CHUNK_SIZE)
        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
      return btoa(arr.join(""));
    }, encode = (input) => encodeBase64(input).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_"), decodeBase64 = (encoded) => {
      let binary = atob(encoded), bytes = new Uint8Array(binary.length);
      for (let i = 0; i < binary.length; i++)
        bytes[i] = binary.charCodeAt(i);
      return bytes;
    }, decode = (input) => {
      let encoded = input;
      encoded instanceof Uint8Array && (encoded = decoder.decode(encoded)), encoded = encoded.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
      try {
        return decodeBase64(encoded);
      } catch {
        throw new TypeError("The input to be decoded is not correctly encoded.");
      }
    };
  }
});
var errors_exports = {};
__export(errors_exports, {
  JOSEAlgNotAllowed: () => JOSEAlgNotAllowed,
  JOSEError: () => JOSEError,
  JOSENotSupported: () => JOSENotSupported,
  JWEDecryptionFailed: () => JWEDecryptionFailed,
  JWEInvalid: () => JWEInvalid,
  JWKInvalid: () => JWKInvalid,
  JWKSInvalid: () => JWKSInvalid,
  JWKSMultipleMatchingKeys: () => JWKSMultipleMatchingKeys,
  JWKSNoMatchingKey: () => JWKSNoMatchingKey,
  JWKSTimeout: () => JWKSTimeout,
  JWSInvalid: () => JWSInvalid,
  JWSSignatureVerificationFailed: () => JWSSignatureVerificationFailed,
  JWTClaimValidationFailed: () => JWTClaimValidationFailed,
  JWTExpired: () => JWTExpired,
  JWTInvalid: () => JWTInvalid
});
var JOSEError;
var JWTClaimValidationFailed;
var JWTExpired;
var JOSEAlgNotAllowed;
var JOSENotSupported;
var JWEDecryptionFailed;
var JWEInvalid;
var JWSInvalid;
var JWTInvalid;
var JWKInvalid;
var JWKSInvalid;
var JWKSNoMatchingKey;
var JWKSMultipleMatchingKeys;
var JWKSTimeout;
var JWSSignatureVerificationFailed;
var init_errors4 = __esm({
  "node_modules/jose/dist/browser/util/errors.js"() {
    JOSEError = class extends Error {
      static get code() {
        return "ERR_JOSE_GENERIC";
      }
      constructor(message2) {
        var _a;
        super(message2), this.code = "ERR_JOSE_GENERIC", this.name = this.constructor.name, (_a = Error.captureStackTrace) === null || _a === void 0 || _a.call(Error, this, this.constructor);
      }
    }, JWTClaimValidationFailed = class extends JOSEError {
      static get code() {
        return "ERR_JWT_CLAIM_VALIDATION_FAILED";
      }
      constructor(message2, claim = "unspecified", reason = "unspecified") {
        super(message2), this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED", this.claim = claim, this.reason = reason;
      }
    }, JWTExpired = class extends JOSEError {
      static get code() {
        return "ERR_JWT_EXPIRED";
      }
      constructor(message2, claim = "unspecified", reason = "unspecified") {
        super(message2), this.code = "ERR_JWT_EXPIRED", this.claim = claim, this.reason = reason;
      }
    }, JOSEAlgNotAllowed = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
      }
      static get code() {
        return "ERR_JOSE_ALG_NOT_ALLOWED";
      }
    }, JOSENotSupported = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JOSE_NOT_SUPPORTED";
      }
      static get code() {
        return "ERR_JOSE_NOT_SUPPORTED";
      }
    }, JWEDecryptionFailed = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWE_DECRYPTION_FAILED", this.message = "decryption operation failed";
      }
      static get code() {
        return "ERR_JWE_DECRYPTION_FAILED";
      }
    }, JWEInvalid = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWE_INVALID";
      }
      static get code() {
        return "ERR_JWE_INVALID";
      }
    }, JWSInvalid = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWS_INVALID";
      }
      static get code() {
        return "ERR_JWS_INVALID";
      }
    }, JWTInvalid = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWT_INVALID";
      }
      static get code() {
        return "ERR_JWT_INVALID";
      }
    }, JWKInvalid = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWK_INVALID";
      }
      static get code() {
        return "ERR_JWK_INVALID";
      }
    }, JWKSInvalid = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWKS_INVALID";
      }
      static get code() {
        return "ERR_JWKS_INVALID";
      }
    }, JWKSNoMatchingKey = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWKS_NO_MATCHING_KEY", this.message = "no applicable key found in the JSON Web Key Set";
      }
      static get code() {
        return "ERR_JWKS_NO_MATCHING_KEY";
      }
    }, JWKSMultipleMatchingKeys = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS", this.message = "multiple matching keys found in the JSON Web Key Set";
      }
      static get code() {
        return "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
      }
    }, JWKSTimeout = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWKS_TIMEOUT", this.message = "request timed out";
      }
      static get code() {
        return "ERR_JWKS_TIMEOUT";
      }
    }, JWSSignatureVerificationFailed = class extends JOSEError {
      constructor() {
        super(...arguments), this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED", this.message = "signature verification failed";
      }
      static get code() {
        return "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
      }
    };
  }
});
var random_default;
var init_random = __esm({
  "node_modules/jose/dist/browser/runtime/random.js"() {
    init_webcrypto();
    random_default = webcrypto_default.getRandomValues.bind(webcrypto_default);
  }
});
function bitLength(alg) {
  switch (alg) {
    case "A128GCM":
    case "A128GCMKW":
    case "A192GCM":
    case "A192GCMKW":
    case "A256GCM":
    case "A256GCMKW":
      return 96;
    case "A128CBC-HS256":
    case "A192CBC-HS384":
    case "A256CBC-HS512":
      return 128;
    default:
      throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
  }
}
var iv_default;
var init_iv = __esm({
  "node_modules/jose/dist/browser/lib/iv.js"() {
    init_errors4();
    init_random();
    iv_default = (alg) => random_default(new Uint8Array(bitLength(alg) >> 3));
  }
});
var checkIvLength;
var check_iv_length_default;
var init_check_iv_length = __esm({
  "node_modules/jose/dist/browser/lib/check_iv_length.js"() {
    init_errors4();
    init_iv();
    checkIvLength = (enc, iv) => {
      if (iv.length << 3 !== bitLength(enc))
        throw new JWEInvalid("Invalid Initialization Vector length");
    }, check_iv_length_default = checkIvLength;
  }
});
var checkCekLength;
var check_cek_length_default;
var init_check_cek_length = __esm({
  "node_modules/jose/dist/browser/runtime/check_cek_length.js"() {
    init_errors4();
    checkCekLength = (cek, expected) => {
      let actual = cek.byteLength << 3;
      if (actual !== expected)
        throw new JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
    }, check_cek_length_default = checkCekLength;
  }
});
var timingSafeEqual;
var timing_safe_equal_default;
var init_timing_safe_equal = __esm({
  "node_modules/jose/dist/browser/runtime/timing_safe_equal.js"() {
    timingSafeEqual = (a, b) => {
      if (!(a instanceof Uint8Array))
        throw new TypeError("First argument must be a buffer");
      if (!(b instanceof Uint8Array))
        throw new TypeError("Second argument must be a buffer");
      if (a.length !== b.length)
        throw new TypeError("Input buffers must have the same length");
      let len = a.length, out = 0, i = -1;
      for (; ++i < len; )
        out |= a[i] ^ b[i];
      return out === 0;
    }, timing_safe_equal_default = timingSafeEqual;
  }
});
function unusable(name, prop = "algorithm.name") {
  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
function isAlgorithm(algorithm, name) {
  return algorithm.name === name;
}
function getHashLength(hash) {
  return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) {
  switch (alg) {
    case "ES256":
      return "P-256";
    case "ES384":
      return "P-384";
    case "ES512":
      return "P-521";
    default:
      throw new Error("unreachable");
  }
}
function checkUsage(key, usages) {
  if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
    let msg = "CryptoKey does not support this operation, its usages must include ";
    if (usages.length > 2) {
      let last = usages.pop();
      msg += `one of ${usages.join(", ")}, or ${last}.`;
    } else
      usages.length === 2 ? msg += `one of ${usages[0]} or ${usages[1]}.` : msg += `${usages[0]}.`;
    throw new TypeError(msg);
  }
}
function checkSigCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512": {
      if (!isAlgorithm(key.algorithm, "HMAC"))
        throw unusable("HMAC");
      let expected = parseInt(alg.slice(2), 10);
      if (getHashLength(key.algorithm.hash) !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "RS256":
    case "RS384":
    case "RS512": {
      if (!isAlgorithm(key.algorithm, "RSASSA-PKCS1-v1_5"))
        throw unusable("RSASSA-PKCS1-v1_5");
      let expected = parseInt(alg.slice(2), 10);
      if (getHashLength(key.algorithm.hash) !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "PS256":
    case "PS384":
    case "PS512": {
      if (!isAlgorithm(key.algorithm, "RSA-PSS"))
        throw unusable("RSA-PSS");
      let expected = parseInt(alg.slice(2), 10);
      if (getHashLength(key.algorithm.hash) !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "EdDSA": {
      if (key.algorithm.name !== "Ed25519" && key.algorithm.name !== "Ed448")
        throw unusable("Ed25519 or Ed448");
      break;
    }
    case "ES256":
    case "ES384":
    case "ES512": {
      if (!isAlgorithm(key.algorithm, "ECDSA"))
        throw unusable("ECDSA");
      let expected = getNamedCurve(alg);
      if (key.algorithm.namedCurve !== expected)
        throw unusable(expected, "algorithm.namedCurve");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  checkUsage(key, usages);
}
function checkEncCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case "A128GCM":
    case "A192GCM":
    case "A256GCM": {
      if (!isAlgorithm(key.algorithm, "AES-GCM"))
        throw unusable("AES-GCM");
      let expected = parseInt(alg.slice(1, 4), 10);
      if (key.algorithm.length !== expected)
        throw unusable(expected, "algorithm.length");
      break;
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      if (!isAlgorithm(key.algorithm, "AES-KW"))
        throw unusable("AES-KW");
      let expected = parseInt(alg.slice(1, 4), 10);
      if (key.algorithm.length !== expected)
        throw unusable(expected, "algorithm.length");
      break;
    }
    case "ECDH": {
      switch (key.algorithm.name) {
        case "ECDH":
        case "X25519":
        case "X448":
          break;
        default:
          throw unusable("ECDH, X25519, or X448");
      }
      break;
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW":
      if (!isAlgorithm(key.algorithm, "PBKDF2"))
        throw unusable("PBKDF2");
      break;
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      if (!isAlgorithm(key.algorithm, "RSA-OAEP"))
        throw unusable("RSA-OAEP");
      let expected = parseInt(alg.slice(9), 10) || 1;
      if (getHashLength(key.algorithm.hash) !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  checkUsage(key, usages);
}
var init_crypto_key = __esm({
  "node_modules/jose/dist/browser/lib/crypto_key.js"() {
  }
});
function message(msg, actual, ...types2) {
  if (types2.length > 2) {
    let last = types2.pop();
    msg += `one of type ${types2.join(", ")}, or ${last}.`;
  } else
    types2.length === 2 ? msg += `one of type ${types2[0]} or ${types2[1]}.` : msg += `of type ${types2[0]}.`;
  return actual == null ? msg += ` Received ${actual}` : typeof actual == "function" && actual.name ? msg += ` Received function ${actual.name}` : typeof actual == "object" && actual != null && actual.constructor && actual.constructor.name && (msg += ` Received an instance of ${actual.constructor.name}`), msg;
}
function withAlg(alg, actual, ...types2) {
  return message(`Key for the ${alg} algorithm must be `, actual, ...types2);
}
var invalid_key_input_default;
var init_invalid_key_input = __esm({
  "node_modules/jose/dist/browser/lib/invalid_key_input.js"() {
    invalid_key_input_default = (actual, ...types2) => message("Key must be ", actual, ...types2);
  }
});
var is_key_like_default;
var types;
var init_is_key_like = __esm({
  "node_modules/jose/dist/browser/runtime/is_key_like.js"() {
    init_webcrypto();
    is_key_like_default = (key) => isCryptoKey(key), types = ["CryptoKey"];
  }
});
async function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {
  if (!(cek instanceof Uint8Array))
    throw new TypeError(invalid_key_input_default(cek, "Uint8Array"));
  let keySize = parseInt(enc.slice(1, 4), 10), encKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(keySize >> 3), "AES-CBC", false, ["decrypt"]), macKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(0, keySize >> 3), {
    hash: `SHA-${keySize << 1}`,
    name: "HMAC"
  }, false, ["sign"]), macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3)), expectedTag = new Uint8Array((await webcrypto_default.subtle.sign("HMAC", macKey, macData)).slice(0, keySize >> 3)), macCheckPassed;
  try {
    macCheckPassed = timing_safe_equal_default(tag, expectedTag);
  } catch {
  }
  if (!macCheckPassed)
    throw new JWEDecryptionFailed();
  let plaintext;
  try {
    plaintext = new Uint8Array(await webcrypto_default.subtle.decrypt({ iv, name: "AES-CBC" }, encKey, ciphertext));
  } catch {
  }
  if (!plaintext)
    throw new JWEDecryptionFailed();
  return plaintext;
}
async function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {
  let encKey;
  cek instanceof Uint8Array ? encKey = await webcrypto_default.subtle.importKey("raw", cek, "AES-GCM", false, ["decrypt"]) : (checkEncCryptoKey(cek, enc, "decrypt"), encKey = cek);
  try {
    return new Uint8Array(await webcrypto_default.subtle.decrypt({
      additionalData: aad,
      iv,
      name: "AES-GCM",
      tagLength: 128
    }, encKey, concat(ciphertext, tag)));
  } catch {
    throw new JWEDecryptionFailed();
  }
}
var decrypt;
var decrypt_default;
var init_decrypt = __esm({
  "node_modules/jose/dist/browser/runtime/decrypt.js"() {
    init_buffer_utils();
    init_check_iv_length();
    init_check_cek_length();
    init_timing_safe_equal();
    init_errors4();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
    decrypt = async (enc, cek, ciphertext, iv, tag, aad) => {
      if (!isCryptoKey(cek) && !(cek instanceof Uint8Array))
        throw new TypeError(invalid_key_input_default(cek, ...types, "Uint8Array"));
      switch (check_iv_length_default(enc, iv), enc) {
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
          return cek instanceof Uint8Array && check_cek_length_default(cek, parseInt(enc.slice(-3), 10)), cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
          return cek instanceof Uint8Array && check_cek_length_default(cek, parseInt(enc.slice(1, 4), 10)), gcmDecrypt(enc, cek, ciphertext, iv, tag, aad);
        default:
          throw new JOSENotSupported("Unsupported JWE Content Encryption Algorithm");
      }
    }, decrypt_default = decrypt;
  }
});
var inflate;
var deflate;
var init_zlib = __esm({
  "node_modules/jose/dist/browser/runtime/zlib.js"() {
    init_errors4();
    inflate = async () => {
      throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `inflateRaw` decrypt option to provide Inflate Raw implementation.');
    }, deflate = async () => {
      throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `deflateRaw` encrypt option to provide Deflate Raw implementation.');
    };
  }
});
var isDisjoint;
var is_disjoint_default;
var init_is_disjoint = __esm({
  "node_modules/jose/dist/browser/lib/is_disjoint.js"() {
    isDisjoint = (...headers2) => {
      let sources = headers2.filter(Boolean);
      if (sources.length === 0 || sources.length === 1)
        return true;
      let acc;
      for (let header of sources) {
        let parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
          acc = new Set(parameters);
          continue;
        }
        for (let parameter of parameters) {
          if (acc.has(parameter))
            return false;
          acc.add(parameter);
        }
      }
      return true;
    }, is_disjoint_default = isDisjoint;
  }
});
function isObjectLike(value) {
  return typeof value == "object" && value !== null;
}
function isObject(input) {
  if (!isObjectLike(input) || Object.prototype.toString.call(input) !== "[object Object]")
    return false;
  if (Object.getPrototypeOf(input) === null)
    return true;
  let proto = input;
  for (; Object.getPrototypeOf(proto) !== null; )
    proto = Object.getPrototypeOf(proto);
  return Object.getPrototypeOf(input) === proto;
}
var init_is_object = __esm({
  "node_modules/jose/dist/browser/lib/is_object.js"() {
  }
});
var bogusWebCrypto;
var bogus_default;
var init_bogus = __esm({
  "node_modules/jose/dist/browser/runtime/bogus.js"() {
    bogusWebCrypto = [
      { hash: "SHA-256", name: "HMAC" },
      true,
      ["sign"]
    ], bogus_default = bogusWebCrypto;
  }
});
function checkKeySize(key, alg) {
  if (key.algorithm.length !== parseInt(alg.slice(1, 4), 10))
    throw new TypeError(`Invalid key size for alg: ${alg}`);
}
function getCryptoKey(key, alg, usage) {
  if (isCryptoKey(key))
    return checkEncCryptoKey(key, alg, usage), key;
  if (key instanceof Uint8Array)
    return webcrypto_default.subtle.importKey("raw", key, "AES-KW", true, [usage]);
  throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
}
var wrap;
var unwrap;
var init_aeskw = __esm({
  "node_modules/jose/dist/browser/runtime/aeskw.js"() {
    init_bogus();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
    wrap = async (alg, key, cek) => {
      let cryptoKey = await getCryptoKey(key, alg, "wrapKey");
      checkKeySize(cryptoKey, alg);
      let cryptoKeyCek = await webcrypto_default.subtle.importKey("raw", cek, ...bogus_default);
      return new Uint8Array(await webcrypto_default.subtle.wrapKey("raw", cryptoKeyCek, cryptoKey, "AES-KW"));
    }, unwrap = async (alg, key, encryptedKey) => {
      let cryptoKey = await getCryptoKey(key, alg, "unwrapKey");
      checkKeySize(cryptoKey, alg);
      let cryptoKeyCek = await webcrypto_default.subtle.unwrapKey("raw", encryptedKey, cryptoKey, "AES-KW", ...bogus_default);
      return new Uint8Array(await webcrypto_default.subtle.exportKey("raw", cryptoKeyCek));
    };
  }
});
async function deriveKey(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
  if (!isCryptoKey(publicKey))
    throw new TypeError(invalid_key_input_default(publicKey, ...types));
  if (checkEncCryptoKey(publicKey, "ECDH"), !isCryptoKey(privateKey))
    throw new TypeError(invalid_key_input_default(privateKey, ...types));
  checkEncCryptoKey(privateKey, "ECDH", "deriveBits");
  let value = concat(lengthAndInput(encoder.encode(algorithm)), lengthAndInput(apu), lengthAndInput(apv), uint32be(keyLength)), length;
  publicKey.algorithm.name === "X25519" ? length = 256 : publicKey.algorithm.name === "X448" ? length = 448 : length = Math.ceil(parseInt(publicKey.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
  let sharedSecret = new Uint8Array(await webcrypto_default.subtle.deriveBits({
    name: publicKey.algorithm.name,
    public: publicKey
  }, privateKey, length));
  return concatKdf(sharedSecret, keyLength, value);
}
async function generateEpk(key) {
  if (!isCryptoKey(key))
    throw new TypeError(invalid_key_input_default(key, ...types));
  return webcrypto_default.subtle.generateKey(key.algorithm, true, ["deriveBits"]);
}
function ecdhAllowed(key) {
  if (!isCryptoKey(key))
    throw new TypeError(invalid_key_input_default(key, ...types));
  return ["P-256", "P-384", "P-521"].includes(key.algorithm.namedCurve) || key.algorithm.name === "X25519" || key.algorithm.name === "X448";
}
var init_ecdhes = __esm({
  "node_modules/jose/dist/browser/runtime/ecdhes.js"() {
    init_buffer_utils();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
  }
});
function checkP2s(p2s2) {
  if (!(p2s2 instanceof Uint8Array) || p2s2.length < 8)
    throw new JWEInvalid("PBES2 Salt Input must be 8 or more octets");
}
var init_check_p2s = __esm({
  "node_modules/jose/dist/browser/lib/check_p2s.js"() {
    init_errors4();
  }
});
function getCryptoKey2(key, alg) {
  if (key instanceof Uint8Array)
    return webcrypto_default.subtle.importKey("raw", key, "PBKDF2", false, ["deriveBits"]);
  if (isCryptoKey(key))
    return checkEncCryptoKey(key, alg, "deriveBits", "deriveKey"), key;
  throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
}
async function deriveKey2(p2s2, alg, p2c, key) {
  checkP2s(p2s2);
  let salt = p2s(alg, p2s2), keylen = parseInt(alg.slice(13, 16), 10), subtleAlg = {
    hash: `SHA-${alg.slice(8, 11)}`,
    iterations: p2c,
    name: "PBKDF2",
    salt
  }, wrapAlg = {
    length: keylen,
    name: "AES-KW"
  }, cryptoKey = await getCryptoKey2(key, alg);
  if (cryptoKey.usages.includes("deriveBits"))
    return new Uint8Array(await webcrypto_default.subtle.deriveBits(subtleAlg, cryptoKey, keylen));
  if (cryptoKey.usages.includes("deriveKey"))
    return webcrypto_default.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ["wrapKey", "unwrapKey"]);
  throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
}
var encrypt;
var decrypt2;
var init_pbes2kw = __esm({
  "node_modules/jose/dist/browser/runtime/pbes2kw.js"() {
    init_random();
    init_buffer_utils();
    init_base64url();
    init_aeskw();
    init_check_p2s();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
    encrypt = async (alg, key, cek, p2c = 2048, p2s2 = random_default(new Uint8Array(16))) => {
      let derived = await deriveKey2(p2s2, alg, p2c, key);
      return { encryptedKey: await wrap(alg.slice(-6), derived, cek), p2c, p2s: encode(p2s2) };
    }, decrypt2 = async (alg, key, encryptedKey, p2c, p2s2) => {
      let derived = await deriveKey2(p2s2, alg, p2c, key);
      return unwrap(alg.slice(-6), derived, encryptedKey);
    };
  }
});
function subtleRsaEs(alg) {
  switch (alg) {
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512":
      return "RSA-OAEP";
    default:
      throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}
var init_subtle_rsaes = __esm({
  "node_modules/jose/dist/browser/runtime/subtle_rsaes.js"() {
    init_errors4();
  }
});
var check_key_length_default;
var init_check_key_length = __esm({
  "node_modules/jose/dist/browser/runtime/check_key_length.js"() {
    check_key_length_default = (alg, key) => {
      if (alg.startsWith("RS") || alg.startsWith("PS")) {
        let { modulusLength } = key.algorithm;
        if (typeof modulusLength != "number" || modulusLength < 2048)
          throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
      }
    };
  }
});
var encrypt2;
var decrypt3;
var init_rsaes = __esm({
  "node_modules/jose/dist/browser/runtime/rsaes.js"() {
    init_subtle_rsaes();
    init_bogus();
    init_webcrypto();
    init_crypto_key();
    init_check_key_length();
    init_invalid_key_input();
    init_is_key_like();
    encrypt2 = async (alg, key, cek) => {
      if (!isCryptoKey(key))
        throw new TypeError(invalid_key_input_default(key, ...types));
      if (checkEncCryptoKey(key, alg, "encrypt", "wrapKey"), check_key_length_default(alg, key), key.usages.includes("encrypt"))
        return new Uint8Array(await webcrypto_default.subtle.encrypt(subtleRsaEs(alg), key, cek));
      if (key.usages.includes("wrapKey")) {
        let cryptoKeyCek = await webcrypto_default.subtle.importKey("raw", cek, ...bogus_default);
        return new Uint8Array(await webcrypto_default.subtle.wrapKey("raw", cryptoKeyCek, key, subtleRsaEs(alg)));
      }
      throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
    }, decrypt3 = async (alg, key, encryptedKey) => {
      if (!isCryptoKey(key))
        throw new TypeError(invalid_key_input_default(key, ...types));
      if (checkEncCryptoKey(key, alg, "decrypt", "unwrapKey"), check_key_length_default(alg, key), key.usages.includes("decrypt"))
        return new Uint8Array(await webcrypto_default.subtle.decrypt(subtleRsaEs(alg), key, encryptedKey));
      if (key.usages.includes("unwrapKey")) {
        let cryptoKeyCek = await webcrypto_default.subtle.unwrapKey("raw", encryptedKey, key, subtleRsaEs(alg), ...bogus_default);
        return new Uint8Array(await webcrypto_default.subtle.exportKey("raw", cryptoKeyCek));
      }
      throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
    };
  }
});
function bitLength2(alg) {
  switch (alg) {
    case "A128GCM":
      return 128;
    case "A192GCM":
      return 192;
    case "A256GCM":
    case "A128CBC-HS256":
      return 256;
    case "A192CBC-HS384":
      return 384;
    case "A256CBC-HS512":
      return 512;
    default:
      throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
  }
}
var cek_default;
var init_cek = __esm({
  "node_modules/jose/dist/browser/lib/cek.js"() {
    init_errors4();
    init_random();
    cek_default = (alg) => random_default(new Uint8Array(bitLength2(alg) >> 3));
  }
});
var format_pem_default;
var init_format_pem = __esm({
  "node_modules/jose/dist/browser/lib/format_pem.js"() {
    format_pem_default = (b64, descriptor) => {
      let newlined = (b64.match(/.{1,64}/g) || []).join(`
`);
      return `-----BEGIN ${descriptor}-----
${newlined}
-----END ${descriptor}-----`;
    };
  }
});
function getElement(seq) {
  let result = [], next = 0;
  for (; next < seq.length; ) {
    let nextPart = parseElement(seq.subarray(next));
    result.push(nextPart), next += nextPart.byteLength;
  }
  return result;
}
function parseElement(bytes) {
  let position = 0, tag = bytes[0] & 31;
  if (position++, tag === 31) {
    for (tag = 0; bytes[position] >= 128; )
      tag = tag * 128 + bytes[position] - 128, position++;
    tag = tag * 128 + bytes[position] - 128, position++;
  }
  let length = 0;
  if (bytes[position] < 128)
    length = bytes[position], position++;
  else if (length === 128) {
    for (length = 0; bytes[position + length] !== 0 || bytes[position + length + 1] !== 0; ) {
      if (length > bytes.byteLength)
        throw new TypeError("invalid indefinite form length");
      length++;
    }
    let byteLength2 = position + length + 2;
    return {
      byteLength: byteLength2,
      contents: bytes.subarray(position, position + length),
      raw: bytes.subarray(0, byteLength2)
    };
  } else {
    let numberOfDigits = bytes[position] & 127;
    position++, length = 0;
    for (let i = 0; i < numberOfDigits; i++)
      length = length * 256 + bytes[position], position++;
  }
  let byteLength = position + length;
  return {
    byteLength,
    contents: bytes.subarray(position, byteLength),
    raw: bytes.subarray(0, byteLength)
  };
}
function spkiFromX509(buf) {
  let tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);
  return encodeBase64(tbsCertificate[tbsCertificate[0].raw[0] === 160 ? 6 : 5].raw);
}
function getSPKI(x509) {
  let pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, ""), raw = decodeBase64(pem);
  return format_pem_default(spkiFromX509(raw), "PUBLIC KEY");
}
var genericExport;
var toSPKI;
var toPKCS8;
var findOid;
var getNamedCurve2;
var genericImport;
var fromPKCS8;
var fromSPKI;
var fromX509;
var init_asn1 = __esm({
  "node_modules/jose/dist/browser/runtime/asn1.js"() {
    init_webcrypto();
    init_invalid_key_input();
    init_base64url();
    init_format_pem();
    init_errors4();
    init_is_key_like();
    genericExport = async (keyType, keyFormat, key) => {
      if (!isCryptoKey(key))
        throw new TypeError(invalid_key_input_default(key, ...types));
      if (!key.extractable)
        throw new TypeError("CryptoKey is not extractable");
      if (key.type !== keyType)
        throw new TypeError(`key is not a ${keyType} key`);
      return format_pem_default(encodeBase64(new Uint8Array(await webcrypto_default.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);
    }, toSPKI = (key) => genericExport("public", "spki", key), toPKCS8 = (key) => genericExport("private", "pkcs8", key), findOid = (keyData, oid, from = 0) => {
      from === 0 && (oid.unshift(oid.length), oid.unshift(6));
      let i = keyData.indexOf(oid[0], from);
      if (i === -1)
        return false;
      let sub = keyData.subarray(i, i + oid.length);
      return sub.length !== oid.length ? false : sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);
    }, getNamedCurve2 = (keyData) => {
      switch (true) {
        case findOid(keyData, [42, 134, 72, 206, 61, 3, 1, 7]):
          return "P-256";
        case findOid(keyData, [43, 129, 4, 0, 34]):
          return "P-384";
        case findOid(keyData, [43, 129, 4, 0, 35]):
          return "P-521";
        case findOid(keyData, [43, 101, 110]):
          return "X25519";
        case findOid(keyData, [43, 101, 111]):
          return "X448";
        case findOid(keyData, [43, 101, 112]):
          return "Ed25519";
        case findOid(keyData, [43, 101, 113]):
          return "Ed448";
        default:
          throw new JOSENotSupported("Invalid or unsupported EC Key Curve or OKP Key Sub Type");
      }
    }, genericImport = async (replace, keyFormat, pem, alg, options) => {
      var _a;
      let algorithm, keyUsages, keyData = new Uint8Array(atob(pem.replace(replace, "")).split("").map((c) => c.charCodeAt(0))), isPublic = keyFormat === "spki";
      switch (alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          algorithm = { name: "RSA-PSS", hash: `SHA-${alg.slice(-3)}` }, keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "RS256":
        case "RS384":
        case "RS512":
          algorithm = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${alg.slice(-3)}` }, keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
          algorithm = {
            name: "RSA-OAEP",
            hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`
          }, keyUsages = isPublic ? ["encrypt", "wrapKey"] : ["decrypt", "unwrapKey"];
          break;
        case "ES256":
          algorithm = { name: "ECDSA", namedCurve: "P-256" }, keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "ES384":
          algorithm = { name: "ECDSA", namedCurve: "P-384" }, keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "ES512":
          algorithm = { name: "ECDSA", namedCurve: "P-521" }, keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW": {
          let namedCurve = getNamedCurve2(keyData);
          algorithm = namedCurve.startsWith("P-") ? { name: "ECDH", namedCurve } : { name: namedCurve }, keyUsages = isPublic ? [] : ["deriveBits"];
          break;
        }
        case "EdDSA":
          algorithm = { name: getNamedCurve2(keyData) }, keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported "alg" (Algorithm) value');
      }
      return webcrypto_default.subtle.importKey(keyFormat, keyData, algorithm, (_a = options?.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);
    }, fromPKCS8 = (pem, alg, options) => genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, "pkcs8", pem, alg, options), fromSPKI = (pem, alg, options) => genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, "spki", pem, alg, options);
    fromX509 = (pem, alg, options) => {
      let spki;
      try {
        spki = getSPKI(pem);
      } catch (cause) {
        throw new TypeError("Failed to parse the X.509 certificate", { cause });
      }
      return fromSPKI(spki, alg, options);
    };
  }
});
function subtleMapping(jwk) {
  let algorithm, keyUsages;
  switch (jwk.kty) {
    case "oct": {
      switch (jwk.alg) {
        case "HS256":
        case "HS384":
        case "HS512":
          algorithm = { name: "HMAC", hash: `SHA-${jwk.alg.slice(-3)}` }, keyUsages = ["sign", "verify"];
          break;
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
          throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
        case "A128GCMKW":
        case "A192GCMKW":
        case "A256GCMKW":
          algorithm = { name: "AES-GCM" }, keyUsages = ["encrypt", "decrypt"];
          break;
        case "A128KW":
        case "A192KW":
        case "A256KW":
          algorithm = { name: "AES-KW" }, keyUsages = ["wrapKey", "unwrapKey"];
          break;
        case "PBES2-HS256+A128KW":
        case "PBES2-HS384+A192KW":
        case "PBES2-HS512+A256KW":
          algorithm = { name: "PBKDF2" }, keyUsages = ["deriveBits"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "RSA": {
      switch (jwk.alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          algorithm = { name: "RSA-PSS", hash: `SHA-${jwk.alg.slice(-3)}` }, keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "RS256":
        case "RS384":
        case "RS512":
          algorithm = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${jwk.alg.slice(-3)}` }, keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
          algorithm = {
            name: "RSA-OAEP",
            hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
          }, keyUsages = jwk.d ? ["decrypt", "unwrapKey"] : ["encrypt", "wrapKey"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "EC": {
      switch (jwk.alg) {
        case "ES256":
          algorithm = { name: "ECDSA", namedCurve: "P-256" }, keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ES384":
          algorithm = { name: "ECDSA", namedCurve: "P-384" }, keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ES512":
          algorithm = { name: "ECDSA", namedCurve: "P-521" }, keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm = { name: "ECDH", namedCurve: jwk.crv }, keyUsages = jwk.d ? ["deriveBits"] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "OKP": {
      switch (jwk.alg) {
        case "EdDSA":
          algorithm = { name: jwk.crv }, keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm = { name: jwk.crv }, keyUsages = jwk.d ? ["deriveBits"] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
  }
  return { algorithm, keyUsages };
}
var parse2;
var jwk_to_key_default;
var init_jwk_to_key = __esm({
  "node_modules/jose/dist/browser/runtime/jwk_to_key.js"() {
    init_webcrypto();
    init_errors4();
    init_base64url();
    parse2 = async (jwk) => {
      var _a, _b;
      if (!jwk.alg)
        throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
      let { algorithm, keyUsages } = subtleMapping(jwk), rest = [
        algorithm,
        (_a = jwk.ext) !== null && _a !== void 0 ? _a : false,
        (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages
      ];
      if (algorithm.name === "PBKDF2")
        return webcrypto_default.subtle.importKey("raw", decode(jwk.k), ...rest);
      let keyData = { ...jwk };
      return delete keyData.alg, delete keyData.use, webcrypto_default.subtle.importKey("jwk", keyData, ...rest);
    }, jwk_to_key_default = parse2;
  }
});
async function importSPKI(spki, alg, options) {
  if (typeof spki != "string" || spki.indexOf("-----BEGIN PUBLIC KEY-----") !== 0)
    throw new TypeError('"spki" must be SPKI formatted string');
  return fromSPKI(spki, alg, options);
}
async function importX509(x509, alg, options) {
  if (typeof x509 != "string" || x509.indexOf("-----BEGIN CERTIFICATE-----") !== 0)
    throw new TypeError('"x509" must be X.509 formatted string');
  return fromX509(x509, alg, options);
}
async function importPKCS8(pkcs8, alg, options) {
  if (typeof pkcs8 != "string" || pkcs8.indexOf("-----BEGIN PRIVATE KEY-----") !== 0)
    throw new TypeError('"pkcs8" must be PKCS#8 formatted string');
  return fromPKCS8(pkcs8, alg, options);
}
async function importJWK(jwk, alg, octAsKeyObject) {
  var _a;
  if (!isObject(jwk))
    throw new TypeError("JWK must be an object");
  switch (alg || (alg = jwk.alg), jwk.kty) {
    case "oct":
      if (typeof jwk.k != "string" || !jwk.k)
        throw new TypeError('missing "k" (Key Value) Parameter value');
      return octAsKeyObject ?? (octAsKeyObject = jwk.ext !== true), octAsKeyObject ? jwk_to_key_default({ ...jwk, alg, ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false }) : decode(jwk.k);
    case "RSA":
      if (jwk.oth !== void 0)
        throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
    case "EC":
    case "OKP":
      return jwk_to_key_default({ ...jwk, alg });
    default:
      throw new JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
  }
}
var init_import = __esm({
  "node_modules/jose/dist/browser/key/import.js"() {
    init_base64url();
    init_asn1();
    init_jwk_to_key();
    init_errors4();
    init_is_object();
  }
});
var symmetricTypeCheck;
var asymmetricTypeCheck;
var checkKeyType;
var check_key_type_default;
var init_check_key_type = __esm({
  "node_modules/jose/dist/browser/lib/check_key_type.js"() {
    init_invalid_key_input();
    init_is_key_like();
    symmetricTypeCheck = (alg, key) => {
      if (!(key instanceof Uint8Array)) {
        if (!is_key_like_default(key))
          throw new TypeError(withAlg(alg, key, ...types, "Uint8Array"));
        if (key.type !== "secret")
          throw new TypeError(`${types.join(" or ")} instances for symmetric algorithms must be of type "secret"`);
      }
    }, asymmetricTypeCheck = (alg, key, usage) => {
      if (!is_key_like_default(key))
        throw new TypeError(withAlg(alg, key, ...types));
      if (key.type === "secret")
        throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithms must not be of type "secret"`);
      if (usage === "sign" && key.type === "public")
        throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm signing must be of type "private"`);
      if (usage === "decrypt" && key.type === "public")
        throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm decryption must be of type "private"`);
      if (key.algorithm && usage === "verify" && key.type === "private")
        throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm verifying must be of type "public"`);
      if (key.algorithm && usage === "encrypt" && key.type === "private")
        throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm encryption must be of type "public"`);
    }, checkKeyType = (alg, key, usage) => {
      alg.startsWith("HS") || alg === "dir" || alg.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(alg) ? symmetricTypeCheck(alg, key) : asymmetricTypeCheck(alg, key, usage);
    }, check_key_type_default = checkKeyType;
  }
});
async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
  if (!(cek instanceof Uint8Array))
    throw new TypeError(invalid_key_input_default(cek, "Uint8Array"));
  let keySize = parseInt(enc.slice(1, 4), 10), encKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(keySize >> 3), "AES-CBC", false, ["encrypt"]), macKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(0, keySize >> 3), {
    hash: `SHA-${keySize << 1}`,
    name: "HMAC"
  }, false, ["sign"]), ciphertext = new Uint8Array(await webcrypto_default.subtle.encrypt({
    iv,
    name: "AES-CBC"
  }, encKey, plaintext)), macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3)), tag = new Uint8Array((await webcrypto_default.subtle.sign("HMAC", macKey, macData)).slice(0, keySize >> 3));
  return { ciphertext, tag };
}
async function gcmEncrypt(enc, plaintext, cek, iv, aad) {
  let encKey;
  cek instanceof Uint8Array ? encKey = await webcrypto_default.subtle.importKey("raw", cek, "AES-GCM", false, ["encrypt"]) : (checkEncCryptoKey(cek, enc, "encrypt"), encKey = cek);
  let encrypted = new Uint8Array(await webcrypto_default.subtle.encrypt({
    additionalData: aad,
    iv,
    name: "AES-GCM",
    tagLength: 128
  }, encKey, plaintext)), tag = encrypted.slice(-16);
  return { ciphertext: encrypted.slice(0, -16), tag };
}
var encrypt3;
var encrypt_default;
var init_encrypt = __esm({
  "node_modules/jose/dist/browser/runtime/encrypt.js"() {
    init_buffer_utils();
    init_check_iv_length();
    init_check_cek_length();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_errors4();
    init_is_key_like();
    encrypt3 = async (enc, plaintext, cek, iv, aad) => {
      if (!isCryptoKey(cek) && !(cek instanceof Uint8Array))
        throw new TypeError(invalid_key_input_default(cek, ...types, "Uint8Array"));
      switch (check_iv_length_default(enc, iv), enc) {
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
          return cek instanceof Uint8Array && check_cek_length_default(cek, parseInt(enc.slice(-3), 10)), cbcEncrypt(enc, plaintext, cek, iv, aad);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
          return cek instanceof Uint8Array && check_cek_length_default(cek, parseInt(enc.slice(1, 4), 10)), gcmEncrypt(enc, plaintext, cek, iv, aad);
        default:
          throw new JOSENotSupported("Unsupported JWE Content Encryption Algorithm");
      }
    }, encrypt_default = encrypt3;
  }
});
async function wrap2(alg, key, cek, iv) {
  let jweAlgorithm = alg.slice(0, 7);
  iv || (iv = iv_default(jweAlgorithm));
  let { ciphertext: encryptedKey, tag } = await encrypt_default(jweAlgorithm, cek, key, iv, new Uint8Array(0));
  return { encryptedKey, iv: encode(iv), tag: encode(tag) };
}
async function unwrap2(alg, key, encryptedKey, iv, tag) {
  let jweAlgorithm = alg.slice(0, 7);
  return decrypt_default(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
}
var init_aesgcmkw = __esm({
  "node_modules/jose/dist/browser/lib/aesgcmkw.js"() {
    init_encrypt();
    init_decrypt();
    init_iv();
    init_base64url();
  }
});
async function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {
  switch (check_key_type_default(alg, key, "decrypt"), alg) {
    case "dir": {
      if (encryptedKey !== void 0)
        throw new JWEInvalid("Encountered unexpected JWE Encrypted Key");
      return key;
    }
    case "ECDH-ES":
      if (encryptedKey !== void 0)
        throw new JWEInvalid("Encountered unexpected JWE Encrypted Key");
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      if (!isObject(joseHeader.epk))
        throw new JWEInvalid('JOSE Header "epk" (Ephemeral Public Key) missing or invalid');
      if (!ecdhAllowed(key))
        throw new JOSENotSupported("ECDH with the provided key is not allowed or not supported by your javascript runtime");
      let epk = await importJWK(joseHeader.epk, alg), partyUInfo, partyVInfo;
      if (joseHeader.apu !== void 0) {
        if (typeof joseHeader.apu != "string")
          throw new JWEInvalid('JOSE Header "apu" (Agreement PartyUInfo) invalid');
        try {
          partyUInfo = decode(joseHeader.apu);
        } catch {
          throw new JWEInvalid("Failed to base64url decode the apu");
        }
      }
      if (joseHeader.apv !== void 0) {
        if (typeof joseHeader.apv != "string")
          throw new JWEInvalid('JOSE Header "apv" (Agreement PartyVInfo) invalid');
        try {
          partyVInfo = decode(joseHeader.apv);
        } catch {
          throw new JWEInvalid("Failed to base64url decode the apv");
        }
      }
      let sharedSecret = await deriveKey(epk, key, alg === "ECDH-ES" ? joseHeader.enc : alg, alg === "ECDH-ES" ? bitLength2(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
      if (alg === "ECDH-ES")
        return sharedSecret;
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      return unwrap(alg.slice(-6), sharedSecret, encryptedKey);
    }
    case "RSA1_5":
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      return decrypt3(alg, key, encryptedKey);
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW": {
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      if (typeof joseHeader.p2c != "number")
        throw new JWEInvalid('JOSE Header "p2c" (PBES2 Count) missing or invalid');
      let p2cLimit = options?.maxPBES2Count || 1e4;
      if (joseHeader.p2c > p2cLimit)
        throw new JWEInvalid('JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds');
      if (typeof joseHeader.p2s != "string")
        throw new JWEInvalid('JOSE Header "p2s" (PBES2 Salt) missing or invalid');
      let p2s2;
      try {
        p2s2 = decode(joseHeader.p2s);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the p2s");
      }
      return decrypt2(alg, key, encryptedKey, joseHeader.p2c, p2s2);
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      return unwrap(alg, key, encryptedKey);
    }
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW": {
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      if (typeof joseHeader.iv != "string")
        throw new JWEInvalid('JOSE Header "iv" (Initialization Vector) missing or invalid');
      if (typeof joseHeader.tag != "string")
        throw new JWEInvalid('JOSE Header "tag" (Authentication Tag) missing or invalid');
      let iv;
      try {
        iv = decode(joseHeader.iv);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the iv");
      }
      let tag;
      try {
        tag = decode(joseHeader.tag);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the tag");
      }
      return unwrap2(alg, key, encryptedKey, iv, tag);
    }
    default:
      throw new JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
  }
}
var decrypt_key_management_default;
var init_decrypt_key_management = __esm({
  "node_modules/jose/dist/browser/lib/decrypt_key_management.js"() {
    init_aeskw();
    init_ecdhes();
    init_pbes2kw();
    init_rsaes();
    init_base64url();
    init_errors4();
    init_cek();
    init_import();
    init_check_key_type();
    init_is_object();
    init_aesgcmkw();
    decrypt_key_management_default = decryptKeyManagement;
  }
});
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
  if (joseHeader.crit !== void 0 && protectedHeader.crit === void 0)
    throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
  if (!protectedHeader || protectedHeader.crit === void 0)
    return /* @__PURE__ */ new Set();
  if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input) => typeof input != "string" || input.length === 0))
    throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
  let recognized;
  recognizedOption !== void 0 ? recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]) : recognized = recognizedDefault;
  for (let parameter of protectedHeader.crit) {
    if (!recognized.has(parameter))
      throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
    if (joseHeader[parameter] === void 0)
      throw new Err(`Extension Header Parameter "${parameter}" is missing`);
    if (recognized.get(parameter) && protectedHeader[parameter] === void 0)
      throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
  }
  return new Set(protectedHeader.crit);
}
var validate_crit_default;
var init_validate_crit = __esm({
  "node_modules/jose/dist/browser/lib/validate_crit.js"() {
    init_errors4();
    validate_crit_default = validateCrit;
  }
});
var validateAlgorithms;
var validate_algorithms_default;
var init_validate_algorithms = __esm({
  "node_modules/jose/dist/browser/lib/validate_algorithms.js"() {
    validateAlgorithms = (option, algorithms) => {
      if (algorithms !== void 0 && (!Array.isArray(algorithms) || algorithms.some((s) => typeof s != "string")))
        throw new TypeError(`"${option}" option must be an array of strings`);
      if (algorithms)
        return new Set(algorithms);
    }, validate_algorithms_default = validateAlgorithms;
  }
});
async function flattenedDecrypt(jwe, key, options) {
  var _a;
  if (!isObject(jwe))
    throw new JWEInvalid("Flattened JWE must be an object");
  if (jwe.protected === void 0 && jwe.header === void 0 && jwe.unprotected === void 0)
    throw new JWEInvalid("JOSE Header missing");
  if (typeof jwe.iv != "string")
    throw new JWEInvalid("JWE Initialization Vector missing or incorrect type");
  if (typeof jwe.ciphertext != "string")
    throw new JWEInvalid("JWE Ciphertext missing or incorrect type");
  if (typeof jwe.tag != "string")
    throw new JWEInvalid("JWE Authentication Tag missing or incorrect type");
  if (jwe.protected !== void 0 && typeof jwe.protected != "string")
    throw new JWEInvalid("JWE Protected Header incorrect type");
  if (jwe.encrypted_key !== void 0 && typeof jwe.encrypted_key != "string")
    throw new JWEInvalid("JWE Encrypted Key incorrect type");
  if (jwe.aad !== void 0 && typeof jwe.aad != "string")
    throw new JWEInvalid("JWE AAD incorrect type");
  if (jwe.header !== void 0 && !isObject(jwe.header))
    throw new JWEInvalid("JWE Shared Unprotected Header incorrect type");
  if (jwe.unprotected !== void 0 && !isObject(jwe.unprotected))
    throw new JWEInvalid("JWE Per-Recipient Unprotected Header incorrect type");
  let parsedProt;
  if (jwe.protected)
    try {
      let protectedHeader2 = decode(jwe.protected);
      parsedProt = JSON.parse(decoder.decode(protectedHeader2));
    } catch {
      throw new JWEInvalid("JWE Protected Header is invalid");
    }
  if (!is_disjoint_default(parsedProt, jwe.header, jwe.unprotected))
    throw new JWEInvalid("JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint");
  let joseHeader = {
    ...parsedProt,
    ...jwe.header,
    ...jwe.unprotected
  };
  if (validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), options?.crit, parsedProt, joseHeader), joseHeader.zip !== void 0) {
    if (!parsedProt || !parsedProt.zip)
      throw new JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
    if (joseHeader.zip !== "DEF")
      throw new JOSENotSupported('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
  }
  let { alg, enc } = joseHeader;
  if (typeof alg != "string" || !alg)
    throw new JWEInvalid("missing JWE Algorithm (alg) in JWE Header");
  if (typeof enc != "string" || !enc)
    throw new JWEInvalid("missing JWE Encryption Algorithm (enc) in JWE Header");
  let keyManagementAlgorithms = options && validate_algorithms_default("keyManagementAlgorithms", options.keyManagementAlgorithms), contentEncryptionAlgorithms = options && validate_algorithms_default("contentEncryptionAlgorithms", options.contentEncryptionAlgorithms);
  if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg))
    throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
  if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc))
    throw new JOSEAlgNotAllowed('"enc" (Encryption Algorithm) Header Parameter not allowed');
  let encryptedKey;
  if (jwe.encrypted_key !== void 0)
    try {
      encryptedKey = decode(jwe.encrypted_key);
    } catch {
      throw new JWEInvalid("Failed to base64url decode the encrypted_key");
    }
  let resolvedKey = false;
  typeof key == "function" && (key = await key(parsedProt, jwe), resolvedKey = true);
  let cek;
  try {
    cek = await decrypt_key_management_default(alg, key, encryptedKey, joseHeader, options);
  } catch (err) {
    if (err instanceof TypeError || err instanceof JWEInvalid || err instanceof JOSENotSupported)
      throw err;
    cek = cek_default(enc);
  }
  let iv, tag;
  try {
    iv = decode(jwe.iv);
  } catch {
    throw new JWEInvalid("Failed to base64url decode the iv");
  }
  try {
    tag = decode(jwe.tag);
  } catch {
    throw new JWEInvalid("Failed to base64url decode the tag");
  }
  let protectedHeader = encoder.encode((_a = jwe.protected) !== null && _a !== void 0 ? _a : ""), additionalData;
  jwe.aad !== void 0 ? additionalData = concat(protectedHeader, encoder.encode("."), encoder.encode(jwe.aad)) : additionalData = protectedHeader;
  let ciphertext;
  try {
    ciphertext = decode(jwe.ciphertext);
  } catch {
    throw new JWEInvalid("Failed to base64url decode the ciphertext");
  }
  let plaintext = await decrypt_default(enc, cek, ciphertext, iv, tag, additionalData);
  joseHeader.zip === "DEF" && (plaintext = await (options?.inflateRaw || inflate)(plaintext));
  let result = { plaintext };
  if (jwe.protected !== void 0 && (result.protectedHeader = parsedProt), jwe.aad !== void 0)
    try {
      result.additionalAuthenticatedData = decode(jwe.aad);
    } catch {
      throw new JWEInvalid("Failed to base64url decode the aad");
    }
  return jwe.unprotected !== void 0 && (result.sharedUnprotectedHeader = jwe.unprotected), jwe.header !== void 0 && (result.unprotectedHeader = jwe.header), resolvedKey ? { ...result, key } : result;
}
var init_decrypt2 = __esm({
  "node_modules/jose/dist/browser/jwe/flattened/decrypt.js"() {
    init_base64url();
    init_decrypt();
    init_zlib();
    init_errors4();
    init_is_disjoint();
    init_is_object();
    init_decrypt_key_management();
    init_buffer_utils();
    init_cek();
    init_validate_crit();
    init_validate_algorithms();
  }
});
async function compactDecrypt(jwe, key, options) {
  if (jwe instanceof Uint8Array && (jwe = decoder.decode(jwe)), typeof jwe != "string")
    throw new JWEInvalid("Compact JWE must be a string or Uint8Array");
  let { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag, length } = jwe.split(".");
  if (length !== 5)
    throw new JWEInvalid("Invalid Compact JWE");
  let decrypted = await flattenedDecrypt({
    ciphertext,
    iv: iv || void 0,
    protected: protectedHeader || void 0,
    tag: tag || void 0,
    encrypted_key: encryptedKey || void 0
  }, key, options), result = { plaintext: decrypted.plaintext, protectedHeader: decrypted.protectedHeader };
  return typeof key == "function" ? { ...result, key: decrypted.key } : result;
}
var init_decrypt3 = __esm({
  "node_modules/jose/dist/browser/jwe/compact/decrypt.js"() {
    init_decrypt2();
    init_errors4();
    init_buffer_utils();
  }
});
async function generalDecrypt(jwe, key, options) {
  if (!isObject(jwe))
    throw new JWEInvalid("General JWE must be an object");
  if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(isObject))
    throw new JWEInvalid("JWE Recipients missing or incorrect type");
  if (!jwe.recipients.length)
    throw new JWEInvalid("JWE Recipients has no members");
  for (let recipient of jwe.recipients)
    try {
      return await flattenedDecrypt({
        aad: jwe.aad,
        ciphertext: jwe.ciphertext,
        encrypted_key: recipient.encrypted_key,
        header: recipient.header,
        iv: jwe.iv,
        protected: jwe.protected,
        tag: jwe.tag,
        unprotected: jwe.unprotected
      }, key, options);
    } catch {
    }
  throw new JWEDecryptionFailed();
}
var init_decrypt4 = __esm({
  "node_modules/jose/dist/browser/jwe/general/decrypt.js"() {
    init_decrypt2();
    init_errors4();
    init_is_object();
  }
});
var keyToJWK;
var key_to_jwk_default;
var init_key_to_jwk = __esm({
  "node_modules/jose/dist/browser/runtime/key_to_jwk.js"() {
    init_webcrypto();
    init_invalid_key_input();
    init_base64url();
    init_is_key_like();
    keyToJWK = async (key) => {
      if (key instanceof Uint8Array)
        return {
          kty: "oct",
          k: encode(key)
        };
      if (!isCryptoKey(key))
        throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
      if (!key.extractable)
        throw new TypeError("non-extractable CryptoKey cannot be exported as a JWK");
      let { ext, key_ops, alg, use, ...jwk } = await webcrypto_default.subtle.exportKey("jwk", key);
      return jwk;
    }, key_to_jwk_default = keyToJWK;
  }
});
async function exportSPKI(key) {
  return toSPKI(key);
}
async function exportPKCS8(key) {
  return toPKCS8(key);
}
async function exportJWK(key) {
  return key_to_jwk_default(key);
}
var init_export = __esm({
  "node_modules/jose/dist/browser/key/export.js"() {
    init_asn1();
    init_asn1();
    init_key_to_jwk();
  }
});
async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
  let encryptedKey, parameters, cek;
  switch (check_key_type_default(alg, key, "encrypt"), alg) {
    case "dir": {
      cek = key;
      break;
    }
    case "ECDH-ES":
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      if (!ecdhAllowed(key))
        throw new JOSENotSupported("ECDH with the provided key is not allowed or not supported by your javascript runtime");
      let { apu, apv } = providedParameters, { epk: ephemeralKey } = providedParameters;
      ephemeralKey || (ephemeralKey = (await generateEpk(key)).privateKey);
      let { x, y, crv, kty } = await exportJWK(ephemeralKey), sharedSecret = await deriveKey(key, ephemeralKey, alg === "ECDH-ES" ? enc : alg, alg === "ECDH-ES" ? bitLength2(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
      if (parameters = { epk: { x, crv, kty } }, kty === "EC" && (parameters.epk.y = y), apu && (parameters.apu = encode(apu)), apv && (parameters.apv = encode(apv)), alg === "ECDH-ES") {
        cek = sharedSecret;
        break;
      }
      cek = providedCek || cek_default(enc);
      let kwAlg = alg.slice(-6);
      encryptedKey = await wrap(kwAlg, sharedSecret, cek);
      break;
    }
    case "RSA1_5":
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      cek = providedCek || cek_default(enc), encryptedKey = await encrypt2(alg, key, cek);
      break;
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW": {
      cek = providedCek || cek_default(enc);
      let { p2c, p2s: p2s2 } = providedParameters;
      ({ encryptedKey, ...parameters } = await encrypt(alg, key, cek, p2c, p2s2));
      break;
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      cek = providedCek || cek_default(enc), encryptedKey = await wrap(alg, key, cek);
      break;
    }
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW": {
      cek = providedCek || cek_default(enc);
      let { iv } = providedParameters;
      ({ encryptedKey, ...parameters } = await wrap2(alg, key, cek, iv));
      break;
    }
    default:
      throw new JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
  }
  return { cek, encryptedKey, parameters };
}
var encrypt_key_management_default;
var init_encrypt_key_management = __esm({
  "node_modules/jose/dist/browser/lib/encrypt_key_management.js"() {
    init_aeskw();
    init_ecdhes();
    init_pbes2kw();
    init_rsaes();
    init_base64url();
    init_cek();
    init_errors4();
    init_export();
    init_check_key_type();
    init_aesgcmkw();
    encrypt_key_management_default = encryptKeyManagement;
  }
});
var unprotected;
var FlattenedEncrypt;
var init_encrypt2 = __esm({
  "node_modules/jose/dist/browser/jwe/flattened/encrypt.js"() {
    init_base64url();
    init_encrypt();
    init_zlib();
    init_iv();
    init_encrypt_key_management();
    init_errors4();
    init_is_disjoint();
    init_buffer_utils();
    init_validate_crit();
    unprotected = Symbol(), FlattenedEncrypt = class {
      constructor(plaintext) {
        if (!(plaintext instanceof Uint8Array))
          throw new TypeError("plaintext must be an instance of Uint8Array");
        this._plaintext = plaintext;
      }
      setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters)
          throw new TypeError("setKeyManagementParameters can only be called once");
        return this._keyManagementParameters = parameters, this;
      }
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader)
          throw new TypeError("setProtectedHeader can only be called once");
        return this._protectedHeader = protectedHeader, this;
      }
      setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._sharedUnprotectedHeader)
          throw new TypeError("setSharedUnprotectedHeader can only be called once");
        return this._sharedUnprotectedHeader = sharedUnprotectedHeader, this;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader)
          throw new TypeError("setUnprotectedHeader can only be called once");
        return this._unprotectedHeader = unprotectedHeader, this;
      }
      setAdditionalAuthenticatedData(aad) {
        return this._aad = aad, this;
      }
      setContentEncryptionKey(cek) {
        if (this._cek)
          throw new TypeError("setContentEncryptionKey can only be called once");
        return this._cek = cek, this;
      }
      setInitializationVector(iv) {
        if (this._iv)
          throw new TypeError("setInitializationVector can only be called once");
        return this._iv = iv, this;
      }
      async encrypt(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader)
          throw new JWEInvalid("either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()");
        if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader))
          throw new JWEInvalid("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
        let joseHeader = {
          ...this._protectedHeader,
          ...this._unprotectedHeader,
          ...this._sharedUnprotectedHeader
        };
        if (validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), options?.crit, this._protectedHeader, joseHeader), joseHeader.zip !== void 0) {
          if (!this._protectedHeader || !this._protectedHeader.zip)
            throw new JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
          if (joseHeader.zip !== "DEF")
            throw new JOSENotSupported('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
        }
        let { alg, enc } = joseHeader;
        if (typeof alg != "string" || !alg)
          throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
        if (typeof enc != "string" || !enc)
          throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
        let encryptedKey;
        if (alg === "dir") {
          if (this._cek)
            throw new TypeError("setContentEncryptionKey cannot be called when using Direct Encryption");
        } else if (alg === "ECDH-ES" && this._cek)
          throw new TypeError("setContentEncryptionKey cannot be called when using Direct Key Agreement");
        let cek;
        {
          let parameters;
          ({ cek, encryptedKey, parameters } = await encrypt_key_management_default(alg, enc, key, this._cek, this._keyManagementParameters)), parameters && (options && unprotected in options ? this._unprotectedHeader ? this._unprotectedHeader = { ...this._unprotectedHeader, ...parameters } : this.setUnprotectedHeader(parameters) : this._protectedHeader ? this._protectedHeader = { ...this._protectedHeader, ...parameters } : this.setProtectedHeader(parameters));
        }
        this._iv || (this._iv = iv_default(enc));
        let additionalData, protectedHeader, aadMember;
        this._protectedHeader ? protectedHeader = encoder.encode(encode(JSON.stringify(this._protectedHeader))) : protectedHeader = encoder.encode(""), this._aad ? (aadMember = encode(this._aad), additionalData = concat(protectedHeader, encoder.encode("."), encoder.encode(aadMember))) : additionalData = protectedHeader;
        let ciphertext, tag;
        if (joseHeader.zip === "DEF") {
          let deflated = await (options?.deflateRaw || deflate)(this._plaintext);
          ({ ciphertext, tag } = await encrypt_default(enc, deflated, cek, this._iv, additionalData));
        } else
          ({ ciphertext, tag } = await encrypt_default(enc, this._plaintext, cek, this._iv, additionalData));
        let jwe = {
          ciphertext: encode(ciphertext),
          iv: encode(this._iv),
          tag: encode(tag)
        };
        return encryptedKey && (jwe.encrypted_key = encode(encryptedKey)), aadMember && (jwe.aad = aadMember), this._protectedHeader && (jwe.protected = decoder.decode(protectedHeader)), this._sharedUnprotectedHeader && (jwe.unprotected = this._sharedUnprotectedHeader), this._unprotectedHeader && (jwe.header = this._unprotectedHeader), jwe;
      }
    };
  }
});
var IndividualRecipient;
var GeneralEncrypt;
var init_encrypt3 = __esm({
  "node_modules/jose/dist/browser/jwe/general/encrypt.js"() {
    init_encrypt2();
    init_errors4();
    init_cek();
    init_is_disjoint();
    init_encrypt_key_management();
    init_base64url();
    init_validate_crit();
    IndividualRecipient = class {
      constructor(enc, key, options) {
        this.parent = enc, this.key = key, this.options = options;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader)
          throw new TypeError("setUnprotectedHeader can only be called once");
        return this.unprotectedHeader = unprotectedHeader, this;
      }
      addRecipient(...args) {
        return this.parent.addRecipient(...args);
      }
      encrypt(...args) {
        return this.parent.encrypt(...args);
      }
      done() {
        return this.parent;
      }
    }, GeneralEncrypt = class {
      constructor(plaintext) {
        this._recipients = [], this._plaintext = plaintext;
      }
      addRecipient(key, options) {
        let recipient = new IndividualRecipient(this, key, { crit: options?.crit });
        return this._recipients.push(recipient), recipient;
      }
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader)
          throw new TypeError("setProtectedHeader can only be called once");
        return this._protectedHeader = protectedHeader, this;
      }
      setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._unprotectedHeader)
          throw new TypeError("setSharedUnprotectedHeader can only be called once");
        return this._unprotectedHeader = sharedUnprotectedHeader, this;
      }
      setAdditionalAuthenticatedData(aad) {
        return this._aad = aad, this;
      }
      async encrypt(options) {
        var _a, _b, _c;
        if (!this._recipients.length)
          throw new JWEInvalid("at least one recipient must be added");
        if (options = { deflateRaw: options?.deflateRaw }, this._recipients.length === 1) {
          let [recipient] = this._recipients, flattened = await new FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).encrypt(recipient.key, { ...recipient.options, ...options }), jwe2 = {
            ciphertext: flattened.ciphertext,
            iv: flattened.iv,
            recipients: [{}],
            tag: flattened.tag
          };
          return flattened.aad && (jwe2.aad = flattened.aad), flattened.protected && (jwe2.protected = flattened.protected), flattened.unprotected && (jwe2.unprotected = flattened.unprotected), flattened.encrypted_key && (jwe2.recipients[0].encrypted_key = flattened.encrypted_key), flattened.header && (jwe2.recipients[0].header = flattened.header), jwe2;
        }
        let enc;
        for (let i = 0; i < this._recipients.length; i++) {
          let recipient = this._recipients[i];
          if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader))
            throw new JWEInvalid("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
          let joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...recipient.unprotectedHeader
          }, { alg } = joseHeader;
          if (typeof alg != "string" || !alg)
            throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
          if (alg === "dir" || alg === "ECDH-ES")
            throw new JWEInvalid('"dir" and "ECDH-ES" alg may only be used with a single recipient');
          if (typeof joseHeader.enc != "string" || !joseHeader.enc)
            throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
          if (!enc)
            enc = joseHeader.enc;
          else if (enc !== joseHeader.enc)
            throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
          if (validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), recipient.options.crit, this._protectedHeader, joseHeader), joseHeader.zip !== void 0 && (!this._protectedHeader || !this._protectedHeader.zip))
            throw new JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
        }
        let cek = cek_default(enc), jwe = {
          ciphertext: "",
          iv: "",
          recipients: [],
          tag: ""
        };
        for (let i = 0; i < this._recipients.length; i++) {
          let recipient = this._recipients[i], target = {};
          jwe.recipients.push(target);
          let p2c = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...recipient.unprotectedHeader
          }.alg.startsWith("PBES2") ? 2048 + i : void 0;
          if (i === 0) {
            let flattened = await new FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(cek).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).setKeyManagementParameters({ p2c }).encrypt(recipient.key, {
              ...recipient.options,
              ...options,
              [unprotected]: true
            });
            jwe.ciphertext = flattened.ciphertext, jwe.iv = flattened.iv, jwe.tag = flattened.tag, flattened.aad && (jwe.aad = flattened.aad), flattened.protected && (jwe.protected = flattened.protected), flattened.unprotected && (jwe.unprotected = flattened.unprotected), target.encrypted_key = flattened.encrypted_key, flattened.header && (target.header = flattened.header);
            continue;
          }
          let { encryptedKey, parameters } = await encrypt_key_management_default(((_a = recipient.unprotectedHeader) === null || _a === void 0 ? void 0 : _a.alg) || ((_b = this._protectedHeader) === null || _b === void 0 ? void 0 : _b.alg) || ((_c = this._unprotectedHeader) === null || _c === void 0 ? void 0 : _c.alg), enc, recipient.key, cek, { p2c });
          target.encrypted_key = encode(encryptedKey), (recipient.unprotectedHeader || parameters) && (target.header = { ...recipient.unprotectedHeader, ...parameters });
        }
        return jwe;
      }
    };
  }
});
function subtleDsa(alg, algorithm) {
  let hash = `SHA-${alg.slice(-3)}`;
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512":
      return { hash, name: "HMAC" };
    case "PS256":
    case "PS384":
    case "PS512":
      return { hash, name: "RSA-PSS", saltLength: alg.slice(-3) >> 3 };
    case "RS256":
    case "RS384":
    case "RS512":
      return { hash, name: "RSASSA-PKCS1-v1_5" };
    case "ES256":
    case "ES384":
    case "ES512":
      return { hash, name: "ECDSA", namedCurve: algorithm.namedCurve };
    case "EdDSA":
      return { name: algorithm.name };
    default:
      throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}
var init_subtle_dsa = __esm({
  "node_modules/jose/dist/browser/runtime/subtle_dsa.js"() {
    init_errors4();
  }
});
function getCryptoKey3(alg, key, usage) {
  if (isCryptoKey(key))
    return checkSigCryptoKey(key, alg, usage), key;
  if (key instanceof Uint8Array) {
    if (!alg.startsWith("HS"))
      throw new TypeError(invalid_key_input_default(key, ...types));
    return webcrypto_default.subtle.importKey("raw", key, { hash: `SHA-${alg.slice(-3)}`, name: "HMAC" }, false, [usage]);
  }
  throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
}
var init_get_sign_verify_key = __esm({
  "node_modules/jose/dist/browser/runtime/get_sign_verify_key.js"() {
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
  }
});
var verify;
var verify_default;
var init_verify = __esm({
  "node_modules/jose/dist/browser/runtime/verify.js"() {
    init_subtle_dsa();
    init_webcrypto();
    init_check_key_length();
    init_get_sign_verify_key();
    verify = async (alg, key, signature, data) => {
      let cryptoKey = await getCryptoKey3(alg, key, "verify");
      check_key_length_default(alg, cryptoKey);
      let algorithm = subtleDsa(alg, cryptoKey.algorithm);
      try {
        return await webcrypto_default.subtle.verify(algorithm, cryptoKey, signature, data);
      } catch {
        return false;
      }
    }, verify_default = verify;
  }
});
async function flattenedVerify(jws, key, options) {
  var _a;
  if (!isObject(jws))
    throw new JWSInvalid("Flattened JWS must be an object");
  if (jws.protected === void 0 && jws.header === void 0)
    throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
  if (jws.protected !== void 0 && typeof jws.protected != "string")
    throw new JWSInvalid("JWS Protected Header incorrect type");
  if (jws.payload === void 0)
    throw new JWSInvalid("JWS Payload missing");
  if (typeof jws.signature != "string")
    throw new JWSInvalid("JWS Signature missing or incorrect type");
  if (jws.header !== void 0 && !isObject(jws.header))
    throw new JWSInvalid("JWS Unprotected Header incorrect type");
  let parsedProt = {};
  if (jws.protected)
    try {
      let protectedHeader = decode(jws.protected);
      parsedProt = JSON.parse(decoder.decode(protectedHeader));
    } catch {
      throw new JWSInvalid("JWS Protected Header is invalid");
    }
  if (!is_disjoint_default(parsedProt, jws.header))
    throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
  let joseHeader = {
    ...parsedProt,
    ...jws.header
  }, extensions = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([["b64", true]]), options?.crit, parsedProt, joseHeader), b64 = true;
  if (extensions.has("b64") && (b64 = parsedProt.b64, typeof b64 != "boolean"))
    throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
  let { alg } = joseHeader;
  if (typeof alg != "string" || !alg)
    throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
  let algorithms = options && validate_algorithms_default("algorithms", options.algorithms);
  if (algorithms && !algorithms.has(alg))
    throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
  if (b64) {
    if (typeof jws.payload != "string")
      throw new JWSInvalid("JWS Payload must be a string");
  } else if (typeof jws.payload != "string" && !(jws.payload instanceof Uint8Array))
    throw new JWSInvalid("JWS Payload must be a string or an Uint8Array instance");
  let resolvedKey = false;
  typeof key == "function" && (key = await key(parsedProt, jws), resolvedKey = true), check_key_type_default(alg, key, "verify");
  let data = concat(encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ""), encoder.encode("."), typeof jws.payload == "string" ? encoder.encode(jws.payload) : jws.payload), signature;
  try {
    signature = decode(jws.signature);
  } catch {
    throw new JWSInvalid("Failed to base64url decode the signature");
  }
  if (!await verify_default(alg, key, signature, data))
    throw new JWSSignatureVerificationFailed();
  let payload;
  if (b64)
    try {
      payload = decode(jws.payload);
    } catch {
      throw new JWSInvalid("Failed to base64url decode the payload");
    }
  else
    typeof jws.payload == "string" ? payload = encoder.encode(jws.payload) : payload = jws.payload;
  let result = { payload };
  return jws.protected !== void 0 && (result.protectedHeader = parsedProt), jws.header !== void 0 && (result.unprotectedHeader = jws.header), resolvedKey ? { ...result, key } : result;
}
var init_verify2 = __esm({
  "node_modules/jose/dist/browser/jws/flattened/verify.js"() {
    init_base64url();
    init_verify();
    init_errors4();
    init_buffer_utils();
    init_is_disjoint();
    init_is_object();
    init_check_key_type();
    init_validate_crit();
    init_validate_algorithms();
  }
});
async function compactVerify(jws, key, options) {
  if (jws instanceof Uint8Array && (jws = decoder.decode(jws)), typeof jws != "string")
    throw new JWSInvalid("Compact JWS must be a string or Uint8Array");
  let { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split(".");
  if (length !== 3)
    throw new JWSInvalid("Invalid Compact JWS");
  let verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options), result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
  return typeof key == "function" ? { ...result, key: verified.key } : result;
}
var init_verify3 = __esm({
  "node_modules/jose/dist/browser/jws/compact/verify.js"() {
    init_verify2();
    init_errors4();
    init_buffer_utils();
  }
});
async function generalVerify(jws, key, options) {
  if (!isObject(jws))
    throw new JWSInvalid("General JWS must be an object");
  if (!Array.isArray(jws.signatures) || !jws.signatures.every(isObject))
    throw new JWSInvalid("JWS Signatures missing or incorrect type");
  for (let signature of jws.signatures)
    try {
      return await flattenedVerify({
        header: signature.header,
        payload: jws.payload,
        protected: signature.protected,
        signature: signature.signature
      }, key, options);
    } catch {
    }
  throw new JWSSignatureVerificationFailed();
}
var init_verify4 = __esm({
  "node_modules/jose/dist/browser/jws/general/verify.js"() {
    init_verify2();
    init_errors4();
    init_is_object();
  }
});
var epoch_default;
var init_epoch = __esm({
  "node_modules/jose/dist/browser/lib/epoch.js"() {
    epoch_default = (date) => Math.floor(date.getTime() / 1e3);
  }
});
var REGEX;
var secs_default;
var init_secs = __esm({
  "node_modules/jose/dist/browser/lib/secs.js"() {
    REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i, secs_default = (str) => {
      let matched = REGEX.exec(str);
      if (!matched)
        throw new TypeError("Invalid time period format");
      let value = parseFloat(matched[1]);
      switch (matched[2].toLowerCase()) {
        case "sec":
        case "secs":
        case "second":
        case "seconds":
        case "s":
          return Math.round(value);
        case "minute":
        case "minutes":
        case "min":
        case "mins":
        case "m":
          return Math.round(value * 60);
        case "hour":
        case "hours":
        case "hr":
        case "hrs":
        case "h":
          return Math.round(value * 3600);
        case "day":
        case "days":
        case "d":
          return Math.round(value * 86400);
        case "week":
        case "weeks":
        case "w":
          return Math.round(value * 604800);
        default:
          return Math.round(value * 31557600);
      }
    };
  }
});
var normalizeTyp;
var checkAudiencePresence;
var jwt_claims_set_default;
var init_jwt_claims_set = __esm({
  "node_modules/jose/dist/browser/lib/jwt_claims_set.js"() {
    init_errors4();
    init_buffer_utils();
    init_epoch();
    init_secs();
    init_is_object();
    normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, ""), checkAudiencePresence = (audPayload, audOption) => typeof audPayload == "string" ? audOption.includes(audPayload) : Array.isArray(audPayload) ? audOption.some(Set.prototype.has.bind(new Set(audPayload))) : false, jwt_claims_set_default = (protectedHeader, encodedPayload, options = {}) => {
      let { typ } = options;
      if (typ && (typeof protectedHeader.typ != "string" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ)))
        throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', "typ", "check_failed");
      let payload;
      try {
        payload = JSON.parse(decoder.decode(encodedPayload));
      } catch {
      }
      if (!isObject(payload))
        throw new JWTInvalid("JWT Claims Set must be a top-level JSON object");
      let { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;
      maxTokenAge !== void 0 && requiredClaims.push("iat"), audience !== void 0 && requiredClaims.push("aud"), subject !== void 0 && requiredClaims.push("sub"), issuer !== void 0 && requiredClaims.push("iss");
      for (let claim of new Set(requiredClaims.reverse()))
        if (!(claim in payload))
          throw new JWTClaimValidationFailed(`missing required "${claim}" claim`, claim, "missing");
      if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss))
        throw new JWTClaimValidationFailed('unexpected "iss" claim value', "iss", "check_failed");
      if (subject && payload.sub !== subject)
        throw new JWTClaimValidationFailed('unexpected "sub" claim value', "sub", "check_failed");
      if (audience && !checkAudiencePresence(payload.aud, typeof audience == "string" ? [audience] : audience))
        throw new JWTClaimValidationFailed('unexpected "aud" claim value', "aud", "check_failed");
      let tolerance;
      switch (typeof options.clockTolerance) {
        case "string":
          tolerance = secs_default(options.clockTolerance);
          break;
        case "number":
          tolerance = options.clockTolerance;
          break;
        case "undefined":
          tolerance = 0;
          break;
        default:
          throw new TypeError("Invalid clockTolerance option type");
      }
      let { currentDate } = options, now = epoch_default(currentDate || /* @__PURE__ */ new Date());
      if ((payload.iat !== void 0 || maxTokenAge) && typeof payload.iat != "number")
        throw new JWTClaimValidationFailed('"iat" claim must be a number', "iat", "invalid");
      if (payload.nbf !== void 0) {
        if (typeof payload.nbf != "number")
          throw new JWTClaimValidationFailed('"nbf" claim must be a number', "nbf", "invalid");
        if (payload.nbf > now + tolerance)
          throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', "nbf", "check_failed");
      }
      if (payload.exp !== void 0) {
        if (typeof payload.exp != "number")
          throw new JWTClaimValidationFailed('"exp" claim must be a number', "exp", "invalid");
        if (payload.exp <= now - tolerance)
          throw new JWTExpired('"exp" claim timestamp check failed', "exp", "check_failed");
      }
      if (maxTokenAge) {
        let age = now - payload.iat, max = typeof maxTokenAge == "number" ? maxTokenAge : secs_default(maxTokenAge);
        if (age - tolerance > max)
          throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', "iat", "check_failed");
        if (age < 0 - tolerance)
          throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', "iat", "check_failed");
      }
      return payload;
    };
  }
});
async function jwtVerify(jwt, key, options) {
  var _a;
  let verified = await compactVerify(jwt, key, options);
  if (!((_a = verified.protectedHeader.crit) === null || _a === void 0) && _a.includes("b64") && verified.protectedHeader.b64 === false)
    throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
  let result = { payload: jwt_claims_set_default(verified.protectedHeader, verified.payload, options), protectedHeader: verified.protectedHeader };
  return typeof key == "function" ? { ...result, key: verified.key } : result;
}
var init_verify5 = __esm({
  "node_modules/jose/dist/browser/jwt/verify.js"() {
    init_verify3();
    init_jwt_claims_set();
    init_errors4();
  }
});
async function jwtDecrypt(jwt, key, options) {
  let decrypted = await compactDecrypt(jwt, key, options), payload = jwt_claims_set_default(decrypted.protectedHeader, decrypted.plaintext, options), { protectedHeader } = decrypted;
  if (protectedHeader.iss !== void 0 && protectedHeader.iss !== payload.iss)
    throw new JWTClaimValidationFailed('replicated "iss" claim header parameter mismatch', "iss", "mismatch");
  if (protectedHeader.sub !== void 0 && protectedHeader.sub !== payload.sub)
    throw new JWTClaimValidationFailed('replicated "sub" claim header parameter mismatch', "sub", "mismatch");
  if (protectedHeader.aud !== void 0 && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud))
    throw new JWTClaimValidationFailed('replicated "aud" claim header parameter mismatch', "aud", "mismatch");
  let result = { payload, protectedHeader };
  return typeof key == "function" ? { ...result, key: decrypted.key } : result;
}
var init_decrypt5 = __esm({
  "node_modules/jose/dist/browser/jwt/decrypt.js"() {
    init_decrypt3();
    init_jwt_claims_set();
    init_errors4();
  }
});
var CompactEncrypt;
var init_encrypt4 = __esm({
  "node_modules/jose/dist/browser/jwe/compact/encrypt.js"() {
    init_encrypt2();
    CompactEncrypt = class {
      constructor(plaintext) {
        this._flattened = new FlattenedEncrypt(plaintext);
      }
      setContentEncryptionKey(cek) {
        return this._flattened.setContentEncryptionKey(cek), this;
      }
      setInitializationVector(iv) {
        return this._flattened.setInitializationVector(iv), this;
      }
      setProtectedHeader(protectedHeader) {
        return this._flattened.setProtectedHeader(protectedHeader), this;
      }
      setKeyManagementParameters(parameters) {
        return this._flattened.setKeyManagementParameters(parameters), this;
      }
      async encrypt(key, options) {
        let jwe = await this._flattened.encrypt(key, options);
        return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join(".");
      }
    };
  }
});
var sign;
var sign_default;
var init_sign = __esm({
  "node_modules/jose/dist/browser/runtime/sign.js"() {
    init_subtle_dsa();
    init_webcrypto();
    init_check_key_length();
    init_get_sign_verify_key();
    sign = async (alg, key, data) => {
      let cryptoKey = await getCryptoKey3(alg, key, "sign");
      check_key_length_default(alg, cryptoKey);
      let signature = await webcrypto_default.subtle.sign(subtleDsa(alg, cryptoKey.algorithm), cryptoKey, data);
      return new Uint8Array(signature);
    }, sign_default = sign;
  }
});
var FlattenedSign;
var init_sign2 = __esm({
  "node_modules/jose/dist/browser/jws/flattened/sign.js"() {
    init_base64url();
    init_sign();
    init_is_disjoint();
    init_errors4();
    init_buffer_utils();
    init_check_key_type();
    init_validate_crit();
    FlattenedSign = class {
      constructor(payload) {
        if (!(payload instanceof Uint8Array))
          throw new TypeError("payload must be an instance of Uint8Array");
        this._payload = payload;
      }
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader)
          throw new TypeError("setProtectedHeader can only be called once");
        return this._protectedHeader = protectedHeader, this;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader)
          throw new TypeError("setUnprotectedHeader can only be called once");
        return this._unprotectedHeader = unprotectedHeader, this;
      }
      async sign(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader)
          throw new JWSInvalid("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");
        if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader))
          throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
        let joseHeader = {
          ...this._protectedHeader,
          ...this._unprotectedHeader
        }, extensions = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([["b64", true]]), options?.crit, this._protectedHeader, joseHeader), b64 = true;
        if (extensions.has("b64") && (b64 = this._protectedHeader.b64, typeof b64 != "boolean"))
          throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
        let { alg } = joseHeader;
        if (typeof alg != "string" || !alg)
          throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
        check_key_type_default(alg, key, "sign");
        let payload = this._payload;
        b64 && (payload = encoder.encode(encode(payload)));
        let protectedHeader;
        this._protectedHeader ? protectedHeader = encoder.encode(encode(JSON.stringify(this._protectedHeader))) : protectedHeader = encoder.encode("");
        let data = concat(protectedHeader, encoder.encode("."), payload), signature = await sign_default(alg, key, data), jws = {
          signature: encode(signature),
          payload: ""
        };
        return b64 && (jws.payload = decoder.decode(payload)), this._unprotectedHeader && (jws.header = this._unprotectedHeader), this._protectedHeader && (jws.protected = decoder.decode(protectedHeader)), jws;
      }
    };
  }
});
var CompactSign;
var init_sign3 = __esm({
  "node_modules/jose/dist/browser/jws/compact/sign.js"() {
    init_sign2();
    CompactSign = class {
      constructor(payload) {
        this._flattened = new FlattenedSign(payload);
      }
      setProtectedHeader(protectedHeader) {
        return this._flattened.setProtectedHeader(protectedHeader), this;
      }
      async sign(key, options) {
        let jws = await this._flattened.sign(key, options);
        if (jws.payload === void 0)
          throw new TypeError("use the flattened module for creating JWS with b64: false");
        return `${jws.protected}.${jws.payload}.${jws.signature}`;
      }
    };
  }
});
var IndividualSignature;
var GeneralSign;
var init_sign4 = __esm({
  "node_modules/jose/dist/browser/jws/general/sign.js"() {
    init_sign2();
    init_errors4();
    IndividualSignature = class {
      constructor(sig, key, options) {
        this.parent = sig, this.key = key, this.options = options;
      }
      setProtectedHeader(protectedHeader) {
        if (this.protectedHeader)
          throw new TypeError("setProtectedHeader can only be called once");
        return this.protectedHeader = protectedHeader, this;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader)
          throw new TypeError("setUnprotectedHeader can only be called once");
        return this.unprotectedHeader = unprotectedHeader, this;
      }
      addSignature(...args) {
        return this.parent.addSignature(...args);
      }
      sign(...args) {
        return this.parent.sign(...args);
      }
      done() {
        return this.parent;
      }
    }, GeneralSign = class {
      constructor(payload) {
        this._signatures = [], this._payload = payload;
      }
      addSignature(key, options) {
        let signature = new IndividualSignature(this, key, options);
        return this._signatures.push(signature), signature;
      }
      async sign() {
        if (!this._signatures.length)
          throw new JWSInvalid("at least one signature must be added");
        let jws = {
          signatures: [],
          payload: ""
        };
        for (let i = 0; i < this._signatures.length; i++) {
          let signature = this._signatures[i], flattened = new FlattenedSign(this._payload);
          flattened.setProtectedHeader(signature.protectedHeader), flattened.setUnprotectedHeader(signature.unprotectedHeader);
          let { payload, ...rest } = await flattened.sign(signature.key, signature.options);
          if (i === 0)
            jws.payload = payload;
          else if (jws.payload !== payload)
            throw new JWSInvalid("inconsistent use of JWS Unencoded Payload (RFC7797)");
          jws.signatures.push(rest);
        }
        return jws;
      }
    };
  }
});
var ProduceJWT;
var init_produce = __esm({
  "node_modules/jose/dist/browser/jwt/produce.js"() {
    init_epoch();
    init_is_object();
    init_secs();
    ProduceJWT = class {
      constructor(payload) {
        if (!isObject(payload))
          throw new TypeError("JWT Claims Set MUST be an object");
        this._payload = payload;
      }
      setIssuer(issuer) {
        return this._payload = { ...this._payload, iss: issuer }, this;
      }
      setSubject(subject) {
        return this._payload = { ...this._payload, sub: subject }, this;
      }
      setAudience(audience) {
        return this._payload = { ...this._payload, aud: audience }, this;
      }
      setJti(jwtId) {
        return this._payload = { ...this._payload, jti: jwtId }, this;
      }
      setNotBefore(input) {
        return typeof input == "number" ? this._payload = { ...this._payload, nbf: input } : this._payload = { ...this._payload, nbf: epoch_default(/* @__PURE__ */ new Date()) + secs_default(input) }, this;
      }
      setExpirationTime(input) {
        return typeof input == "number" ? this._payload = { ...this._payload, exp: input } : this._payload = { ...this._payload, exp: epoch_default(/* @__PURE__ */ new Date()) + secs_default(input) }, this;
      }
      setIssuedAt(input) {
        return typeof input > "u" ? this._payload = { ...this._payload, iat: epoch_default(/* @__PURE__ */ new Date()) } : this._payload = { ...this._payload, iat: input }, this;
      }
    };
  }
});
var SignJWT;
var init_sign5 = __esm({
  "node_modules/jose/dist/browser/jwt/sign.js"() {
    init_sign3();
    init_errors4();
    init_buffer_utils();
    init_produce();
    SignJWT = class extends ProduceJWT {
      setProtectedHeader(protectedHeader) {
        return this._protectedHeader = protectedHeader, this;
      }
      async sign(key, options) {
        var _a;
        let sig = new CompactSign(encoder.encode(JSON.stringify(this._payload)));
        if (sig.setProtectedHeader(this._protectedHeader), Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) && this._protectedHeader.crit.includes("b64") && this._protectedHeader.b64 === false)
          throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
        return sig.sign(key, options);
      }
    };
  }
});
var EncryptJWT;
var init_encrypt5 = __esm({
  "node_modules/jose/dist/browser/jwt/encrypt.js"() {
    init_encrypt4();
    init_buffer_utils();
    init_produce();
    EncryptJWT = class extends ProduceJWT {
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader)
          throw new TypeError("setProtectedHeader can only be called once");
        return this._protectedHeader = protectedHeader, this;
      }
      setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters)
          throw new TypeError("setKeyManagementParameters can only be called once");
        return this._keyManagementParameters = parameters, this;
      }
      setContentEncryptionKey(cek) {
        if (this._cek)
          throw new TypeError("setContentEncryptionKey can only be called once");
        return this._cek = cek, this;
      }
      setInitializationVector(iv) {
        if (this._iv)
          throw new TypeError("setInitializationVector can only be called once");
        return this._iv = iv, this;
      }
      replicateIssuerAsHeader() {
        return this._replicateIssuerAsHeader = true, this;
      }
      replicateSubjectAsHeader() {
        return this._replicateSubjectAsHeader = true, this;
      }
      replicateAudienceAsHeader() {
        return this._replicateAudienceAsHeader = true, this;
      }
      async encrypt(key, options) {
        let enc = new CompactEncrypt(encoder.encode(JSON.stringify(this._payload)));
        return this._replicateIssuerAsHeader && (this._protectedHeader = { ...this._protectedHeader, iss: this._payload.iss }), this._replicateSubjectAsHeader && (this._protectedHeader = { ...this._protectedHeader, sub: this._payload.sub }), this._replicateAudienceAsHeader && (this._protectedHeader = { ...this._protectedHeader, aud: this._payload.aud }), enc.setProtectedHeader(this._protectedHeader), this._iv && enc.setInitializationVector(this._iv), this._cek && enc.setContentEncryptionKey(this._cek), this._keyManagementParameters && enc.setKeyManagementParameters(this._keyManagementParameters), enc.encrypt(key, options);
      }
    };
  }
});
async function calculateJwkThumbprint(jwk, digestAlgorithm) {
  if (!isObject(jwk))
    throw new TypeError("JWK must be an object");
  if (digestAlgorithm ?? (digestAlgorithm = "sha256"), digestAlgorithm !== "sha256" && digestAlgorithm !== "sha384" && digestAlgorithm !== "sha512")
    throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
  let components;
  switch (jwk.kty) {
    case "EC":
      check(jwk.crv, '"crv" (Curve) Parameter'), check(jwk.x, '"x" (X Coordinate) Parameter'), check(jwk.y, '"y" (Y Coordinate) Parameter'), components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };
      break;
    case "OKP":
      check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter'), check(jwk.x, '"x" (Public Key) Parameter'), components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };
      break;
    case "RSA":
      check(jwk.e, '"e" (Exponent) Parameter'), check(jwk.n, '"n" (Modulus) Parameter'), components = { e: jwk.e, kty: jwk.kty, n: jwk.n };
      break;
    case "oct":
      check(jwk.k, '"k" (Key Value) Parameter'), components = { k: jwk.k, kty: jwk.kty };
      break;
    default:
      throw new JOSENotSupported('"kty" (Key Type) Parameter missing or unsupported');
  }
  let data = encoder.encode(JSON.stringify(components));
  return encode(await digest_default(digestAlgorithm, data));
}
async function calculateJwkThumbprintUri(jwk, digestAlgorithm) {
  digestAlgorithm ?? (digestAlgorithm = "sha256");
  let thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);
  return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;
}
var check;
var init_thumbprint = __esm({
  "node_modules/jose/dist/browser/jwk/thumbprint.js"() {
    init_digest();
    init_base64url();
    init_errors4();
    init_buffer_utils();
    init_is_object();
    check = (value, description) => {
      if (typeof value != "string" || !value)
        throw new JWKInvalid(`${description} missing or invalid`);
    };
  }
});
async function EmbeddedJWK(protectedHeader, token) {
  let joseHeader = {
    ...protectedHeader,
    ...token?.header
  };
  if (!isObject(joseHeader.jwk))
    throw new JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
  let key = await importJWK({ ...joseHeader.jwk, ext: true }, joseHeader.alg, true);
  if (key instanceof Uint8Array || key.type !== "public")
    throw new JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a public key');
  return key;
}
var init_embedded = __esm({
  "node_modules/jose/dist/browser/jwk/embedded.js"() {
    init_import();
    init_is_object();
    init_errors4();
  }
});
function getKtyFromAlg(alg) {
  switch (typeof alg == "string" && alg.slice(0, 2)) {
    case "RS":
    case "PS":
      return "RSA";
    case "ES":
      return "EC";
    case "Ed":
      return "OKP";
    default:
      throw new JOSENotSupported('Unsupported "alg" value for a JSON Web Key Set');
  }
}
function isJWKSLike(jwks) {
  return jwks && typeof jwks == "object" && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);
}
function isJWKLike(key) {
  return isObject(key);
}
function clone(obj) {
  return typeof structuredClone == "function" ? structuredClone(obj) : JSON.parse(JSON.stringify(obj));
}
async function importWithAlgCache(cache, jwk, alg) {
  let cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);
  if (cached[alg] === void 0) {
    let key = await importJWK({ ...jwk, ext: true }, alg);
    if (key instanceof Uint8Array || key.type !== "public")
      throw new JWKSInvalid("JSON Web Key Set members must be public keys");
    cached[alg] = key;
  }
  return cached[alg];
}
function createLocalJWKSet(jwks) {
  let set = new LocalJWKSet(jwks);
  return async function(protectedHeader, token) {
    return set.getKey(protectedHeader, token);
  };
}
var LocalJWKSet;
var init_local = __esm({
  "node_modules/jose/dist/browser/jwks/local.js"() {
    init_import();
    init_errors4();
    init_is_object();
    LocalJWKSet = class {
      constructor(jwks) {
        if (this._cached = /* @__PURE__ */ new WeakMap(), !isJWKSLike(jwks))
          throw new JWKSInvalid("JSON Web Key Set malformed");
        this._jwks = clone(jwks);
      }
      async getKey(protectedHeader, token) {
        let { alg, kid } = { ...protectedHeader, ...token?.header }, kty = getKtyFromAlg(alg), candidates = this._jwks.keys.filter((jwk2) => {
          let candidate = kty === jwk2.kty;
          if (candidate && typeof kid == "string" && (candidate = kid === jwk2.kid), candidate && typeof jwk2.alg == "string" && (candidate = alg === jwk2.alg), candidate && typeof jwk2.use == "string" && (candidate = jwk2.use === "sig"), candidate && Array.isArray(jwk2.key_ops) && (candidate = jwk2.key_ops.includes("verify")), candidate && alg === "EdDSA" && (candidate = jwk2.crv === "Ed25519" || jwk2.crv === "Ed448"), candidate)
            switch (alg) {
              case "ES256":
                candidate = jwk2.crv === "P-256";
                break;
              case "ES256K":
                candidate = jwk2.crv === "secp256k1";
                break;
              case "ES384":
                candidate = jwk2.crv === "P-384";
                break;
              case "ES512":
                candidate = jwk2.crv === "P-521";
                break;
            }
          return candidate;
        }), { 0: jwk, length } = candidates;
        if (length === 0)
          throw new JWKSNoMatchingKey();
        if (length !== 1) {
          let error = new JWKSMultipleMatchingKeys(), { _cached } = this;
          throw error[Symbol.asyncIterator] = async function* () {
            for (let jwk2 of candidates)
              try {
                yield await importWithAlgCache(_cached, jwk2, alg);
              } catch {
                continue;
              }
          }, error;
        }
        return importWithAlgCache(this._cached, jwk, alg);
      }
    };
  }
});
var fetchJwks;
var fetch_jwks_default;
var init_fetch_jwks = __esm({
  "node_modules/jose/dist/browser/runtime/fetch_jwks.js"() {
    init_errors4();
    fetchJwks = async (url, timeout2, options) => {
      let controller, id, timedOut = false;
      typeof AbortController == "function" && (controller = new AbortController(), id = setTimeout(() => {
        timedOut = true, controller.abort();
      }, timeout2));
      let response = await fetch(url.href, {
        signal: controller ? controller.signal : void 0,
        redirect: "manual",
        headers: options.headers
      }).catch((err) => {
        throw timedOut ? new JWKSTimeout() : err;
      });
      if (id !== void 0 && clearTimeout(id), response.status !== 200)
        throw new JOSEError("Expected 200 OK from the JSON Web Key Set HTTP response");
      try {
        return await response.json();
      } catch {
        throw new JOSEError("Failed to parse the JSON Web Key Set HTTP response as JSON");
      }
    }, fetch_jwks_default = fetchJwks;
  }
});
function isCloudflareWorkers() {
  return typeof WebSocketPair < "u" || typeof navigator < "u" && navigator.userAgent === "Cloudflare-Workers" || typeof EdgeRuntime < "u" && EdgeRuntime === "vercel";
}
function createRemoteJWKSet(url, options) {
  let set = new RemoteJWKSet(url, options);
  return async function(protectedHeader, token) {
    return set.getKey(protectedHeader, token);
  };
}
var RemoteJWKSet;
var init_remote = __esm({
  "node_modules/jose/dist/browser/jwks/remote.js"() {
    init_fetch_jwks();
    init_errors4();
    init_local();
    RemoteJWKSet = class extends LocalJWKSet {
      constructor(url, options) {
        if (super({ keys: [] }), this._jwks = void 0, !(url instanceof URL))
          throw new TypeError("url must be an instance of URL");
        this._url = new URL(url.href), this._options = { agent: options?.agent, headers: options?.headers }, this._timeoutDuration = typeof options?.timeoutDuration == "number" ? options?.timeoutDuration : 5e3, this._cooldownDuration = typeof options?.cooldownDuration == "number" ? options?.cooldownDuration : 3e4, this._cacheMaxAge = typeof options?.cacheMaxAge == "number" ? options?.cacheMaxAge : 6e5;
      }
      coolingDown() {
        return typeof this._jwksTimestamp == "number" ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
      }
      fresh() {
        return typeof this._jwksTimestamp == "number" ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
      }
      async getKey(protectedHeader, token) {
        (!this._jwks || !this.fresh()) && await this.reload();
        try {
          return await super.getKey(protectedHeader, token);
        } catch (err) {
          if (err instanceof JWKSNoMatchingKey && this.coolingDown() === false)
            return await this.reload(), super.getKey(protectedHeader, token);
          throw err;
        }
      }
      async reload() {
        this._pendingFetch && isCloudflareWorkers() && (this._pendingFetch = void 0), this._pendingFetch || (this._pendingFetch = fetch_jwks_default(this._url, this._timeoutDuration, this._options).then((json8) => {
          if (!isJWKSLike(json8))
            throw new JWKSInvalid("JSON Web Key Set malformed");
          this._jwks = { keys: json8.keys }, this._jwksTimestamp = Date.now(), this._pendingFetch = void 0;
        }).catch((err) => {
          throw this._pendingFetch = void 0, err;
        })), await this._pendingFetch;
      }
    };
  }
});
var UnsecuredJWT;
var init_unsecured = __esm({
  "node_modules/jose/dist/browser/jwt/unsecured.js"() {
    init_base64url();
    init_buffer_utils();
    init_errors4();
    init_jwt_claims_set();
    init_produce();
    UnsecuredJWT = class extends ProduceJWT {
      encode() {
        let header = encode(JSON.stringify({ alg: "none" })), payload = encode(JSON.stringify(this._payload));
        return `${header}.${payload}.`;
      }
      static decode(jwt, options) {
        if (typeof jwt != "string")
          throw new JWTInvalid("Unsecured JWT must be a string");
        let { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split(".");
        if (length !== 3 || signature !== "")
          throw new JWTInvalid("Invalid Unsecured JWT");
        let header;
        try {
          if (header = JSON.parse(decoder.decode(decode(encodedHeader))), header.alg !== "none")
            throw new Error();
        } catch {
          throw new JWTInvalid("Invalid Unsecured JWT");
        }
        return { payload: jwt_claims_set_default(header, decode(encodedPayload), options), header };
      }
    };
  }
});
var base64url_exports2 = {};
__export(base64url_exports2, {
  decode: () => decode2,
  encode: () => encode2
});
var encode2;
var decode2;
var init_base64url2 = __esm({
  "node_modules/jose/dist/browser/util/base64url.js"() {
    init_base64url();
    encode2 = encode, decode2 = decode;
  }
});
function decodeProtectedHeader(token) {
  let protectedB64u;
  if (typeof token == "string") {
    let parts = token.split(".");
    (parts.length === 3 || parts.length === 5) && ([protectedB64u] = parts);
  } else if (typeof token == "object" && token)
    if ("protected" in token)
      protectedB64u = token.protected;
    else
      throw new TypeError("Token does not contain a Protected Header");
  try {
    if (typeof protectedB64u != "string" || !protectedB64u)
      throw new Error();
    let result = JSON.parse(decoder.decode(decode2(protectedB64u)));
    if (!isObject(result))
      throw new Error();
    return result;
  } catch {
    throw new TypeError("Invalid Token or Protected Header formatting");
  }
}
var init_decode_protected_header = __esm({
  "node_modules/jose/dist/browser/util/decode_protected_header.js"() {
    init_base64url2();
    init_buffer_utils();
    init_is_object();
  }
});
function decodeJwt(jwt) {
  if (typeof jwt != "string")
    throw new JWTInvalid("JWTs must use Compact JWS serialization, JWT must be a string");
  let { 1: payload, length } = jwt.split(".");
  if (length === 5)
    throw new JWTInvalid("Only JWTs using Compact JWS serialization can be decoded");
  if (length !== 3)
    throw new JWTInvalid("Invalid JWT");
  if (!payload)
    throw new JWTInvalid("JWTs must contain a payload");
  let decoded;
  try {
    decoded = decode2(payload);
  } catch {
    throw new JWTInvalid("Failed to base64url decode the payload");
  }
  let result;
  try {
    result = JSON.parse(decoder.decode(decoded));
  } catch {
    throw new JWTInvalid("Failed to parse the decoded payload as JSON");
  }
  if (!isObject(result))
    throw new JWTInvalid("Invalid JWT Claims Set");
  return result;
}
var init_decode_jwt = __esm({
  "node_modules/jose/dist/browser/util/decode_jwt.js"() {
    init_base64url2();
    init_buffer_utils();
    init_is_object();
    init_errors4();
  }
});
async function generateSecret(alg, options) {
  var _a;
  let length, algorithm, keyUsages;
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512":
      length = parseInt(alg.slice(-3), 10), algorithm = { name: "HMAC", hash: `SHA-${length}`, length }, keyUsages = ["sign", "verify"];
      break;
    case "A128CBC-HS256":
    case "A192CBC-HS384":
    case "A256CBC-HS512":
      return length = parseInt(alg.slice(-3), 10), random_default(new Uint8Array(length >> 3));
    case "A128KW":
    case "A192KW":
    case "A256KW":
      length = parseInt(alg.slice(1, 4), 10), algorithm = { name: "AES-KW", length }, keyUsages = ["wrapKey", "unwrapKey"];
      break;
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW":
    case "A128GCM":
    case "A192GCM":
    case "A256GCM":
      length = parseInt(alg.slice(1, 4), 10), algorithm = { name: "AES-GCM", length }, keyUsages = ["encrypt", "decrypt"];
      break;
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
  }
  return webcrypto_default.subtle.generateKey(algorithm, (_a = options?.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);
}
function getModulusLengthOption(options) {
  var _a;
  let modulusLength = (_a = options?.modulusLength) !== null && _a !== void 0 ? _a : 2048;
  if (typeof modulusLength != "number" || modulusLength < 2048)
    throw new JOSENotSupported("Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used");
  return modulusLength;
}
async function generateKeyPair(alg, options) {
  var _a, _b, _c;
  let algorithm, keyUsages;
  switch (alg) {
    case "PS256":
    case "PS384":
    case "PS512":
      algorithm = {
        name: "RSA-PSS",
        hash: `SHA-${alg.slice(-3)}`,
        publicExponent: new Uint8Array([1, 0, 1]),
        modulusLength: getModulusLengthOption(options)
      }, keyUsages = ["sign", "verify"];
      break;
    case "RS256":
    case "RS384":
    case "RS512":
      algorithm = {
        name: "RSASSA-PKCS1-v1_5",
        hash: `SHA-${alg.slice(-3)}`,
        publicExponent: new Uint8Array([1, 0, 1]),
        modulusLength: getModulusLengthOption(options)
      }, keyUsages = ["sign", "verify"];
      break;
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512":
      algorithm = {
        name: "RSA-OAEP",
        hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
        publicExponent: new Uint8Array([1, 0, 1]),
        modulusLength: getModulusLengthOption(options)
      }, keyUsages = ["decrypt", "unwrapKey", "encrypt", "wrapKey"];
      break;
    case "ES256":
      algorithm = { name: "ECDSA", namedCurve: "P-256" }, keyUsages = ["sign", "verify"];
      break;
    case "ES384":
      algorithm = { name: "ECDSA", namedCurve: "P-384" }, keyUsages = ["sign", "verify"];
      break;
    case "ES512":
      algorithm = { name: "ECDSA", namedCurve: "P-521" }, keyUsages = ["sign", "verify"];
      break;
    case "EdDSA":
      keyUsages = ["sign", "verify"];
      let crv = (_a = options?.crv) !== null && _a !== void 0 ? _a : "Ed25519";
      switch (crv) {
        case "Ed25519":
        case "Ed448":
          algorithm = { name: crv };
          break;
        default:
          throw new JOSENotSupported("Invalid or unsupported crv option provided");
      }
      break;
    case "ECDH-ES":
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      keyUsages = ["deriveKey", "deriveBits"];
      let crv2 = (_b = options?.crv) !== null && _b !== void 0 ? _b : "P-256";
      switch (crv2) {
        case "P-256":
        case "P-384":
        case "P-521": {
          algorithm = { name: "ECDH", namedCurve: crv2 };
          break;
        }
        case "X25519":
        case "X448":
          algorithm = { name: crv2 };
          break;
        default:
          throw new JOSENotSupported("Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448");
      }
      break;
    }
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
  }
  return webcrypto_default.subtle.generateKey(algorithm, (_c = options?.extractable) !== null && _c !== void 0 ? _c : false, keyUsages);
}
var init_generate = __esm({
  "node_modules/jose/dist/browser/runtime/generate.js"() {
    init_webcrypto();
    init_errors4();
    init_random();
  }
});
async function generateKeyPair2(alg, options) {
  return generateKeyPair(alg, options);
}
var init_generate_key_pair = __esm({
  "node_modules/jose/dist/browser/key/generate_key_pair.js"() {
    init_generate();
  }
});
async function generateSecret2(alg, options) {
  return generateSecret(alg, options);
}
var init_generate_secret = __esm({
  "node_modules/jose/dist/browser/key/generate_secret.js"() {
    init_generate();
  }
});
var runtime_default;
var init_runtime = __esm({
  "node_modules/jose/dist/browser/runtime/runtime.js"() {
    runtime_default = "WebCryptoAPI";
  }
});
var runtime_default2;
var init_runtime2 = __esm({
  "node_modules/jose/dist/browser/util/runtime.js"() {
    init_runtime();
    runtime_default2 = runtime_default;
  }
});
var browser_exports = {};
__export(browser_exports, {
  CompactEncrypt: () => CompactEncrypt,
  CompactSign: () => CompactSign,
  EmbeddedJWK: () => EmbeddedJWK,
  EncryptJWT: () => EncryptJWT,
  FlattenedEncrypt: () => FlattenedEncrypt,
  FlattenedSign: () => FlattenedSign,
  GeneralEncrypt: () => GeneralEncrypt,
  GeneralSign: () => GeneralSign,
  SignJWT: () => SignJWT,
  UnsecuredJWT: () => UnsecuredJWT,
  base64url: () => base64url_exports2,
  calculateJwkThumbprint: () => calculateJwkThumbprint,
  calculateJwkThumbprintUri: () => calculateJwkThumbprintUri,
  compactDecrypt: () => compactDecrypt,
  compactVerify: () => compactVerify,
  createLocalJWKSet: () => createLocalJWKSet,
  createRemoteJWKSet: () => createRemoteJWKSet,
  cryptoRuntime: () => runtime_default2,
  decodeJwt: () => decodeJwt,
  decodeProtectedHeader: () => decodeProtectedHeader,
  errors: () => errors_exports,
  exportJWK: () => exportJWK,
  exportPKCS8: () => exportPKCS8,
  exportSPKI: () => exportSPKI,
  flattenedDecrypt: () => flattenedDecrypt,
  flattenedVerify: () => flattenedVerify,
  generalDecrypt: () => generalDecrypt,
  generalVerify: () => generalVerify,
  generateKeyPair: () => generateKeyPair2,
  generateSecret: () => generateSecret2,
  importJWK: () => importJWK,
  importPKCS8: () => importPKCS8,
  importSPKI: () => importSPKI,
  importX509: () => importX509,
  jwtDecrypt: () => jwtDecrypt,
  jwtVerify: () => jwtVerify
});
var init_browser2 = __esm({
  "node_modules/jose/dist/browser/index.js"() {
    init_decrypt3();
    init_decrypt2();
    init_decrypt4();
    init_encrypt3();
    init_verify3();
    init_verify2();
    init_verify4();
    init_verify5();
    init_decrypt5();
    init_encrypt4();
    init_encrypt2();
    init_sign3();
    init_sign2();
    init_sign4();
    init_sign5();
    init_encrypt5();
    init_thumbprint();
    init_embedded();
    init_local();
    init_remote();
    init_unsecured();
    init_export();
    init_import();
    init_decode_protected_header();
    init_decode_jwt();
    init_errors4();
    init_generate_key_pair();
    init_generate_secret();
    init_base64url2();
    init_runtime2();
  }
});
var require_get_hmac_key = __commonJS({
  "node_modules/@shopify/shopify-api/lib/utils/get-hmac-key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHMACKey = void 0;
    function getHMACKey(key) {
      let arrayBuffer = new Uint8Array(key.length);
      for (let i = 0, keyLen = key.length; i < keyLen; i++)
        arrayBuffer[i] = key.charCodeAt(i);
      return arrayBuffer;
    }
    exports.getHMACKey = getHMACKey;
  }
});
var require_decode_session_token = __commonJS({
  "node_modules/@shopify/shopify-api/lib/session/decode-session-token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeSessionToken = void 0;
    var tslib_1 = require_tslib(), jose = tslib_1.__importStar((init_browser2(), __toCommonJS(browser_exports))), ShopifyErrors = tslib_1.__importStar(require_error()), get_hmac_key_1 = require_get_hmac_key(), JWT_PERMITTED_CLOCK_TOLERANCE = 10;
    function decodeSessionToken(config) {
      return (token, { checkAudience = true } = {}) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let payload;
        try {
          payload = (yield jose.jwtVerify(token, (0, get_hmac_key_1.getHMACKey)(config.apiSecretKey), {
            algorithms: ["HS256"],
            clockTolerance: JWT_PERMITTED_CLOCK_TOLERANCE
          })).payload;
        } catch (error) {
          throw new ShopifyErrors.InvalidJwtError(`Failed to parse session token '${token}': ${error.message}`);
        }
        if (checkAudience && payload.aud !== config.apiKey)
          throw new ShopifyErrors.InvalidJwtError("Session token had invalid API key");
        return payload;
      });
    }
    exports.decodeSessionToken = decodeSessionToken;
  }
});
var require_session_utils = __commonJS({
  "node_modules/@shopify/shopify-api/lib/session/session-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.customAppSession = exports.getCurrentSessionId = exports.getOfflineId = exports.getJwtSessionId = void 0;
    var tslib_1 = require_tslib(), types_1 = require_types6(), http_1 = require_http(), shop_validator_1 = require_shop_validator(), logger_1 = require_logger(), ShopifyErrors = tslib_1.__importStar(require_error()), decode_session_token_1 = require_decode_session_token(), session_1 = require_session();
    function getJwtSessionId(config) {
      return (shop, userId) => `${(0, shop_validator_1.sanitizeShop)(config)(shop, true)}_${userId}`;
    }
    exports.getJwtSessionId = getJwtSessionId;
    function getOfflineId(config) {
      return (shop) => `offline_${(0, shop_validator_1.sanitizeShop)(config)(shop, true)}`;
    }
    exports.getOfflineId = getOfflineId;
    function getCurrentSessionId(config) {
      return function(_a) {
        var { isOnline } = _a, adapterArgs = tslib_1.__rest(_a, ["isOnline"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let request = yield (0, http_1.abstractConvertRequest)(adapterArgs), log = (0, logger_1.logger)(config);
          if (config.isEmbeddedApp) {
            log.debug("App is embedded, looking for session id in JWT payload", {
              isOnline
            });
            let authHeader = request.headers.Authorization;
            if (authHeader) {
              let matches2 = (typeof authHeader == "string" ? authHeader : authHeader[0]).match(/^Bearer (.+)$/);
              if (!matches2)
                throw log.error("Missing Bearer token in authorization header", { isOnline }), new ShopifyErrors.MissingJwtTokenError("Missing Bearer token in authorization header");
              let jwtPayload = yield (0, decode_session_token_1.decodeSessionToken)(config)(matches2[1]), shop = jwtPayload.dest.replace(/^https:\/\//, "");
              return log.debug("Found valid JWT payload", { shop, isOnline }), isOnline ? getJwtSessionId(config)(shop, jwtPayload.sub) : getOfflineId(config)(shop);
            } else
              log.error("Missing Authorization header, was the request made with authenticatedFetch?", { isOnline });
          } else
            return log.debug("App is not embedded, looking for session id in cookies", {
              isOnline
            }), new http_1.Cookies(request, {}, {
              keys: [config.apiSecretKey]
            }).getAndVerify(types_1.SESSION_COOKIE_NAME);
        });
      };
    }
    exports.getCurrentSessionId = getCurrentSessionId;
    function customAppSession(config) {
      return (shop) => new session_1.Session({
        id: "",
        shop: `${(0, shop_validator_1.sanitizeShop)(config)(shop, true)}`,
        state: "",
        isOnline: false
      });
    }
    exports.customAppSession = customAppSession;
  }
});
var require_create_session = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/oauth/create-session.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accessTokenResponse = exports.createSession = void 0;
    var tslib_1 = require_tslib(), uuid_1 = require_commonjs_browser(), session_1 = require_session(), logger_1 = require_logger(), session_utils_1 = require_session_utils();
    function createSession2({ config, accessTokenResponse: accessTokenResponse2, shop, state }) {
      let associatedUser = accessTokenResponse2.associated_user, isOnline = Boolean(associatedUser);
      if ((0, logger_1.logger)(config).info("Creating new session", { shop, isOnline }), isOnline) {
        let sessionId, responseBody = accessTokenResponse2, { access_token, scope } = responseBody, rest = tslib_1.__rest(responseBody, ["access_token", "scope"]), sessionExpiration = new Date(Date.now() + responseBody.expires_in * 1e3);
        return config.isEmbeddedApp ? sessionId = (0, session_utils_1.getJwtSessionId)(config)(shop, `${rest.associated_user.id}`) : sessionId = (0, uuid_1.v4)(), new session_1.Session({
          id: sessionId,
          shop,
          state,
          isOnline,
          accessToken: access_token,
          scope,
          expires: sessionExpiration,
          onlineAccessInfo: rest
        });
      } else
        return new session_1.Session({
          id: (0, session_utils_1.getOfflineId)(config)(shop),
          shop,
          state,
          isOnline,
          accessToken: accessTokenResponse2.access_token,
          scope: accessTokenResponse2.scope
        });
    }
    exports.createSession = createSession2;
    function accessTokenResponse(postResponse) {
      let associatedUser = postResponse.body.associated_user;
      return Boolean(associatedUser), postResponse.body;
    }
    exports.accessTokenResponse = accessTokenResponse;
  }
});
var require_oauth = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/oauth/oauth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callback = exports.begin = void 0;
    var tslib_1 = require_tslib(), isbot_1 = tslib_1.__importDefault(require_isbot()), processed_query_1 = tslib_1.__importDefault(require_processed_query()), ShopifyErrors = tslib_1.__importStar(require_error()), hmac_validator_1 = require_hmac_validator(), shop_validator_1 = require_shop_validator(), http_client_1 = require_http_client(), types_1 = require_types(), http_1 = require_http(), logger_1 = require_logger(), types_2 = require_types6(), nonce_1 = require_nonce(), safe_compare_1 = require_safe_compare(), create_session_1 = require_create_session(), logForBot = ({ request, log, func }) => {
      log.debug(`Possible bot request to auth ${func}: `, {
        userAgent: request.headers["User-Agent"]
      });
    };
    function begin(config) {
      return (_a) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        var { shop, callbackPath, isOnline } = _a, adapterArgs = tslib_1.__rest(_a, ["shop", "callbackPath", "isOnline"]);
        throwIfCustomStoreApp(config.isCustomStoreApp, "Cannot perform OAuth for private apps");
        let log = (0, logger_1.logger)(config);
        log.info("Beginning OAuth", { shop, isOnline, callbackPath });
        let request = yield (0, http_1.abstractConvertRequest)(adapterArgs), response = yield (0, http_1.abstractConvertIncomingResponse)(adapterArgs);
        if ((0, isbot_1.default)(request.headers["User-Agent"]))
          return logForBot({ request, log, func: "begin" }), response.statusCode = 410, (0, http_1.abstractConvertResponse)(response, adapterArgs);
        let cookies = new http_1.Cookies(request, response, {
          keys: [config.apiSecretKey],
          secure: true
        }), state = (0, nonce_1.nonce)();
        yield cookies.setAndSign(types_2.STATE_COOKIE_NAME, state, {
          expires: new Date(Date.now() + 6e4),
          sameSite: "lax",
          secure: true,
          path: callbackPath
        });
        let query = {
          client_id: config.apiKey,
          scope: config.scopes.toString(),
          redirect_uri: `${config.hostScheme}://${config.hostName}${callbackPath}`,
          state,
          "grant_options[]": isOnline ? "per-user" : ""
        }, processedQuery = new processed_query_1.default();
        processedQuery.putAll(query);
        let redirectUrl = `https://${(0, shop_validator_1.sanitizeShop)(config)(shop, true)}/admin/oauth/authorize${processedQuery.stringify()}`;
        return response.statusCode = 302, response.statusText = "Found", response.headers = Object.assign(Object.assign(Object.assign({}, response.headers), cookies.response.headers), { Location: redirectUrl }), log.debug(`OAuth started, redirecting to ${redirectUrl}`, { shop, isOnline }), (0, http_1.abstractConvertResponse)(response, adapterArgs);
      });
    }
    exports.begin = begin;
    function callback(config) {
      return function(_a) {
        var adapterArgs = tslib_1.__rest(_a, []);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          throwIfCustomStoreApp(config.isCustomStoreApp, "Cannot perform OAuth for private apps");
          let log = (0, logger_1.logger)(config), request = yield (0, http_1.abstractConvertRequest)(adapterArgs), query = new URL(request.url, `${config.hostScheme}://${config.hostName}`).searchParams, shop = query.get("shop"), response = {};
          if ((0, isbot_1.default)(request.headers["User-Agent"]))
            throw logForBot({ request, log, func: "callback" }), new ShopifyErrors.BotActivityDetected("Invalid OAuth callback initiated by bot");
          log.info("Completing OAuth", { shop });
          let cookies = new http_1.Cookies(request, response, {
            keys: [config.apiSecretKey],
            secure: true
          }), stateFromCookie = yield cookies.getAndVerify(types_2.STATE_COOKIE_NAME);
          if (cookies.deleteCookie(types_2.STATE_COOKIE_NAME), !stateFromCookie)
            throw log.error("Could not find OAuth cookie", { shop }), new ShopifyErrors.CookieNotFound(`Cannot complete OAuth process. Could not find an OAuth cookie for shop url: ${shop}`);
          let authQuery = Object.fromEntries(query.entries());
          if (!(yield validQuery({ config, query: authQuery, stateFromCookie })))
            throw log.error("Invalid OAuth callback", { shop, stateFromCookie }), new ShopifyErrors.InvalidOAuthError("Invalid OAuth callback.");
          log.debug("OAuth request is valid, requesting access token", { shop });
          let body = {
            client_id: config.apiKey,
            client_secret: config.apiSecretKey,
            code: query.get("code")
          }, postParams = {
            path: "/admin/oauth/access_token",
            type: types_1.DataType.JSON,
            data: body
          }, cleanShop = (0, shop_validator_1.sanitizeShop)(config)(query.get("shop"), true), HttpClient = (0, http_client_1.httpClientClass)(config), postResponse = yield new HttpClient({ domain: cleanShop }).post(postParams), session = (0, create_session_1.createSession)({
            accessTokenResponse: (0, create_session_1.accessTokenResponse)(postResponse),
            shop: cleanShop,
            state: stateFromCookie,
            config
          });
          return config.isEmbeddedApp || (yield cookies.setAndSign(types_2.SESSION_COOKIE_NAME, session.id, {
            expires: session.expires,
            sameSite: "lax",
            secure: true,
            path: "/"
          })), {
            headers: yield (0, http_1.abstractConvertHeaders)(cookies.response.headers, adapterArgs),
            session
          };
        });
      };
    }
    exports.callback = callback;
    function validQuery({ config, query, stateFromCookie }) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return (yield (0, hmac_validator_1.validateHmac)(config)(query)) && (0, safe_compare_1.safeCompare)(query.state, stateFromCookie);
      });
    }
    function throwIfCustomStoreApp(isCustomStoreApp, message2) {
      if (isCustomStoreApp)
        throw new ShopifyErrors.PrivateAppError(message2);
    }
  }
});
var require_get_embedded_app_url = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/get-embedded-app-url.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildEmbeddedAppUrl = exports.getEmbeddedAppUrl = void 0;
    var tslib_1 = require_tslib(), ShopifyErrors = tslib_1.__importStar(require_error()), http_1 = require_http(), shop_validator_1 = require_shop_validator(), decode_host_1 = require_decode_host();
    function getEmbeddedAppUrl(config) {
      return (_a) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        var adapterArgs = tslib_1.__rest(_a, []);
        let request = yield (0, http_1.abstractConvertRequest)(adapterArgs);
        if (!request)
          throw new ShopifyErrors.MissingRequiredArgument("getEmbeddedAppUrl requires a request object argument");
        if (!request.url)
          throw new ShopifyErrors.InvalidRequestError("Request does not contain a URL");
        let host = new URL(request.url, `https://${request.headers.host}`).searchParams.get("host");
        if (typeof host != "string")
          throw new ShopifyErrors.InvalidRequestError("Request does not contain a host query parameter");
        return buildEmbeddedAppUrl(config)(host);
      });
    }
    exports.getEmbeddedAppUrl = getEmbeddedAppUrl;
    function buildEmbeddedAppUrl(config) {
      return (host) => ((0, shop_validator_1.sanitizeHost)()(host, true), `https://${(0, decode_host_1.decodeHost)(host)}/apps/${config.apiKey}`);
    }
    exports.buildEmbeddedAppUrl = buildEmbeddedAppUrl;
  }
});
var require_token_exchange = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/oauth/token-exchange.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenExchange = exports.RequestedTokenType = void 0;
    var tslib_1 = require_tslib(), decode_session_token_1 = require_decode_session_token(), shop_validator_1 = require_shop_validator(), types_1 = require_types(), http_client_1 = require_http_client(), create_session_1 = require_create_session(), RequestedTokenType;
    (function(RequestedTokenType2) {
      RequestedTokenType2.OnlineAccessToken = "urn:shopify:params:oauth:token-type:online-access-token", RequestedTokenType2.OfflineAccessToken = "urn:shopify:params:oauth:token-type:offline-access-token";
    })(RequestedTokenType = exports.RequestedTokenType || (exports.RequestedTokenType = {}));
    var TokenExchangeGrantType = "urn:ietf:params:oauth:grant-type:token-exchange", IdTokenType = "urn:ietf:params:oauth:token-type:id_token";
    function tokenExchange(config) {
      return ({ shop, sessionToken, requestedTokenType }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield (0, decode_session_token_1.decodeSessionToken)(config)(sessionToken);
        let body = {
          client_id: config.apiKey,
          client_secret: config.apiSecretKey,
          grant_type: TokenExchangeGrantType,
          subject_token: sessionToken,
          subject_token_type: IdTokenType,
          requested_token_type: requestedTokenType
        }, postParams = {
          path: "/admin/oauth/access_token",
          type: types_1.DataType.JSON,
          data: body,
          extraHeaders: {
            Accept: types_1.DataType.JSON
          }
        }, cleanShop = (0, shop_validator_1.sanitizeShop)(config)(shop, true), HttpClient = (0, http_client_1.httpClientClass)(config), postResponse = yield new HttpClient({ domain: cleanShop }).post(postParams);
        return {
          session: (0, create_session_1.createSession)({
            accessTokenResponse: (0, create_session_1.accessTokenResponse)(postResponse),
            shop: cleanShop,
            // We need to keep this as an empty string as our template DB schemas have this required
            state: "",
            config
          })
        };
      });
    }
    exports.tokenExchange = tokenExchange;
  }
});
var require_auth = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shopifyAuth = void 0;
    var oauth_1 = require_oauth(), nonce_1 = require_nonce(), safe_compare_1 = require_safe_compare(), get_embedded_app_url_1 = require_get_embedded_app_url(), token_exchange_1 = require_token_exchange();
    function shopifyAuth(config) {
      var _a;
      let shopify2 = {
        begin: (0, oauth_1.begin)(config),
        callback: (0, oauth_1.callback)(config),
        nonce: nonce_1.nonce,
        safeCompare: safe_compare_1.safeCompare,
        getEmbeddedAppUrl: (0, get_embedded_app_url_1.getEmbeddedAppUrl)(config),
        buildEmbeddedAppUrl: (0, get_embedded_app_url_1.buildEmbeddedAppUrl)(config)
      };
      return !((_a = config.future) === null || _a === void 0) && _a.unstable_tokenExchange && (shopify2.tokenExchange = (0, token_exchange_1.tokenExchange)(config)), shopify2;
    }
    exports.shopifyAuth = shopifyAuth;
  }
});
var require_session2 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/session/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shopifySession = void 0;
    var decode_session_token_1 = require_decode_session_token(), session_utils_1 = require_session_utils();
    function shopifySession(config) {
      return {
        customAppSession: (0, session_utils_1.customAppSession)(config),
        getCurrentId: (0, session_utils_1.getCurrentSessionId)(config),
        getOfflineId: (0, session_utils_1.getOfflineId)(config),
        getJwtSessionId: (0, session_utils_1.getJwtSessionId)(config),
        decodeSessionToken: (0, decode_session_token_1.decodeSessionToken)(config)
      };
    }
    exports.shopifySession = shopifySession;
  }
});
var require_version_compatible = __commonJS({
  "node_modules/@shopify/shopify-api/lib/utils/version-compatible.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.versionPriorTo = exports.versionCompatible = void 0;
    var types_1 = require_types2();
    function versionCompatible(config) {
      return (referenceVersion, currentVersion = config.apiVersion) => {
        if (currentVersion === types_1.ApiVersion.Unstable)
          return true;
        let numericVersion = (version) => parseInt(version.replace("-", ""), 10), current = numericVersion(currentVersion), reference = numericVersion(referenceVersion);
        return current >= reference;
      };
    }
    exports.versionCompatible = versionCompatible;
    function versionPriorTo(config) {
      return (referenceVersion, currentVersion = config.apiVersion) => !versionCompatible(config)(referenceVersion, currentVersion);
    }
    exports.versionPriorTo = versionPriorTo;
  }
});
var require_utils3 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shopifyUtils = void 0;
    var shop_validator_1 = require_shop_validator(), hmac_validator_1 = require_hmac_validator(), version_compatible_1 = require_version_compatible();
    function shopifyUtils(config) {
      return {
        sanitizeShop: (0, shop_validator_1.sanitizeShop)(config),
        sanitizeHost: (0, shop_validator_1.sanitizeHost)(),
        validateHmac: (0, hmac_validator_1.validateHmac)(config),
        versionCompatible: (0, version_compatible_1.versionCompatible)(config),
        versionPriorTo: (0, version_compatible_1.versionPriorTo)(config)
      };
    }
    exports.shopifyUtils = shopifyUtils;
  }
});
var require_types7 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/webhooks/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebhookValidationErrorReason = exports.WebhookOperation = exports.DeliveryMethod = void 0;
    var DeliveryMethod2;
    (function(DeliveryMethod3) {
      DeliveryMethod3.Http = "http", DeliveryMethod3.EventBridge = "eventbridge", DeliveryMethod3.PubSub = "pubsub";
    })(DeliveryMethod2 = exports.DeliveryMethod || (exports.DeliveryMethod = {}));
    var WebhookOperation;
    (function(WebhookOperation2) {
      WebhookOperation2.Create = "create", WebhookOperation2.Update = "update", WebhookOperation2.Delete = "delete";
    })(WebhookOperation = exports.WebhookOperation || (exports.WebhookOperation = {}));
    var WebhookValidationErrorReason;
    (function(WebhookValidationErrorReason2) {
      WebhookValidationErrorReason2.MissingHeaders = "missing_headers", WebhookValidationErrorReason2.MissingBody = "missing_body", WebhookValidationErrorReason2.InvalidHmac = "invalid_hmac";
    })(WebhookValidationErrorReason = exports.WebhookValidationErrorReason || (exports.WebhookValidationErrorReason = {}));
  }
});
var require_registry = __commonJS({
  "node_modules/@shopify/shopify-api/lib/webhooks/registry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addHostToCallbackUrl = exports.handlerIdentifier = exports.getHandlers = exports.getTopicsAdded = exports.addHandlers = exports.topicForStorage = exports.registry = void 0;
    var error_1 = require_error(), logger_1 = require_logger(), types_1 = require_types7();
    function registry() {
      return {};
    }
    exports.registry = registry;
    function topicForStorage(topic) {
      return topic.toUpperCase().replace(/\/|\./g, "_");
    }
    exports.topicForStorage = topicForStorage;
    function addHandlers(config, webhookRegistry) {
      return function(handlersToAdd) {
        for (let [topic, handlers] of Object.entries(handlersToAdd)) {
          let topicKey = topicForStorage(topic);
          if (Array.isArray(handlers))
            for (let handler of handlers)
              mergeOrAddHandler(config, webhookRegistry, topicKey, handler);
          else
            mergeOrAddHandler(config, webhookRegistry, topicKey, handlers);
        }
      };
    }
    exports.addHandlers = addHandlers;
    function getTopicsAdded(webhookRegistry) {
      return function() {
        return Object.keys(webhookRegistry);
      };
    }
    exports.getTopicsAdded = getTopicsAdded;
    function getHandlers(webhookRegistry) {
      return function(topic) {
        return webhookRegistry[topicForStorage(topic)] || [];
      };
    }
    exports.getHandlers = getHandlers;
    function handlerIdentifier(config, handler) {
      let prefix = handler.deliveryMethod;
      switch (handler.deliveryMethod) {
        case types_1.DeliveryMethod.Http:
          return `${prefix}_${addHostToCallbackUrl(config, handler.callbackUrl)}`;
        case types_1.DeliveryMethod.EventBridge:
          return `${prefix}_${handler.arn}`;
        case types_1.DeliveryMethod.PubSub:
          return `${prefix}_${handler.pubSubProject}:${handler.pubSubTopic}`;
        default:
          throw new error_1.InvalidDeliveryMethodError(`Unrecognized delivery method '${handler.deliveryMethod}'`);
      }
    }
    exports.handlerIdentifier = handlerIdentifier;
    function addHostToCallbackUrl(config, callbackUrl) {
      return callbackUrl.startsWith("/") ? `${config.hostScheme}://${config.hostName}${callbackUrl}` : callbackUrl;
    }
    exports.addHostToCallbackUrl = addHostToCallbackUrl;
    function mergeOrAddHandler(config, webhookRegistry, topic, handler) {
      var _a, _b;
      let log = (0, logger_1.logger)(config);
      if ((_a = handler.includeFields) === null || _a === void 0 || _a.sort(), (_b = handler.metafieldNamespaces) === null || _b === void 0 || _b.sort(), !(topic in webhookRegistry)) {
        webhookRegistry[topic] = [handler];
        return;
      }
      let identifier = handlerIdentifier(config, handler);
      for (let index in webhookRegistry[topic]) {
        if (!Object.prototype.hasOwnProperty.call(webhookRegistry[topic], index))
          continue;
        let existingHandler = webhookRegistry[topic][index], existingIdentifier = handlerIdentifier(config, existingHandler);
        if (identifier === existingIdentifier)
          if (handler.deliveryMethod === types_1.DeliveryMethod.Http) {
            log.info(`Detected multiple handlers for '${topic}', webhooks.process will call them sequentially`);
            break;
          } else
            throw new error_1.InvalidDeliveryMethodError(`Can only add multiple handlers when deliveryMethod is Http. Invalid handler: ${JSON.stringify(handler)}`);
      }
      webhookRegistry[topic].push(handler);
    }
  }
});
var require_query_template = __commonJS({
  "node_modules/@shopify/shopify-api/lib/webhooks/query-template.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.queryTemplate = void 0;
    function queryTemplate(template, params) {
      let query = template;
      return Object.entries(params).forEach(([key, value]) => {
        query = query.replace(`{{${key}}}`, value);
      }), query;
    }
    exports.queryTemplate = queryTemplate;
  }
});
var require_register = __commonJS({
  "node_modules/@shopify/shopify-api/lib/webhooks/register.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TEMPLATE_MUTATION = exports.TEMPLATE_GET_HANDLERS = exports.register = void 0;
    var tslib_1 = require_tslib(), graphql_client_1 = require_graphql_client(), error_1 = require_error(), logger_1 = require_logger(), types_1 = require_types2(), registry_1 = require_registry(), query_template_1 = require_query_template(), types_2 = require_types7();
    function register(config, webhookRegistry) {
      return function({ session }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let log = (0, logger_1.logger)(config);
          log.info("Registering webhooks", { shop: session.shop });
          let registerReturn = Object.keys(webhookRegistry).reduce((acc, topic) => (acc[topic] = [], acc), {}), existingHandlers = yield getExistingHandlers(config, session);
          log.debug(`Existing topics: [${Object.keys(existingHandlers).join(", ")}]`, { shop: session.shop });
          for (let topic in webhookRegistry)
            Object.prototype.hasOwnProperty.call(webhookRegistry, topic) && (types_1.gdprTopics.includes(topic) || (registerReturn[topic] = yield registerTopic({
              config,
              session,
              topic,
              existingHandlers: existingHandlers[topic] || [],
              handlers: (0, registry_1.getHandlers)(webhookRegistry)(topic)
            }), delete existingHandlers[topic]));
          for (let topic in existingHandlers) {
            if (!Object.prototype.hasOwnProperty.call(existingHandlers, topic))
              continue;
            let GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config }), client = new GraphqlClient({ session });
            registerReturn[topic] = yield runMutations({
              config,
              client,
              topic,
              handlers: existingHandlers[topic],
              operation: types_2.WebhookOperation.Delete
            });
          }
          return registerReturn;
        });
      };
    }
    exports.register = register;
    function getExistingHandlers(config, session) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config }), client = new GraphqlClient({ session }), existingHandlers = {}, hasNextPage, endCursor = null;
        do {
          let query = buildCheckQuery(endCursor), response = yield client.query({
            data: query
          });
          response.body.data.webhookSubscriptions.edges.forEach((edge) => {
            let handler = buildHandlerFromNode(edge);
            existingHandlers[edge.node.topic] || (existingHandlers[edge.node.topic] = []), existingHandlers[edge.node.topic].push(handler);
          }), endCursor = response.body.data.webhookSubscriptions.pageInfo.endCursor, hasNextPage = response.body.data.webhookSubscriptions.pageInfo.hasNextPage;
        } while (hasNextPage);
        return existingHandlers;
      });
    }
    function buildCheckQuery(endCursor) {
      return (0, query_template_1.queryTemplate)(exports.TEMPLATE_GET_HANDLERS, {
        END_CURSOR: JSON.stringify(endCursor)
      });
    }
    function buildHandlerFromNode(edge) {
      var _a, _b;
      let endpoint = edge.node.endpoint, handler;
      switch (endpoint.__typename) {
        case "WebhookHttpEndpoint":
          handler = {
            deliveryMethod: types_2.DeliveryMethod.Http,
            callbackUrl: endpoint.callbackUrl,
            // This is a dummy for now because we don't really care about it
            callback: () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            })
          };
          break;
        case "WebhookEventBridgeEndpoint":
          handler = {
            deliveryMethod: types_2.DeliveryMethod.EventBridge,
            arn: endpoint.arn
          };
          break;
        case "WebhookPubSubEndpoint":
          handler = {
            deliveryMethod: types_2.DeliveryMethod.PubSub,
            pubSubProject: endpoint.pubSubProject,
            pubSubTopic: endpoint.pubSubTopic
          };
          break;
      }
      return handler.id = edge.node.id, handler.includeFields = edge.node.includeFields, handler.metafieldNamespaces = edge.node.metafieldNamespaces, (_a = handler.includeFields) === null || _a === void 0 || _a.sort(), (_b = handler.metafieldNamespaces) === null || _b === void 0 || _b.sort(), handler;
    }
    function registerTopic({ config, session, topic, existingHandlers, handlers }) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let registerResults = [], { toCreate, toUpdate, toDelete } = categorizeHandlers(config, existingHandlers, handlers), GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config }), client = new GraphqlClient({ session }), operation = types_2.WebhookOperation.Create;
        return registerResults = registerResults.concat(yield runMutations({ config, client, topic, operation, handlers: toCreate })), operation = types_2.WebhookOperation.Update, registerResults = registerResults.concat(yield runMutations({ config, client, topic, operation, handlers: toUpdate })), operation = types_2.WebhookOperation.Delete, registerResults = registerResults.concat(yield runMutations({ config, client, topic, operation, handlers: toDelete })), registerResults;
      });
    }
    function categorizeHandlers(config, existingHandlers, handlers) {
      let handlersByKey = handlers.reduce((acc, value) => (acc[(0, registry_1.handlerIdentifier)(config, value)] = value, acc), {}), existingHandlersByKey = existingHandlers.reduce((acc, value) => (acc[(0, registry_1.handlerIdentifier)(config, value)] = value, acc), {}), toCreate = Object.assign({}, handlersByKey), toUpdate = {}, toDelete = {};
      for (let existingKey in existingHandlersByKey) {
        if (!Object.prototype.hasOwnProperty.call(existingHandlersByKey, existingKey))
          continue;
        let existingHandler = existingHandlersByKey[existingKey], handler = handlersByKey[existingKey];
        existingKey in handlersByKey ? (delete toCreate[existingKey], areHandlerFieldsEqual(existingHandler, handler) || (toUpdate[existingKey] = handler, toUpdate[existingKey].id = existingHandler.id)) : toDelete[existingKey] = existingHandler;
      }
      return {
        toCreate: Object.values(toCreate),
        toUpdate: Object.values(toUpdate),
        toDelete: Object.values(toDelete)
      };
    }
    function areHandlerFieldsEqual(arr1, arr2) {
      let includeFieldsEqual = arraysEqual2(arr1.includeFields || [], arr2.includeFields || []), metafieldNamespacesEqual = arraysEqual2(arr1.metafieldNamespaces || [], arr2.metafieldNamespaces || []);
      return includeFieldsEqual && metafieldNamespacesEqual;
    }
    function arraysEqual2(arr1, arr2) {
      if (arr1.length !== arr2.length)
        return false;
      for (let i = 0; i < arr1.length; i++)
        if (arr1[i] !== arr2[i])
          return false;
      return true;
    }
    function runMutations({ config, client, topic, handlers, operation }) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let registerResults = [];
        for (let handler of handlers)
          registerResults.push(yield runMutation({ config, client, topic, handler, operation }));
        return registerResults;
      });
    }
    function runMutation({ config, client, topic, handler, operation }) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let registerResult;
        (0, logger_1.logger)(config).debug("Running webhook mutation", { topic, operation });
        try {
          let query = buildMutation(config, topic, handler, operation), result = yield client.query({ data: query });
          registerResult = {
            deliveryMethod: handler.deliveryMethod,
            success: isSuccess(result.body, handler, operation),
            result: result.body,
            operation
          };
        } catch (error) {
          if (error instanceof error_1.InvalidDeliveryMethodError)
            registerResult = {
              deliveryMethod: handler.deliveryMethod,
              success: false,
              result: { message: error.message },
              operation
            };
          else
            throw error;
        }
        return registerResult;
      });
    }
    function buildMutation(config, topic, handler, operation) {
      let params = {}, identifier;
      handler.id ? identifier = `id: "${handler.id}"` : identifier = `topic: ${topic}`;
      let mutationArguments = {
        MUTATION_NAME: getMutationName(handler, operation),
        IDENTIFIER: identifier,
        MUTATION_PARAMS: ""
      };
      if (operation !== types_2.WebhookOperation.Delete) {
        switch (handler.deliveryMethod) {
          case types_2.DeliveryMethod.Http:
            params.callbackUrl = `"${(0, registry_1.addHostToCallbackUrl)(config, handler.callbackUrl)}"`;
            break;
          case types_2.DeliveryMethod.EventBridge:
            params.arn = `"${handler.arn}"`;
            break;
          case types_2.DeliveryMethod.PubSub:
            params.pubSubProject = `"${handler.pubSubProject}"`, params.pubSubTopic = `"${handler.pubSubTopic}"`;
            break;
          default:
            throw new error_1.InvalidDeliveryMethodError(`Unrecognized delivery method '${handler.deliveryMethod}'`);
        }
        handler.includeFields && (params.includeFields = JSON.stringify(handler.includeFields)), handler.metafieldNamespaces && (params.metafieldNamespaces = JSON.stringify(handler.metafieldNamespaces));
        let paramsString = Object.entries(params).map(([key, value]) => `${key}: ${value}`).join(", ");
        mutationArguments.MUTATION_PARAMS = `webhookSubscription: {${paramsString}}`;
      }
      return (0, query_template_1.queryTemplate)(exports.TEMPLATE_MUTATION, mutationArguments);
    }
    function getMutationName(handler, operation) {
      switch (operation) {
        case types_2.WebhookOperation.Create:
          return `${getEndpoint(handler)}Create`;
        case types_2.WebhookOperation.Update:
          return `${getEndpoint(handler)}Update`;
        case types_2.WebhookOperation.Delete:
          return "webhookSubscriptionDelete";
        default:
          throw new error_1.ShopifyError(`Unrecognized operation '${operation}'`);
      }
    }
    function getEndpoint(handler) {
      switch (handler.deliveryMethod) {
        case types_2.DeliveryMethod.Http:
          return "webhookSubscription";
        case types_2.DeliveryMethod.EventBridge:
          return "eventBridgeWebhookSubscription";
        case types_2.DeliveryMethod.PubSub:
          return "pubSubWebhookSubscription";
        default:
          throw new error_1.ShopifyError(`Unrecognized delivery method '${handler.deliveryMethod}'`);
      }
    }
    function isSuccess(result, handler, operation) {
      let mutationName = getMutationName(handler, operation);
      return Boolean(result.data && result.data[mutationName] && result.data[mutationName].userErrors.length === 0);
    }
    exports.TEMPLATE_GET_HANDLERS = `query shopifyApiReadWebhookSubscriptions {
  webhookSubscriptions(
    first: 250,
    after: {{END_CURSOR}},
  ) {
    edges {
      node {
        id
        topic
        includeFields
        metafieldNamespaces
        endpoint {
          __typename
          ... on WebhookHttpEndpoint {
            callbackUrl
          }
          ... on WebhookEventBridgeEndpoint {
            arn
          }
          ... on WebhookPubSubEndpoint {
            pubSubProject
            pubSubTopic
          }
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}`;
    exports.TEMPLATE_MUTATION = `
  mutation shopifyApiCreateWebhookSubscription {
    {{MUTATION_NAME}}(
      {{IDENTIFIER}},
      {{MUTATION_PARAMS}}
    ) {
      userErrors {
        field
        message
      }
    }
  }
`;
  }
});
var require_validate2 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/webhooks/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateFactory = void 0;
    var tslib_1 = require_tslib(), http_1 = require_http(), crypto_1 = require_crypto3(), types_1 = require_types3(), types_2 = require_types2(), safe_compare_1 = require_safe_compare(), logger_1 = require_logger(), types_3 = require_types7(), registry_1 = require_registry(), HANDLER_PROPERTIES = {
      apiVersion: types_2.ShopifyHeader.ApiVersion,
      domain: types_2.ShopifyHeader.Domain,
      hmac: types_2.ShopifyHeader.Hmac,
      topic: types_2.ShopifyHeader.Topic,
      webhookId: types_2.ShopifyHeader.WebhookId
    };
    function validateFactory(config) {
      return function(_a) {
        var { rawBody } = _a, adapterArgs = tslib_1.__rest(_a, ["rawBody"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let request = yield (0, http_1.abstractConvertRequest)(adapterArgs), log = (0, logger_1.logger)(config), webhookCheck = checkWebhookRequest(rawBody, request.headers);
          if (!webhookCheck.valid)
            return yield log.debug("Received malformed webhook request", webhookCheck), webhookCheck;
          let { hmac, valid: _valid } = webhookCheck, loggingContext = tslib_1.__rest(webhookCheck, ["hmac", "valid"]);
          return yield log.debug("Webhook request is well formed", loggingContext), (yield checkWebhookHmac(config.apiSecretKey, rawBody, hmac)) ? (yield log.debug("Webhook request is valid", loggingContext), webhookCheck) : (yield log.debug("Webhook HMAC validation failed. Please note that events manually triggered from a store's Notifications settings will fail this validation. To test this, please use the CLI or trigger the actual event in a development store."), {
            valid: false,
            reason: types_3.WebhookValidationErrorReason.InvalidHmac
          });
        });
      };
    }
    exports.validateFactory = validateFactory;
    function checkWebhookRequest(rawBody, headers2) {
      if (!rawBody.length)
        return {
          valid: false,
          reason: types_3.WebhookValidationErrorReason.MissingBody
        };
      let missingHeaders = [], headerValues = Object.entries(HANDLER_PROPERTIES).reduce((acc, [property, headerName]) => {
        let headerValue = (0, http_1.getHeader)(headers2, headerName);
        return headerValue ? acc[property] = headerValue : missingHeaders.push(headerName), acc;
      }, {});
      return missingHeaders.length ? {
        valid: false,
        reason: types_3.WebhookValidationErrorReason.MissingHeaders,
        missingHeaders
      } : Object.assign(Object.assign({ valid: true }, headerValues), { topic: (0, registry_1.topicForStorage)(headerValues.topic) });
    }
    function checkWebhookHmac(secret, rawBody, hmac) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let generatedHash = yield (0, crypto_1.createSHA256HMAC)(secret, rawBody, types_1.HashFormat.Base64);
        return (0, safe_compare_1.safeCompare)(generatedHash, hmac);
      });
    }
  }
});
var require_process = __commonJS({
  "node_modules/@shopify/shopify-api/lib/webhooks/process.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.process = void 0;
    var tslib_1 = require_tslib(), network_1 = require_network2(), http_1 = require_http(), ShopifyErrors = tslib_1.__importStar(require_error()), logger_1 = require_logger(), types_1 = require_types7(), validate_1 = require_validate2(), STATUS_TEXT_LOOKUP = {
      [network_1.StatusCode.Ok]: "OK",
      [network_1.StatusCode.BadRequest]: "Bad Request",
      [network_1.StatusCode.Unauthorized]: "Unauthorized",
      [network_1.StatusCode.NotFound]: "Not Found",
      [network_1.StatusCode.InternalServerError]: "Internal Server Error"
    };
    function process2(config, webhookRegistry) {
      return function(_a) {
        var { rawBody } = _a, adapterArgs = tslib_1.__rest(_a, ["rawBody"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let response = {
            statusCode: network_1.StatusCode.Ok,
            statusText: STATUS_TEXT_LOOKUP[network_1.StatusCode.Ok],
            headers: {}
          };
          yield (0, logger_1.logger)(config).info("Receiving webhook request");
          let webhookCheck = yield (0, validate_1.validateFactory)(config)(Object.assign({ rawBody }, adapterArgs)), errorMessage = "Unknown error while handling webhook";
          if (webhookCheck.valid) {
            let handlerResult = yield callWebhookHandlers(config, webhookRegistry, webhookCheck, rawBody);
            response.statusCode = handlerResult.statusCode, (0, http_1.isOK)(response) || (errorMessage = handlerResult.errorMessage || errorMessage);
          } else {
            let errorResult = yield handleInvalidWebhook(config, webhookCheck);
            response.statusCode = errorResult.statusCode, response.statusText = STATUS_TEXT_LOOKUP[response.statusCode], errorMessage = errorResult.errorMessage;
          }
          let returnResponse = yield (0, http_1.abstractConvertResponse)(response, adapterArgs);
          if (!(0, http_1.isOK)(response))
            throw new ShopifyErrors.InvalidWebhookError({
              message: errorMessage,
              response: returnResponse
            });
          return Promise.resolve(returnResponse);
        });
      };
    }
    exports.process = process2;
    function callWebhookHandlers(config, webhookRegistry, webhookCheck, rawBody) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let log = (0, logger_1.logger)(config), { hmac: _hmac, valid: _valid } = webhookCheck, loggingContext = tslib_1.__rest(webhookCheck, ["hmac", "valid"]);
        yield log.debug("Webhook request is valid, looking for HTTP handlers to call", loggingContext);
        let handlers = webhookRegistry[webhookCheck.topic] || [], response = { statusCode: network_1.StatusCode.Ok }, found = false;
        for (let handler of handlers)
          if (handler.deliveryMethod === types_1.DeliveryMethod.Http) {
            if (!handler.callback)
              throw response.statusCode = network_1.StatusCode.InternalServerError, response.errorMessage = "Cannot call webhooks.process with a webhook handler that doesn't have a callback", new ShopifyErrors.MissingWebhookCallbackError({
                message: response.errorMessage,
                response
              });
            found = true, yield log.debug("Found HTTP handler, triggering it", loggingContext);
            try {
              yield handler.callback(webhookCheck.topic, webhookCheck.domain, rawBody, webhookCheck.webhookId, webhookCheck.apiVersion);
            } catch (error) {
              response.statusCode = network_1.StatusCode.InternalServerError, response.errorMessage = error.message;
            }
          }
        return found || (yield log.debug("No HTTP handlers found", loggingContext), response.statusCode = network_1.StatusCode.NotFound, response.errorMessage = `No HTTP webhooks registered for topic ${webhookCheck.topic}`), response;
      });
    }
    function handleInvalidWebhook(config, webhookCheck) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let response = {
          statusCode: network_1.StatusCode.InternalServerError,
          errorMessage: "Unknown error while handling webhook"
        };
        switch (webhookCheck.reason) {
          case types_1.WebhookValidationErrorReason.MissingHeaders:
            response.statusCode = network_1.StatusCode.BadRequest, response.errorMessage = `Missing one or more of the required HTTP headers to process webhooks: [${webhookCheck.missingHeaders.join(", ")}]`;
            break;
          case types_1.WebhookValidationErrorReason.MissingBody:
            response.statusCode = network_1.StatusCode.BadRequest, response.errorMessage = "No body was received when processing webhook";
            break;
          case types_1.WebhookValidationErrorReason.InvalidHmac:
            response.statusCode = network_1.StatusCode.Unauthorized, response.errorMessage = "Could not validate request HMAC";
            break;
        }
        return yield (0, logger_1.logger)(config).debug(`Webhook request is invalid, returning ${response.statusCode}: ${response.errorMessage}`), response;
      });
    }
  }
});
var require_webhooks = __commonJS({
  "node_modules/@shopify/shopify-api/lib/webhooks/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shopifyWebhooks = void 0;
    var registry_1 = require_registry(), register_1 = require_register(), process_1 = require_process(), validate_1 = require_validate2();
    function shopifyWebhooks(config) {
      let webhookRegistry = (0, registry_1.registry)();
      return {
        addHandlers: (0, registry_1.addHandlers)(config, webhookRegistry),
        getTopicsAdded: (0, registry_1.getTopicsAdded)(webhookRegistry),
        getHandlers: (0, registry_1.getHandlers)(webhookRegistry),
        register: (0, register_1.register)(config, webhookRegistry),
        process: (0, process_1.process)(config, webhookRegistry),
        validate: (0, validate_1.validateFactory)(config)
      };
    }
    exports.shopifyWebhooks = shopifyWebhooks;
  }
});
var require_check = __commonJS({
  "node_modules/@shopify/shopify-api/lib/billing/check.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.check = void 0;
    var tslib_1 = require_tslib(), graphql_client_1 = require_graphql_client(), error_1 = require_error();
    function check2(config) {
      return function({ session, plans, isTest = true, returnObject = false }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (!config.billing)
            throw new error_1.BillingError({
              message: "Attempted to look for purchases without billing configs",
              errorData: []
            });
          let GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config }), client = new GraphqlClient({ session }), plansArray = Array.isArray(plans) ? plans : [plans];
          return assessPayments({
            plans: plansArray,
            client,
            isTest,
            returnObject
          });
        });
      };
    }
    exports.check = check2;
    function assessPayments({ plans, client, isTest, returnObject }) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let returnValue = returnObject ? {
          hasActivePayment: false,
          oneTimePurchases: [],
          appSubscriptions: []
        } : false, installation, endCursor = null;
        do {
          if (installation = (yield client.query({
            data: {
              query: HAS_PAYMENTS_QUERY,
              variables: { endCursor }
            }
          })).body.data.currentAppInstallation, returnObject)
            installation.activeSubscriptions.map((subscription) => {
              subscriptionMeetsCriteria({ plans, isTest, subscription }) && (returnValue.hasActivePayment = true, returnValue.appSubscriptions.push(subscription));
            }), installation.oneTimePurchases.edges.map((purchase) => {
              purchaseMeetsCriteria({ plans, isTest, purchase: purchase.node }) && (returnValue.hasActivePayment = true, returnValue.oneTimePurchases.push(purchase.node));
            });
          else {
            let params = { plans, isTest, installation };
            if (hasSubscription(params) || hasOneTimePayment(params))
              return true;
          }
          endCursor = installation.oneTimePurchases.pageInfo.endCursor;
        } while (installation?.oneTimePurchases.pageInfo.hasNextPage);
        return returnValue;
      });
    }
    function subscriptionMeetsCriteria({ plans, isTest, subscription }) {
      return plans.includes(subscription.name) && (isTest || !subscription.test);
    }
    function purchaseMeetsCriteria({ plans, isTest, purchase }) {
      return plans.includes(purchase.name) && (isTest || !purchase.test) && purchase.status === "ACTIVE";
    }
    function hasSubscription({ plans, isTest, installation }) {
      return installation.activeSubscriptions.some((subscription) => subscriptionMeetsCriteria({ plans, isTest, subscription }));
    }
    function hasOneTimePayment({ plans, isTest, installation }) {
      return installation.oneTimePurchases.edges.some((purchase) => purchaseMeetsCriteria({ plans, isTest, purchase: purchase.node }));
    }
    var HAS_PAYMENTS_QUERY = `
  query appSubscription($endCursor: String) {
    currentAppInstallation {
      activeSubscriptions {
        id
        name
        test
      }

      oneTimePurchases(first: 250, sortKey: CREATED_AT, after: $endCursor) {
        edges {
          node {
            id
            name
            test
            status
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  }
`;
  }
});
var require_request = __commonJS({
  "node_modules/@shopify/shopify-api/lib/billing/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.request = void 0;
    var tslib_1 = require_tslib(), types_1 = require_types2(), error_1 = require_error(), get_embedded_app_url_1 = require_get_embedded_app_url(), graphql_client_1 = require_graphql_client(), crypto_1 = require_crypto3(), types_2 = require_types3();
    function request(config) {
      return function(_a) {
        var _b, { session, plan, isTest = true, returnUrl: returnUrlParam, returnObject = false } = _a, overrides = tslib_1.__rest(_a, ["session", "plan", "isTest", "returnUrl", "returnObject"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (!config.billing || !config.billing[plan])
            throw new error_1.BillingError({
              message: `Could not find plan ${plan} in billing settings`,
              errorData: []
            });
          let billingConfig = Object.assign({}, config.billing[plan]), filteredOverrides = Object.fromEntries(Object.entries(overrides).filter(([_key, value]) => value !== void 0)), cleanShopName = session.shop.replace(".myshopify.com", ""), embeddedAppUrl = (0, get_embedded_app_url_1.buildEmbeddedAppUrl)(config)((0, crypto_1.hashString)(`admin.shopify.com/store/${cleanShopName}`, types_2.HashFormat.Base64)), appUrl = `${config.hostScheme}://${config.hostName}?shop=${session.shop}`, returnUrl = returnUrlParam || (config.isEmbeddedApp ? embeddedAppUrl : appUrl), GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config }), client = new GraphqlClient({ session });
          function isLineItemPlan(billingConfig2) {
            return "lineItems" in billingConfig2;
          }
          function isOneTimePlan(billingConfig2) {
            return billingConfig2.interval === types_1.BillingInterval.OneTime;
          }
          let data;
          if (isLineItemPlan(billingConfig)) {
            let mergedBillingConfigs = mergeBillingConfigs(billingConfig, filteredOverrides);
            data = (yield requestSubscriptionPayment({
              billingConfig: mergedBillingConfigs,
              plan,
              client,
              returnUrl,
              isTest
            })).data.appSubscriptionCreate;
          } else if (isOneTimePlan(billingConfig))
            data = (yield requestSinglePayment({
              billingConfig: Object.assign(Object.assign({}, billingConfig), filteredOverrides),
              plan,
              client,
              returnUrl,
              isTest
            })).data.appPurchaseOneTimeCreate;
          else
            switch (billingConfig.interval) {
              case types_1.BillingInterval.Usage: {
                data = (yield requestUsagePayment({
                  billingConfig: Object.assign(Object.assign({}, billingConfig), filteredOverrides),
                  plan,
                  client,
                  returnUrl,
                  isTest
                })).data.appSubscriptionCreate;
                break;
              }
              default:
                data = (yield requestRecurringPayment({
                  billingConfig: Object.assign(Object.assign({}, billingConfig), filteredOverrides),
                  plan,
                  client,
                  returnUrl,
                  isTest
                })).data.appSubscriptionCreate;
            }
          if (!((_b = data.userErrors) === null || _b === void 0) && _b.length)
            throw new error_1.BillingError({
              message: "Error while billing the store",
              errorData: data.userErrors
            });
          return returnObject ? data : data.confirmationUrl;
        });
      };
    }
    exports.request = request;
    function requestSubscriptionPayment({ billingConfig, plan, client, returnUrl, isTest }) {
      var _a;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let lineItems = billingConfig.lineItems.map((item) => {
          if (item.interval === types_1.BillingInterval.Every30Days || item.interval === types_1.BillingInterval.Annual) {
            let appRecurringPricingDetails = {
              interval: item.interval,
              price: {
                amount: item.amount,
                currencyCode: item.currencyCode
              }
            };
            return item.discount && (appRecurringPricingDetails.discount = {
              durationLimitInIntervals: item.discount.durationLimitInIntervals,
              value: {
                amount: item.discount.value.amount,
                percentage: item.discount.value.percentage
              }
            }), {
              plan: {
                appRecurringPricingDetails
              }
            };
          } else {
            if (item.interval === types_1.BillingInterval.Usage)
              return {
                plan: {
                  appUsagePricingDetails: {
                    terms: item.terms,
                    cappedAmount: {
                      amount: item.amount,
                      currencyCode: item.currencyCode
                    }
                  }
                }
              };
            throw new error_1.BillingError({
              message: "Invalid interval provided",
              errorData: [item]
            });
          }
        }), mutationResponse = yield client.query({
          data: {
            query: RECURRING_PURCHASE_MUTATION,
            variables: {
              name: plan,
              trialDays: billingConfig.trialDays,
              replacementBehavior: billingConfig.replacementBehavior,
              returnUrl,
              test: isTest,
              lineItems
            }
          }
        });
        if (!((_a = mutationResponse.body.errors) === null || _a === void 0) && _a.length)
          throw new error_1.BillingError({
            message: "Error while billing the store",
            errorData: mutationResponse.body.errors
          });
        return mutationResponse.body;
      });
    }
    function requestRecurringPayment({ billingConfig, plan, client, returnUrl, isTest }) {
      var _a, _b, _c, _d, _e, _f;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let mutationResponse = yield client.query({
          data: {
            query: RECURRING_PURCHASE_MUTATION,
            variables: {
              name: plan,
              trialDays: billingConfig.trialDays,
              replacementBehavior: billingConfig.replacementBehavior,
              returnUrl,
              test: isTest,
              lineItems: [
                {
                  plan: {
                    appRecurringPricingDetails: {
                      interval: billingConfig.interval,
                      price: {
                        amount: billingConfig.amount,
                        currencyCode: billingConfig.currencyCode
                      },
                      discount: {
                        durationLimitInIntervals: (_a = billingConfig.discount) === null || _a === void 0 ? void 0 : _a.durationLimitInIntervals,
                        value: {
                          amount: (_c = (_b = billingConfig.discount) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.amount,
                          percentage: (_e = (_d = billingConfig.discount) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.percentage
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        });
        if (!((_f = mutationResponse.body.errors) === null || _f === void 0) && _f.length)
          throw new error_1.BillingError({
            message: "Error while billing the store",
            errorData: mutationResponse.body.errors
          });
        return mutationResponse.body;
      });
    }
    function requestUsagePayment({ billingConfig, plan, client, returnUrl, isTest }) {
      var _a;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let mutationResponse = yield client.query({
          data: {
            query: RECURRING_PURCHASE_MUTATION,
            variables: {
              name: plan,
              returnUrl,
              test: isTest,
              trialDays: billingConfig.trialDays,
              replacementBehavior: billingConfig.replacementBehavior,
              lineItems: [
                {
                  plan: {
                    appUsagePricingDetails: {
                      terms: billingConfig.usageTerms,
                      cappedAmount: {
                        amount: billingConfig.amount,
                        currencyCode: billingConfig.currencyCode
                      }
                    }
                  }
                }
              ]
            }
          }
        });
        if (!((_a = mutationResponse.body.errors) === null || _a === void 0) && _a.length)
          throw new error_1.BillingError({
            message: `Error while billing the store:: ${mutationResponse.body.errors}`,
            errorData: mutationResponse.body.errors
          });
        return mutationResponse.body;
      });
    }
    function requestSinglePayment({ billingConfig, plan, client, returnUrl, isTest }) {
      var _a;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let mutationResponse = yield client.query({
          data: {
            query: ONE_TIME_PURCHASE_MUTATION,
            variables: {
              name: plan,
              returnUrl,
              test: isTest,
              price: {
                amount: billingConfig.amount,
                currencyCode: billingConfig.currencyCode
              }
            }
          }
        });
        if (!((_a = mutationResponse.body.errors) === null || _a === void 0) && _a.length)
          throw new error_1.BillingError({
            message: "Error while billing the store",
            errorData: mutationResponse.body.errors
          });
        return mutationResponse.body;
      });
    }
    function mergeBillingConfigs(billingConfig, overrides) {
      let mergedConfig = Object.assign(Object.assign({}, billingConfig), overrides), mergedLineItems = [];
      if (billingConfig.lineItems && overrides.lineItems) {
        for (let i of billingConfig.lineItems) {
          let found = false;
          for (let j of overrides.lineItems)
            if (i.interval === j.interval) {
              mergedLineItems.push(Object.assign(Object.assign({}, i), j)), found = true;
              break;
            }
          found || mergedLineItems.push(i);
        }
        mergedConfig.lineItems = mergedLineItems;
      }
      return mergedConfig;
    }
    var RECURRING_PURCHASE_MUTATION = `
  mutation test(
    $name: String!
    $lineItems: [AppSubscriptionLineItemInput!]!
    $returnUrl: URL!
    $test: Boolean
    $trialDays: Int
    $replacementBehavior: AppSubscriptionReplacementBehavior
  ) {
    appSubscriptionCreate(
      name: $name
      lineItems: $lineItems
      returnUrl: $returnUrl
      test: $test
      trialDays: $trialDays
      replacementBehavior: $replacementBehavior
    ) {
      appSubscription {
        id
        name
        test
      }
      confirmationUrl
      userErrors {
        field
        message
      }
    }
  }
`, ONE_TIME_PURCHASE_MUTATION = `
  mutation test(
    $name: String!
    $price: MoneyInput!
    $returnUrl: URL!
    $test: Boolean
  ) {
    appPurchaseOneTimeCreate(
      name: $name
      price: $price
      returnUrl: $returnUrl
      test: $test
    ) {
      appPurchaseOneTime {
        id
        name
        test
      }
      confirmationUrl
      userErrors {
        field
        message
      }
    }
  }
`;
  }
});
var require_cancel = __commonJS({
  "node_modules/@shopify/shopify-api/lib/billing/cancel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cancel = void 0;
    var tslib_1 = require_tslib(), graphql_client_1 = require_graphql_client(), error_1 = require_error(), CANCEL_MUTATION = `
  mutation appSubscriptionCancel($id: ID!, $prorate: Boolean) {
    appSubscriptionCancel(id: $id, prorate: $prorate) {
      appSubscription {
        id
        name
        test
      }
      userErrors {
        field
        message
      }
    }
  }
`;
    function cancel(config) {
      return function(subscriptionInfo) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let { session, subscriptionId, prorate = true } = subscriptionInfo, GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config }), client = new GraphqlClient({ session });
          try {
            let response = yield client.query({
              data: {
                query: CANCEL_MUTATION,
                variables: {
                  id: subscriptionId,
                  prorate
                }
              }
            });
            if (response.body.data.appSubscriptionCancel.userErrors.length)
              throw new error_1.BillingError({
                message: "Error while canceling a subscription",
                errorData: response.body.data.appSubscriptionCancel.userErrors
              });
            return response.body.data.appSubscriptionCancel.appSubscription;
          } catch (error) {
            throw error instanceof error_1.GraphqlQueryError ? new error_1.BillingError({
              message: error.message,
              errorData: (_a = error.response) === null || _a === void 0 ? void 0 : _a.errors
            }) : error;
          }
        });
      };
    }
    exports.cancel = cancel;
  }
});
var require_subscriptions = __commonJS({
  "node_modules/@shopify/shopify-api/lib/billing/subscriptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.subscriptions = void 0;
    var tslib_1 = require_tslib(), error_1 = require_error(), graphql_client_1 = require_graphql_client(), SUBSCRIPTION_QUERY = `
  query appSubscription {
    currentAppInstallation {
      activeSubscriptions {
        id
        name
        test
      }
  }
}
`;
    function subscriptions(config) {
      return function({ session }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          if (!config.billing)
            throw new error_1.BillingError({
              message: "Attempted to look for purchases without billing configs",
              errorData: []
            });
          let GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config });
          return (yield new GraphqlClient({ session }).query({
            data: {
              query: SUBSCRIPTION_QUERY
            }
          })).body.data.currentAppInstallation;
        });
      };
    }
    exports.subscriptions = subscriptions;
  }
});
var require_billing = __commonJS({
  "node_modules/@shopify/shopify-api/lib/billing/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shopifyBilling = void 0;
    var check_1 = require_check(), request_1 = require_request(), cancel_1 = require_cancel(), subscriptions_1 = require_subscriptions();
    function shopifyBilling(config) {
      return {
        check: (0, check_1.check)(config),
        request: (0, request_1.request)(config),
        cancel: (0, cancel_1.cancel)(config),
        subscriptions: (0, subscriptions_1.subscriptions)(config)
      };
    }
    exports.shopifyBilling = shopifyBilling;
  }
});
var require_classes = __commonJS({
  "node_modules/@shopify/shopify-api/lib/session/classes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Session = void 0;
    var session_1 = require_session();
    Object.defineProperty(exports, "Session", { enumerable: true, get: function() {
      return session_1.Session;
    } });
  }
});
var require_types8 = __commonJS({
  "node_modules/@shopify/shopify-api/rest/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});
var require_base_types = __commonJS({
  "node_modules/@shopify/shopify-api/lib/base-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});
var require_types9 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/auth/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequestedTokenType = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_types6(), exports);
    var token_exchange_1 = require_token_exchange();
    Object.defineProperty(exports, "RequestedTokenType", { enumerable: true, get: function() {
      return token_exchange_1.RequestedTokenType;
    } });
  }
});
var require_types10 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/billing/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});
var require_types11 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/rest/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});
var require_types12 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/graphql/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});
var require_types13 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/clients/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_types11(), exports);
    tslib_1.__exportStar(require_types12(), exports);
  }
});
var require_types14 = __commonJS({
  "node_modules/@shopify/shopify-api/lib/session/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});
var require_lib = __commonJS({
  "node_modules/@shopify/shopify-api/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shopifyApi = void 0;
    var tslib_1 = require_tslib(), load_rest_resources_1 = require_load_rest_resources(), platform_1 = require_platform(), config_1 = require_config(), clients_1 = require_clients(), auth_1 = require_auth(), session_1 = require_session2(), utils_1 = require_utils3(), webhooks_1 = require_webhooks(), billing_1 = require_billing(), logger_1 = require_logger(), version_1 = require_version();
    tslib_1.__exportStar(require_error(), exports);
    tslib_1.__exportStar(require_classes(), exports);
    tslib_1.__exportStar(require_types8(), exports);
    tslib_1.__exportStar(require_types2(), exports);
    tslib_1.__exportStar(require_base_types(), exports);
    tslib_1.__exportStar(require_types9(), exports);
    tslib_1.__exportStar(require_types10(), exports);
    tslib_1.__exportStar(require_types13(), exports);
    tslib_1.__exportStar(require_types14(), exports);
    tslib_1.__exportStar(require_types7(), exports);
    function shopifyApi(_a) {
      var { future: future2 } = _a, config = tslib_1.__rest(_a, ["future"]);
      let { restResources: restResources2 } = config, otherConfigs = tslib_1.__rest(config, ["restResources"]), libConfig = Object.assign(Object.assign({}, otherConfigs), { future: future2 }), validatedConfig = (0, config_1.validateConfig)(libConfig), shopify2 = {
        config: validatedConfig,
        clients: (0, clients_1.clientClasses)(validatedConfig),
        auth: (0, auth_1.shopifyAuth)(validatedConfig),
        session: (0, session_1.shopifySession)(validatedConfig),
        utils: (0, utils_1.shopifyUtils)(validatedConfig),
        webhooks: (0, webhooks_1.shopifyWebhooks)(validatedConfig),
        billing: (0, billing_1.shopifyBilling)(validatedConfig),
        logger: (0, logger_1.logger)(validatedConfig),
        rest: {}
      };
      return restResources2 && (shopify2.rest = (0, load_rest_resources_1.loadRestResources)({
        resources: restResources2,
        config: validatedConfig,
        RestClient: shopify2.clients.Rest
      })), shopify2.logger.info(`version ${version_1.SHOPIFY_API_LIBRARY_VERSION}, environment ${(0, platform_1.abstractRuntimeString)()}`).catch((err) => console.log(err)), shopify2;
    }
    exports.shopifyApi = shopifyApi;
  }
});
var require_types15 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AppDistribution2 = /* @__PURE__ */ function(AppDistribution3) {
      return AppDistribution3.AppStore = "app_store", AppDistribution3.SingleMerchant = "single_merchant", AppDistribution3.ShopifyAdmin = "shopify_admin", AppDistribution3;
    }({}), LoginErrorType2 = /* @__PURE__ */ function(LoginErrorType3) {
      return LoginErrorType3.MissingShop = "MISSING_SHOP", LoginErrorType3.InvalidShop = "INVALID_SHOP", LoginErrorType3;
    }({});
    exports.AppDistribution = AppDistribution2;
    exports.LoginErrorType = LoginErrorType2;
  }
});
var require_headers2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/boundary/headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function headersBoundary(headers2) {
      let {
        parentHeaders,
        loaderHeaders,
        actionHeaders,
        errorHeaders
      } = headers2;
      return errorHeaders && Array.from(errorHeaders.entries()).length > 0 ? errorHeaders : new Headers([...parentHeaders ? Array.from(parentHeaders.entries()) : [], ...loaderHeaders ? Array.from(loaderHeaders.entries()) : [], ...actionHeaders ? Array.from(actionHeaders.entries()) : []]);
    }
    exports.headersBoundary = headersBoundary;
  }
});
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React270 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React270.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false, enableCacheElement = false, enableTransitionTracing = false, enableLegacyHidden = false, enableDebugTracing = false, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0)
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match2 && match2[1] || "";
            }
          return `
` + prefix + name;
        }
      }
      var reentry = false, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = false, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
      }
      function shouldConstruct(Component9) {
        var prototype = Component9.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values2, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = true, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), false;
        } catch {
          return true;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning)
            return false;
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning)
            return false;
        }
        return config.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        if (typeof config.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref), didWarnAboutStringRefs[componentName] = true);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = true, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = true, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = true, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = true, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }), Object.defineProperty(element, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV8(type, config, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), hasValidRef(config) && (ref = config.ref, warnIfStringRefCannotBeAutoConverted(config, self2));
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config[propName]);
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2)
              props[propName] === void 0 && (props[propName] = defaultProps2[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = false;
      function isValidElement7(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              isValidElement7(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement7(node))
            node._store && (node._store.validated = true);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement7(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV8(type, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++)
                    validateChildKeys(children[i], type);
                  Object.freeze && Object.freeze(children);
                } else
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type);
          }
          return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
      }
      function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
      }
      var jsx = jsxWithValidationDynamic, jsxs = jsxWithValidationStatic;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsx = jsx, exports.jsxs = jsxs;
    })();
  }
});
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    module.exports = require_react_jsx_runtime_development();
  }
});
var require_error2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/boundary/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var jsxRuntime = require_jsx_runtime();
    function errorBoundary(error) {
      if (error.constructor.name === "ErrorResponse" || error.constructor.name === "ErrorResponseImpl")
        return /* @__PURE__ */ jsxRuntime.jsx("div", {
          dangerouslySetInnerHTML: {
            __html: error.data || "Handling response"
          }
        });
      throw error;
    }
    exports.errorBoundary = errorBoundary;
  }
});
var require_boundary = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/boundary/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var headers2 = require_headers2(), error = require_error2(), boundary2 = {
      /**
       * A function that handles errors or thrown responses.
       *
       * @example
       * <caption>Catching errors in a route</caption>
       * ```ts
       * // /app/routes/admin/widgets.ts
       * import { boundary } from "@shopify/shopify-app-remix/server";
       *
       * export function ErrorBoundary() {
       *   return boundary.error(useRouteError());
       * }
       * ```
       */
      error: error.errorBoundary,
      /**
       * A function that sets the appropriate document repsonse headers.
       *
       * @example
       * <caption>Catching errors in a route</caption>
       * ```ts
       * // /app/routes/admin/widgets.ts
       * import { boundary } from "@shopify/shopify-app-remix/server";
       *
       * export const headers = (headersArgs) => {
       *   return boundary.headers(headersArgs);
       * };
       * ```
       */
      headers: headers2.headersBoundary
    };
    exports.boundary = boundary2;
  }
});
var require_version3 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SHOPIFY_REMIX_LIBRARY_VERSION = "2.2.0";
    exports.SHOPIFY_REMIX_LIBRARY_VERSION = SHOPIFY_REMIX_LIBRARY_VERSION;
  }
});
var require_register2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/webhooks/register.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function registerWebhooksFactory({
      api,
      logger
    }) {
      return async function({
        session
      }) {
        return api.webhooks.register({
          session
        }).then((response) => (Object.entries(response).forEach(([topic, topicResults]) => {
          topicResults.forEach(({
            success,
            ...rest
          }) => {
            success ? logger.debug("Registered webhook", {
              topic,
              shop: session.shop,
              operation: rest.operation
            }) : logger.error("Failed to register webhook", {
              topic,
              shop: session.shop,
              result: JSON.stringify(rest.result)
            });
          });
        }), response));
      };
    }
    exports.registerWebhooksFactory = registerWebhooksFactory;
  }
});
var require_const = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/const.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var APP_BRIDGE_URL = "https://cdn.shopify.com/shopifycloud/app-bridge.js", REAUTH_URL_HEADER = "X-Shopify-API-Request-Failure-Reauthorize-Url";
    exports.APP_BRIDGE_URL = APP_BRIDGE_URL;
    exports.REAUTH_URL_HEADER = REAUTH_URL_HEADER;
  }
});
var require_ensure_cors_headers = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/helpers/ensure-cors-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _const = require_const();
    function ensureCORSHeadersFactory(params, request, corsHeaders = []) {
      let {
        logger,
        config
      } = params;
      return function(response) {
        let origin = request.headers.get("Origin");
        if (origin && origin !== config.appUrl) {
          logger.debug("Request comes from a different origin, adding CORS headers");
          let corsHeadersSet = /* @__PURE__ */ new Set(["Authorization", "Content-Type", ...corsHeaders]);
          response.headers.set("Access-Control-Allow-Origin", "*"), response.headers.set("Access-Control-Allow-Headers", [...corsHeadersSet].join(", ")), response.headers.set("Access-Control-Expose-Headers", _const.REAUTH_URL_HEADER);
        }
        return response;
      };
    }
    exports.ensureCORSHeadersFactory = ensureCORSHeadersFactory;
  }
});
var require_validate_session_token = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/helpers/validate-session-token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    async function validateSessionToken({
      api,
      logger
    }, token, {
      checkAudience = true
    } = {}) {
      logger.debug("Validating session token");
      try {
        let payload = await api.session.decodeSessionToken(token, {
          checkAudience
        });
        return logger.debug("Session token is valid", {
          payload: JSON.stringify(payload)
        }), payload;
      } catch (error) {
        throw logger.debug(`Failed to validate session token: ${error.message}`), new Response(void 0, {
          status: 401,
          statusText: "Unauthorized"
        });
      }
    }
    exports.validateSessionToken = validateSessionToken;
  }
});
var require_get_session_token_header = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/helpers/get-session-token-header.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SESSION_TOKEN_PARAM = "id_token";
    function getSessionTokenHeader(request) {
      var _request$headers$get;
      return (_request$headers$get = request.headers.get("authorization")) === null || _request$headers$get === void 0 ? void 0 : _request$headers$get.replace("Bearer ", "");
    }
    function getSessionTokenFromUrlParam(request) {
      return new URL(request.url).searchParams.get(SESSION_TOKEN_PARAM);
    }
    exports.getSessionTokenFromUrlParam = getSessionTokenFromUrlParam;
    exports.getSessionTokenHeader = getSessionTokenHeader;
  }
});
var require_reject_bot_request = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/helpers/reject-bot-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var isbot2 = require_isbot();
    function _interopDefaultLegacy(e) {
      return e && typeof e == "object" && "default" in e ? e : { default: e };
    }
    var isbot__default = /* @__PURE__ */ _interopDefaultLegacy(isbot2);
    function respondToBotRequest({
      logger
    }, request) {
      if (isbot__default.default(request.headers.get("User-Agent")))
        throw logger.debug("Request is from a bot, skipping auth"), new Response(void 0, {
          status: 410,
          statusText: "Gone"
        });
    }
    exports.respondToBotRequest = respondToBotRequest;
  }
});
var require_respond_to_options_request = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/helpers/respond-to-options-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ensureCorsHeaders = require_ensure_cors_headers();
    function respondToOptionsRequest(params, request, corsHeaders) {
      if (request.method === "OPTIONS")
        throw ensureCorsHeaders.ensureCORSHeadersFactory(params, request, corsHeaders)(new Response(null, {
          status: 204,
          headers: {
            "Access-Control-Max-Age": "7200"
          }
        }));
    }
    exports.respondToOptionsRequest = respondToOptionsRequest;
  }
});
var require_begin_auth = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/begin-auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    async function beginAuth(params, request, isOnline, shop) {
      let {
        api,
        config
      } = params;
      throw await api.auth.begin({
        shop,
        callbackPath: config.auth.callbackPath,
        isOnline,
        rawRequest: request
      });
    }
    exports.beginAuth = beginAuth;
  }
});
var require_redirect_with_exitiframe = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/redirect-with-exitiframe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var serverRuntime = (init_esm(), __toCommonJS(esm_exports));
    function redirectWithExitIframe(params, request, shop) {
      let {
        api,
        config
      } = params, queryParams = new URL(request.url).searchParams, host = api.utils.sanitizeHost(queryParams.get("host"));
      throw queryParams.set("shop", shop), queryParams.set("exitIframe", `${config.auth.path}?shop=${shop}`), host && queryParams.set("host", host), serverRuntime.redirect(`${config.auth.exitIframePath}?${queryParams.toString()}`);
    }
    exports.redirectWithExitIframe = redirectWithExitIframe;
  }
});
var require_redirect_with_app_bridge_headers = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/redirect-with-app-bridge-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _const = require_const();
    function redirectWithAppBridgeHeaders(redirectUri) {
      throw new Response(void 0, {
        status: 401,
        statusText: "Unauthorized",
        headers: getAppBridgeHeaders(redirectUri)
      });
    }
    function getAppBridgeHeaders(url) {
      return new Headers({
        [_const.REAUTH_URL_HEADER]: url
      });
    }
    exports.getAppBridgeHeaders = getAppBridgeHeaders;
    exports.redirectWithAppBridgeHeaders = redirectWithAppBridgeHeaders;
  }
});
var require_redirect_to_auth_page = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/redirect-to-auth-page.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var beginAuth = require_begin_auth(), redirectWithExitiframe = require_redirect_with_exitiframe(), redirectWithAppBridgeHeaders = require_redirect_with_app_bridge_headers();
    async function redirectToAuthPage(params, request, shop, isOnline = false) {
      let {
        config
      } = params, isEmbeddedRequest = new URL(request.url).searchParams.get("embedded") === "1";
      if (request.headers.get("authorization")) {
        let redirectUri = new URL(config.auth.path, config.appUrl);
        redirectUri.searchParams.set("shop", shop), redirectWithAppBridgeHeaders.redirectWithAppBridgeHeaders(redirectUri.toString());
      } else if (isEmbeddedRequest)
        redirectWithExitiframe.redirectWithExitIframe(params, request, shop);
      else
        throw await beginAuth.beginAuth(params, request, isOnline, shop);
    }
    exports.redirectToAuthPage = redirectToAuthPage;
  }
});
var require_cancel2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/billing/cancel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib();
    require_runtime();
    var redirectToAuthPage = require_redirect_to_auth_page();
    init_esm();
    function cancelBillingFactory(params, request, session) {
      return async function(options) {
        let {
          api,
          logger
        } = params;
        logger.debug("Cancelling billing", {
          shop: session.shop,
          ...options
        });
        try {
          return await api.billing.cancel({
            session,
            subscriptionId: options.subscriptionId,
            isTest: options.isTest,
            prorate: options.prorate
          });
        } catch (error) {
          throw error instanceof shopifyApi.HttpResponseError && error.response.code === 401 ? (logger.debug("API token was invalid, redirecting to OAuth", {
            shop: session.shop
          }), await redirectToAuthPage.redirectToAuthPage(params, request, session.shop)) : error;
        }
      };
    }
    exports.cancelBillingFactory = cancelBillingFactory;
  }
});
var require_require = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/billing/require.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib();
    require_runtime();
    var redirectToAuthPage = require_redirect_to_auth_page();
    init_esm();
    function requireBillingFactory(params, request, session) {
      let {
        api,
        logger
      } = params;
      return async function(options) {
        let logContext = {
          shop: session.shop,
          plans: options.plans,
          isTest: options.isTest
        };
        logger.debug("Checking billing for the shop", logContext);
        let data;
        try {
          data = await api.billing.check({
            session,
            plans: options.plans,
            isTest: options.isTest,
            returnObject: true
          });
        } catch (error) {
          throw error instanceof shopifyApi.HttpResponseError && error.response.code === 401 ? (logger.debug("API token was invalid, redirecting to OAuth", logContext), await redirectToAuthPage.redirectToAuthPage(params, request, session.shop)) : error;
        }
        if (!data.hasActivePayment)
          throw logger.debug("Billing check failed", logContext), await options.onFailure(new Error("Billing check failed"));
        return logger.debug("Billing check succeeded", logContext), data;
      };
    }
    exports.requireBillingFactory = requireBillingFactory;
  }
});
var require_request2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/billing/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib(), serverRuntime = (init_esm(), __toCommonJS(esm_exports));
    require_runtime();
    var redirectToAuthPage = require_redirect_to_auth_page(), redirectWithAppBridgeHeaders = require_redirect_with_app_bridge_headers();
    function requestBillingFactory(params, request, session) {
      return async function({
        plan,
        isTest,
        returnUrl,
        ...overrides
      }) {
        let {
          api,
          logger
        } = params;
        logger.info("Requesting billing", {
          shop: session.shop,
          plan,
          isTest,
          returnUrl
        });
        let result;
        try {
          result = await api.billing.request({
            plan,
            session,
            isTest,
            returnUrl,
            returnObject: true,
            ...overrides
          });
        } catch (error) {
          throw error instanceof shopifyApi.HttpResponseError && error.response.code === 401 ? (logger.debug("API token was invalid, redirecting to OAuth", {
            shop: session.shop
          }), await redirectToAuthPage.redirectToAuthPage(params, request, session.shop)) : error;
        }
        throw redirectOutOfApp(params, request, result.confirmationUrl, session.shop);
      };
    }
    function redirectOutOfApp(params, request, url, shop) {
      let {
        config,
        logger
      } = params;
      logger.debug("Redirecting out of app", {
        url
      });
      let requestUrl = new URL(request.url), isEmbeddedRequest = requestUrl.searchParams.get("embedded") === "1";
      if (request.headers.get("authorization"))
        throw new Response(void 0, {
          status: 401,
          statusText: "Unauthorized",
          headers: redirectWithAppBridgeHeaders.getAppBridgeHeaders(url)
        });
      if (isEmbeddedRequest) {
        let params2 = new URLSearchParams({
          shop,
          host: requestUrl.searchParams.get("host"),
          exitIframe: url
        });
        throw serverRuntime.redirect(`${config.auth.exitIframePath}?${params2.toString()}`);
      } else
        throw serverRuntime.redirect(url);
    }
    exports.requestBillingFactory = requestBillingFactory;
  }
});
var require_graphql = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/clients/admin/graphql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var runtime = require_runtime();
    function graphqlClientFactory({
      params,
      handleClientError,
      session
    }) {
      return async function(operation, options) {
        let client = new params.api.clients.Graphql({
          session,
          apiVersion: options?.apiVersion
        });
        try {
          let apiResponse = await client.query({
            data: {
              query: operation,
              variables: options?.variables
            },
            tries: options?.tries,
            extraHeaders: options?.headers
          });
          return new Response(JSON.stringify(apiResponse.body), {
            headers: runtime.flatHeaders(apiResponse.headers)
          });
        } catch (error) {
          throw handleClientError ? await handleClientError({
            error,
            params,
            session
          }) : error;
        }
      };
    }
    exports.graphqlClientFactory = graphqlClientFactory;
  }
});
var require_rest = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/clients/admin/rest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function restClientFactory({
      params,
      handleClientError,
      session
    }) {
      let {
        api
      } = params, client = new RemixRestClient({
        params,
        handleClientError,
        session
      });
      if (api.rest) {
        client.resources = {};
        let RestResourceClient = restResourceClientFactory({
          params,
          handleClientError,
          session
        });
        Object.entries(api.rest).forEach(([name, resource]) => {
          class RemixResource extends resource {
          }
          RemixResource.Client = RestResourceClient, Reflect.defineProperty(RemixResource, "name", {
            value: name
          }), Reflect.set(client.resources, name, RemixResource);
        });
      }
      return client;
    }
    var RemixRestClient = class {
      constructor({
        params,
        session,
        handleClientError
      }) {
        this.session = void 0, this.params = void 0, this.handleClientError = void 0, this.params = params, this.handleClientError = handleClientError, this.session = session;
      }
      /**
       * Performs a GET request on the given path.
       */
      async get(params) {
        return this.makeRequest({
          method: "GET",
          ...params
        });
      }
      /**
       * Performs a POST request on the given path.
       */
      async post(params) {
        return this.makeRequest({
          method: "POST",
          ...params
        });
      }
      /**
       * Performs a PUT request on the given path.
       */
      async put(params) {
        return this.makeRequest({
          method: "PUT",
          ...params
        });
      }
      /**
       * Performs a DELETE request on the given path.
       */
      async delete(params) {
        return this.makeRequest({
          method: "DELETE",
          ...params
        });
      }
      async makeRequest(params) {
        let originalClient = new this.params.api.clients.Rest({
          session: this.session
        }), originalRequest = Reflect.get(originalClient, "request");
        try {
          let apiResponse = await originalRequest.call(originalClient, params);
          return new Response(JSON.stringify(apiResponse.body), {
            headers: apiResponse.headers
          });
        } catch (error) {
          throw this.handleClientError ? await this.handleClientError({
            error,
            session: this.session,
            params: this.params
          }) : new Error(error);
        }
      }
    };
    function restResourceClientFactory({
      params,
      handleClientError,
      session
    }) {
      let {
        api
      } = params, ApiClient = api.clients.Rest;
      return class extends ApiClient {
        async request(requestParams) {
          let originalClient = new api.clients.Rest({
            session
          }), originalRequest = Reflect.get(originalClient, "request");
          try {
            return await originalRequest.call(originalClient, requestParams);
          } catch (error) {
            throw handleClientError ? await handleClientError({
              error,
              params,
              session
            }) : new Error(error);
          }
        }
      };
    }
    exports.restClientFactory = restClientFactory;
  }
});
var require_factory = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/clients/admin/factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var graphql = require_graphql(), rest = require_rest();
    function adminClientFactory({
      params,
      handleClientError,
      session
    }) {
      return {
        rest: rest.restClientFactory({
          params,
          session,
          handleClientError
        }),
        graphql: graphql.graphqlClientFactory({
          params,
          session,
          handleClientError
        })
      };
    }
    exports.adminClientFactory = adminClientFactory;
  }
});
var require_handle_client_error = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/handle-client-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib(), redirectToAuthPage = require_redirect_to_auth_page();
    function handleClientErrorFactory({
      request
    }) {
      return async function({
        error,
        params,
        session
      }) {
        throw error instanceof shopifyApi.HttpResponseError ? (params.logger.debug(`Got an HTTP response error from the API: ${error.message}`, {
          code: error.response.code,
          statusText: error.response.statusText,
          body: JSON.stringify(error.response.body)
        }), error.response.code === 401 ? await redirectToAuthPage.redirectToAuthPage(params, request, session.shop) : new Response(JSON.stringify(error.response.body), {
          status: error.response.code,
          headers: {
            "Content-Type": error.response.headers["Content-Type"]
          }
        })) : (params.logger.debug(`Got a response error from the API: ${error.message}`), error);
      };
    }
    exports.handleClientErrorFactory = handleClientErrorFactory;
  }
});
var require_create_admin_api_context = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/create-admin-api-context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var factory = require_factory(), handleClientError = require_handle_client_error();
    function createAdminApiContext(request, session, params) {
      return factory.adminClientFactory({
        session,
        params,
        handleClientError: handleClientError.handleClientErrorFactory({
          request
        })
      });
    }
    exports.createAdminApiContext = createAdminApiContext;
  }
});
var require_redirect_to_shopify_or_app_root = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/redirect-to-shopify-or-app-root.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var serverRuntime = (init_esm(), __toCommonJS(esm_exports));
    async function redirectToShopifyOrAppRoot(request, params, responseHeaders) {
      let {
        api
      } = params, url = new URL(request.url), host = api.utils.sanitizeHost(url.searchParams.get("host")), shop = api.utils.sanitizeShop(url.searchParams.get("shop")), redirectUrl = api.config.isEmbeddedApp ? await api.auth.getEmbeddedAppUrl({
        rawRequest: request
      }) : `/?shop=${shop}&host=${encodeURIComponent(host)}`;
      throw serverRuntime.redirect(redirectUrl, {
        headers: responseHeaders
      });
    }
    exports.redirectToShopifyOrAppRoot = redirectToShopifyOrAppRoot;
  }
});
var require_ensure_app_is_embedded_if_required = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/ensure-app-is-embedded-if-required.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var redirectToShopifyOrAppRoot = require_redirect_to_shopify_or_app_root(), ensureAppIsEmbeddedIfRequired = async (params, request) => {
      let {
        api,
        logger,
        config
      } = params, url = new URL(request.url), shop = url.searchParams.get("shop");
      api.config.isEmbeddedApp && url.searchParams.get("embedded") !== "1" && (logger.debug("App is not embedded, redirecting to Shopify", {
        shop
      }), await redirectToShopifyOrAppRoot.redirectToShopifyOrAppRoot(request, {
        api,
        logger,
        config
      }));
    };
    exports.ensureAppIsEmbeddedIfRequired = ensureAppIsEmbeddedIfRequired;
  }
});
var require_redirect_to_bounce_page = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/redirect-to-bounce-page.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var serverRuntime = (init_esm(), __toCommonJS(esm_exports)), redirectToBouncePage = (params, url) => {
      let {
        config
      } = params;
      throw url.searchParams.set("shopify-reload", `${config.appUrl}${url.pathname}${url.search}`), serverRuntime.redirect(`${config.auth.patchSessionTokenPath}${url.search}`);
    };
    exports.redirectToBouncePage = redirectToBouncePage;
  }
});
var require_ensure_session_token_search_param_if_required = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/ensure-session-token-search-param-if-required.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var redirectToBouncePage = require_redirect_to_bounce_page(), SESSION_TOKEN_PARAM = "id_token", ensureSessionTokenSearchParamIfRequired = async (params, request) => {
      let {
        api,
        logger
      } = params, url = new URL(request.url), shop = url.searchParams.get("shop"), searchParamSessionToken = url.searchParams.get(SESSION_TOKEN_PARAM), isEmbedded = url.searchParams.get("embedded") === "1";
      api.config.isEmbeddedApp && isEmbedded && !searchParamSessionToken && (logger.debug("Missing session token in search params, going to bounce page", {
        shop
      }), redirectToBouncePage.redirectToBouncePage(params, url));
    };
    exports.ensureSessionTokenSearchParamIfRequired = ensureSessionTokenSearchParamIfRequired;
  }
});
var require_app_bridge_url = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/helpers/app-bridge-url.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _const = require_const(), appBridgeUrlOverride;
    function setAppBridgeUrlOverride(url) {
      appBridgeUrlOverride = url;
    }
    function appBridgeUrl() {
      return appBridgeUrlOverride || _const.APP_BRIDGE_URL;
    }
    exports.appBridgeUrl = appBridgeUrl;
    exports.setAppBridgeUrlOverride = setAppBridgeUrlOverride;
  }
});
var require_add_response_headers = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/helpers/add-response-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function addDocumentResponseHeadersFactory(params) {
      let {
        api,
        config
      } = params;
      return function(request, headers2) {
        let {
          searchParams
        } = new URL(request.url), shop = api.utils.sanitizeShop(searchParams.get("shop"));
        addDocumentResponseHeaders(headers2, config.isEmbeddedApp, shop);
      };
    }
    function addDocumentResponseHeaders(headers2, isEmbeddedApp, shop) {
      shop && headers2.set("Link", '<https://cdn.shopify.com/shopifycloud/app-bridge.js>; rel="preload"; as="script";'), isEmbeddedApp ? shop && headers2.set("Content-Security-Policy", `frame-ancestors https://${shop} https://admin.shopify.com https://*.spin.dev;`) : headers2.set("Content-Security-Policy", "frame-ancestors 'none';");
    }
    exports.addDocumentResponseHeaders = addDocumentResponseHeaders;
    exports.addDocumentResponseHeadersFactory = addDocumentResponseHeadersFactory;
  }
});
var require_render_app_bridge = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/render-app-bridge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var appBridgeUrl = require_app_bridge_url(), addResponseHeaders = require_add_response_headers();
    function renderAppBridge({
      config
    }, request, redirectTo) {
      let redirectToScript = "";
      if (redirectTo) {
        var _redirectTo$target;
        let destination = new URL(redirectTo.url, config.appUrl), target = (_redirectTo$target = redirectTo.target) !== null && _redirectTo$target !== void 0 ? _redirectTo$target : "_top";
        redirectToScript = `<script>window.open(${JSON.stringify(destination.toString())}, ${JSON.stringify(target)})<\/script>`;
      }
      let responseHeaders = new Headers({
        "content-type": "text/html;charset=utf-8"
      });
      throw addResponseHeaders.addDocumentResponseHeaders(responseHeaders, config.isEmbeddedApp, new URL(request.url).searchParams.get("shop")), new Response(`
      <script data-api-key="${config.apiKey}" src="${appBridgeUrl.appBridgeUrl()}"><\/script>
      ${redirectToScript}
    `, {
        headers: responseHeaders
      });
    }
    exports.renderAppBridge = renderAppBridge;
  }
});
var require_redirect2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/redirect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var serverRuntime = (init_esm(), __toCommonJS(esm_exports)), getSessionTokenHeader = require_get_session_token_header(), renderAppBridge = require_render_app_bridge(), redirectWithAppBridgeHeaders = require_redirect_with_app_bridge_headers();
    function redirectFactory(params, request) {
      let {
        config
      } = params;
      return function(url, init) {
        let {
          searchParams
        } = new URL(request.url), parsedUrl = new URL(url, config.appUrl);
        (parsedUrl.origin === config.appUrl || url.startsWith("/")) && searchParams.forEach((value, key) => {
          parsedUrl.searchParams.has(key) || parsedUrl.searchParams.set(key, value);
        });
        let target = typeof init != "number" && init?.target || "_self";
        if (target === "_self") {
          if (isBounceRequest(request))
            throw renderAppBridge.renderAppBridge(params, request, {
              url: parsedUrl.toString(),
              target
            });
          return serverRuntime.redirect(parsedUrl.toString(), init);
        } else {
          if (isDataRequest(request))
            throw redirectWithAppBridgeHeaders.redirectWithAppBridgeHeaders(parsedUrl.toString());
          if (isEmbeddedRequest(request))
            throw renderAppBridge.renderAppBridge(params, request, {
              url: parsedUrl.toString(),
              target
            });
        }
        return serverRuntime.redirect(url, init);
      };
    }
    function isBounceRequest(request) {
      return Boolean(getSessionTokenHeader.getSessionTokenHeader(request)) && request.headers.has("X-Shopify-Bounce");
    }
    function isDataRequest(request) {
      let {
        searchParams
      } = new URL(request.url), isGet = request.method === "GET", sessionTokenHeader = Boolean(getSessionTokenHeader.getSessionTokenHeader(request)), sessionTokenSearchParam = searchParams.has("id_token");
      return sessionTokenHeader && !sessionTokenSearchParam && !isBounceRequest(request) && (!isEmbeddedRequest(request) || !isGet);
    }
    function isEmbeddedRequest(request) {
      let {
        searchParams
      } = new URL(request.url);
      return searchParams.get("embedded") === "1";
    }
    exports.redirectFactory = redirectFactory;
  }
});
var require_validate_shop_and_host_params = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/validate-shop-and-host-params.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var serverRuntime = (init_esm(), __toCommonJS(esm_exports));
    function validateShopAndHostParams(params, request) {
      let {
        api,
        config,
        logger
      } = params;
      if (config.isEmbeddedApp) {
        let url = new URL(request.url), shop = api.utils.sanitizeShop(url.searchParams.get("shop"));
        if (!shop)
          throw logger.debug("Missing or invalid shop, redirecting to login path", {
            shop
          }), serverRuntime.redirect(config.auth.loginPath);
        if (!api.utils.sanitizeHost(url.searchParams.get("host")))
          throw logger.debug("Invalid host, redirecting to login path", {
            host: url.searchParams.get("host")
          }), serverRuntime.redirect(config.auth.loginPath);
      }
    }
    exports.validateShopAndHostParams = validateShopAndHostParams;
  }
});
var require_authenticate = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/authenticate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ensureCorsHeaders = require_ensure_cors_headers(), validateSessionToken = require_validate_session_token(), getSessionTokenHeader = require_get_session_token_header(), rejectBotRequest = require_reject_bot_request(), respondToOptionsRequest = require_respond_to_options_request(), cancel = require_cancel2(), require$1 = require_require(), request = require_request2(), createAdminApiContext = require_create_admin_api_context(), ensureAppIsEmbeddedIfRequired = require_ensure_app_is_embedded_if_required(), ensureSessionTokenSearchParamIfRequired = require_ensure_session_token_search_param_if_required();
    require_lib();
    init_esm();
    var redirect5 = require_redirect2(), renderAppBridge = require_render_app_bridge(), validateShopAndHostParams = require_validate_shop_and_host_params();
    function authStrategyFactory({
      strategy,
      ...params
    }) {
      let {
        api,
        logger,
        config
      } = params;
      async function respondToBouncePageRequest(request2) {
        if (new URL(request2.url).pathname === config.auth.patchSessionTokenPath)
          throw logger.debug("Rendering bounce page"), renderAppBridge.renderAppBridge({
            config,
            logger,
            api
          }, request2);
      }
      async function respondToExitIframeRequest(request2) {
        let url = new URL(request2.url);
        if (url.pathname === config.auth.exitIframePath) {
          let destination = url.searchParams.get("exitIframe");
          throw logger.debug("Rendering exit iframe page", {
            destination
          }), renderAppBridge.renderAppBridge({
            config,
            logger,
            api
          }, request2, {
            url: destination
          });
        }
      }
      function createContext29(request$1, session, sessionToken) {
        let context = {
          admin: createAdminApiContext.createAdminApiContext(request$1, session, {
            api,
            logger,
            config
          }),
          billing: {
            require: require$1.requireBillingFactory(params, request$1, session),
            request: request.requestBillingFactory(params, request$1, session),
            cancel: cancel.cancelBillingFactory(params, request$1, session)
          },
          session,
          cors: ensureCorsHeaders.ensureCORSHeadersFactory(params, request$1)
        };
        return config.isEmbeddedApp ? {
          ...context,
          sessionToken,
          redirect: redirect5.redirectFactory(params, request$1)
        } : context;
      }
      return async function(request2) {
        try {
          rejectBotRequest.respondToBotRequest(params, request2), respondToOptionsRequest.respondToOptionsRequest(params, request2), await respondToBouncePageRequest(request2), await respondToExitIframeRequest(request2), await strategy.respondToOAuthRequests(request2), getSessionTokenHeader.getSessionTokenHeader(request2) || (validateShopAndHostParams.validateShopAndHostParams(params, request2), await ensureAppIsEmbeddedIfRequired.ensureAppIsEmbeddedIfRequired(params, request2), await ensureSessionTokenSearchParamIfRequired.ensureSessionTokenSearchParamIfRequired(params, request2)), logger.info("Authenticating admin request");
          let {
            payload,
            shop,
            sessionId
          } = await getSessionTokenContext(params, request2);
          logger.debug("Loading session from storage", {
            sessionId
          });
          let existingSession = sessionId ? await config.sessionStorage.loadSession(sessionId) : void 0, session = await strategy.authenticate(request2, existingSession, shop);
          return logger.debug("Request is valid, loaded session from session token", {
            shop: session.shop,
            isOnline: session.isOnline
          }), createContext29(request2, session, payload);
        } catch (errorOrResponse) {
          throw errorOrResponse instanceof Response && ensureCorsHeaders.ensureCORSHeadersFactory(params, request2)(errorOrResponse), errorOrResponse;
        }
      };
    }
    async function getSessionTokenContext(params, request2) {
      let {
        api,
        config,
        logger
      } = params, headerSessionToken = getSessionTokenHeader.getSessionTokenHeader(request2), searchParamSessionToken = getSessionTokenHeader.getSessionTokenFromUrlParam(request2), sessionToken = headerSessionToken || searchParamSessionToken;
      if (logger.debug("Attempting to authenticate session token", {
        sessionToken: {
          header: headerSessionToken,
          search: searchParamSessionToken
        }
      }), config.isEmbeddedApp) {
        let payload = await validateSessionToken.validateSessionToken({
          config,
          logger,
          api
        }, sessionToken), shop2 = new URL(payload.dest).hostname;
        logger.debug("Session token is valid", {
          shop: shop2,
          payload
        });
        let sessionId2 = config.useOnlineTokens ? api.session.getJwtSessionId(shop2, payload.sub) : api.session.getOfflineId(shop2);
        return {
          shop: shop2,
          payload,
          sessionId: sessionId2
        };
      }
      let shop = new URL(request2.url).searchParams.get("shop"), sessionId = await api.session.getCurrentId({
        isOnline: config.useOnlineTokens,
        rawRequest: request2
      });
      return {
        shop,
        sessionId,
        payload: void 0
      };
    }
    exports.authStrategyFactory = authStrategyFactory;
  }
});
var require_authenticate2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/webhooks/authenticate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib(), factory = require_factory();
    require_runtime();
    var handleClientError = require_handle_client_error();
    init_esm();
    function authenticateWebhookFactory(params) {
      let {
        api,
        config,
        logger
      } = params;
      return async function(request) {
        if (request.method !== "POST")
          throw logger.debug("Received a non-POST request for a webhook. Only POST requests are allowed.", {
            url: request.url,
            method: request.method
          }), new Response(void 0, {
            status: 405,
            statusText: "Method not allowed"
          });
        let rawBody = await request.text(), check2 = await api.webhooks.validate({
          rawBody,
          rawRequest: request
        });
        if (!check2.valid)
          throw check2.reason === shopifyApi.WebhookValidationErrorReason.InvalidHmac ? (logger.debug("Webhook HMAC validation failed", check2), new Response(void 0, {
            status: 401,
            statusText: "Unauthorized"
          })) : (logger.debug("Webhook validation failed", check2), new Response(void 0, {
            status: 400,
            statusText: "Bad Request"
          }));
        let sessionId = api.session.getOfflineId(check2.domain), session = await config.sessionStorage.loadSession(sessionId), webhookContext = {
          apiVersion: check2.apiVersion,
          shop: check2.domain,
          topic: check2.topic,
          webhookId: check2.webhookId,
          payload: JSON.parse(rawBody),
          session: void 0,
          admin: void 0
        };
        if (!session)
          return webhookContext;
        let admin;
        if (config.future.v3_webhookAdminContext)
          admin = factory.adminClientFactory({
            params,
            session,
            handleClientError: handleClientError.handleClientErrorFactory({
              request
            })
          });
        else {
          let restClient = new api.clients.Rest({
            session,
            apiVersion: check2.apiVersion
          }), graphqlClient = new api.clients.Graphql({
            session,
            apiVersion: check2.apiVersion
          });
          Object.entries(api.rest).forEach(([name, resource]) => {
            Reflect.set(restClient, name, resource);
          }), admin = {
            rest: restClient,
            graphql: graphqlClient
          };
        }
        return {
          ...webhookContext,
          session,
          admin
        };
      };
    }
    exports.authenticateWebhookFactory = authenticateWebhookFactory;
  }
});
var require_constants = __commonJS({
  "node_modules/semver/internal/constants.js"(exports, module) {
    var SEMVER_SPEC_VERSION = "2.0.0", MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991, MAX_SAFE_COMPONENT_LENGTH = 16, MAX_SAFE_BUILD_LENGTH = 256 - 6, RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module.exports = {
      MAX_LENGTH: 256,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports, module) {
    var debug = typeof process == "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module.exports = debug;
  }
});
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports, module) {
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants(), debug = require_debug();
    exports = module.exports = {};
    var re = exports.re = [], safeRe = exports.safeRe = [], src = exports.src = [], t = exports.t = {}, R = 0, LETTERDASHNUMBER = "[a-zA-Z0-9-]", safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ], makeSafeRegex = (value) => {
      for (let [token, max] of safeRegexReplacements)
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      return value;
    }, createToken = (name, value, isGlobal) => {
      let safe = makeSafeRegex(value), index = R++;
      debug(name, index, value), t[name] = index, src[index] = value, re[index] = new RegExp(value, isGlobal ? "g" : void 0), safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports, module) {
    var looseOption = Object.freeze({ loose: true }), emptyOpts = Object.freeze({}), parseOptions = (options) => options ? typeof options != "object" ? looseOption : options : emptyOpts;
    module.exports = parseOptions;
  }
});
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports, module) {
    var numeric = /^[0-9]+$/, compareIdentifiers = (a, b) => {
      let anum = numeric.test(a), bnum = numeric.test(b);
      return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }, rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports, module) {
    var debug = require_debug(), { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants(), { safeRe: re, t } = require_re(), parseOptions = require_parse_options(), { compareIdentifiers } = require_identifiers(), SemVer = class {
      constructor(version, options) {
        if (options = parseOptions(options), version instanceof SemVer) {
          if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease)
            return version;
          version = version.version;
        } else if (typeof version != "string")
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        if (version.length > MAX_LENGTH)
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        debug("SemVer", version, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
        let m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m)
          throw new TypeError(`Invalid Version: ${version}`);
        if (this.raw = version, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0)
          throw new TypeError("Invalid major version");
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
          throw new TypeError("Invalid minor version");
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
          throw new TypeError("Invalid patch version");
        m[4] ? this.prerelease = m[4].split(".").map((id) => {
          if (/^[0-9]+$/.test(id)) {
            let num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER)
              return num;
          }
          return id;
        }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
      }
      format() {
        return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer)) {
          if (typeof other == "string" && other === this.version)
            return 0;
          other = new SemVer(other, this.options);
        }
        return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
          return -1;
        if (!this.prerelease.length && other.prerelease.length)
          return 1;
        if (!this.prerelease.length && !other.prerelease.length)
          return 0;
        let i = 0;
        do {
          let a = this.prerelease[i], b = other.prerelease[i];
          if (debug("prerelease compare", i, a, b), a === void 0 && b === void 0)
            return 0;
          if (b === void 0)
            return 1;
          if (a === void 0)
            return -1;
          if (a === b)
            continue;
          return compareIdentifiers(a, b);
        } while (++i);
      }
      compareBuild(other) {
        other instanceof SemVer || (other = new SemVer(other, this.options));
        let i = 0;
        do {
          let a = this.build[i], b = other.build[i];
          if (debug("prerelease compare", i, a, b), a === void 0 && b === void 0)
            return 0;
          if (b === void 0)
            return 1;
          if (a === void 0)
            return -1;
          if (a === b)
            continue;
          return compareIdentifiers(a, b);
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0, this.inc("patch", identifier, identifierBase), this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            this.prerelease.length === 0 && this.inc("patch", identifier, identifierBase), this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
            break;
          case "minor":
            (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
            break;
          case "patch":
            this.prerelease.length === 0 && this.patch++, this.prerelease = [];
            break;
          case "pre": {
            let base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false)
              throw new Error("invalid increment argument: identifier is empty");
            if (this.prerelease.length === 0)
              this.prerelease = [base];
            else {
              let i = this.prerelease.length;
              for (; --i >= 0; )
                typeof this.prerelease[i] == "number" && (this.prerelease[i]++, i = -2);
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false)
                  throw new Error("invalid increment argument: identifier already exists");
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              identifierBase === false && (prerelease = [identifier]), compareIdentifiers(this.prerelease[0], identifier) === 0 ? isNaN(this.prerelease[1]) && (this.prerelease = prerelease) : this.prerelease = prerelease;
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        return this.raw = this.format(), this.build.length && (this.raw += `+${this.build.join(".")}`), this;
      }
    };
    module.exports = SemVer;
  }
});
var require_parse2 = __commonJS({
  "node_modules/semver/functions/parse.js"(exports, module) {
    var SemVer = require_semver(), parse3 = (version, options, throwErrors = false) => {
      if (version instanceof SemVer)
        return version;
      try {
        return new SemVer(version, options);
      } catch (er) {
        if (!throwErrors)
          return null;
        throw er;
      }
    };
    module.exports = parse3;
  }
});
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports, module) {
    var parse3 = require_parse2(), valid = (version, options) => {
      let v = parse3(version, options);
      return v ? v.version : null;
    };
    module.exports = valid;
  }
});
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports, module) {
    var parse3 = require_parse2(), clean = (version, options) => {
      let s = parse3(version.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module.exports = clean;
  }
});
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports, module) {
    var SemVer = require_semver(), inc = (version, release, options, identifier, identifierBase) => {
      typeof options == "string" && (identifierBase = identifier, identifier = options, options = void 0);
      try {
        return new SemVer(
          version instanceof SemVer ? version.version : version,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch {
        return null;
      }
    };
    module.exports = inc;
  }
});
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports, module) {
    var parse3 = require_parse2(), diff = (version1, version2) => {
      let v1 = parse3(version1, null, true), v2 = parse3(version2, null, true), comparison = v1.compare(v2);
      if (comparison === 0)
        return null;
      let v1Higher = comparison > 0, highVersion = v1Higher ? v1 : v2, lowVersion = v1Higher ? v2 : v1, highHasPre = !!highVersion.prerelease.length;
      if (!!lowVersion.prerelease.length && !highHasPre)
        return !lowVersion.patch && !lowVersion.minor ? "major" : highVersion.patch ? "patch" : highVersion.minor ? "minor" : "major";
      let prefix = highHasPre ? "pre" : "";
      return v1.major !== v2.major ? prefix + "major" : v1.minor !== v2.minor ? prefix + "minor" : v1.patch !== v2.patch ? prefix + "patch" : "prerelease";
    };
    module.exports = diff;
  }
});
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports, module) {
    var SemVer = require_semver(), major = (a, loose) => new SemVer(a, loose).major;
    module.exports = major;
  }
});
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports, module) {
    var SemVer = require_semver(), minor = (a, loose) => new SemVer(a, loose).minor;
    module.exports = minor;
  }
});
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports, module) {
    var SemVer = require_semver(), patch = (a, loose) => new SemVer(a, loose).patch;
    module.exports = patch;
  }
});
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports, module) {
    var parse3 = require_parse2(), prerelease = (version, options) => {
      let parsed = parse3(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module.exports = prerelease;
  }
});
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports, module) {
    var SemVer = require_semver(), compare2 = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module.exports = compare2;
  }
});
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports, module) {
    var compare2 = require_compare(), rcompare = (a, b, loose) => compare2(b, a, loose);
    module.exports = rcompare;
  }
});
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports, module) {
    var compare2 = require_compare(), compareLoose = (a, b) => compare2(a, b, true);
    module.exports = compareLoose;
  }
});
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports, module) {
    var SemVer = require_semver(), compareBuild = (a, b, loose) => {
      let versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module.exports = compareBuild;
  }
});
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports, module) {
    var compareBuild = require_compare_build(), sort = (list2, loose) => list2.sort((a, b) => compareBuild(a, b, loose));
    module.exports = sort;
  }
});
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports, module) {
    var compareBuild = require_compare_build(), rsort = (list2, loose) => list2.sort((a, b) => compareBuild(b, a, loose));
    module.exports = rsort;
  }
});
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports, module) {
    var compare2 = require_compare(), gt = (a, b, loose) => compare2(a, b, loose) > 0;
    module.exports = gt;
  }
});
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports, module) {
    var compare2 = require_compare(), lt = (a, b, loose) => compare2(a, b, loose) < 0;
    module.exports = lt;
  }
});
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports, module) {
    var compare2 = require_compare(), eq = (a, b, loose) => compare2(a, b, loose) === 0;
    module.exports = eq;
  }
});
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports, module) {
    var compare2 = require_compare(), neq = (a, b, loose) => compare2(a, b, loose) !== 0;
    module.exports = neq;
  }
});
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports, module) {
    var compare2 = require_compare(), gte = (a, b, loose) => compare2(a, b, loose) >= 0;
    module.exports = gte;
  }
});
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports, module) {
    var compare2 = require_compare(), lte = (a, b, loose) => compare2(a, b, loose) <= 0;
    module.exports = lte;
  }
});
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports, module) {
    var eq = require_eq(), neq = require_neq(), gt = require_gt(), gte = require_gte(), lt = require_lt(), lte = require_lte(), cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          return typeof a == "object" && (a = a.version), typeof b == "object" && (b = b.version), a === b;
        case "!==":
          return typeof a == "object" && (a = a.version), typeof b == "object" && (b = b.version), a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module.exports = cmp;
  }
});
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports, module) {
    var SemVer = require_semver(), parse3 = require_parse2(), { safeRe: re, t } = require_re(), coerce2 = (version, options) => {
      if (version instanceof SemVer)
        return version;
      if (typeof version == "number" && (version = String(version)), typeof version != "string")
        return null;
      options = options || {};
      let match2 = null;
      if (!options.rtl)
        match2 = version.match(re[t.COERCE]);
      else {
        let next;
        for (; (next = re[t.COERCERTL].exec(version)) && (!match2 || match2.index + match2[0].length !== version.length); )
          (!match2 || next.index + next[0].length !== match2.index + match2[0].length) && (match2 = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        re[t.COERCERTL].lastIndex = -1;
      }
      return match2 === null ? null : parse3(`${match2[2]}.${match2[3] || "0"}.${match2[4] || "0"}`, options);
    };
    module.exports = coerce2;
  }
});
var require_iterator = __commonJS({
  "node_modules/semver/node_modules/yallist/iterator.js"(exports, module) {
    "use strict";
    module.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next)
          yield walker.value;
      };
    };
  }
});
var require_yallist = __commonJS({
  "node_modules/semver/node_modules/yallist/yallist.js"(exports, module) {
    "use strict";
    module.exports = Yallist;
    Yallist.Node = Node2;
    Yallist.create = Yallist;
    function Yallist(list2) {
      var self2 = this;
      if (self2 instanceof Yallist || (self2 = new Yallist()), self2.tail = null, self2.head = null, self2.length = 0, list2 && typeof list2.forEach == "function")
        list2.forEach(function(item) {
          self2.push(item);
        });
      else if (arguments.length > 0)
        for (var i = 0, l = arguments.length; i < l; i++)
          self2.push(arguments[i]);
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this)
        throw new Error("removing node which does not belong to this list");
      var next = node.next, prev = node.prev;
      return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node !== this.head) {
        node.list && node.list.removeNode(node);
        var head = this.head;
        node.list = this, node.next = head, head && (head.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
      }
    };
    Yallist.prototype.pushNode = function(node) {
      if (node !== this.tail) {
        node.list && node.list.removeNode(node);
        var tail = this.tail;
        node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
      }
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++)
        push(this, arguments[i]);
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++)
        unshift(this, arguments[i]);
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (this.tail) {
        var res = this.tail.value;
        return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
      }
    };
    Yallist.prototype.shift = function() {
      if (this.head) {
        var res = this.head.value;
        return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
      }
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++)
        fn.call(thisp, walker.value, i, this), walker = walker.next;
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--)
        fn.call(thisp, walker.value, i, this), walker = walker.prev;
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++)
        walker = walker.next;
      if (i === n && walker !== null)
        return walker.value;
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++)
        walker = walker.prev;
      if (i === n && walker !== null)
        return walker.value;
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      for (var res = new Yallist(), walker = this.head; walker !== null; )
        res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var res = new Yallist(), walker = this.tail; walker !== null; )
        res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc, walker = this.head;
      if (arguments.length > 1)
        acc = initial;
      else if (this.head)
        walker = this.head.next, acc = this.head.value;
      else
        throw new TypeError("Reduce of empty list with no initial value");
      for (var i = 0; walker !== null; i++)
        acc = fn(acc, walker.value, i), walker = walker.next;
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc, walker = this.tail;
      if (arguments.length > 1)
        acc = initial;
      else if (this.tail)
        walker = this.tail.prev, acc = this.tail.value;
      else
        throw new TypeError("Reduce of empty list with no initial value");
      for (var i = this.length - 1; walker !== null; i--)
        acc = fn(acc, walker.value, i), walker = walker.prev;
      return acc;
    };
    Yallist.prototype.toArray = function() {
      for (var arr = new Array(this.length), i = 0, walker = this.head; walker !== null; i++)
        arr[i] = walker.value, walker = walker.next;
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      for (var arr = new Array(this.length), i = 0, walker = this.tail; walker !== null; i++)
        arr[i] = walker.value, walker = walker.prev;
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length, to < 0 && (to += this.length), from = from || 0, from < 0 && (from += this.length);
      var ret = new Yallist();
      if (to < from || to < 0)
        return ret;
      from < 0 && (from = 0), to > this.length && (to = this.length);
      for (var i = 0, walker = this.head; walker !== null && i < from; i++)
        walker = walker.next;
      for (; walker !== null && i < to; i++, walker = walker.next)
        ret.push(walker.value);
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length, to < 0 && (to += this.length), from = from || 0, from < 0 && (from += this.length);
      var ret = new Yallist();
      if (to < from || to < 0)
        return ret;
      from < 0 && (from = 0), to > this.length && (to = this.length);
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--)
        walker = walker.prev;
      for (; walker !== null && i > from; i--, walker = walker.prev)
        ret.push(walker.value);
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
      for (var i = 0, walker = this.head; walker !== null && i < start; i++)
        walker = walker.next;
      for (var ret = [], i = 0; walker && i < deleteCount; i++)
        ret.push(walker.value), walker = this.removeNode(walker);
      walker === null && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
      for (var i = 0; i < nodes.length; i++)
        walker = insert(this, walker, nodes[i]);
      return ret;
    };
    Yallist.prototype.reverse = function() {
      for (var head = this.head, tail = this.tail, walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next, walker.next = p;
      }
      return this.head = tail, this.tail = head, this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node2(value, null, node, self2) : new Node2(value, node, node.next, self2);
      return inserted.next === null && (self2.tail = inserted), inserted.prev === null && (self2.head = inserted), self2.length++, inserted;
    }
    function push(self2, item) {
      self2.tail = new Node2(item, self2.tail, null, self2), self2.head || (self2.head = self2.tail), self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node2(item, null, self2.head, self2), self2.tail || (self2.tail = self2.head), self2.length++;
    }
    function Node2(value, prev, next, list2) {
      if (!(this instanceof Node2))
        return new Node2(value, prev, next, list2);
      this.list = list2, this.value = value, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
    }
    try {
      require_iterator()(Yallist);
    } catch {
    }
  }
});
var require_lru_cache = __commonJS({
  "node_modules/semver/node_modules/lru-cache/index.js"(exports, module) {
    "use strict";
    var Yallist = require_yallist(), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1, LRUCache = class {
      constructor(options) {
        if (typeof options == "number" && (options = { max: options }), options || (options = {}), options.max && (typeof options.max != "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        let max = this[MAX] = options.max || 1 / 0, lc = options.length || naiveLength;
        if (this[LENGTH_CALCULATOR] = typeof lc != "function" ? naiveLength : lc, this[ALLOW_STALE] = options.stale || false, options.maxAge && typeof options.maxAge != "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false, this.reset();
      }
      // resize the cache when the max changes.
      set max(mL) {
        if (typeof mL != "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || 1 / 0, trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA != "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA, trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      // resize the cache when the lengthCalculator changes.
      set lengthCalculator(lC) {
        typeof lC != "function" && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
          hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
        })), trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          let prev = walker.prev;
          forEachStep(this, fn, walker, thisp), walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          let next = walker.next;
          forEachStep(this, fn, walker, thisp), walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = /* @__PURE__ */ new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        if (maxAge = maxAge || this[MAX_AGE], maxAge && typeof maxAge != "number")
          throw new TypeError("maxAge must be a number");
        let now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX])
            return del(this, this[CACHE].get(key)), false;
          let item = this[CACHE].get(key).value;
          return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), true;
        }
        let hit = new Entry(key, value, len, now, maxAge);
        return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value), false) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), true);
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        let hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get2(this, key, true);
      }
      peek(key) {
        return get2(this, key, false);
      }
      pop() {
        let node = this[LRU_LIST].tail;
        return node ? (del(this, node), node.value) : null;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        let now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          let hit = arr[l], expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            let maxAge = expiresAt - now;
            maxAge > 0 && this.set(hit.k, hit.v, maxAge);
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get2(this, key, false));
      }
    }, get2 = (self2, key, doUse) => {
      let node = self2[CACHE].get(key);
      if (node) {
        let hit = node.value;
        if (isStale(self2, hit)) {
          if (del(self2, node), !self2[ALLOW_STALE])
            return;
        } else
          doUse && (self2[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self2[LRU_LIST].unshiftNode(node));
        return hit.value;
      }
    }, isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      let diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    }, trim = (self2) => {
      if (self2[LENGTH] > self2[MAX])
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          let prev = walker.prev;
          del(self2, walker), walker = prev;
        }
    }, del = (self2, node) => {
      if (node) {
        let hit = node.value;
        self2[DISPOSE] && self2[DISPOSE](hit.key, hit.value), self2[LENGTH] -= hit.length, self2[CACHE].delete(hit.key), self2[LRU_LIST].removeNode(node);
      }
    }, Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key, this.value = value, this.length = length, this.now = now, this.maxAge = maxAge || 0;
      }
    }, forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      isStale(self2, hit) && (del(self2, node), self2[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self2);
    };
    module.exports = LRUCache;
  }
});
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports, module) {
    var Range = class {
      constructor(range, options) {
        if (options = parseOptions(options), range instanceof Range)
          return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
        if (range instanceof Comparator)
          return this.raw = range.value, this.set = [[range]], this.format(), this;
        if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range.trim().split(/\s+/).join(" "), this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length), !this.set.length)
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        if (this.set.length > 1) {
          let first = this.set[0];
          if (this.set = this.set.filter((c) => !isNullSet(c[0])), this.set.length === 0)
            this.set = [first];
          else if (this.set.length > 1) {
            for (let c of this.set)
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
          }
        }
        this.format();
      }
      format() {
        return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        let memoKey = ((this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE)) + ":" + range, cached = cache.get(memoKey);
        if (cached)
          return cached;
        let loose = this.options.loose, hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease)), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace), debug("comparator trim", range), range = range.replace(re[t.TILDETRIM], tildeTrimReplace), debug("tilde trim", range), range = range.replace(re[t.CARETTRIM], caretTrimReplace), debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        loose && (rangeList = rangeList.filter((comp) => (debug("loose invalid filter", comp, this.options), !!comp.match(re[t.COMPARATORLOOSE])))), debug("range list", rangeList);
        let rangeMap = /* @__PURE__ */ new Map(), comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (let comp of comparators) {
          if (isNullSet(comp))
            return [comp];
          rangeMap.set(comp.value, comp);
        }
        rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
        let result = [...rangeMap.values()];
        return cache.set(memoKey, result), result;
      }
      intersects(range, options) {
        if (!(range instanceof Range))
          throw new TypeError("a Range is required");
        return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version) {
        if (!version)
          return false;
        if (typeof version == "string")
          try {
            version = new SemVer(version, this.options);
          } catch {
            return false;
          }
        for (let i = 0; i < this.set.length; i++)
          if (testSet(this.set[i], version, this.options))
            return true;
        return false;
      }
    };
    module.exports = Range;
    var LRU = require_lru_cache(), cache = new LRU({ max: 1e3 }), parseOptions = require_parse_options(), Comparator = require_comparator(), debug = require_debug(), SemVer = require_semver(), {
      safeRe: re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re(), { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants(), isNullSet = (c) => c.value === "<0.0.0-0", isAny = (c) => c.value === "", isSatisfiable = (comparators, options) => {
      let result = true, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop();
      for (; result && remainingComparators.length; )
        result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
      return result;
    }, parseComparator = (comp, options) => (debug("comp", comp, options), comp = replaceCarets(comp, options), debug("caret", comp), comp = replaceTildes(comp, options), debug("tildes", comp), comp = replaceXRanges(comp, options), debug("xrange", comp), comp = replaceStars(comp, options), debug("stars", comp), comp), isX = (id) => !id || id.toLowerCase() === "x" || id === "*", replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" "), replaceTilde = (comp, options) => {
      let r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        return isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0` : pr ? (debug("replaceTilde pr", pr), ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`) : ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`, debug("tilde return", ret), ret;
      });
    }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" "), replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      let r = options.loose ? re[t.CARETLOOSE] : re[t.CARET], z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        return isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? M === "0" ? ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0` : pr ? (debug("replaceCaret pr", pr), M === "0" ? m === "0" ? ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0` : ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug("no pr"), M === "0" ? m === "0" ? ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0` : ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`), debug("caret return", ret), ret;
      });
    }, replaceXRanges = (comp, options) => (debug("replaceXRanges", comp, options), comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ")), replaceXRange = (comp, options) => {
      comp = comp.trim();
      let r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        let xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
        return gtlt === "=" && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? gtlt === ">" || gtlt === "<" ? ret = "<0.0.0-0" : ret = "*" : gtlt && anyX ? (xm && (m = 0), p = 0, gtlt === ">" ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : gtlt === "<=" && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), gtlt === "<" && (pr = "-0"), ret = `${gtlt + M}.${m}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`), debug("xRange return", ret), ret;
      });
    }, replaceStars = (comp, options) => (debug("replaceStars", comp, options), comp.trim().replace(re[t.STAR], "")), replaceGTE0 = (comp, options) => (debug("replaceGTE0", comp, options), comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => (isX(fM) ? from = "" : isX(fm) ? from = `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? from = `>=${from}` : from = `>=${from}${incPr ? "-0" : ""}`, isX(tM) ? to = "" : isX(tm) ? to = `<${+tM + 1}.0.0-0` : isX(tp) ? to = `<${tM}.${+tm + 1}.0-0` : tpr ? to = `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? to = `<${tM}.${tm}.${+tp + 1}-0` : to = `<=${to}`, `${from} ${to}`.trim()), testSet = (set, version, options) => {
      for (let i = 0; i < set.length; i++)
        if (!set[i].test(version))
          return false;
      if (version.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++)
          if (debug(set[i].semver), set[i].semver !== Comparator.ANY && set[i].semver.prerelease.length > 0) {
            let allowed = set[i].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch)
              return true;
          }
        return false;
      }
      return true;
    };
  }
});
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports, module) {
    var ANY = Symbol("SemVer ANY"), Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        if (options = parseOptions(options), comp instanceof Comparator) {
          if (comp.loose === !!options.loose)
            return comp;
          comp = comp.value;
        }
        comp = comp.trim().split(/\s+/).join(" "), debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
      }
      parse(comp) {
        let r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m = comp.match(r);
        if (!m)
          throw new TypeError(`Invalid comparator: ${comp}`);
        this.operator = m[1] !== void 0 ? m[1] : "", this.operator === "=" && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
      }
      toString() {
        return this.value;
      }
      test(version) {
        if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY)
          return true;
        if (typeof version == "string")
          try {
            version = new SemVer(version, this.options);
          } catch {
            return false;
          }
        return cmp(version, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator))
          throw new TypeError("a Comparator is required");
        return this.operator === "" ? this.value === "" ? true : new Range(comp.value, options).test(this.value) : comp.operator === "" ? comp.value === "" ? true : new Range(this.value, options).test(comp.semver) : (options = parseOptions(options), options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0") || !options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0")) ? false : !!(this.operator.startsWith(">") && comp.operator.startsWith(">") || this.operator.startsWith("<") && comp.operator.startsWith("<") || this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=") || cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<") || cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")));
      }
    };
    module.exports = Comparator;
    var parseOptions = require_parse_options(), { safeRe: re, t } = require_re(), cmp = require_cmp(), debug = require_debug(), SemVer = require_semver(), Range = require_range();
  }
});
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports, module) {
    var Range = require_range(), satisfies2 = (version, range, options) => {
      try {
        range = new Range(range, options);
      } catch {
        return false;
      }
      return range.test(version);
    };
    module.exports = satisfies2;
  }
});
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports, module) {
    var Range = require_range(), toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module.exports = toComparators;
  }
});
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports, module) {
    var SemVer = require_semver(), Range = require_range(), maxSatisfying = (versions, range, options) => {
      let max = null, maxSV = null, rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch {
        return null;
      }
      return versions.forEach((v) => {
        rangeObj.test(v) && (!max || maxSV.compare(v) === -1) && (max = v, maxSV = new SemVer(max, options));
      }), max;
    };
    module.exports = maxSatisfying;
  }
});
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports, module) {
    var SemVer = require_semver(), Range = require_range(), minSatisfying = (versions, range, options) => {
      let min = null, minSV = null, rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch {
        return null;
      }
      return versions.forEach((v) => {
        rangeObj.test(v) && (!min || minSV.compare(v) === 1) && (min = v, minSV = new SemVer(min, options));
      }), min;
    };
    module.exports = minSatisfying;
  }
});
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports, module) {
    var SemVer = require_semver(), Range = require_range(), gt = require_gt(), minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver) || (minver = new SemVer("0.0.0-0"), range.test(minver)))
        return minver;
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        let comparators = range.set[i], setMin = null;
        comparators.forEach((comparator) => {
          let compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              compver.prerelease.length === 0 ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
            case "":
            case ">=":
              (!setMin || gt(compver, setMin)) && (setMin = compver);
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        }), setMin && (!minver || gt(minver, setMin)) && (minver = setMin);
      }
      return minver && range.test(minver) ? minver : null;
    };
    module.exports = minVersion;
  }
});
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports, module) {
    var Range = require_range(), validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch {
        return null;
      }
    };
    module.exports = validRange;
  }
});
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports, module) {
    var SemVer = require_semver(), Comparator = require_comparator(), { ANY } = Comparator, Range = require_range(), satisfies2 = require_satisfies(), gt = require_gt(), lt = require_lt(), lte = require_lte(), gte = require_gte(), outside = (version, range, hilo, options) => {
      version = new SemVer(version, options), range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
          break;
        case "<":
          gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies2(version, range, options))
        return false;
      for (let i = 0; i < range.set.length; ++i) {
        let comparators = range.set[i], high = null, low = null;
        if (comparators.forEach((comparator) => {
          comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
        }), high.operator === comp || high.operator === ecomp || (!low.operator || low.operator === comp) && ltefn(version, low.semver))
          return false;
        if (low.operator === ecomp && ltfn(version, low.semver))
          return false;
      }
      return true;
    };
    module.exports = outside;
  }
});
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports, module) {
    var outside = require_outside(), gtr = (version, range, options) => outside(version, range, ">", options);
    module.exports = gtr;
  }
});
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports, module) {
    var outside = require_outside(), ltr = (version, range, options) => outside(version, range, "<", options);
    module.exports = ltr;
  }
});
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports, module) {
    var Range = require_range(), intersects = (r1, r2, options) => (r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2, options));
    module.exports = intersects;
  }
});
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports, module) {
    var satisfies2 = require_satisfies(), compare2 = require_compare();
    module.exports = (versions, range, options) => {
      let set = [], first = null, prev = null, v = versions.sort((a, b) => compare2(a, b, options));
      for (let version of v)
        satisfies2(version, range, options) ? (prev = version, first || (first = version)) : (prev && set.push([first, prev]), prev = null, first = null);
      first && set.push([first, null]);
      let ranges = [];
      for (let [min, max] of set)
        min === max ? ranges.push(min) : !max && min === v[0] ? ranges.push("*") : max ? min === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min} - ${max}`) : ranges.push(`>=${min}`);
      let simplified = ranges.join(" || "), original = typeof range.raw == "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports, module) {
    var Range = require_range(), Comparator = require_comparator(), { ANY } = Comparator, satisfies2 = require_satisfies(), compare2 = require_compare(), subset = (sub, dom, options = {}) => {
      if (sub === dom)
        return true;
      sub = new Range(sub, options), dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER:
        for (let simpleSub of sub.set) {
          for (let simpleDom of dom.set) {
            let isSub = simpleSubset(simpleSub, simpleDom, options);
            if (sawNonNull = sawNonNull || isSub !== null, isSub)
              continue OUTER;
          }
          if (sawNonNull)
            return false;
        }
      return true;
    }, minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")], minimumVersion = [new Comparator(">=0.0.0")], simpleSubset = (sub, dom, options) => {
      if (sub === dom)
        return true;
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY)
          return true;
        options.includePrerelease ? sub = minimumVersionWithPreRelease : sub = minimumVersion;
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease)
          return true;
        dom = minimumVersion;
      }
      let eqSet = /* @__PURE__ */ new Set(), gt, lt;
      for (let c of sub)
        c.operator === ">" || c.operator === ">=" ? gt = higherGT(gt, c, options) : c.operator === "<" || c.operator === "<=" ? lt = lowerLT(lt, c, options) : eqSet.add(c.semver);
      if (eqSet.size > 1)
        return null;
      let gtltComp;
      if (gt && lt) {
        if (gtltComp = compare2(gt.semver, lt.semver, options), gtltComp > 0)
          return null;
        if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<="))
          return null;
      }
      for (let eq of eqSet) {
        if (gt && !satisfies2(eq, String(gt), options) || lt && !satisfies2(eq, String(lt), options))
          return null;
        for (let c of dom)
          if (!satisfies2(eq, String(c), options))
            return false;
        return true;
      }
      let higher, lower, hasDomLT, hasDomGT, needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false, needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0 && (needDomLTPre = false);
      for (let c of dom) {
        if (hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=", hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=", gt) {
          if (needDomGTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch && (needDomGTPre = false), c.operator === ">" || c.operator === ">=") {
            if (higher = higherGT(gt, c, options), higher === c && higher !== gt)
              return false;
          } else if (gt.operator === ">=" && !satisfies2(gt.semver, String(c), options))
            return false;
        }
        if (lt) {
          if (needDomLTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch && (needDomLTPre = false), c.operator === "<" || c.operator === "<=") {
            if (lower = lowerLT(lt, c, options), lower === c && lower !== lt)
              return false;
          } else if (lt.operator === "<=" && !satisfies2(lt.semver, String(c), options))
            return false;
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0)
          return false;
      }
      return !(gt && hasDomLT && !lt && gtltComp !== 0 || lt && hasDomGT && !gt && gtltComp !== 0 || needDomGTPre || needDomLTPre);
    }, higherGT = (a, b, options) => {
      if (!a)
        return b;
      let comp = compare2(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 || b.operator === ">" && a.operator === ">=" ? b : a;
    }, lowerLT = (a, b, options) => {
      if (!a)
        return b;
      let comp = compare2(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 || b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module.exports = subset;
  }
});
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports, module) {
    var internalRe = require_re(), constants = require_constants(), SemVer = require_semver(), identifiers = require_identifiers(), parse3 = require_parse2(), valid = require_valid(), clean = require_clean(), inc = require_inc(), diff = require_diff(), major = require_major(), minor = require_minor(), patch = require_patch(), prerelease = require_prerelease(), compare2 = require_compare(), rcompare = require_rcompare(), compareLoose = require_compare_loose(), compareBuild = require_compare_build(), sort = require_sort(), rsort = require_rsort(), gt = require_gt(), lt = require_lt(), eq = require_eq(), neq = require_neq(), gte = require_gte(), lte = require_lte(), cmp = require_cmp(), coerce2 = require_coerce(), Comparator = require_comparator(), Range = require_range(), satisfies2 = require_satisfies(), toComparators = require_to_comparators(), maxSatisfying = require_max_satisfying(), minSatisfying = require_min_satisfying(), minVersion = require_min_version(), validRange = require_valid2(), outside = require_outside(), gtr = require_gtr(), ltr = require_ltr(), intersects = require_intersects(), simplifyRange = require_simplify(), subset = require_subset();
    module.exports = {
      parse: parse3,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare: compare2,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce: coerce2,
      Comparator,
      Range,
      satisfies: satisfies2,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});
var require_override_logger = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/override-logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var semver2 = require_semver2(), shopifyApi = require_lib(), version = require_version3();
    function _interopDefaultLegacy(e) {
      return e && typeof e == "object" && "default" in e ? e : { default: e };
    }
    var semver__default = /* @__PURE__ */ _interopDefaultLegacy(semver2);
    function overrideLogger(logger) {
      let baseContext = {
        package: "shopify-app"
      }, warningFunction = (message2, context = {}) => logger.warning(message2, {
        ...baseContext,
        ...context
      });
      function deprecated(warningFunction2) {
        return function(version$1, message2) {
          if (semver__default.default.gte(version.SHOPIFY_REMIX_LIBRARY_VERSION, version$1))
            throw new shopifyApi.FeatureDeprecatedError(`Feature was deprecated in version ${version$1}`);
          return warningFunction2(`[Deprecated | ${version$1}] ${message2}`);
        };
      }
      return {
        ...logger,
        log: (severity, message2, context = {}) => logger.log(severity, message2, {
          ...baseContext,
          ...context
        }),
        debug: (message2, context = {}) => logger.debug(message2, {
          ...baseContext,
          ...context
        }),
        info: (message2, context = {}) => logger.info(message2, {
          ...baseContext,
          ...context
        }),
        warning: warningFunction,
        error: (message2, context = {}) => logger.error(message2, {
          ...baseContext,
          ...context
        }),
        deprecated: deprecated(warningFunction)
      };
    }
    exports.overrideLogger = overrideLogger;
  }
});
var require_login = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/login/login.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var serverRuntime = (init_esm(), __toCommonJS(esm_exports)), types2 = require_types15();
    function loginFactory(params) {
      let {
        api,
        config,
        logger
      } = params;
      return async function(request) {
        let shopParam = new URL(request.url).searchParams.get("shop");
        if (request.method === "GET" && !shopParam)
          return {};
        let shop = shopParam || (await request.formData()).get("shop");
        if (!shop)
          return logger.debug("Missing shop parameter", {
            shop
          }), {
            shop: types2.LoginErrorType.MissingShop
          };
        let shopWithoutProtocol = shop.replace(/^https?:\/\//, "").replace(/\/$/, ""), shopWithDomain = shop?.indexOf(".") === -1 ? `${shopWithoutProtocol}.myshopify.com` : shopWithoutProtocol, sanitizedShop = api.utils.sanitizeShop(shopWithDomain);
        if (!sanitizedShop)
          return logger.debug("Invalid shop parameter", {
            shop
          }), {
            shop: types2.LoginErrorType.InvalidShop
          };
        let redirectUrl = `${config.appUrl}${config.auth.path}?shop=${sanitizedShop}`;
        throw logger.info(`Redirecting login request to ${redirectUrl}`, {
          shop: sanitizedShop
        }), serverRuntime.redirect(redirectUrl);
      };
    }
    exports.loginFactory = loginFactory;
  }
});
var require_get_offline_session = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/unauthenticated/helpers/get-offline-session.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    async function getOfflineSession(shop, {
      api,
      config
    }) {
      let offlineSessionId = api.session.getOfflineId(shop);
      return await config.sessionStorage.loadSession(offlineSessionId);
    }
    exports.getOfflineSession = getOfflineSession;
  }
});
var require_factory2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/unauthenticated/admin/factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib(), factory = require_factory(), getOfflineSession = require_get_offline_session();
    function unauthenticatedAdminContextFactory(params) {
      return async (shop) => {
        let session = await getOfflineSession.getOfflineSession(shop, params);
        if (!session)
          throw new shopifyApi.ShopifyError(`Could not find a session for shop ${shop} when creating unauthenticated admin context`);
        return {
          session,
          admin: factory.adminClientFactory({
            params,
            session
          })
        };
      };
    }
    exports.unauthenticatedAdminContextFactory = unauthenticatedAdminContextFactory;
  }
});
var require_authenticate3 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/public/checkout/authenticate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ensureCorsHeaders = require_ensure_cors_headers(), validateSessionToken = require_validate_session_token(), getSessionTokenHeader = require_get_session_token_header(), rejectBotRequest = require_reject_bot_request(), respondToOptionsRequest = require_respond_to_options_request();
    function authenticateCheckoutFactory(params) {
      return async function(request, options = {}) {
        var _options$corsHeaders;
        let {
          logger
        } = params, corsHeaders = (_options$corsHeaders = options.corsHeaders) !== null && _options$corsHeaders !== void 0 ? _options$corsHeaders : [];
        rejectBotRequest.respondToBotRequest(params, request), respondToOptionsRequest.respondToOptionsRequest(params, request, corsHeaders);
        let sessionTokenHeader = getSessionTokenHeader.getSessionTokenHeader(request);
        if (logger.info("Authenticating checkout request"), !sessionTokenHeader)
          throw logger.debug("Request did not contain a session token"), new Response(void 0, {
            status: 401,
            statusText: "Unauthorized"
          });
        return {
          sessionToken: await validateSessionToken.validateSessionToken(params, sessionTokenHeader, {
            checkAudience: false
          }),
          cors: ensureCorsHeaders.ensureCORSHeadersFactory(params, request, corsHeaders)
        };
      };
    }
    exports.authenticateCheckoutFactory = authenticateCheckoutFactory;
  }
});
var require_factory3 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/clients/storefront/factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var runtime = require_runtime();
    function storefrontClientFactory({
      params,
      session
    }) {
      let {
        api
      } = params;
      return {
        graphql: async (query, options = {}) => {
          let apiResponse = await new api.clients.Storefront({
            session,
            apiVersion: options.apiVersion
          }).query({
            data: {
              query,
              variables: options?.variables
            },
            tries: options.tries,
            extraHeaders: options.headers
          });
          return new Response(JSON.stringify(apiResponse.body), {
            headers: runtime.flatHeaders(apiResponse.headers)
          });
        }
      };
    }
    exports.storefrontClientFactory = storefrontClientFactory;
  }
});
var require_authenticate4 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/public/appProxy/authenticate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var factory = require_factory(), factory$1 = require_factory3();
    function authenticateAppProxyFactory(params) {
      let {
        api,
        config,
        logger
      } = params;
      return async function(request) {
        logger.info("Authenticating app proxy request");
        let {
          searchParams
        } = new URL(request.url), query = Object.fromEntries(searchParams.entries()), isValid = false;
        try {
          isValid = await api.utils.validateHmac(query, {
            signator: "appProxy"
          });
        } catch (error) {
          throw logger.info(error.message), new Response(void 0, {
            status: 400,
            statusText: "Bad Request"
          });
        }
        if (!isValid)
          throw logger.info("App proxy request has invalid signature"), new Response(void 0, {
            status: 400,
            statusText: "Bad Request"
          });
        let shop = searchParams.get("shop"), sessionId = api.session.getOfflineId(shop), session = await config.sessionStorage.loadSession(sessionId);
        return session ? {
          liquid,
          session,
          admin: factory.adminClientFactory({
            params,
            session
          }),
          storefront: factory$1.storefrontClientFactory({
            params,
            session
          })
        } : {
          liquid,
          session: void 0,
          admin: void 0,
          storefront: void 0
        };
      };
    }
    var liquid = (body, initAndOptions) => {
      if (typeof initAndOptions != "object")
        return new Response(body, {
          status: initAndOptions || 200,
          headers: {
            "Content-Type": "application/liquid"
          }
        });
      let {
        layout,
        ...responseInit
      } = initAndOptions || {}, responseBody = layout === false ? `{% layout none %} ${body}` : body, headers2 = new Headers(responseInit.headers);
      return headers2.set("Content-Type", "application/liquid"), new Response(responseBody, {
        ...responseInit,
        headers: headers2
      });
    };
    exports.authenticateAppProxyFactory = authenticateAppProxyFactory;
  }
});
var require_factory4 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/public/factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var authenticate = require_authenticate3(), authenticate$1 = require_authenticate4();
    function authenticatePublicFactory(params) {
      let {
        logger,
        config
      } = params, authenticateCheckout = authenticate.authenticateCheckoutFactory(params), authenticateAppProxy = authenticate$1.authenticateAppProxyFactory(params);
      if (config.future.v3_authenticatePublic)
        return {
          checkout: authenticateCheckout,
          appProxy: authenticateAppProxy
        };
      let authenticatePublic = (request, options) => (logger.deprecated("3.0.0", "authenticate.public() will be deprecated in v3. Use authenticate.public.checkout() instead."), authenticateCheckout(request, options));
      return authenticatePublic.checkout = authenticateCheckout, authenticatePublic.appProxy = authenticateAppProxy, authenticatePublic;
    }
    exports.authenticatePublicFactory = authenticatePublicFactory;
  }
});
var require_factory5 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/unauthenticated/storefront/factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib(), factory = require_factory3(), getOfflineSession = require_get_offline_session();
    function unauthenticatedStorefrontContextFactory(params) {
      return async (shop) => {
        let session = await getOfflineSession.getOfflineSession(shop, params);
        if (!session)
          throw new shopifyApi.ShopifyError(`Could not find a session for shop ${shop} when creating unauthenticated storefront context`);
        return {
          session,
          storefront: factory.storefrontClientFactory({
            params,
            session
          })
        };
      };
    }
    exports.unauthenticatedStorefrontContextFactory = unauthenticatedStorefrontContextFactory;
  }
});
var require_trigger_after_auth_hook = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/helpers/trigger-after-auth-hook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var createAdminApiContext = require_create_admin_api_context();
    async function triggerAfterAuthHook(params, session, request) {
      let {
        config,
        logger
      } = params;
      config.hooks.afterAuth && (logger.info("Running afterAuth hook"), await config.hooks.afterAuth({
        session,
        admin: createAdminApiContext.createAdminApiContext(request, session, params)
      }));
    }
    exports.triggerAfterAuthHook = triggerAfterAuthHook;
  }
});
var require_auth_code_flow = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/authenticate/admin/strategies/auth-code-flow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib(), beginAuth = require_begin_auth();
    require_runtime();
    var redirectToAuthPage = require_redirect_to_auth_page(), redirectToShopifyOrAppRoot = require_redirect_to_shopify_or_app_root();
    init_esm();
    var redirectWithExitiframe = require_redirect_with_exitiframe(), getSessionTokenHeader = require_get_session_token_header(), triggerAfterAuthHook = require_trigger_after_auth_hook(), validateShopAndHostParams = require_validate_shop_and_host_params();
    require_isbot();
    var AuthCodeFlowStrategy = class {
      constructor({
        api,
        config,
        logger
      }) {
        this.api = void 0, this.config = void 0, this.logger = void 0, this.api = api, this.config = config, this.logger = logger;
      }
      async respondToOAuthRequests(request) {
        let {
          api,
          config
        } = this, url = new URL(request.url), isAuthRequest = url.pathname === config.auth.path, isAuthCallbackRequest = url.pathname === config.auth.callbackPath;
        if (isAuthRequest || isAuthCallbackRequest) {
          let shop = api.utils.sanitizeShop(url.searchParams.get("shop"));
          throw shop ? isAuthRequest ? await this.handleAuthBeginRequest(request, shop) : await this.handleAuthCallbackRequest(request, shop) : new Response("Shop param is invalid", {
            status: 400
          });
        }
        getSessionTokenHeader.getSessionTokenHeader(request) || await this.ensureInstalledOnShop(request);
      }
      async authenticate(request, session, shop) {
        let {
          api,
          config,
          logger
        } = this;
        return session ? session.isActive(config.scopes) || (logger.debug("Found a session, but it has expired, redirecting to OAuth", {
          shop
        }), await redirectToAuthPage.redirectToAuthPage({
          config,
          logger,
          api
        }, request, shop)) : (logger.debug("No session found, redirecting to OAuth", {
          shop
        }), await redirectToAuthPage.redirectToAuthPage({
          config,
          logger,
          api
        }, request, shop)), logger.debug("Found a valid session", {
          shop
        }), session;
      }
      async ensureInstalledOnShop(request) {
        let {
          api,
          config,
          logger
        } = this;
        validateShopAndHostParams.validateShopAndHostParams({
          api,
          config,
          logger
        }, request);
        let url = new URL(request.url), shop = url.searchParams.get("shop");
        if (logger.debug("Ensuring app is installed on shop", {
          shop
        }), !await this.hasValidOfflineId(request))
          throw logger.info("Could not find a shop, can't authenticate request"), new Response(void 0, {
            status: 400,
            statusText: "Bad Request"
          });
        let offlineSession = await this.getOfflineSession(request), isEmbedded = url.searchParams.get("embedded") === "1";
        if (!offlineSession)
          if (logger.info("Shop hasn't installed app yet, redirecting to OAuth", {
            shop
          }), isEmbedded)
            redirectWithExitiframe.redirectWithExitIframe({
              api,
              config,
              logger
            }, request, shop);
          else
            throw await beginAuth.beginAuth({
              api,
              config,
              logger
            }, request, false, shop);
        if (shop = shop || offlineSession.shop, config.isEmbeddedApp && !isEmbedded)
          try {
            logger.debug("Ensuring offline session is valid before embedding", {
              shop
            }), await this.testSession(offlineSession), logger.debug("Offline session is still valid, embedding app", {
              shop
            });
          } catch (error) {
            await this.handleInvalidOfflineSession(error, request, shop);
          }
      }
      async handleAuthBeginRequest(request, shop) {
        let {
          api,
          config,
          logger
        } = this;
        throw logger.info("Handling OAuth begin request", {
          shop
        }), config.isEmbeddedApp && request.headers.get("Sec-Fetch-Dest") === "iframe" ? (logger.debug("Auth request in iframe detected, exiting iframe", {
          shop
        }), redirectWithExitiframe.redirectWithExitIframe({
          api,
          config,
          logger
        }, request, shop)) : await beginAuth.beginAuth({
          api,
          config,
          logger
        }, request, false, shop);
      }
      async handleAuthCallbackRequest(request, shop) {
        let {
          api,
          config,
          logger
        } = this;
        logger.info("Handling OAuth callback request");
        try {
          let {
            session,
            headers: responseHeaders
          } = await api.auth.callback({
            rawRequest: request
          });
          throw await config.sessionStorage.storeSession(session), config.useOnlineTokens && !session.isOnline && (logger.info("Requesting online access token for offline session"), await beginAuth.beginAuth({
            api,
            config,
            logger
          }, request, true, shop)), await triggerAfterAuthHook.triggerAfterAuthHook({
            api,
            config,
            logger
          }, session, request), await redirectToShopifyOrAppRoot.redirectToShopifyOrAppRoot(request, {
            api,
            config,
            logger
          }, responseHeaders);
        } catch (error) {
          throw error instanceof Response ? error : await this.oauthCallbackError(error, request, shop);
        }
      }
      async getOfflineSession(request) {
        let offlineId = await this.getOfflineSessionId(request);
        return this.config.sessionStorage.loadSession(offlineId);
      }
      async hasValidOfflineId(request) {
        return Boolean(await this.getOfflineSessionId(request));
      }
      async getOfflineSessionId(request) {
        let {
          api
        } = this, shop = new URL(request.url).searchParams.get("shop");
        return shop ? api.session.getOfflineId(shop) : api.session.getCurrentId({
          isOnline: false,
          rawRequest: request
        });
      }
      async testSession(session) {
        let {
          api
        } = this;
        await new api.clients.Graphql({
          session
        }).query({
          data: `#graphql
        query shopifyAppShopName {
          shop {
            name
          }
        }
      `
        });
      }
      async oauthCallbackError(error, request, shop) {
        let {
          logger
        } = this;
        return logger.error("Error during OAuth callback", {
          error: error.message
        }), error instanceof shopifyApi.CookieNotFound ? this.handleAuthBeginRequest(request, shop) : error instanceof shopifyApi.InvalidHmacError || error instanceof shopifyApi.InvalidOAuthError ? new Response(void 0, {
          status: 400,
          statusText: "Invalid OAuth Request"
        }) : new Response(void 0, {
          status: 500,
          statusText: "Internal Server Error"
        });
      }
      async handleInvalidOfflineSession(error, request, shop) {
        let {
          api,
          logger,
          config
        } = this;
        if (error instanceof shopifyApi.HttpResponseError) {
          if (error.response.code === 401)
            throw logger.info("Shop session is no longer valid, redirecting to OAuth", {
              shop
            }), await beginAuth.beginAuth({
              api,
              config,
              logger
            }, request, false, shop);
          {
            let message2 = JSON.stringify(error.response.body, null, 2);
            throw logger.error(`Unexpected error during session validation: ${message2}`, {
              shop
            }), new Response(void 0, {
              status: error.response.code,
              statusText: error.response.statusText
            });
          }
        } else if (error instanceof shopifyApi.GraphqlQueryError) {
          let context = {
            shop
          };
          throw error.response && (context.response = JSON.stringify(error.response)), logger.error(`Unexpected error during session validation: ${error.message}`, context), new Response(void 0, {
            status: 500,
            statusText: "Internal Server Error"
          });
        }
      }
    };
    exports.AuthCodeFlowStrategy = AuthCodeFlowStrategy;
  }
});
var require_shopify_app = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/shopify-app.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require_web_api();
    var shopifyApi = require_lib(), types2 = require_types15(), version = require_version3(), register = require_register2(), authenticate = require_authenticate(), authenticate$1 = require_authenticate2(), overrideLogger = require_override_logger(), addResponseHeaders = require_add_response_headers();
    require_isbot();
    var login = require_login(), factory$1 = require_factory2(), factory = require_factory4(), factory$2 = require_factory5(), authCodeFlow = require_auth_code_flow();
    function shopifyApp2(appConfig) {
      let api = deriveApi(appConfig), config = deriveConfig(appConfig, api.config), logger = overrideLogger.overrideLogger(api.logger);
      appConfig.webhooks && api.webhooks.addHandlers(appConfig.webhooks);
      let params = {
        api,
        config,
        logger
      }, oauth = new authCodeFlow.AuthCodeFlowStrategy(params), authStrategy = authenticate.authStrategyFactory({
        ...params,
        strategy: oauth
      }), shopify2 = {
        sessionStorage: config.sessionStorage,
        addDocumentResponseHeaders: addResponseHeaders.addDocumentResponseHeadersFactory(params),
        registerWebhooks: register.registerWebhooksFactory(params),
        authenticate: {
          admin: authStrategy,
          public: factory.authenticatePublicFactory(params),
          webhook: authenticate$1.authenticateWebhookFactory(params)
        },
        unauthenticated: {
          admin: factory$1.unauthenticatedAdminContextFactory(params),
          storefront: factory$2.unauthenticatedStorefrontContextFactory(params)
        }
      };
      return (isAppStoreApp(shopify2, appConfig) || isSingleMerchantApp(shopify2, appConfig)) && (shopify2.login = login.loginFactory(params)), shopify2;
    }
    function isAppStoreApp(_shopify, config) {
      return config.distribution === types2.AppDistribution.AppStore;
    }
    function isSingleMerchantApp(_shopify, config) {
      return config.distribution === types2.AppDistribution.SingleMerchant;
    }
    function deriveApi(appConfig) {
      var _appConfig$isEmbedded, _appConfig$apiVersion;
      let appUrl;
      try {
        appUrl = new URL(appConfig.appUrl);
      } catch {
        throw new shopifyApi.ShopifyError("Invalid appUrl provided. Please provide a valid URL.");
      }
      appUrl.hostname === "localhost" && !appUrl.port && process.env.PORT && (appUrl.port = process.env.PORT), appConfig.appUrl = appUrl.origin;
      let userAgentPrefix = `Shopify Remix Library v${version.SHOPIFY_REMIX_LIBRARY_VERSION}`;
      return appConfig.userAgentPrefix && (userAgentPrefix = `${appConfig.userAgentPrefix} | ${userAgentPrefix}`), shopifyApi.shopifyApi({
        ...appConfig,
        hostName: appUrl.host,
        hostScheme: appUrl.protocol.replace(":", ""),
        userAgentPrefix,
        isEmbeddedApp: (_appConfig$isEmbedded = appConfig.isEmbeddedApp) !== null && _appConfig$isEmbedded !== void 0 ? _appConfig$isEmbedded : true,
        apiVersion: (_appConfig$apiVersion = appConfig.apiVersion) !== null && _appConfig$apiVersion !== void 0 ? _appConfig$apiVersion : shopifyApi.LATEST_API_VERSION,
        isCustomStoreApp: appConfig.distribution === types2.AppDistribution.ShopifyAdmin,
        future: {}
      });
    }
    function deriveConfig(appConfig, apiConfig) {
      var _appConfig$distributi, _appConfig$useOnlineT, _appConfig$hooks, _appConfig$future;
      if (!appConfig.sessionStorage)
        throw new shopifyApi.ShopifyError("Please provide a valid session storage. Refer to https://github.com/Shopify/shopify-app-js/blob/main/README.md#session-storage-options for options.");
      let authPathPrefix = appConfig.authPathPrefix || "/auth";
      return appConfig.distribution = (_appConfig$distributi = appConfig.distribution) !== null && _appConfig$distributi !== void 0 ? _appConfig$distributi : types2.AppDistribution.AppStore, {
        ...appConfig,
        ...apiConfig,
        canUseLoginForm: appConfig.distribution !== types2.AppDistribution.ShopifyAdmin,
        useOnlineTokens: (_appConfig$useOnlineT = appConfig.useOnlineTokens) !== null && _appConfig$useOnlineT !== void 0 ? _appConfig$useOnlineT : false,
        hooks: (_appConfig$hooks = appConfig.hooks) !== null && _appConfig$hooks !== void 0 ? _appConfig$hooks : {},
        sessionStorage: appConfig.sessionStorage,
        future: (_appConfig$future = appConfig.future) !== null && _appConfig$future !== void 0 ? _appConfig$future : {},
        auth: {
          path: authPathPrefix,
          callbackPath: `${authPathPrefix}/callback`,
          patchSessionTokenPath: `${authPathPrefix}/session-token`,
          exitIframePath: `${authPathPrefix}/exit-iframe`,
          loginPath: `${authPathPrefix}/login`
        }
      };
    }
    exports.shopifyApp = shopifyApp2;
  }
});
var require_server2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/server/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require_web_api();
    var runtime = require_runtime(), shopifyApi = require_lib(), types2 = require_types15(), index = require_boundary(), shopifyApp2 = require_shopify_app();
    runtime.setAbstractRuntimeString(() => "Remix");
    Object.defineProperty(exports, "ApiVersion", {
      enumerable: true,
      get: function() {
        return shopifyApi.ApiVersion;
      }
    });
    Object.defineProperty(exports, "BillingInterval", {
      enumerable: true,
      get: function() {
        return shopifyApi.BillingInterval;
      }
    });
    Object.defineProperty(exports, "DeliveryMethod", {
      enumerable: true,
      get: function() {
        return shopifyApi.DeliveryMethod;
      }
    });
    Object.defineProperty(exports, "LATEST_API_VERSION", {
      enumerable: true,
      get: function() {
        return shopifyApi.LATEST_API_VERSION;
      }
    });
    Object.defineProperty(exports, "LogSeverity", {
      enumerable: true,
      get: function() {
        return shopifyApi.LogSeverity;
      }
    });
    exports.AppDistribution = types2.AppDistribution;
    exports.LoginErrorType = types2.LoginErrorType;
    exports.boundary = index.boundary;
    exports.shopifyApp = shopifyApp2.shopifyApp;
  }
});
var require_kv = __commonJS({
  "node_modules/@shopify/shopify-app-session-storage-kv/build/cjs/kv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib(), KVSessionStorage2 = class {
      constructor(namespace) {
        this.namespace = void 0, namespace && this.setNamespace(namespace);
      }
      setNamespace(namespace) {
        this.namespace = namespace;
      }
      async storeSession(session) {
        return await this.namespace.put(session.id, JSON.stringify(session.toPropertyArray())), await this.addShopIds(session.shop, [session.id]), true;
      }
      async loadSession(id) {
        let sessionData = await this.namespace.get(id, "json");
        return sessionData ? shopifyApi.Session.fromPropertyArray(sessionData) : void 0;
      }
      async deleteSession(id) {
        let session = await this.loadSession(id);
        return session && (await this.namespace.delete(id), await this.removeShopIds(session.shop, [session.id])), true;
      }
      async deleteSessions(ids) {
        let result = true;
        for (let id of ids)
          result = result && await this.deleteSession(id);
        return result;
      }
      async findSessionsByShop(shop) {
        let sessionIds = await this.namespace.get(this.getShopSessionIdsKey(shop), {
          type: "json"
        });
        return sessionIds ? Promise.all(sessionIds.map(async (id) => await this.loadSession(id))) : [];
      }
      getShopSessionIdsKey(shop) {
        return `shop:${shop}`;
      }
      async addShopIds(shop, ids) {
        var _await$this$namespace;
        let key = this.getShopSessionIdsKey(shop), shopIds = (_await$this$namespace = await this.namespace.get(key, "json")) !== null && _await$this$namespace !== void 0 ? _await$this$namespace : [];
        await this.namespace.put(key, JSON.stringify([...shopIds, ...ids]));
      }
      async removeShopIds(shop, ids) {
        var _await$this$namespace2;
        let key = this.getShopSessionIdsKey(shop), shopIds = (_await$this$namespace2 = await this.namespace.get(key, "json")) !== null && _await$this$namespace2 !== void 0 ? _await$this$namespace2 : [];
        await this.namespace.put(key, JSON.stringify(shopIds.filter((id) => !ids.includes(id))));
      }
    };
    exports.KVSessionStorage = KVSessionStorage2;
  }
});
var require_react_jsx_dev_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-dev-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React270 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React270.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false, enableCacheElement = false, enableTransitionTracing = false, enableLegacyHidden = false, enableDebugTracing = false, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type) {
        return !!(typeof type == "string" || typeof type == "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null)
          return null;
        if (typeof type.tag == "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type == "function")
          return type.displayName || type.name || null;
        if (typeof type == "string")
          return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === void 0)
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match2 && match2[1] || "";
            }
          return `
` + prefix + name;
        }
      }
      var reentry = false, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0)
            return frame;
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = false, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
      }
      function shouldConstruct(Component9) {
        var prototype = Component9.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null)
          return "";
        if (typeof type == "function")
          return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type == "string")
          return describeBuiltInComponentFrame(type);
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type == "object")
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values2, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = true, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), false;
        } catch {
          return true;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning)
            return false;
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning)
            return false;
        }
        return config.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        if (typeof config.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref), didWarnAboutStringRefs[componentName] = true);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = true, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = true, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = true, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = true, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }), Object.defineProperty(element, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV8(type, config, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), hasValidRef(config) && (ref = config.ref, warnIfStringRefCannotBeAutoConverted(config, self2));
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config[propName]);
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2)
              props[propName] === void 0 && (props[propName] = defaultProps2[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = false;
      function isValidElement7(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              isValidElement7(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement7(node))
            node._store && (node._store.validated = true);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                isValidElement7(step.value) && validateExplicitKey(step.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type == null || typeof type == "string")
            return;
          var propTypes;
          if (typeof type == "function")
            propTypes = type.propTypes;
          else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE))
            propTypes = type.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV8(type, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++)
                    validateChildKeys(children[i], type);
                  Object.freeze && Object.freeze(children);
                } else
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type);
          }
          return type === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsxDEV = jsxDEV$1;
    })();
  }
});
var require_jsx_dev_runtime = __commonJS({
  "node_modules/react/jsx-dev-runtime.js"(exports, module) {
    "use strict";
    module.exports = require_react_jsx_dev_runtime_development();
  }
});
var DEFAULT_LOCALE;
var SUPPORTED_LOCALES;
var init_configure = __esm({
  "node_modules/@shopify/polaris/build/esm/configure.js"() {
    DEFAULT_LOCALE = "en", SUPPORTED_LOCALES = ["cs", "da", "de", "en", "es", "fi", "fr", "it", "ja", "ko", "nb", "nl", "pl", "pt-BR", "pt-PT", "sv", "th", "tr", "vi", "zh-CN", "zh-TW"];
  }
});
var Key;
var init_types = __esm({
  "node_modules/@shopify/polaris/build/esm/types.js"() {
    (function(Key2) {
      Key2[Key2.Backspace = 8] = "Backspace", Key2[Key2.Tab = 9] = "Tab", Key2[Key2.Enter = 13] = "Enter", Key2[Key2.Shift = 16] = "Shift", Key2[Key2.Ctrl = 17] = "Ctrl", Key2[Key2.Alt = 18] = "Alt", Key2[Key2.Pause = 19] = "Pause", Key2[Key2.CapsLock = 20] = "CapsLock", Key2[Key2.Escape = 27] = "Escape", Key2[Key2.Space = 32] = "Space", Key2[Key2.PageUp = 33] = "PageUp", Key2[Key2.PageDown = 34] = "PageDown", Key2[Key2.End = 35] = "End", Key2[Key2.Home = 36] = "Home", Key2[Key2.LeftArrow = 37] = "LeftArrow", Key2[Key2.UpArrow = 38] = "UpArrow", Key2[Key2.RightArrow = 39] = "RightArrow", Key2[Key2.DownArrow = 40] = "DownArrow", Key2[Key2.Insert = 45] = "Insert", Key2[Key2.Delete = 46] = "Delete", Key2[Key2.Key0 = 48] = "Key0", Key2[Key2.Key1 = 49] = "Key1", Key2[Key2.Key2 = 50] = "Key2", Key2[Key2.Key3 = 51] = "Key3", Key2[Key2.Key4 = 52] = "Key4", Key2[Key2.Key5 = 53] = "Key5", Key2[Key2.Key6 = 54] = "Key6", Key2[Key2.Key7 = 55] = "Key7", Key2[Key2.Key8 = 56] = "Key8", Key2[Key2.Key9 = 57] = "Key9", Key2[Key2.KeyA = 65] = "KeyA", Key2[Key2.KeyB = 66] = "KeyB", Key2[Key2.KeyC = 67] = "KeyC", Key2[Key2.KeyD = 68] = "KeyD", Key2[Key2.KeyE = 69] = "KeyE", Key2[Key2.KeyF = 70] = "KeyF", Key2[Key2.KeyG = 71] = "KeyG", Key2[Key2.KeyH = 72] = "KeyH", Key2[Key2.KeyI = 73] = "KeyI", Key2[Key2.KeyJ = 74] = "KeyJ", Key2[Key2.KeyK = 75] = "KeyK", Key2[Key2.KeyL = 76] = "KeyL", Key2[Key2.KeyM = 77] = "KeyM", Key2[Key2.KeyN = 78] = "KeyN", Key2[Key2.KeyO = 79] = "KeyO", Key2[Key2.KeyP = 80] = "KeyP", Key2[Key2.KeyQ = 81] = "KeyQ", Key2[Key2.KeyR = 82] = "KeyR", Key2[Key2.KeyS = 83] = "KeyS", Key2[Key2.KeyT = 84] = "KeyT", Key2[Key2.KeyU = 85] = "KeyU", Key2[Key2.KeyV = 86] = "KeyV", Key2[Key2.KeyW = 87] = "KeyW", Key2[Key2.KeyX = 88] = "KeyX", Key2[Key2.KeyY = 89] = "KeyY", Key2[Key2.KeyZ = 90] = "KeyZ", Key2[Key2.LeftMeta = 91] = "LeftMeta", Key2[Key2.RightMeta = 92] = "RightMeta", Key2[Key2.Select = 93] = "Select", Key2[Key2.Numpad0 = 96] = "Numpad0", Key2[Key2.Numpad1 = 97] = "Numpad1", Key2[Key2.Numpad2 = 98] = "Numpad2", Key2[Key2.Numpad3 = 99] = "Numpad3", Key2[Key2.Numpad4 = 100] = "Numpad4", Key2[Key2.Numpad5 = 101] = "Numpad5", Key2[Key2.Numpad6 = 102] = "Numpad6", Key2[Key2.Numpad7 = 103] = "Numpad7", Key2[Key2.Numpad8 = 104] = "Numpad8", Key2[Key2.Numpad9 = 105] = "Numpad9", Key2[Key2.Multiply = 106] = "Multiply", Key2[Key2.Add = 107] = "Add", Key2[Key2.Subtract = 109] = "Subtract", Key2[Key2.Decimal = 110] = "Decimal", Key2[Key2.Divide = 111] = "Divide", Key2[Key2.F1 = 112] = "F1", Key2[Key2.F2 = 113] = "F2", Key2[Key2.F3 = 114] = "F3", Key2[Key2.F4 = 115] = "F4", Key2[Key2.F5 = 116] = "F5", Key2[Key2.F6 = 117] = "F6", Key2[Key2.F7 = 118] = "F7", Key2[Key2.F8 = 119] = "F8", Key2[Key2.F9 = 120] = "F9", Key2[Key2.F10 = 121] = "F10", Key2[Key2.F11 = 122] = "F11", Key2[Key2.F12 = 123] = "F12", Key2[Key2.NumLock = 144] = "NumLock", Key2[Key2.ScrollLock = 145] = "ScrollLock", Key2[Key2.Semicolon = 186] = "Semicolon", Key2[Key2.Equals = 187] = "Equals", Key2[Key2.Comma = 188] = "Comma", Key2[Key2.Dash = 189] = "Dash", Key2[Key2.Period = 190] = "Period", Key2[Key2.ForwardSlash = 191] = "ForwardSlash", Key2[Key2.GraveAccent = 192] = "GraveAccent", Key2[Key2.OpenBracket = 219] = "OpenBracket", Key2[Key2.BackSlash = 220] = "BackSlash", Key2[Key2.CloseBracket = 221] = "CloseBracket", Key2[Key2.SingleQuote = 222] = "SingleQuote";
    })(Key || (Key = {}));
  }
});
var scrollable;
var overlay;
var layer;
var unstyled;
var dataPolarisTopBar;
var headerCell;
var portal;
var DATA_ATTRIBUTE;
var init_shared = __esm({
  "node_modules/@shopify/polaris/build/esm/components/shared.js"() {
    scrollable = {
      props: {
        "data-polaris-scrollable": true
      },
      selector: "[data-polaris-scrollable]"
    }, overlay = {
      props: {
        "data-polaris-overlay": true
      },
      selector: "[data-polaris-overlay]"
    }, layer = {
      props: {
        "data-polaris-layer": true
      },
      selector: "[data-polaris-layer]"
    }, unstyled = {
      props: {
        "data-polaris-unstyled": true
      },
      selector: "[data-polaris-unstyled]"
    }, dataPolarisTopBar = {
      props: {
        "data-polaris-top-bar": true
      },
      selector: "[data-polaris-top-bar]"
    }, headerCell = {
      props: {
        "data-polaris-header-cell": true
      },
      selector: "[data-polaris-header-cell]"
    }, portal = {
      props: ["data-portal-id"],
      selector: "[data-portal-id]"
    }, DATA_ATTRIBUTE = {
      overlay,
      layer
    };
  }
});
function clamp(number, min, max) {
  return number < min ? min : number > max ? max : number;
}
var init_clamp = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/clamp.js"() {
  }
});
function roundNumberToDecimalPlaces(value, decimals) {
  let exponent = Number(`${value}e${decimals}`), roundedExponent = Math.round(exponent);
  return Number(`${roundedExponent}e-${decimals}`);
}
var init_roundNumberToDecimalPlaces = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/roundNumberToDecimalPlaces.js"() {
  }
});
function rgbString(color2) {
  let {
    red: red2,
    green: green2,
    blue: blue2
  } = color2;
  return "alpha" in color2 ? `rgba(${red2}, ${green2}, ${blue2}, ${color2.alpha})` : `rgb(${red2}, ${green2}, ${blue2})`;
}
function rgbToHex({
  red: red2,
  green: green2,
  blue: blue2
}) {
  return `#${componentToHex(red2)}${componentToHex(green2)}${componentToHex(blue2)}`;
}
function componentToHex(component) {
  let hex2 = component.toString(16);
  return hex2.length === 1 ? `0${hex2}` : hex2;
}
function hsbToHex(color2) {
  return rgbToHex(hsbToRgb(color2));
}
function rgbFromHueAndChroma(hue, chroma) {
  let huePrime = hue / 60, hueDelta = 1 - Math.abs(huePrime % 2 - 1), intermediateValue = chroma * hueDelta, red2 = 0, green2 = 0, blue2 = 0;
  return huePrime >= 0 && huePrime <= 1 && (red2 = chroma, green2 = intermediateValue, blue2 = 0), huePrime >= 1 && huePrime <= 2 && (red2 = intermediateValue, green2 = chroma, blue2 = 0), huePrime >= 2 && huePrime <= 3 && (red2 = 0, green2 = chroma, blue2 = intermediateValue), huePrime >= 3 && huePrime <= 4 && (red2 = 0, green2 = intermediateValue, blue2 = chroma), huePrime >= 4 && huePrime <= 5 && (red2 = intermediateValue, green2 = 0, blue2 = chroma), huePrime >= 5 && huePrime <= 6 && (red2 = chroma, green2 = 0, blue2 = intermediateValue), {
    red: red2,
    green: green2,
    blue: blue2
  };
}
function hsbToRgb(color2) {
  let {
    hue,
    saturation,
    brightness,
    alpha = 1
  } = color2, chroma = brightness * saturation, {
    red: red2,
    green: green2,
    blue: blue2
  } = rgbFromHueAndChroma(hue, chroma), chromaBrightnessDelta = brightness - chroma;
  return red2 += chromaBrightnessDelta, green2 += chromaBrightnessDelta, blue2 += chromaBrightnessDelta, {
    red: Math.round(red2 * 255),
    green: Math.round(green2 * 255),
    blue: Math.round(blue2 * 255),
    alpha
  };
}
function hslToRgb(color2) {
  let {
    hue,
    saturation,
    lightness,
    alpha = 1
  } = color2, chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100), {
    red: red2,
    green: green2,
    blue: blue2
  } = rgbFromHueAndChroma(hue, chroma), lightnessVal = lightness / 100 - chroma / 2;
  return red2 += lightnessVal, green2 += lightnessVal, blue2 += lightnessVal, {
    red: Math.round(red2 * 255),
    green: Math.round(green2 * 255),
    blue: Math.round(blue2 * 255),
    alpha
  };
}
function rgbToHsbl(color2, type = "b") {
  let {
    alpha = 1
  } = color2, red2 = color2.red / 255, green2 = color2.green / 255, blue2 = color2.blue / 255, largestComponent = Math.max(red2, green2, blue2), smallestComponent = Math.min(red2, green2, blue2), delta = largestComponent - smallestComponent, lightness = (largestComponent + smallestComponent) / 2, saturation = 0;
  if (largestComponent === 0)
    saturation = 0;
  else if (type === "b")
    saturation = delta / largestComponent;
  else if (type === "l") {
    let baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);
    saturation = isNaN(baseSaturation) ? 0 : baseSaturation;
  }
  let huePercentage = 0;
  switch (largestComponent) {
    case red2:
      huePercentage = (green2 - blue2) / delta + (green2 < blue2 ? 6 : 0);
      break;
    case green2:
      huePercentage = (blue2 - red2) / delta + 2;
      break;
    case blue2:
      huePercentage = (red2 - green2) / delta + 4;
  }
  let hue = huePercentage / 6 * 360, clampedHue = clamp(hue, 0, 360);
  return {
    hue: clampedHue ? roundNumberToDecimalPlaces(clampedHue, 2) : 0,
    saturation: roundNumberToDecimalPlaces(clamp(saturation, 0, 1), 4),
    brightness: roundNumberToDecimalPlaces(clamp(largestComponent, 0, 1), 4),
    lightness: roundNumberToDecimalPlaces(lightness, 4),
    alpha: roundNumberToDecimalPlaces(alpha, 4)
  };
}
function rgbToHsb(color2) {
  let {
    hue,
    saturation,
    brightness,
    alpha = 1
  } = rgbToHsbl(color2, "b");
  return {
    hue,
    saturation,
    brightness,
    alpha
  };
}
function rgbToHsl(color2) {
  let {
    hue,
    saturation: rawSaturation,
    lightness: rawLightness,
    alpha = 1
  } = rgbToHsbl(color2, "l"), saturation = roundNumberToDecimalPlaces(rawSaturation * 100, 2), lightness = roundNumberToDecimalPlaces(rawLightness * 100, 2);
  return {
    hue,
    saturation,
    lightness,
    alpha
  };
}
function hexToRgb(color2) {
  if (color2.length === 4) {
    let repeatHex = (hex1, hex2) => color2.slice(hex1, hex2).repeat(2), red3 = parseInt(repeatHex(1, 2), 16), green3 = parseInt(repeatHex(2, 3), 16), blue3 = parseInt(repeatHex(3, 4), 16);
    return {
      red: red3,
      green: green3,
      blue: blue3
    };
  }
  let red2 = parseInt(color2.slice(1, 3), 16), green2 = parseInt(color2.slice(3, 5), 16), blue2 = parseInt(color2.slice(5, 7), 16);
  return {
    red: red2,
    green: green2,
    blue: blue2
  };
}
var rgbaString;
var init_color_transformers = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/color-transformers.js"() {
    init_clamp();
    init_roundNumberToDecimalPlaces();
    rgbaString = rgbString;
  }
});
var import_react3;
var WithinContentContext;
var init_within_content_context = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/within-content-context.js"() {
    import_react3 = __toESM(require_react()), WithinContentContext = /* @__PURE__ */ (0, import_react3.createContext)(false);
  }
});
var isServer;
var init_target = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/target.js"() {
    isServer = typeof window > "u" || typeof document > "u";
  }
});
var import_react4;
var useIsomorphicLayoutEffect2;
var init_use_isomorphic_layout_effect = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-isomorphic-layout-effect.js"() {
    import_react4 = __toESM(require_react());
    init_target();
    useIsomorphicLayoutEffect2 = isServer ? import_react4.useEffect : import_react4.useLayoutEffect;
  }
});
function useEventListener(eventName, handler, target, options) {
  let handlerRef = (0, import_react5.useRef)(handler), optionsRef = (0, import_react5.useRef)(options);
  useIsomorphicLayoutEffect2(() => {
    handlerRef.current = handler;
  }, [handler]), useIsomorphicLayoutEffect2(() => {
    optionsRef.current = options;
  }, [options]), (0, import_react5.useEffect)(() => {
    if (!(typeof eventName == "string" && target !== null))
      return;
    let targetElement;
    if (typeof target > "u")
      targetElement = window;
    else if ("current" in target) {
      if (target.current === null)
        return;
      targetElement = target.current;
    } else
      targetElement = target;
    let eventOptions = optionsRef.current, eventListener = (event) => handlerRef.current(event);
    return targetElement.addEventListener(eventName, eventListener, eventOptions), () => {
      targetElement.removeEventListener(eventName, eventListener, eventOptions);
    };
  }, [eventName, target]);
}
var import_react5;
var init_use_event_listener = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-event-listener.js"() {
    import_react5 = __toESM(require_react());
    init_use_isomorphic_layout_effect();
  }
});
var breakpointsAliases;
var breakpoints;
var init_breakpoints = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/breakpoints.mjs"() {
    breakpointsAliases = ["xs", "sm", "md", "lg", "xl"], breakpoints = {
      "breakpoints-xs": {
        value: "0px",
        description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
      },
      "breakpoints-sm": {
        value: "490px",
        description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
      },
      "breakpoints-md": {
        value: "768px",
        description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
      },
      "breakpoints-lg": {
        value: "1040px",
        description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
      },
      "breakpoints-xl": {
        value: "1440px",
        description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
      }
    };
  }
});
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, i === 0) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && _i.return != null && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _taggedTemplateLiteralLoose(strings, raw) {
  return raw || (raw = strings.slice(0)), strings.raw = raw, strings;
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _unsupportedIterableToArray2(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _arrayLikeToArray2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray2(o, minLen);
  }
}
function _arrayLikeToArray2(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest2() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
var init_rollupPluginBabelHelpers2 = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/_virtual/_rollupPluginBabelHelpers.mjs"() {
  }
});
function getUnit(value) {
  value === void 0 && (value = "");
  var unit = value.match(new RegExp(DIGIT_REGEX.source + "(" + UNIT_REGEX.source + ")"));
  return unit && unit[1];
}
function toPx(value) {
  value === void 0 && (value = "");
  var unit = getUnit(value);
  if (!unit || unit === UNIT_PX)
    return value;
  if (unit === UNIT_EM || unit === UNIT_REM)
    return "" + parseFloat(value) * BASE_FONT_SIZE + UNIT_PX;
}
function toEm(value, fontSize) {
  value === void 0 && (value = ""), fontSize === void 0 && (fontSize = BASE_FONT_SIZE);
  var unit = getUnit(value);
  if (!unit || unit === UNIT_EM)
    return value;
  if (unit === UNIT_PX)
    return "" + parseFloat(value) / fontSize + UNIT_EM;
  if (unit === UNIT_REM)
    return "" + parseFloat(value) * BASE_FONT_SIZE / fontSize + UNIT_EM;
}
function toRem(value) {
  value === void 0 && (value = "");
  var unit = getUnit(value);
  if (!unit || unit === UNIT_REM)
    return value;
  if (unit === UNIT_EM)
    return "" + parseFloat(value) + UNIT_REM;
  if (unit === UNIT_PX)
    return "" + parseFloat(value) / BASE_FONT_SIZE + UNIT_REM;
}
function rem(value) {
  return value.replace(new RegExp(DIGIT_REGEX.source + "(" + UNIT_PX + ")", "g"), function(px) {
    var _toRem;
    return (_toRem = toRem(px)) != null ? _toRem : px;
  });
}
function tokenGroupToRems(metaTokenGroup) {
  return Object.fromEntries(
    Object.entries(metaTokenGroup).map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 2), tokenName = _ref2[0], tokenProperties = _ref2[1];
      return [tokenName, Object.assign(Object.assign({}, tokenProperties), {}, {
        value: rem(tokenProperties.value)
      })];
    })
    // We loose the `metaTokenGroup` inference after transforming the object with
    // `Object.fromEntries()` and `Object.entries()`. Thus, we cast the result
    // back to `T` since we are simply converting the `value` from px to rem.
  );
}
function createVarName(tokenName) {
  return "--p-" + tokenName;
}
function createVar(tokenName) {
  return "var(" + createVarName(tokenName) + ")";
}
function getTokenNames(theme) {
  return Object.values(theme).flatMap(function(tokenGroup) {
    return Object.keys(tokenGroup);
  });
}
function getMediaConditions(breakpoints2) {
  var breakpointEntries = Object.entries(breakpoints2), lastBreakpointIndex = breakpointEntries.length - 1;
  return Object.fromEntries(breakpointEntries.map(function(entry2, index) {
    var _ref3 = entry2, _ref4 = _slicedToArray2(_ref3, 2), breakpointsTokenName = _ref4[0], breakpoint = _ref4[1], upMediaCondition = getUpMediaCondition(breakpoint), downMediaCondition = getDownMediaCondition(breakpoint), onlyMediaCondition = index === lastBreakpointIndex ? upMediaCondition : upMediaCondition + " and " + getDownMediaCondition(breakpointEntries[index + 1][1]);
    return [breakpointsTokenName, {
      // Media condition for the current breakpoint and up
      up: upMediaCondition,
      // Media condition for current breakpoint and down
      down: downMediaCondition,
      // Media condition for only the current breakpoint
      only: onlyMediaCondition
    }];
  }));
}
function getUpMediaCondition(breakpoint) {
  return "(min-width: " + toEm(breakpoint) + ")";
}
function getDownMediaCondition(breakpoint) {
  var _toPx2, offsetBreakpoint = parseFloat((_toPx2 = toPx(breakpoint)) != null ? _toPx2 : "") - 0.04;
  return "(max-width: " + toEm(offsetBreakpoint + "px") + ")";
}
function createMetaThemeBase(metaTheme) {
  return Object.fromEntries(Object.entries(metaTheme).map(function(_ref5) {
    var _ref6 = _slicedToArray2(_ref5, 2), tokenGroupName = _ref6[0], tokenGroup = _ref6[1];
    return [tokenGroupName, tokenGroupNamesToRems.includes(tokenGroupName) ? tokenGroupToRems(tokenGroup) : tokenGroup];
  }));
}
var _templateObject;
var BASE_FONT_SIZE;
var UNIT_PX;
var UNIT_EM;
var UNIT_REM;
var DIGIT_REGEX;
var UNIT_REGEX;
var tokenGroupNamesToRems;
var init_utils2 = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/utils.mjs"() {
    init_rollupPluginBabelHelpers2();
    BASE_FONT_SIZE = 16, UNIT_PX = "px", UNIT_EM = "em", UNIT_REM = "rem", DIGIT_REGEX = new RegExp(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["-?d+(?:.d+|d*)"], ["-?\\d+(?:\\.\\d+|\\d*)"])))), UNIT_REGEX = new RegExp(UNIT_PX + "|" + UNIT_EM + "|" + UNIT_REM);
    tokenGroupNamesToRems = ["border", "breakpoints", "font", "height", "shadow", "space", "text", "width"];
  }
});
var require_cjs2 = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value == "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement2(value);
    }
    var canUseSymbol = typeof Symbol == "function" && Symbol.for, REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement2(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge2(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge)
        return deepmerge2;
      var customMerge = options.customMerge(key);
      return typeof customMerge == "function" ? customMerge : deepmerge2;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      return options.isMergeableObject(target) && getKeys(target).forEach(function(key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
      }), getKeys(source).forEach(function(key) {
        propertyIsUnsafe(target, key) || (propertyIsOnObject(target, key) && options.isMergeableObject(source[key]) ? destination[key] = getMergeFunction(key, options)(target[key], source[key], options) : destination[key] = cloneUnlessOtherwiseSpecified(source[key], options));
      }), destination;
    }
    function deepmerge2(target, source, options) {
      options = options || {}, options.arrayMerge = options.arrayMerge || defaultArrayMerge, options.isMergeableObject = options.isMergeableObject || isMergeableObject, options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source), targetIsArray = Array.isArray(target), sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      return sourceAndTargetTypesMatch ? sourceIsArray ? options.arrayMerge(target, source, options) : mergeObject(target, source, options) : cloneUnlessOtherwiseSpecified(source, options);
    }
    deepmerge2.all = function(array, options) {
      if (!Array.isArray(array))
        throw new Error("first argument should be an array");
      return array.reduce(function(prev, next) {
        return deepmerge2(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge2;
    module.exports = deepmerge_1;
  }
});
var size;
var init_size = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/size.mjs"() {
    size = {
      0: "0px",
      "0165": "0.66px",
      "025": "1px",
      "050": "2px",
      100: "4px",
      150: "6px",
      200: "8px",
      275: "11px",
      300: "12px",
      325: "13px",
      350: "14px",
      400: "16px",
      500: "20px",
      600: "24px",
      700: "28px",
      750: "30px",
      800: "32px",
      900: "36px",
      1e3: "40px",
      1200: "48px",
      1600: "64px",
      2e3: "80px",
      2400: "96px",
      2800: "112px",
      3200: "128px"
    };
  }
});
var border;
var init_border = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/border.mjs"() {
    init_size();
    border = {
      "border-radius-0": {
        value: size[0]
      },
      "border-radius-050": {
        value: size["050"]
      },
      "border-radius-100": {
        value: size[100]
      },
      "border-radius-150": {
        value: size[150]
      },
      "border-radius-200": {
        value: size[200]
      },
      "border-radius-300": {
        value: size[300]
      },
      "border-radius-400": {
        value: size[400]
      },
      "border-radius-500": {
        value: size[500]
      },
      "border-radius-750": {
        value: size[750]
      },
      "border-radius-full": {
        value: "9999px"
      },
      "border-width-0": {
        value: size[0]
      },
      "border-width-0165": {
        value: size["0165"]
      },
      "border-width-025": {
        value: size["025"]
      },
      "border-width-050": {
        value: size["050"]
      },
      "border-width-100": {
        value: size[100]
      }
    };
  }
});
var gray;
var azure;
var blue;
var green;
var lime;
var magenta;
var orange;
var purple;
var red;
var rose;
var teal;
var yellow;
var blackAlpha;
var init_colors = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/colors.mjs"() {
    gray = {
      1: "rgba(255, 255, 255, 1)",
      2: "rgba(253, 253, 253, 1)",
      3: "rgba(250, 250, 250, 1)",
      4: "rgba(247, 247, 247, 1)",
      5: "rgba(243, 243, 243, 1)",
      6: "rgba(241, 241, 241, 1)",
      7: "rgba(235, 235, 235, 1)",
      8: "rgba(227, 227, 227, 1)",
      9: "rgba(212, 212, 212, 1)",
      10: "rgba(204, 204, 204, 1)",
      11: "rgba(181, 181, 181, 1)",
      12: "rgba(138, 138, 138, 1)",
      13: "rgba(97, 97, 97, 1)",
      14: "rgba(74, 74, 74, 1)",
      15: "rgba(48, 48, 48, 1)",
      16: "rgba(26, 26, 26, 1)"
    }, azure = {
      1: "rgba(251, 253, 255, 1)",
      2: "rgba(242, 249, 255, 1)",
      3: "rgba(234, 244, 255, 1)",
      4: "rgba(224, 240, 255, 1)",
      5: "rgba(213, 235, 255, 1)",
      6: "rgba(202, 230, 255, 1)",
      7: "rgba(192, 225, 255, 1)",
      8: "rgba(168, 216, 255, 1)",
      9: "rgba(145, 208, 255, 1)",
      10: "rgba(81, 192, 255, 1)",
      11: "rgba(0, 148, 213, 1)",
      12: "rgba(0, 124, 180, 1)",
      13: "rgba(0, 103, 155, 1)",
      14: "rgba(0, 82, 124, 1)",
      15: "rgba(0, 58, 90, 1)",
      16: "rgba(0, 33, 51, 1)"
    }, blue = {
      1: "rgba(252, 253, 255, 1)",
      2: "rgba(246, 248, 255, 1)",
      3: "rgba(240, 242, 255, 1)",
      4: "rgba(234, 237, 255, 1)",
      5: "rgba(226, 231, 255, 1)",
      6: "rgba(219, 225, 255, 1)",
      7: "rgba(213, 220, 255, 1)",
      8: "rgba(197, 208, 255, 1)",
      9: "rgba(186, 199, 255, 1)",
      10: "rgba(151, 173, 255, 1)",
      11: "rgba(65, 136, 255, 1)",
      12: "rgba(0, 113, 233, 1)",
      13: "rgba(0, 91, 211, 1)",
      14: "rgba(0, 66, 153, 1)",
      15: "rgba(0, 46, 106, 1)",
      16: "rgba(0, 22, 51, 1)"
    }, green = {
      1: "rgba(248, 255, 251, 1)",
      2: "rgba(227, 255, 237, 1)",
      3: "rgba(205, 254, 225, 1)",
      4: "rgba(180, 254, 210, 1)",
      5: "rgba(146, 254, 194, 1)",
      6: "rgba(99, 253, 176, 1)",
      7: "rgba(56, 250, 163, 1)",
      8: "rgba(53, 238, 155, 1)",
      9: "rgba(50, 225, 147, 1)",
      10: "rgba(46, 211, 137, 1)",
      11: "rgba(50, 160, 110, 1)",
      12: "rgba(41, 132, 90, 1)",
      13: "rgba(19, 111, 69, 1)",
      14: "rgba(12, 81, 50, 1)",
      15: "rgba(8, 61, 37, 1)",
      16: "rgba(9, 42, 27, 1)"
    }, lime = {
      1: "rgba(250, 255, 250, 1)",
      2: "rgba(228, 255, 229, 1)",
      3: "rgba(208, 255, 209, 1)",
      4: "rgba(187, 254, 190, 1)",
      5: "rgba(157, 254, 160, 1)",
      6: "rgba(119, 254, 122, 1)",
      7: "rgba(56, 254, 62, 1)",
      8: "rgba(40, 242, 47, 1)",
      9: "rgba(37, 232, 43, 1)",
      10: "rgba(32, 207, 39, 1)",
      11: "rgba(24, 168, 29, 1)",
      12: "rgba(17, 135, 21, 1)",
      13: "rgba(12, 113, 15, 1)",
      14: "rgba(11, 85, 13, 1)",
      15: "rgba(3, 61, 5, 1)",
      16: "rgba(3, 33, 4, 1)"
    }, magenta = {
      1: "rgba(255, 253, 255, 1)",
      2: "rgba(255, 245, 255, 1)",
      3: "rgba(253, 239, 253, 1)",
      4: "rgba(254, 231, 254, 1)",
      5: "rgba(252, 223, 252, 1)",
      6: "rgba(251, 215, 251, 1)",
      7: "rgba(251, 207, 251, 1)",
      8: "rgba(249, 190, 249, 1)",
      9: "rgba(248, 177, 248, 1)",
      10: "rgba(246, 141, 246, 1)",
      11: "rgba(225, 86, 225, 1)",
      12: "rgba(197, 48, 197, 1)",
      13: "rgba(159, 38, 159, 1)",
      14: "rgba(121, 26, 121, 1)",
      15: "rgba(86, 16, 86, 1)",
      16: "rgba(52, 6, 52, 1)"
    }, orange = {
      1: "rgba(255, 253, 250, 1)",
      2: "rgba(255, 247, 238, 1)",
      3: "rgba(255, 241, 227, 1)",
      4: "rgba(255, 235, 213, 1)",
      5: "rgba(255, 228, 198, 1)",
      6: "rgba(255, 221, 182, 1)",
      7: "rgba(255, 214, 164, 1)",
      8: "rgba(255, 200, 121, 1)",
      9: "rgba(255, 184, 0, 1)",
      10: "rgba(229, 165, 0, 1)",
      11: "rgba(178, 132, 0, 1)",
      12: "rgba(149, 111, 0, 1)",
      13: "rgba(124, 88, 0, 1)",
      14: "rgba(94, 66, 0, 1)",
      15: "rgba(65, 45, 0, 1)",
      16: "rgba(37, 26, 0, 1)"
    }, purple = {
      1: "rgba(253, 253, 255, 1)",
      2: "rgba(248, 247, 255, 1)",
      3: "rgba(243, 241, 255, 1)",
      4: "rgba(239, 236, 255, 1)",
      5: "rgba(233, 229, 255, 1)",
      6: "rgba(228, 222, 255, 1)",
      7: "rgba(223, 217, 255, 1)",
      8: "rgba(212, 204, 255, 1)",
      9: "rgba(199, 188, 255, 1)",
      10: "rgba(170, 149, 255, 1)",
      11: "rgba(148, 116, 255, 1)",
      12: "rgba(128, 81, 255, 1)",
      13: "rgba(113, 38, 255, 1)",
      14: "rgba(87, 0, 209, 1)",
      15: "rgba(59, 0, 147, 1)",
      16: "rgba(28, 0, 79, 1)"
    }, red = {
      1: "rgba(255, 251, 251, 1)",
      2: "rgba(255, 246, 246, 1)",
      3: "rgba(255, 237, 236, 1)",
      4: "rgba(254, 233, 232, 1)",
      5: "rgba(254, 226, 225, 1)",
      6: "rgba(254, 218, 217, 1)",
      7: "rgba(254, 211, 209, 1)",
      8: "rgba(254, 195, 193, 1)",
      9: "rgba(253, 176, 172, 1)",
      10: "rgba(253, 129, 122, 1)",
      11: "rgba(239, 77, 47, 1)",
      12: "rgba(229, 28, 0, 1)",
      13: "rgba(181, 38, 11, 1)",
      14: "rgba(142, 31, 11, 1)",
      15: "rgba(95, 21, 7, 1)",
      16: "rgba(47, 10, 4, 1)"
    }, rose = {
      1: "rgba(255, 253, 253, 1)",
      2: "rgba(255, 246, 248, 1)",
      3: "rgba(255, 239, 243, 1)",
      4: "rgba(255, 232, 238, 1)",
      5: "rgba(255, 225, 232, 1)",
      6: "rgba(255, 217, 227, 1)",
      7: "rgba(254, 209, 221, 1)",
      8: "rgba(254, 193, 210, 1)",
      9: "rgba(254, 181, 202, 1)",
      10: "rgba(254, 142, 177, 1)",
      11: "rgba(253, 75, 146, 1)",
      12: "rgba(227, 12, 118, 1)",
      13: "rgba(185, 7, 95, 1)",
      14: "rgba(141, 4, 72, 1)",
      15: "rgba(100, 2, 49, 1)",
      16: "rgba(62, 1, 28, 1)"
    }, teal = {
      1: "rgba(248, 255, 254, 1)",
      2: "rgba(232, 252, 250, 1)",
      3: "rgba(215, 250, 247, 1)",
      4: "rgba(195, 247, 242, 1)",
      5: "rgba(170, 246, 239, 1)",
      6: "rgba(137, 245, 236, 1)",
      7: "rgba(112, 240, 229, 1)",
      8: "rgba(90, 230, 219, 1)",
      9: "rgba(44, 224, 212, 1)",
      10: "rgba(30, 199, 188, 1)",
      11: "rgba(0, 161, 152, 1)",
      12: "rgba(18, 131, 124, 1)",
      13: "rgba(12, 106, 100, 1)",
      14: "rgba(12, 83, 79, 1)",
      15: "rgba(3, 60, 57, 1)",
      16: "rgba(6, 44, 41, 1)"
    }, yellow = {
      1: "rgba(255, 253, 246, 1)",
      2: "rgba(255, 248, 219, 1)",
      3: "rgba(255, 244, 191, 1)",
      4: "rgba(255, 239, 157, 1)",
      5: "rgba(255, 235, 120, 1)",
      6: "rgba(255, 230, 0, 1)",
      7: "rgba(247, 223, 0, 1)",
      8: "rgba(234, 211, 0, 1)",
      9: "rgba(225, 203, 0, 1)",
      10: "rgba(197, 178, 0, 1)",
      11: "rgba(153, 138, 0, 1)",
      12: "rgba(130, 117, 0, 1)",
      13: "rgba(105, 95, 0, 1)",
      14: "rgba(79, 71, 0, 1)",
      15: "rgba(51, 46, 0, 1)",
      16: "rgba(31, 28, 0, 1)"
    }, blackAlpha = {
      1: "rgba(0, 0, 0, 0)",
      2: "rgba(0, 0, 0, 0.01)",
      3: "rgba(0, 0, 0, 0.02)",
      4: "rgba(0, 0, 0, 0.03)",
      5: "rgba(0, 0, 0, 0.05)",
      6: "rgba(0, 0, 0, 0.06)",
      7: "rgba(0, 0, 0, 0.08)",
      8: "rgba(0, 0, 0, 0.11)",
      9: "rgba(0, 0, 0, 0.17)",
      10: "rgba(0, 0, 0, 0.20)",
      11: "rgba(0, 0, 0, 0.29)",
      12: "rgba(0, 0, 0, 0.46)",
      13: "rgba(0, 0, 0, 0.62)",
      14: "rgba(0, 0, 0, 0.71)",
      15: "rgba(0, 0, 0, 0.81)",
      16: "rgba(0, 0, 0, 0.90)"
    };
  }
});
var color;
var init_color = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/color.mjs"() {
    init_colors();
    color = {
      "color-bg": {
        value: gray[6],
        description: "The default background color of the admin."
      },
      "color-bg-inverse": {
        value: gray[16],
        description: "Use for high contrast page or component backgrounds."
      },
      "color-bg-surface": {
        value: gray[1],
        description: "The background color for elements with the highest level of prominence, like a card."
      },
      "color-bg-surface-hover": {
        value: gray[4],
        description: "The hover state color for elements with the highest level of prominence."
      },
      "color-bg-surface-active": {
        value: gray[5],
        description: "The active state (on press) color for elements with the highest level of prominence."
      },
      "color-bg-surface-selected": {
        value: gray[6],
        description: "The selected state color for elements with the highest level of prominence."
      },
      "color-bg-surface-disabled": {
        value: blackAlpha[5],
        description: "The disabled state color for elements."
      },
      "color-bg-surface-secondary": {
        value: gray[4],
        description: "The background color for elements with a secondary level of prominence."
      },
      "color-bg-surface-secondary-hover": {
        value: gray[6],
        description: "The hover state color for elements with a secondary level of prominence."
      },
      "color-bg-surface-secondary-active": {
        value: gray[7],
        description: "The active state (on press) color for elements with a secondary level of prominence."
      },
      "color-bg-surface-secondary-selected": {
        value: gray[7],
        description: "The selected state color for elements with a secondary level of prominence."
      },
      "color-bg-surface-tertiary": {
        value: gray[5],
        description: "The background color for elements with a third level of prominence."
      },
      "color-bg-surface-tertiary-hover": {
        value: gray[7],
        description: "The hover state color for elements with a third level of prominence."
      },
      "color-bg-surface-tertiary-active": {
        value: gray[8],
        description: "The active state (on press) color for elements with a third level of prominence."
      },
      "color-bg-surface-brand": {
        value: gray[8],
        description: "Use to apply the key color to elements."
      },
      "color-bg-surface-brand-hover": {
        value: gray[7],
        description: "The hover state color for key elements."
      },
      "color-bg-surface-brand-active": {
        value: gray[6],
        description: "The active state (on press) color for key elements."
      },
      "color-bg-surface-brand-selected": {
        value: gray[6],
        description: "The selected state color for key elements."
      },
      "color-bg-surface-info": {
        value: azure[3],
        description: "Use for backgrounds communicating important information, like banners."
      },
      "color-bg-surface-info-hover": {
        value: azure[4],
        description: "The hover state color for communicating important information."
      },
      "color-bg-surface-info-active": {
        value: azure[6],
        description: "The active state (on press) color for communicating important information."
      },
      "color-bg-surface-success": {
        value: green[3],
        description: "Use for backgrounds communicating success, like banners."
      },
      "color-bg-surface-success-hover": {
        value: green[4],
        description: "The hover state color for communicating success."
      },
      "color-bg-surface-success-active": {
        value: green[5],
        description: "The active state (on press) color for communicating success."
      },
      "color-bg-surface-caution": {
        value: yellow[2],
        description: "Use for backgrounds communicating caution, like banners."
      },
      "color-bg-surface-caution-hover": {
        value: yellow[3],
        description: "The hover state for communicating caution."
      },
      "color-bg-surface-caution-active": {
        value: yellow[4],
        description: "The active state (on press) color for communicating caution."
      },
      "color-bg-surface-warning": {
        value: orange[3],
        description: "Use for backgrounds communicating warning, like banners."
      },
      "color-bg-surface-warning-hover": {
        value: orange[4],
        description: "The hover state color for communicating warning."
      },
      "color-bg-surface-warning-active": {
        value: orange[5],
        description: "The active state (on press) color for communicating warning."
      },
      "color-bg-surface-critical": {
        value: red[4],
        description: "Use for backgrounds communicating critical information, like banners or input errors."
      },
      "color-bg-surface-critical-hover": {
        value: red[5],
        description: "The hover state color for communicating critical information."
      },
      "color-bg-surface-critical-active": {
        value: red[6],
        description: "The active state (on press) color for communicating critical information."
      },
      "color-bg-surface-emphasis": {
        value: blue[3],
        description: "Use for backgrounds indicating areas of focus in editors, such as the theme editor."
      },
      "color-bg-surface-emphasis-hover": {
        value: blue[4],
        description: "The hover state color for elements indicating areas of focus in editors."
      },
      "color-bg-surface-emphasis-active": {
        value: blue[5],
        description: "The active state (on press) color for elements indicating areas of focus in editors."
      },
      "color-bg-surface-magic": {
        value: purple[2],
        description: "Use for backgrounds of elements suggested by magic AI."
      },
      "color-bg-surface-magic-hover": {
        value: purple[3],
        description: "The hover state color for elements suggested by magic AI."
      },
      "color-bg-surface-magic-active": {
        value: purple[5],
        description: "The active state (on press) color for elements suggested by magic AI."
      },
      "color-bg-surface-inverse": {
        value: gray[15],
        description: "Use for elements on bg-inverse."
      },
      "color-bg-surface-transparent": {
        value: blackAlpha[1],
        description: "Use for elements that need a fully transparent background."
      },
      "color-bg-fill": {
        value: gray[1],
        description: "The background color of contained elements with a smaller surface area, like a button."
      },
      "color-bg-fill-hover": {
        value: gray[3],
        description: "The hover state color of contained elements with a smaller surface area, like a button."
      },
      "color-bg-fill-active": {
        value: gray[4],
        description: "The active state (on press) color of contained elements with a smaller surface area, like a button."
      },
      "color-bg-fill-selected": {
        value: gray[10],
        description: "The selected state color of contained elements with a smaller surface area, like a button or checkbox."
      },
      "color-bg-fill-disabled": {
        value: blackAlpha[5],
        description: "The disabled state color of contained elements with a smaller surface area, like a button."
      },
      "color-bg-fill-secondary": {
        value: gray[6],
        description: "The background color of elements with a smaller surface area and a secondary level of prominence."
      },
      "color-bg-fill-secondary-hover": {
        value: gray[7],
        description: "The hover state color of elements with a smaller surface area and a secondary level of prominence."
      },
      "color-bg-fill-secondary-active": {
        value: gray[8],
        description: "The active state (on press) color of elements with a smaller surface area and a secondary level of prominence."
      },
      "color-bg-fill-tertiary": {
        value: gray[8],
        description: "The background color of elements with a smaller surface area and a third level of prominence."
      },
      "color-bg-fill-tertiary-hover": {
        value: gray[9],
        description: "The hover state color of elements with a smaller surface area and a third level of prominence."
      },
      "color-bg-fill-tertiary-active": {
        value: gray[10],
        description: "The active state (on press) color of elements with a smaller surface area and a third level of prominence."
      },
      "color-bg-fill-brand": {
        value: gray[15],
        description: "The background color of main actions, like primary buttons."
      },
      "color-bg-fill-brand-hover": {
        value: gray[16],
        description: "The hover state color of main actions, like primary buttons."
      },
      "color-bg-fill-brand-active": {
        value: gray[16],
        description: "The active state (on press) color of main actions, like primary buttons."
      },
      "color-bg-fill-brand-selected": {
        value: gray[15],
        description: "The selected state color of main actions, like primary buttons."
      },
      "color-bg-fill-brand-disabled": {
        value: blackAlpha[9],
        description: "The disabled state color of main actions, like primary buttons."
      },
      "color-bg-fill-info": {
        value: azure[9],
        description: "Use for backgrounds communicating important information on elements with a smaller surface area, like a badge or button."
      },
      "color-bg-fill-info-hover": {
        value: azure[10],
        description: "The hover state color for communicating important information on elements with a smaller surface area."
      },
      "color-bg-fill-info-active": {
        value: azure[11],
        description: "The active state (on press) color for communicating important information on elements with a smaller surface area."
      },
      "color-bg-fill-info-secondary": {
        value: azure[5],
        description: "Use for backgrounds communicating important information on elements with a smaller surface area, with a secondary level of prominence."
      },
      "color-bg-fill-success": {
        value: green[12],
        description: "Use for backgrounds communicating success on elements with a smaller surface area, like a badge or a banner."
      },
      "color-bg-fill-success-hover": {
        value: green[13],
        description: "The hover state color for communicating success on elements with a smaller surface area."
      },
      "color-bg-fill-success-active": {
        value: green[14],
        description: "The active state (on press) color for communicating success on elements with a smaller surface area."
      },
      "color-bg-fill-success-secondary": {
        value: green[4],
        description: "Use for backgrounds communicating success on elements with a smaller surface area, with a secondary level of prominence."
      },
      "color-bg-fill-warning": {
        value: orange[9],
        description: "Use for backgrounds communicating warning on elements with a smaller surface area, like a badge or a banner."
      },
      "color-bg-fill-warning-hover": {
        value: orange[10],
        description: "The hover state color for communicating warning on elements with a smaller surface area."
      },
      "color-bg-fill-warning-active": {
        value: orange[11],
        description: "The active state (on press) color for communicating warning on elements with a smaller surface area."
      },
      "color-bg-fill-warning-secondary": {
        value: orange[7],
        description: "Use for backgrounds communicating warning on elements with a smaller surface area, with a secondary level of prominence."
      },
      "color-bg-fill-caution": {
        value: yellow[6],
        description: "Use for backgrounds communicating caution on elements with a smaller surface area, like a badge or a banner."
      },
      "color-bg-fill-caution-hover": {
        value: yellow[8],
        description: "The hover state color for communicating caution on elements with a smaller surface area."
      },
      "color-bg-fill-caution-active": {
        value: yellow[9],
        description: "The active state (on press) color for communicating caution on elements with a smaller surface area."
      },
      "color-bg-fill-caution-secondary": {
        value: yellow[5],
        description: "Use for backgrounds communicating caution on elements with a smaller surface area, with a secondary level of prominence."
      },
      "color-bg-fill-critical": {
        value: red[12],
        description: "Use for backgrounds communicating critical information on elements with a smaller surface area, like a badge or a banner."
      },
      "color-bg-fill-critical-hover": {
        value: red[13],
        description: "The hover state color for communicating critical information on elements with a smaller surface area."
      },
      "color-bg-fill-critical-active": {
        value: red[14],
        description: "The active state (on press) color for communicating critical information on elements with a smaller surface area."
      },
      "color-bg-fill-critical-selected": {
        value: red[14],
        description: "The selected state color for communicating critical information on elements with a smaller surface area."
      },
      "color-bg-fill-critical-secondary": {
        value: red[7],
        description: "Use for backgrounds communicating critical information on elements with a smaller surface area, with a secondary level of prominence."
      },
      "color-bg-fill-emphasis": {
        value: blue[13],
        description: "Use for backgrounds indicating areas of focus in editors on elements with a smaller surface area, like a button or a badge."
      },
      "color-bg-fill-emphasis-hover": {
        value: blue[14],
        description: "The hover state color for indicating areas of focus in editors on elements with a smaller surface area."
      },
      "color-bg-fill-emphasis-active": {
        value: blue[15],
        description: "The active state (on press) color for indicating areas of focus in editors on elements with a smaller surface area."
      },
      "color-bg-fill-magic": {
        value: purple[12],
        description: "The background color of elements suggested by magic AI, like a badge or a banner."
      },
      "color-bg-fill-magic-secondary": {
        value: purple[5],
        description: "The background color of elements suggested by magic AI, with a secondary level of prominence."
      },
      "color-bg-fill-magic-secondary-hover": {
        value: purple[6],
        description: "The hover state color of elements suggested by magic AI, with a secondary level of prominence."
      },
      "color-bg-fill-magic-secondary-active": {
        value: purple[7],
        description: "The active state (on press) color of elements suggested by magic AI, with a secondary level of prominence."
      },
      "color-bg-fill-inverse": {
        value: gray[15],
        description: "The background color of elements with a smaller surface area on an inverse background."
      },
      "color-bg-fill-inverse-hover": {
        value: gray[14],
        description: "The hover state color of elements with a smaller surface area on an inverse background."
      },
      "color-bg-fill-inverse-active": {
        value: gray[13],
        description: "The active state (on press) color of elements with a smaller surface area on an inverse background."
      },
      "color-bg-fill-transparent": {
        value: blackAlpha[3],
        description: "The background color of elements that need to sit on different background colors, like tabs."
      },
      "color-bg-fill-transparent-hover": {
        value: blackAlpha[5],
        description: "The hover state color of elements that need to sit on different background colors, like tabs."
      },
      "color-bg-fill-transparent-active": {
        value: blackAlpha[7],
        description: "The active state (on press) color of elements that need to sit on different background colors, like tabs."
      },
      "color-bg-fill-transparent-selected": {
        value: blackAlpha[7],
        description: "The selected state color of elements that need to sit on different background colors, like tabs."
      },
      "color-bg-fill-transparent-secondary": {
        value: blackAlpha[6],
        description: "The background color of elements that need to sit on different background colors, with a secondary level of prominence."
      },
      "color-bg-fill-transparent-secondary-hover": {
        value: blackAlpha[7],
        description: "The hover state color of elements that need to sit on different background colors, with a secondary level of prominence."
      },
      "color-bg-fill-transparent-secondary-active": {
        value: blackAlpha[8],
        description: "The active state (on press) color of elements that need to sit on different background colors, with a secondary level of prominence."
      },
      "color-text": {
        value: gray[15],
        description: "The default text color."
      },
      "color-text-secondary": {
        value: gray[13],
        description: "Use for text with a secondary level of prominence."
      },
      "color-text-disabled": {
        value: gray[11],
        description: "Use for text in a disabled state."
      },
      "color-text-link": {
        value: blue[13],
        description: "Use for text links."
      },
      "color-text-link-hover": {
        value: blue[14],
        description: "The hover state color for text links."
      },
      "color-text-link-active": {
        value: blue[15],
        description: "The active state (on press) color for text links."
      },
      "color-text-brand": {
        value: gray[14],
        description: "Use for text that needs to pull attention."
      },
      "color-text-brand-hover": {
        value: gray[15],
        description: "The hover state color for text that needs to pull attention."
      },
      "color-text-brand-on-bg-fill": {
        value: gray[1],
        description: "Use for text on bg-fill-brand, like primary buttons."
      },
      "color-text-brand-on-bg-fill-hover": {
        value: gray[8],
        description: "The hover state color for text on bg-fill-brand-hover."
      },
      "color-text-brand-on-bg-fill-active": {
        value: gray[10],
        description: "The active state (on press) color for text on bg-fill-brand."
      },
      "color-text-brand-on-bg-fill-disabled": {
        value: gray[1],
        description: "The disabled state color for text on bg-fill-brand-disabled."
      },
      "color-text-info": {
        value: azure[15],
        description: "Use for text communicating important information."
      },
      "color-text-info-hover": {
        value: azure[15],
        description: "The hover state color for text communicating important information."
      },
      "color-text-info-active": {
        value: azure[16],
        description: "The active state (on press) color for text communicating important information."
      },
      "color-text-info-on-bg-fill": {
        value: azure[16],
        description: "Use for text and icons on bg-fill-info."
      },
      "color-text-success": {
        value: green[14],
        description: "Use for text communicating success."
      },
      "color-text-success-hover": {
        value: green[15],
        description: "The hover state color for text communicating success."
      },
      "color-text-success-active": {
        value: green[16],
        description: "The active state (on press) color for text communicating success."
      },
      "color-text-success-on-bg-fill": {
        value: green[1],
        description: "Use for text and icons on bg-fill-success."
      },
      "color-text-caution": {
        value: yellow[14],
        description: "Use for text communicating caution."
      },
      "color-text-caution-hover": {
        value: yellow[15],
        description: "The hover state color for text communicating caution."
      },
      "color-text-caution-active": {
        value: yellow[16],
        description: "The active state (on press) color for text communicating caution."
      },
      "color-text-caution-on-bg-fill": {
        value: yellow[15],
        description: "Use for text and icons on bg-fill-caution."
      },
      "color-text-warning": {
        value: orange[14],
        description: "Use for text communicating warning."
      },
      "color-text-warning-hover": {
        value: orange[15],
        description: "The hover state color for text communicating warning."
      },
      "color-text-warning-active": {
        value: orange[16],
        description: "The active state (on press) color for text communicating warning."
      },
      "color-text-warning-on-bg-fill": {
        value: orange[16],
        description: "Use for text and icons on bg-fill-warning."
      },
      "color-text-critical": {
        value: red[14],
        description: "Use for text communicating critical information."
      },
      "color-text-critical-hover": {
        value: red[15],
        description: "The hover state color for text communicating critical information."
      },
      "color-text-critical-active": {
        value: red[16],
        description: "The active state (on press) color for text communicating critical information."
      },
      "color-text-critical-on-bg-fill": {
        value: red[1],
        description: "Use for text and icons on bg-fill-critical."
      },
      "color-text-emphasis": {
        value: blue[13],
        description: "Use for text indicating areas of focus in editors, like the theme editor."
      },
      "color-text-emphasis-hover": {
        value: blue[14],
        description: "The hover state color for text indicating areas of focus."
      },
      "color-text-emphasis-active": {
        value: blue[15],
        description: "The active state (on press) color for text indicating areas of focus."
      },
      "color-text-emphasis-on-bg-fill": {
        value: blue[1],
        description: "Use for text and icons on bg-fill-emphasis."
      },
      "color-text-emphasis-on-bg-fill-hover": {
        value: blue[5],
        description: "Use for text and icons on bg-fill-emphasis-hover."
      },
      "color-text-emphasis-on-bg-fill-active": {
        value: blue[7],
        description: "Use for text and icons on bg-fill-emphasis-active."
      },
      "color-text-magic": {
        value: purple[14],
        description: "Use for text suggested by magic AI."
      },
      "color-text-magic-secondary": {
        value: purple[13],
        description: "Use for text suggested by magic AI with a secondary level of prominence."
      },
      "color-text-magic-on-bg-fill": {
        value: purple[1],
        description: "Use for text and icons on bg-fill-magic."
      },
      "color-text-inverse": {
        value: gray[8],
        description: "Use for text on an inverse background."
      },
      "color-text-inverse-secondary": {
        value: gray[11],
        description: "Use for secondary text on an inverse background."
      },
      "color-text-link-inverse": {
        value: blue[8],
        description: "Use for text links on an inverse background."
      },
      "color-border": {
        value: gray[8],
        description: "The default color for borders on any element."
      },
      "color-border-hover": {
        value: gray[10],
        description: "The hover color for borders on any element."
      },
      "color-border-disabled": {
        value: gray[7],
        description: "The disabled color for borders on any element."
      },
      "color-border-secondary": {
        value: gray[7],
        description: "The color for hr elements or any visual dividers."
      },
      "color-border-tertiary": {
        value: gray[10],
        description: "The border color on any element. Pair with bg-surface-tertiary or bg-fill-tertiary."
      },
      "color-border-focus": {
        value: blue[13],
        description: "The focus ring for any interactive element in a focused state."
      },
      "color-border-brand": {
        value: gray[8],
        description: "Use for borders paired with brand colors."
      },
      "color-border-info": {
        value: azure[8],
        description: "Use for borders communicating information."
      },
      "color-border-success": {
        value: green[5],
        description: "Use for borders communicating success."
      },
      "color-border-caution": {
        value: yellow[5],
        description: "Use for borders communicating caution."
      },
      "color-border-warning": {
        value: orange[8],
        description: "Use for borders communicating warning."
      },
      "color-border-critical": {
        value: red[8],
        description: "Use for borders communicating critical information."
      },
      "color-border-critical-secondary": {
        value: red[14],
        description: "Use for borders communicating critical information, such as borders on invalid text fields."
      },
      "color-border-emphasis": {
        value: blue[13],
        description: "Use for borders indicating areas of focus."
      },
      "color-border-emphasis-hover": {
        value: blue[14],
        description: "The hover state color for borders indicating areas of focus."
      },
      "color-border-emphasis-active": {
        value: blue[15],
        description: "The active state (on press) color for borders indicating areas of focus."
      },
      "color-border-magic": {
        value: purple[6],
        description: "Use for borders suggested by magic AI."
      },
      "color-border-magic-secondary": {
        value: purple[11],
        description: "Use for borders suggested by magic AI, such as borders on text fields."
      },
      "color-border-magic-secondary-hover": {
        value: purple[12],
        description: "Use for borders suggested by magic AI, such as borders on text fields."
      },
      "color-border-inverse": {
        value: gray[13],
        description: "Use for borders on an inverse background, such as borders on the global search."
      },
      "color-border-inverse-hover": {
        value: gray[10],
        description: "The hover state color for borders on an inverse background."
      },
      "color-border-inverse-active": {
        value: gray[8],
        description: "The active state (on press) color for borders on an inverse background."
      },
      "color-icon": {
        value: gray[14],
        description: "The default color for icons."
      },
      "color-icon-hover": {
        value: gray[15],
        description: "The hover state color for icons."
      },
      "color-icon-active": {
        value: gray[16],
        description: "The active state (on press) color for icons."
      },
      "color-icon-disabled": {
        value: gray[10],
        description: "The disabled state color for icons."
      },
      "color-icon-secondary": {
        value: gray[12],
        description: "Use for secondary icons."
      },
      "color-icon-secondary-hover": {
        value: gray[13],
        description: "The hover state color for secondary icons."
      },
      "color-icon-secondary-active": {
        value: gray[14],
        description: "The active state (on press) color for secondary icons."
      },
      "color-icon-brand": {
        value: gray[16],
        description: "Use for icons that need to pull more focus."
      },
      "color-icon-info": {
        value: azure[11],
        description: "Use for icons communicating information."
      },
      "color-icon-success": {
        value: green[12],
        description: "Use for icons communicating success."
      },
      "color-icon-caution": {
        value: yellow[11],
        description: "Use for icons communicating caution."
      },
      "color-icon-warning": {
        value: orange[11],
        description: "Use for icons communicating warning."
      },
      "color-icon-critical": {
        value: red[11],
        description: "Use for icons communicating critical information."
      },
      "color-icon-emphasis": {
        value: blue[13],
        description: "Use for icons indicating areas of focus in editors, like the theme editor."
      },
      "color-icon-emphasis-hover": {
        value: blue[14],
        description: "The hover color for icons indicating areas of focus in editors."
      },
      "color-icon-emphasis-active": {
        value: blue[15],
        description: "The active state (on press) color for icons indicating areas of focus in editors."
      },
      "color-icon-magic": {
        value: purple[12],
        description: "Use for icons suggested by magic AI."
      },
      "color-icon-inverse": {
        value: gray[8],
        description: "Use for icons on an inverse background."
      },
      "color-avatar-bg-fill": {
        value: gray[11]
      },
      "color-avatar-five-bg-fill": {
        value: rose[11]
      },
      "color-avatar-five-text-on-bg-fill": {
        value: rose[2]
      },
      "color-avatar-four-bg-fill": {
        value: azure[10]
      },
      "color-avatar-four-text-on-bg-fill": {
        value: azure[16]
      },
      "color-avatar-one-bg-fill": {
        value: magenta[12]
      },
      "color-avatar-one-text-on-bg-fill": {
        value: magenta[3]
      },
      "color-avatar-seven-bg-fill": {
        value: purple[11]
      },
      "color-avatar-seven-text-on-bg-fill": {
        value: purple[2]
      },
      "color-avatar-six-bg-fill": {
        value: lime[9]
      },
      "color-avatar-six-text-on-bg-fill": {
        value: lime[15]
      },
      "color-avatar-text-on-bg-fill": {
        value: gray[1]
      },
      "color-avatar-three-bg-fill": {
        value: teal[9]
      },
      "color-avatar-three-text-on-bg-fill": {
        value: teal[15]
      },
      "color-avatar-two-bg-fill": {
        value: green[7]
      },
      "color-avatar-two-text-on-bg-fill": {
        value: green[14]
      },
      "color-backdrop-bg": {
        value: blackAlpha[14]
      },
      "color-checkbox-bg-surface-disabled": {
        value: blackAlpha[7]
      },
      "color-checkbox-icon-disabled": {
        value: gray[1]
      },
      "color-input-bg-surface": {
        value: gray[2]
      },
      "color-input-bg-surface-hover": {
        value: gray[3]
      },
      "color-input-bg-surface-active": {
        value: gray[4]
      },
      "color-input-border": {
        value: gray[12]
      },
      "color-input-border-hover": {
        value: gray[13]
      },
      "color-input-border-active": {
        value: gray[16]
      },
      "color-nav-bg": {
        value: gray[7]
      },
      "color-nav-bg-surface": {
        value: blackAlpha[3]
      },
      "color-nav-bg-surface-hover": {
        value: gray[6]
      },
      "color-nav-bg-surface-active": {
        value: gray[3]
      },
      "color-nav-bg-surface-selected": {
        value: gray[3]
      },
      "color-radio-button-bg-surface-disabled": {
        value: blackAlpha[7]
      },
      "color-radio-button-icon-disabled": {
        value: gray[1]
      },
      "color-video-thumbnail-play-button-bg-fill-hover": {
        value: blackAlpha[15]
      },
      "color-video-thumbnail-play-button-bg-fill": {
        value: blackAlpha[14]
      },
      "color-video-thumbnail-play-button-text-on-bg-fill": {
        value: gray[1]
      }
    };
  }
});
var font;
var init_font = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/font.mjs"() {
    init_size();
    font = {
      "font-family-sans": {
        value: "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif"
      },
      "font-family-mono": {
        value: "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace"
      },
      "font-size-275": {
        value: size[275]
      },
      "font-size-300": {
        value: size[300]
      },
      "font-size-325": {
        value: size[325]
      },
      "font-size-350": {
        value: size[350]
      },
      "font-size-400": {
        value: size[400]
      },
      "font-size-500": {
        value: size[500]
      },
      "font-size-600": {
        value: size[600]
      },
      "font-size-750": {
        value: size[750]
      },
      "font-size-900": {
        value: size[900]
      },
      "font-size-1000": {
        value: size[1e3]
      },
      "font-weight-regular": {
        value: "450"
      },
      "font-weight-medium": {
        value: "550"
      },
      "font-weight-semibold": {
        value: "650"
      },
      "font-weight-bold": {
        value: "700"
      },
      "font-letter-spacing-densest": {
        value: "-0.54px"
      },
      "font-letter-spacing-denser": {
        value: "-0.3px"
      },
      "font-letter-spacing-dense": {
        value: "-0.2px"
      },
      "font-letter-spacing-normal": {
        value: "0px"
      },
      "font-line-height-300": {
        value: size[300]
      },
      "font-line-height-400": {
        value: size[400]
      },
      "font-line-height-500": {
        value: size[500]
      },
      "font-line-height-600": {
        value: size[600]
      },
      "font-line-height-700": {
        value: size[700]
      },
      "font-line-height-800": {
        value: size[800]
      },
      "font-line-height-1000": {
        value: size[1e3]
      },
      "font-line-height-1200": {
        value: size[1200]
      }
    };
  }
});
var height;
var init_height = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/height.mjs"() {
    init_size();
    height = {
      "height-0": {
        value: size[0]
      },
      "height-025": {
        value: size["025"]
      },
      "height-050": {
        value: size["050"]
      },
      "height-100": {
        value: size[100]
      },
      "height-150": {
        value: size[150]
      },
      "height-200": {
        value: size[200]
      },
      "height-300": {
        value: size[300]
      },
      "height-400": {
        value: size[400]
      },
      "height-500": {
        value: size[500]
      },
      "height-600": {
        value: size[600]
      },
      "height-700": {
        value: size[700]
      },
      "height-800": {
        value: size[800]
      },
      "height-900": {
        value: size[900]
      },
      "height-1000": {
        value: size[1e3]
      },
      "height-1200": {
        value: size[1200]
      },
      "height-1600": {
        value: size[1600]
      },
      "height-2000": {
        value: size[2e3]
      },
      "height-2400": {
        value: size[2400]
      },
      "height-2800": {
        value: size[2800]
      },
      "height-3200": {
        value: size[3200]
      }
    };
  }
});
var motion;
var init_motion = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/motion.mjs"() {
    motion = {
      "motion-duration-0": {
        value: "0ms"
      },
      "motion-duration-50": {
        value: "50ms"
      },
      "motion-duration-100": {
        value: "100ms"
      },
      "motion-duration-150": {
        value: "150ms"
      },
      "motion-duration-200": {
        value: "200ms"
      },
      "motion-duration-250": {
        value: "250ms"
      },
      "motion-duration-300": {
        value: "300ms"
      },
      "motion-duration-350": {
        value: "350ms"
      },
      "motion-duration-400": {
        value: "400ms"
      },
      "motion-duration-450": {
        value: "450ms"
      },
      "motion-duration-500": {
        value: "500ms"
      },
      "motion-duration-5000": {
        value: "5000ms"
      },
      "motion-ease": {
        value: "cubic-bezier(0.25, 0.1, 0.25, 1)",
        description: "Responds quickly and finishes with control. A great default for any user interaction."
      },
      "motion-ease-in": {
        value: "cubic-bezier(0.42, 0, 1, 1)",
        description: "Starts slowly and finishes at top speed. Use sparingly."
      },
      "motion-ease-out": {
        value: "cubic-bezier(0.19, 0.91, 0.38, 1)",
        description: "Starts at top speed and finishes slowly. Use sparingly."
      },
      "motion-ease-in-out": {
        value: "cubic-bezier(0.42, 0, 0.58, 1)",
        description: "Starts and finishes with equal speed. A good default for transitions triggered by the system."
      },
      "motion-linear": {
        value: "cubic-bezier(0, 0, 1, 1)",
        description: "Moves with constant speed. Use for continuous and mechanical animations, such as rotating spinners."
      },
      "motion-keyframes-bounce": {
        value: "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }"
      },
      "motion-keyframes-fade-in": {
        value: "{ to { opacity: 1 } }"
      },
      "motion-keyframes-pulse": {
        value: "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }"
      },
      "motion-keyframes-spin": {
        value: "{ to { transform: rotate(1turn) } }"
      },
      "motion-keyframes-appear-above": {
        value: "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }"
      },
      "motion-keyframes-appear-below": {
        value: "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
      }
    };
  }
});
var shadow;
var init_shadow = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/shadow.mjs"() {
    shadow = {
      "shadow-0": {
        value: "none"
      },
      "shadow-100": {
        value: "0px 1px 0px 0px rgba(26, 26, 26, 0.07)"
      },
      "shadow-200": {
        value: "0px 3px 1px -1px rgba(26, 26, 26, 0.07)"
      },
      "shadow-300": {
        value: "0px 4px 6px -2px rgba(26, 26, 26, 0.20)"
      },
      "shadow-400": {
        value: "0px 8px 16px -4px rgba(26, 26, 26, 0.22)"
      },
      "shadow-500": {
        value: "0px 12px 20px -8px rgba(26, 26, 26, 0.24)"
      },
      "shadow-600": {
        value: "0px 20px 20px -8px rgba(26, 26, 26, 0.28)"
      },
      "shadow-bevel-100": {
        value: "1px 0px 0px 0px rgba(0, 0, 0, 0.13) inset, -1px 0px 0px 0px rgba(0, 0, 0, 0.13) inset, 0px -1px 0px 0px rgba(0, 0, 0, 0.17) inset, 0px 1px 0px 0px rgba(204, 204, 204, 0.5) inset"
      },
      "shadow-inset-100": {
        value: "0px 1px 2px 0px rgba(26, 26, 26, 0.15) inset, 0px 1px 1px 0px rgba(26, 26, 26, 0.15) inset"
      },
      "shadow-inset-200": {
        value: "0px 2px 1px 0px rgba(26, 26, 26, 0.20) inset, 1px 0px 1px 0px rgba(26, 26, 26, 0.12) inset, -1px 0px 1px 0px rgba(26, 26, 26, 0.12) inset"
      },
      "shadow-button": {
        value: "0px 1px 0px 0px #E3E3E3 inset, 1px 0px 0px 0px #E3E3E3 inset, -1px 0px 0px 0px #E3E3E3 inset, 0px -1px 0px 0px #B5B5B5 inset"
      },
      "shadow-button-hover": {
        value: "0px 1px 0px 0px #EBEBEB inset, -1px 0px 0px 0px #EBEBEB inset, 1px 0px 0px 0px #EBEBEB inset, 0px -1px 0px 0px #CCC inset"
      },
      "shadow-button-inset": {
        value: "0px 2px 1px 0px rgba(26, 26, 26, 0.20) inset, 1px 0px 1px 0px rgba(26, 26, 26, 0.12) inset, -1px 0px 1px 0px rgba(26, 26, 26, 0.12) inset"
      },
      "shadow-button-primary": {
        value: "0px 2px 0px 0px rgba(255, 255, 255, 0.2) inset, 2px 0px 0px 0px rgba(255, 255, 255, 0.2) inset, -2px 0px 0px 0px rgba(255, 255, 255, 0.2) inset, 0px -1px 0px 1px #000 inset, 0px 1px 0px 0px #000 inset"
      },
      "shadow-button-primary-hover": {
        value: "0px 1px 0px 0px rgba(255, 255, 255, 0.24) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1px 0px 0px #000 inset, 0px -1px 0px 1px #1A1A1A"
      },
      "shadow-button-primary-inset": {
        value: "0px 3px 0px 0px #000 inset"
      },
      "shadow-button-primary-critical": {
        value: "0px 1px 0px 0px rgba(255, 255, 255, 0.48) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1.5px 0px 0px rgba(0, 0, 0, 0.25) inset"
      },
      "shadow-button-primary-critical-hover": {
        value: "0px 1px 0px 0px rgba(255, 255, 255, 0.48) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1.5px 0px 0px rgba(0, 0, 0, 0.25) inset"
      },
      "shadow-button-primary-critical-inset": {
        value: "0px 2px 0px 0px rgba(0, 0, 0, 0.60) inset, 1px 0px 1px 0px rgba(0, 0, 0, 0.20) inset, -1px 0px 1px 0px rgba(0, 0, 0, 0.20) inset"
      },
      "shadow-button-primary-success": {
        value: "0px 1px 0px 0px rgba(255, 255, 255, 0.48) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1.5px 0px 0px rgba(0, 0, 0, 0.25) inset"
      },
      "shadow-button-primary-success-hover": {
        value: "0px 1px 0px 0px rgba(255, 255, 255, 0.48) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1.5px 0px 0px rgba(0, 0, 0, 0.25) inset"
      },
      "shadow-button-primary-success-inset": {
        value: "0px 2px 0px 0px rgba(0, 0, 0, 0.60) inset, 1px 0px 1px 0px rgba(0, 0, 0, 0.20) inset, -1px 0px 1px 0px rgba(0, 0, 0, 0.20) inset"
      },
      "shadow-border-inset": {
        value: "0px 0px 0px 1px rgba(0, 0, 0, 0.08) inset"
      }
    };
  }
});
function createVar2(spaceTokenName) {
  return "var(" + createVarName(spaceTokenName) + ")";
}
var space;
var init_space = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/space.mjs"() {
    init_size();
    init_utils2();
    space = {
      "space-0": {
        value: size[0]
      },
      "space-025": {
        value: size["025"]
      },
      "space-050": {
        value: size["050"]
      },
      "space-100": {
        value: size[100]
      },
      "space-150": {
        value: size[150]
      },
      "space-200": {
        value: size[200]
      },
      "space-300": {
        value: size[300]
      },
      "space-400": {
        value: size[400]
      },
      "space-500": {
        value: size[500]
      },
      "space-600": {
        value: size[600]
      },
      "space-800": {
        value: size[800]
      },
      "space-1000": {
        value: size[1e3]
      },
      "space-1200": {
        value: size[1200]
      },
      "space-1600": {
        value: size[1600]
      },
      "space-2000": {
        value: size[2e3]
      },
      "space-2400": {
        value: size[2400]
      },
      "space-2800": {
        value: size[2800]
      },
      "space-3200": {
        value: size[3200]
      },
      "space-button-group-gap": {
        value: createVar2("space-200")
      },
      "space-card-gap": {
        value: createVar2("space-400")
      },
      "space-card-padding": {
        value: createVar2("space-400")
      },
      "space-table-cell-padding": {
        value: createVar2("space-150")
      }
    };
  }
});
var text;
var init_text = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/text.mjs"() {
    init_utils2();
    text = {
      // heading-3xl
      "text-heading-3xl-font-family": {
        value: createVar("font-family-sans")
      },
      "text-heading-3xl-font-size": {
        value: createVar("font-size-900")
      },
      "text-heading-3xl-font-weight": {
        value: createVar("font-weight-bold")
      },
      "text-heading-3xl-font-letter-spacing": {
        value: createVar("font-letter-spacing-densest")
      },
      "text-heading-3xl-font-line-height": {
        value: createVar("font-line-height-1200")
      },
      // heading-2xl
      "text-heading-2xl-font-family": {
        value: createVar("font-family-sans")
      },
      "text-heading-2xl-font-size": {
        value: createVar("font-size-750")
      },
      "text-heading-2xl-font-weight": {
        value: createVar("font-weight-bold")
      },
      "text-heading-2xl-font-letter-spacing": {
        value: createVar("font-letter-spacing-denser")
      },
      "text-heading-2xl-font-line-height": {
        value: createVar("font-line-height-1000")
      },
      // heading-xl
      "text-heading-xl-font-family": {
        value: createVar("font-family-sans")
      },
      "text-heading-xl-font-size": {
        value: createVar("font-size-600")
      },
      "text-heading-xl-font-weight": {
        value: createVar("font-weight-bold")
      },
      "text-heading-xl-font-letter-spacing": {
        value: createVar("font-letter-spacing-dense")
      },
      "text-heading-xl-font-line-height": {
        value: createVar("font-line-height-800")
      },
      // heading-lg
      "text-heading-lg-font-family": {
        value: createVar("font-family-sans")
      },
      "text-heading-lg-font-size": {
        value: createVar("font-size-500")
      },
      "text-heading-lg-font-weight": {
        value: createVar("font-weight-semibold")
      },
      "text-heading-lg-font-letter-spacing": {
        value: createVar("font-letter-spacing-dense")
      },
      "text-heading-lg-font-line-height": {
        value: createVar("font-line-height-600")
      },
      // heading-md
      "text-heading-md-font-family": {
        value: createVar("font-family-sans")
      },
      "text-heading-md-font-size": {
        value: createVar("font-size-350")
      },
      "text-heading-md-font-weight": {
        value: createVar("font-weight-semibold")
      },
      "text-heading-md-font-letter-spacing": {
        value: createVar("font-letter-spacing-normal")
      },
      "text-heading-md-font-line-height": {
        value: createVar("font-line-height-500")
      },
      // heading-sm
      "text-heading-sm-font-family": {
        value: createVar("font-family-sans")
      },
      "text-heading-sm-font-size": {
        value: createVar("font-size-325")
      },
      "text-heading-sm-font-weight": {
        value: createVar("font-weight-semibold")
      },
      "text-heading-sm-font-letter-spacing": {
        value: createVar("font-letter-spacing-normal")
      },
      "text-heading-sm-font-line-height": {
        value: createVar("font-line-height-500")
      },
      // body-lg
      "text-body-lg-font-family": {
        value: createVar("font-family-sans")
      },
      "text-body-lg-font-size": {
        value: createVar("font-size-350")
      },
      "text-body-lg-font-weight": {
        value: createVar("font-weight-regular")
      },
      "text-body-lg-font-letter-spacing": {
        value: createVar("font-letter-spacing-normal")
      },
      "text-body-lg-font-line-height": {
        value: createVar("font-line-height-500")
      },
      // body-md
      "text-body-md-font-family": {
        value: createVar("font-family-sans")
      },
      "text-body-md-font-size": {
        value: createVar("font-size-325")
      },
      "text-body-md-font-weight": {
        value: createVar("font-weight-regular")
      },
      "text-body-md-font-letter-spacing": {
        value: createVar("font-letter-spacing-normal")
      },
      "text-body-md-font-line-height": {
        value: createVar("font-line-height-500")
      },
      // body-sm
      "text-body-sm-font-family": {
        value: createVar("font-family-sans")
      },
      "text-body-sm-font-size": {
        value: createVar("font-size-300")
      },
      "text-body-sm-font-weight": {
        value: createVar("font-weight-regular")
      },
      "text-body-sm-font-letter-spacing": {
        value: createVar("font-letter-spacing-normal")
      },
      "text-body-sm-font-line-height": {
        value: createVar("font-line-height-400")
      },
      // body-xs
      "text-body-xs-font-family": {
        value: createVar("font-family-sans")
      },
      "text-body-xs-font-size": {
        value: createVar("font-size-275")
      },
      "text-body-xs-font-weight": {
        value: createVar("font-weight-regular")
      },
      "text-body-xs-font-letter-spacing": {
        value: createVar("font-letter-spacing-normal")
      },
      "text-body-xs-font-line-height": {
        value: createVar("font-line-height-300")
      }
    };
  }
});
var width;
var init_width = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/width.mjs"() {
    init_size();
    width = {
      "width-0": {
        value: size[0]
      },
      "width-025": {
        value: size["025"]
      },
      "width-050": {
        value: size["050"]
      },
      "width-100": {
        value: size[100]
      },
      "width-150": {
        value: size[150]
      },
      "width-200": {
        value: size[200]
      },
      "width-300": {
        value: size[300]
      },
      "width-400": {
        value: size[400]
      },
      "width-500": {
        value: size[500]
      },
      "width-600": {
        value: size[600]
      },
      "width-700": {
        value: size[700]
      },
      "width-800": {
        value: size[800]
      },
      "width-900": {
        value: size[900]
      },
      "width-1000": {
        value: size[1e3]
      },
      "width-1200": {
        value: size[1200]
      },
      "width-1600": {
        value: size[1600]
      },
      "width-2000": {
        value: size[2e3]
      },
      "width-2400": {
        value: size[2400]
      },
      "width-2800": {
        value: size[2800]
      },
      "width-3200": {
        value: size[3200]
      }
    };
  }
});
var zIndex;
var init_zIndex = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/zIndex.mjs"() {
    zIndex = {
      "z-index-0": {
        value: "auto"
      },
      "z-index-1": {
        value: "100"
      },
      "z-index-2": {
        value: "400"
      },
      "z-index-3": {
        value: "510"
      },
      "z-index-4": {
        value: "512"
      },
      "z-index-5": {
        value: "513"
      },
      "z-index-6": {
        value: "514"
      },
      "z-index-7": {
        value: "515"
      },
      "z-index-8": {
        value: "516"
      },
      "z-index-9": {
        value: "517"
      },
      "z-index-10": {
        value: "518"
      },
      "z-index-11": {
        value: "519"
      },
      "z-index-12": {
        value: "520"
      }
    };
  }
});
var metaThemeBase;
var init_base = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/index.mjs"() {
    init_utils2();
    init_border();
    init_breakpoints();
    init_color();
    init_font();
    init_height();
    init_motion();
    init_shadow();
    init_space();
    init_text();
    init_width();
    init_zIndex();
    metaThemeBase = createMetaThemeBase({
      border,
      breakpoints,
      color,
      font,
      height,
      motion,
      shadow,
      space,
      text,
      width,
      zIndex
    });
  }
});
function createMetaThemePartial(metaThemePartial) {
  return Object.fromEntries(Object.entries(metaThemePartial).map(function(_ref) {
    var _ref2 = _slicedToArray2(_ref, 2), tokenGroupName = _ref2[0], tokenGroup = _ref2[1];
    return [tokenGroupName, tokenGroup && tokenGroupNamesToRems.includes(tokenGroupName) ? tokenGroupToRems(tokenGroup) : tokenGroup];
  }));
}
function createMetaTheme(metaThemePartial) {
  return (0, import_deepmerge.default)(metaThemeBase, metaThemePartial);
}
function createThemeClassName(themeName) {
  return "p-theme-" + themeName;
}
function createIsTokenName(theme) {
  var tokenNames = new Set(getTokenNames(theme));
  return function(tokenName) {
    return tokenNames.has(tokenName);
  };
}
var import_deepmerge;
var init_utils3 = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/utils.mjs"() {
    init_rollupPluginBabelHelpers2();
    import_deepmerge = __toESM(require_cjs2(), 1);
    init_utils2();
    init_base();
    createIsTokenName(metaThemeBase);
  }
});
var themeNameLight;
var themeNameDefault;
var themeNames;
var init_constants = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/constants.mjs"() {
    themeNameLight = "light", themeNameDefault = themeNameLight, themeNames = [themeNameLight, "light-high-contrast-experimental"];
  }
});
var metaThemeLightPartial;
var metaThemeLight;
var init_light = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/light.mjs"() {
    init_utils3();
    metaThemeLightPartial = createMetaThemePartial({}), metaThemeLight = createMetaTheme(metaThemeLightPartial);
  }
});
var metaThemeLightHighContrastPartial;
var metaThemeLightHighContrast;
var init_light_high_contrast = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/light-high-contrast.mjs"() {
    init_colors();
    init_utils3();
    metaThemeLightHighContrastPartial = createMetaThemePartial({
      color: {
        "color-text": {
          value: gray[16]
        },
        "color-text-secondary": {
          value: gray[16]
        },
        "color-text-brand": {
          value: gray[16]
        },
        "color-icon-secondary": {
          value: gray[14]
        },
        "color-border": {
          value: gray[12]
        },
        "color-input-border": {
          value: gray[14]
        },
        "color-border-secondary": {
          value: gray[12]
        },
        "color-bg-surface-secondary": {
          value: gray[6]
        }
      },
      shadow: {
        "shadow-bevel-100": {
          value: "0px 1px 0px 0px rgba(26, 26, 26, 0.07), 0px 1px 0px 0px rgba(208, 208, 208, 0.40) inset, 1px 0px 0px 0px #CCC inset, -1px 0px 0px 0px #CCC inset, 0px -1px 0px 0px #999 inset"
        }
      }
    }), metaThemeLightHighContrast = createMetaTheme(metaThemeLightHighContrastPartial);
  }
});
var metaThemePartials;
var metaThemeDefaultPartial;
var metaThemeDefault;
var init_themes = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/src/themes/index.mjs"() {
    init_utils3();
    init_constants();
    init_light();
    init_light_high_contrast();
    metaThemePartials = {
      light: metaThemeLightPartial,
      "light-high-contrast-experimental": metaThemeLightHighContrastPartial
    }, metaThemeDefaultPartial = metaThemePartials[themeNameDefault], metaThemeDefault = createMetaTheme(metaThemeDefaultPartial);
  }
});
var themes;
var themeDefault;
var isTokenName;
var init_build = __esm({
  "node_modules/@shopify/polaris-tokens/dist/esm/build/index.mjs"() {
    init_breakpoints();
    init_utils2();
    init_themes();
    init_constants();
    init_constants();
    init_utils3();
    init_utils3();
    themes = {
      light: {
        border: {
          "border-radius-0": "0rem",
          "border-radius-050": "0.125rem",
          "border-radius-100": "0.25rem",
          "border-radius-150": "0.375rem",
          "border-radius-200": "0.5rem",
          "border-radius-300": "0.75rem",
          "border-radius-400": "1rem",
          "border-radius-500": "1.25rem",
          "border-radius-750": "1.875rem",
          "border-radius-full": "624.9375rem",
          "border-width-0": "0rem",
          "border-width-0165": "0.04125rem",
          "border-width-025": "0.0625rem",
          "border-width-050": "0.125rem",
          "border-width-100": "0.25rem"
        },
        breakpoints: {
          "breakpoints-xs": "0rem",
          "breakpoints-sm": "30.625rem",
          "breakpoints-md": "48rem",
          "breakpoints-lg": "65rem",
          "breakpoints-xl": "90rem"
        },
        color: {
          "color-bg": "rgba(241, 241, 241, 1)",
          "color-bg-inverse": "rgba(26, 26, 26, 1)",
          "color-bg-surface": "rgba(255, 255, 255, 1)",
          "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
          "color-bg-surface-active": "rgba(243, 243, 243, 1)",
          "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
          "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
          "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
          "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
          "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
          "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
          "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
          "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
          "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
          "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
          "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
          "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
          "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
          "color-bg-surface-info": "rgba(234, 244, 255, 1)",
          "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
          "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
          "color-bg-surface-success": "rgba(205, 254, 225, 1)",
          "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
          "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
          "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
          "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
          "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
          "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
          "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
          "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
          "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
          "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
          "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
          "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
          "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
          "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
          "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
          "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
          "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
          "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
          "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
          "color-bg-fill": "rgba(255, 255, 255, 1)",
          "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
          "color-bg-fill-active": "rgba(247, 247, 247, 1)",
          "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
          "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
          "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
          "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
          "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
          "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
          "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
          "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
          "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
          "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
          "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
          "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
          "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
          "color-bg-fill-info": "rgba(145, 208, 255, 1)",
          "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
          "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
          "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
          "color-bg-fill-success": "rgba(41, 132, 90, 1)",
          "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
          "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
          "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
          "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
          "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
          "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
          "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
          "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
          "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
          "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
          "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
          "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
          "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
          "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
          "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
          "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
          "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
          "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
          "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
          "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
          "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
          "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
          "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
          "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
          "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
          "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
          "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
          "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
          "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
          "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
          "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
          "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
          "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
          "color-text": "rgba(48, 48, 48, 1)",
          "color-text-secondary": "rgba(97, 97, 97, 1)",
          "color-text-disabled": "rgba(181, 181, 181, 1)",
          "color-text-link": "rgba(0, 91, 211, 1)",
          "color-text-link-hover": "rgba(0, 66, 153, 1)",
          "color-text-link-active": "rgba(0, 46, 106, 1)",
          "color-text-brand": "rgba(74, 74, 74, 1)",
          "color-text-brand-hover": "rgba(48, 48, 48, 1)",
          "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
          "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
          "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
          "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
          "color-text-info": "rgba(0, 58, 90, 1)",
          "color-text-info-hover": "rgba(0, 58, 90, 1)",
          "color-text-info-active": "rgba(0, 33, 51, 1)",
          "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
          "color-text-success": "rgba(12, 81, 50, 1)",
          "color-text-success-hover": "rgba(8, 61, 37, 1)",
          "color-text-success-active": "rgba(9, 42, 27, 1)",
          "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
          "color-text-caution": "rgba(79, 71, 0, 1)",
          "color-text-caution-hover": "rgba(51, 46, 0, 1)",
          "color-text-caution-active": "rgba(31, 28, 0, 1)",
          "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
          "color-text-warning": "rgba(94, 66, 0, 1)",
          "color-text-warning-hover": "rgba(65, 45, 0, 1)",
          "color-text-warning-active": "rgba(37, 26, 0, 1)",
          "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
          "color-text-critical": "rgba(142, 31, 11, 1)",
          "color-text-critical-hover": "rgba(95, 21, 7, 1)",
          "color-text-critical-active": "rgba(47, 10, 4, 1)",
          "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
          "color-text-emphasis": "rgba(0, 91, 211, 1)",
          "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
          "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
          "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
          "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
          "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
          "color-text-magic": "rgba(87, 0, 209, 1)",
          "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
          "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
          "color-text-inverse": "rgba(227, 227, 227, 1)",
          "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
          "color-text-link-inverse": "rgba(197, 208, 255, 1)",
          "color-border": "rgba(227, 227, 227, 1)",
          "color-border-hover": "rgba(204, 204, 204, 1)",
          "color-border-disabled": "rgba(235, 235, 235, 1)",
          "color-border-secondary": "rgba(235, 235, 235, 1)",
          "color-border-tertiary": "rgba(204, 204, 204, 1)",
          "color-border-focus": "rgba(0, 91, 211, 1)",
          "color-border-brand": "rgba(227, 227, 227, 1)",
          "color-border-info": "rgba(168, 216, 255, 1)",
          "color-border-success": "rgba(146, 254, 194, 1)",
          "color-border-caution": "rgba(255, 235, 120, 1)",
          "color-border-warning": "rgba(255, 200, 121, 1)",
          "color-border-critical": "rgba(254, 195, 193, 1)",
          "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
          "color-border-emphasis": "rgba(0, 91, 211, 1)",
          "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
          "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
          "color-border-magic": "rgba(228, 222, 255, 1)",
          "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
          "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
          "color-border-inverse": "rgba(97, 97, 97, 1)",
          "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
          "color-border-inverse-active": "rgba(227, 227, 227, 1)",
          "color-icon": "rgba(74, 74, 74, 1)",
          "color-icon-hover": "rgba(48, 48, 48, 1)",
          "color-icon-active": "rgba(26, 26, 26, 1)",
          "color-icon-disabled": "rgba(204, 204, 204, 1)",
          "color-icon-secondary": "rgba(138, 138, 138, 1)",
          "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
          "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
          "color-icon-brand": "rgba(26, 26, 26, 1)",
          "color-icon-info": "rgba(0, 148, 213, 1)",
          "color-icon-success": "rgba(41, 132, 90, 1)",
          "color-icon-caution": "rgba(153, 138, 0, 1)",
          "color-icon-warning": "rgba(178, 132, 0, 1)",
          "color-icon-critical": "rgba(239, 77, 47, 1)",
          "color-icon-emphasis": "rgba(0, 91, 211, 1)",
          "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
          "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
          "color-icon-magic": "rgba(128, 81, 255, 1)",
          "color-icon-inverse": "rgba(227, 227, 227, 1)",
          "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
          "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
          "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
          "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
          "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
          "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
          "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
          "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
          "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
          "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
          "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
          "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
          "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
          "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
          "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
          "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
          "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
          "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
          "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
          "color-input-bg-surface": "rgba(253, 253, 253, 1)",
          "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
          "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
          "color-input-border": "rgba(138, 138, 138, 1)",
          "color-input-border-hover": "rgba(97, 97, 97, 1)",
          "color-input-border-active": "rgba(26, 26, 26, 1)",
          "color-nav-bg": "rgba(235, 235, 235, 1)",
          "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
          "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
          "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
          "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
          "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
          "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
          "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
          "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
          "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)"
        },
        font: {
          "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
          "font-size-275": "0.6875rem",
          "font-size-300": "0.75rem",
          "font-size-325": "0.8125rem",
          "font-size-350": "0.875rem",
          "font-size-400": "1rem",
          "font-size-500": "1.25rem",
          "font-size-600": "1.5rem",
          "font-size-750": "1.875rem",
          "font-size-900": "2.25rem",
          "font-size-1000": "2.5rem",
          "font-weight-regular": "450",
          "font-weight-medium": "550",
          "font-weight-semibold": "650",
          "font-weight-bold": "700",
          "font-letter-spacing-densest": "-0.03375rem",
          "font-letter-spacing-denser": "-0.01875rem",
          "font-letter-spacing-dense": "-0.0125rem",
          "font-letter-spacing-normal": "0rem",
          "font-line-height-300": "0.75rem",
          "font-line-height-400": "1rem",
          "font-line-height-500": "1.25rem",
          "font-line-height-600": "1.5rem",
          "font-line-height-700": "1.75rem",
          "font-line-height-800": "2rem",
          "font-line-height-1000": "2.5rem",
          "font-line-height-1200": "3rem"
        },
        height: {
          "height-0": "0rem",
          "height-025": "0.0625rem",
          "height-050": "0.125rem",
          "height-100": "0.25rem",
          "height-150": "0.375rem",
          "height-200": "0.5rem",
          "height-300": "0.75rem",
          "height-400": "1rem",
          "height-500": "1.25rem",
          "height-600": "1.5rem",
          "height-700": "1.75rem",
          "height-800": "2rem",
          "height-900": "2.25rem",
          "height-1000": "2.5rem",
          "height-1200": "3rem",
          "height-1600": "4rem",
          "height-2000": "5rem",
          "height-2400": "6rem",
          "height-2800": "7rem",
          "height-3200": "8rem"
        },
        motion: {
          "motion-duration-0": "0ms",
          "motion-duration-50": "50ms",
          "motion-duration-100": "100ms",
          "motion-duration-150": "150ms",
          "motion-duration-200": "200ms",
          "motion-duration-250": "250ms",
          "motion-duration-300": "300ms",
          "motion-duration-350": "350ms",
          "motion-duration-400": "400ms",
          "motion-duration-450": "450ms",
          "motion-duration-500": "500ms",
          "motion-duration-5000": "5000ms",
          "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
          "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
          "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
          "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
          "motion-linear": "cubic-bezier(0, 0, 1, 1)",
          "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
          "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
          "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
          "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
          "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
          "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
        },
        shadow: {
          "shadow-0": "none",
          "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
          "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
          "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
          "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
          "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
          "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
          "shadow-bevel-100": "0.0625rem 0rem 0rem 0rem rgba(0, 0, 0, 0.13) inset, -0.0625rem 0rem 0rem 0rem rgba(0, 0, 0, 0.13) inset, 0rem -0.0625rem 0rem 0rem rgba(0, 0, 0, 0.17) inset, 0rem 0.0625rem 0rem 0rem rgba(204, 204, 204, 0.5) inset",
          "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
          "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
          "shadow-button": "0rem 0.0625rem 0rem 0rem #E3E3E3 inset, 0.0625rem 0rem 0rem 0rem #E3E3E3 inset, -0.0625rem 0rem 0rem 0rem #E3E3E3 inset, 0rem -0.0625rem 0rem 0rem #B5B5B5 inset",
          "shadow-button-hover": "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
          "shadow-button-inset": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
          "shadow-button-primary": "0rem 0.125rem 0rem 0rem rgba(255, 255, 255, 0.2) inset, 0.125rem 0rem 0rem 0rem rgba(255, 255, 255, 0.2) inset, -0.125rem 0rem 0rem 0rem rgba(255, 255, 255, 0.2) inset, 0rem -0.0625rem 0rem 0.0625rem #000 inset, 0rem 0.0625rem 0rem 0rem #000 inset",
          "shadow-button-primary-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
          "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem #000 inset",
          "shadow-button-primary-critical": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
          "shadow-button-primary-critical-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
          "shadow-button-primary-critical-inset": "0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.60) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.20) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.20) inset",
          "shadow-button-primary-success": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
          "shadow-button-primary-success-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
          "shadow-button-primary-success-inset": "0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.60) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.20) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.20) inset",
          "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
        },
        space: {
          "space-0": "0rem",
          "space-025": "0.0625rem",
          "space-050": "0.125rem",
          "space-100": "0.25rem",
          "space-150": "0.375rem",
          "space-200": "0.5rem",
          "space-300": "0.75rem",
          "space-400": "1rem",
          "space-500": "1.25rem",
          "space-600": "1.5rem",
          "space-800": "2rem",
          "space-1000": "2.5rem",
          "space-1200": "3rem",
          "space-1600": "4rem",
          "space-2000": "5rem",
          "space-2400": "6rem",
          "space-2800": "7rem",
          "space-3200": "8rem",
          "space-button-group-gap": "0.5rem",
          "space-card-gap": "1rem",
          "space-card-padding": "1rem",
          "space-table-cell-padding": "0.375rem"
        },
        text: {
          "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-3xl-font-size": "2.25rem",
          "text-heading-3xl-font-weight": "700",
          "text-heading-3xl-font-letter-spacing": "-0.03375rem",
          "text-heading-3xl-font-line-height": "3rem",
          "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-2xl-font-size": "1.875rem",
          "text-heading-2xl-font-weight": "700",
          "text-heading-2xl-font-letter-spacing": "-0.01875rem",
          "text-heading-2xl-font-line-height": "2.5rem",
          "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-xl-font-size": "1.5rem",
          "text-heading-xl-font-weight": "700",
          "text-heading-xl-font-letter-spacing": "-0.0125rem",
          "text-heading-xl-font-line-height": "2rem",
          "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-lg-font-size": "1.25rem",
          "text-heading-lg-font-weight": "650",
          "text-heading-lg-font-letter-spacing": "-0.0125rem",
          "text-heading-lg-font-line-height": "1.5rem",
          "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-md-font-size": "0.875rem",
          "text-heading-md-font-weight": "650",
          "text-heading-md-font-letter-spacing": "0rem",
          "text-heading-md-font-line-height": "1.25rem",
          "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-sm-font-size": "0.8125rem",
          "text-heading-sm-font-weight": "650",
          "text-heading-sm-font-letter-spacing": "0rem",
          "text-heading-sm-font-line-height": "1.25rem",
          "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-body-lg-font-size": "0.875rem",
          "text-body-lg-font-weight": "450",
          "text-body-lg-font-letter-spacing": "0rem",
          "text-body-lg-font-line-height": "1.25rem",
          "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-body-md-font-size": "0.8125rem",
          "text-body-md-font-weight": "450",
          "text-body-md-font-letter-spacing": "0rem",
          "text-body-md-font-line-height": "1.25rem",
          "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-body-sm-font-size": "0.75rem",
          "text-body-sm-font-weight": "450",
          "text-body-sm-font-letter-spacing": "0rem",
          "text-body-sm-font-line-height": "1rem",
          "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-body-xs-font-size": "0.6875rem",
          "text-body-xs-font-weight": "450",
          "text-body-xs-font-letter-spacing": "0rem",
          "text-body-xs-font-line-height": "0.75rem"
        },
        width: {
          "width-0": "0rem",
          "width-025": "0.0625rem",
          "width-050": "0.125rem",
          "width-100": "0.25rem",
          "width-150": "0.375rem",
          "width-200": "0.5rem",
          "width-300": "0.75rem",
          "width-400": "1rem",
          "width-500": "1.25rem",
          "width-600": "1.5rem",
          "width-700": "1.75rem",
          "width-800": "2rem",
          "width-900": "2.25rem",
          "width-1000": "2.5rem",
          "width-1200": "3rem",
          "width-1600": "4rem",
          "width-2000": "5rem",
          "width-2400": "6rem",
          "width-2800": "7rem",
          "width-3200": "8rem"
        },
        zIndex: {
          "z-index-0": "auto",
          "z-index-1": "100",
          "z-index-2": "400",
          "z-index-3": "510",
          "z-index-4": "512",
          "z-index-5": "513",
          "z-index-6": "514",
          "z-index-7": "515",
          "z-index-8": "516",
          "z-index-9": "517",
          "z-index-10": "518",
          "z-index-11": "519",
          "z-index-12": "520"
        }
      },
      "light-high-contrast-experimental": {
        border: {
          "border-radius-0": "0rem",
          "border-radius-050": "0.125rem",
          "border-radius-100": "0.25rem",
          "border-radius-150": "0.375rem",
          "border-radius-200": "0.5rem",
          "border-radius-300": "0.75rem",
          "border-radius-400": "1rem",
          "border-radius-500": "1.25rem",
          "border-radius-750": "1.875rem",
          "border-radius-full": "624.9375rem",
          "border-width-0": "0rem",
          "border-width-0165": "0.04125rem",
          "border-width-025": "0.0625rem",
          "border-width-050": "0.125rem",
          "border-width-100": "0.25rem"
        },
        breakpoints: {
          "breakpoints-xs": "0rem",
          "breakpoints-sm": "30.625rem",
          "breakpoints-md": "48rem",
          "breakpoints-lg": "65rem",
          "breakpoints-xl": "90rem"
        },
        color: {
          "color-bg": "rgba(241, 241, 241, 1)",
          "color-bg-inverse": "rgba(26, 26, 26, 1)",
          "color-bg-surface": "rgba(255, 255, 255, 1)",
          "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
          "color-bg-surface-active": "rgba(243, 243, 243, 1)",
          "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
          "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
          "color-bg-surface-secondary": "rgba(241, 241, 241, 1)",
          "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
          "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
          "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
          "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
          "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
          "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
          "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
          "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
          "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
          "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
          "color-bg-surface-info": "rgba(234, 244, 255, 1)",
          "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
          "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
          "color-bg-surface-success": "rgba(205, 254, 225, 1)",
          "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
          "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
          "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
          "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
          "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
          "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
          "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
          "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
          "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
          "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
          "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
          "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
          "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
          "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
          "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
          "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
          "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
          "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
          "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
          "color-bg-fill": "rgba(255, 255, 255, 1)",
          "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
          "color-bg-fill-active": "rgba(247, 247, 247, 1)",
          "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
          "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
          "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
          "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
          "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
          "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
          "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
          "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
          "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
          "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
          "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
          "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
          "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
          "color-bg-fill-info": "rgba(145, 208, 255, 1)",
          "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
          "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
          "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
          "color-bg-fill-success": "rgba(41, 132, 90, 1)",
          "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
          "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
          "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
          "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
          "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
          "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
          "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
          "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
          "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
          "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
          "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
          "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
          "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
          "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
          "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
          "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
          "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
          "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
          "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
          "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
          "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
          "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
          "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
          "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
          "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
          "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
          "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
          "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
          "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
          "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
          "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
          "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
          "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
          "color-text": "rgba(26, 26, 26, 1)",
          "color-text-secondary": "rgba(26, 26, 26, 1)",
          "color-text-disabled": "rgba(181, 181, 181, 1)",
          "color-text-link": "rgba(0, 91, 211, 1)",
          "color-text-link-hover": "rgba(0, 66, 153, 1)",
          "color-text-link-active": "rgba(0, 46, 106, 1)",
          "color-text-brand": "rgba(26, 26, 26, 1)",
          "color-text-brand-hover": "rgba(48, 48, 48, 1)",
          "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
          "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
          "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
          "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
          "color-text-info": "rgba(0, 58, 90, 1)",
          "color-text-info-hover": "rgba(0, 58, 90, 1)",
          "color-text-info-active": "rgba(0, 33, 51, 1)",
          "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
          "color-text-success": "rgba(12, 81, 50, 1)",
          "color-text-success-hover": "rgba(8, 61, 37, 1)",
          "color-text-success-active": "rgba(9, 42, 27, 1)",
          "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
          "color-text-caution": "rgba(79, 71, 0, 1)",
          "color-text-caution-hover": "rgba(51, 46, 0, 1)",
          "color-text-caution-active": "rgba(31, 28, 0, 1)",
          "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
          "color-text-warning": "rgba(94, 66, 0, 1)",
          "color-text-warning-hover": "rgba(65, 45, 0, 1)",
          "color-text-warning-active": "rgba(37, 26, 0, 1)",
          "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
          "color-text-critical": "rgba(142, 31, 11, 1)",
          "color-text-critical-hover": "rgba(95, 21, 7, 1)",
          "color-text-critical-active": "rgba(47, 10, 4, 1)",
          "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
          "color-text-emphasis": "rgba(0, 91, 211, 1)",
          "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
          "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
          "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
          "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
          "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
          "color-text-magic": "rgba(87, 0, 209, 1)",
          "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
          "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
          "color-text-inverse": "rgba(227, 227, 227, 1)",
          "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
          "color-text-link-inverse": "rgba(197, 208, 255, 1)",
          "color-border": "rgba(138, 138, 138, 1)",
          "color-border-hover": "rgba(204, 204, 204, 1)",
          "color-border-disabled": "rgba(235, 235, 235, 1)",
          "color-border-secondary": "rgba(138, 138, 138, 1)",
          "color-border-tertiary": "rgba(204, 204, 204, 1)",
          "color-border-focus": "rgba(0, 91, 211, 1)",
          "color-border-brand": "rgba(227, 227, 227, 1)",
          "color-border-info": "rgba(168, 216, 255, 1)",
          "color-border-success": "rgba(146, 254, 194, 1)",
          "color-border-caution": "rgba(255, 235, 120, 1)",
          "color-border-warning": "rgba(255, 200, 121, 1)",
          "color-border-critical": "rgba(254, 195, 193, 1)",
          "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
          "color-border-emphasis": "rgba(0, 91, 211, 1)",
          "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
          "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
          "color-border-magic": "rgba(228, 222, 255, 1)",
          "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
          "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
          "color-border-inverse": "rgba(97, 97, 97, 1)",
          "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
          "color-border-inverse-active": "rgba(227, 227, 227, 1)",
          "color-icon": "rgba(74, 74, 74, 1)",
          "color-icon-hover": "rgba(48, 48, 48, 1)",
          "color-icon-active": "rgba(26, 26, 26, 1)",
          "color-icon-disabled": "rgba(204, 204, 204, 1)",
          "color-icon-secondary": "rgba(74, 74, 74, 1)",
          "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
          "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
          "color-icon-brand": "rgba(26, 26, 26, 1)",
          "color-icon-info": "rgba(0, 148, 213, 1)",
          "color-icon-success": "rgba(41, 132, 90, 1)",
          "color-icon-caution": "rgba(153, 138, 0, 1)",
          "color-icon-warning": "rgba(178, 132, 0, 1)",
          "color-icon-critical": "rgba(239, 77, 47, 1)",
          "color-icon-emphasis": "rgba(0, 91, 211, 1)",
          "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
          "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
          "color-icon-magic": "rgba(128, 81, 255, 1)",
          "color-icon-inverse": "rgba(227, 227, 227, 1)",
          "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
          "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
          "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
          "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
          "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
          "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
          "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
          "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
          "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
          "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
          "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
          "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
          "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
          "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
          "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
          "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
          "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
          "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
          "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
          "color-input-bg-surface": "rgba(253, 253, 253, 1)",
          "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
          "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
          "color-input-border": "rgba(74, 74, 74, 1)",
          "color-input-border-hover": "rgba(97, 97, 97, 1)",
          "color-input-border-active": "rgba(26, 26, 26, 1)",
          "color-nav-bg": "rgba(235, 235, 235, 1)",
          "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
          "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
          "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
          "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
          "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
          "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
          "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
          "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
          "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)"
        },
        font: {
          "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
          "font-size-275": "0.6875rem",
          "font-size-300": "0.75rem",
          "font-size-325": "0.8125rem",
          "font-size-350": "0.875rem",
          "font-size-400": "1rem",
          "font-size-500": "1.25rem",
          "font-size-600": "1.5rem",
          "font-size-750": "1.875rem",
          "font-size-900": "2.25rem",
          "font-size-1000": "2.5rem",
          "font-weight-regular": "450",
          "font-weight-medium": "550",
          "font-weight-semibold": "650",
          "font-weight-bold": "700",
          "font-letter-spacing-densest": "-0.03375rem",
          "font-letter-spacing-denser": "-0.01875rem",
          "font-letter-spacing-dense": "-0.0125rem",
          "font-letter-spacing-normal": "0rem",
          "font-line-height-300": "0.75rem",
          "font-line-height-400": "1rem",
          "font-line-height-500": "1.25rem",
          "font-line-height-600": "1.5rem",
          "font-line-height-700": "1.75rem",
          "font-line-height-800": "2rem",
          "font-line-height-1000": "2.5rem",
          "font-line-height-1200": "3rem"
        },
        height: {
          "height-0": "0rem",
          "height-025": "0.0625rem",
          "height-050": "0.125rem",
          "height-100": "0.25rem",
          "height-150": "0.375rem",
          "height-200": "0.5rem",
          "height-300": "0.75rem",
          "height-400": "1rem",
          "height-500": "1.25rem",
          "height-600": "1.5rem",
          "height-700": "1.75rem",
          "height-800": "2rem",
          "height-900": "2.25rem",
          "height-1000": "2.5rem",
          "height-1200": "3rem",
          "height-1600": "4rem",
          "height-2000": "5rem",
          "height-2400": "6rem",
          "height-2800": "7rem",
          "height-3200": "8rem"
        },
        motion: {
          "motion-duration-0": "0ms",
          "motion-duration-50": "50ms",
          "motion-duration-100": "100ms",
          "motion-duration-150": "150ms",
          "motion-duration-200": "200ms",
          "motion-duration-250": "250ms",
          "motion-duration-300": "300ms",
          "motion-duration-350": "350ms",
          "motion-duration-400": "400ms",
          "motion-duration-450": "450ms",
          "motion-duration-500": "500ms",
          "motion-duration-5000": "5000ms",
          "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
          "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
          "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
          "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
          "motion-linear": "cubic-bezier(0, 0, 1, 1)",
          "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
          "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
          "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
          "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
          "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
          "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
        },
        shadow: {
          "shadow-0": "none",
          "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
          "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
          "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
          "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
          "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
          "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
          "shadow-bevel-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07), 0rem 0.0625rem 0rem 0rem rgba(208, 208, 208, 0.40) inset, 0.0625rem 0rem 0rem 0rem #CCC inset, -0.0625rem 0rem 0rem 0rem #CCC inset, 0rem -0.0625rem 0rem 0rem #999 inset",
          "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
          "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
          "shadow-button": "0rem 0.0625rem 0rem 0rem #E3E3E3 inset, 0.0625rem 0rem 0rem 0rem #E3E3E3 inset, -0.0625rem 0rem 0rem 0rem #E3E3E3 inset, 0rem -0.0625rem 0rem 0rem #B5B5B5 inset",
          "shadow-button-hover": "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
          "shadow-button-inset": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
          "shadow-button-primary": "0rem 0.125rem 0rem 0rem rgba(255, 255, 255, 0.2) inset, 0.125rem 0rem 0rem 0rem rgba(255, 255, 255, 0.2) inset, -0.125rem 0rem 0rem 0rem rgba(255, 255, 255, 0.2) inset, 0rem -0.0625rem 0rem 0.0625rem #000 inset, 0rem 0.0625rem 0rem 0rem #000 inset",
          "shadow-button-primary-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
          "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem #000 inset",
          "shadow-button-primary-critical": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
          "shadow-button-primary-critical-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
          "shadow-button-primary-critical-inset": "0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.60) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.20) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.20) inset",
          "shadow-button-primary-success": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
          "shadow-button-primary-success-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
          "shadow-button-primary-success-inset": "0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.60) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.20) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.20) inset",
          "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
        },
        space: {
          "space-0": "0rem",
          "space-025": "0.0625rem",
          "space-050": "0.125rem",
          "space-100": "0.25rem",
          "space-150": "0.375rem",
          "space-200": "0.5rem",
          "space-300": "0.75rem",
          "space-400": "1rem",
          "space-500": "1.25rem",
          "space-600": "1.5rem",
          "space-800": "2rem",
          "space-1000": "2.5rem",
          "space-1200": "3rem",
          "space-1600": "4rem",
          "space-2000": "5rem",
          "space-2400": "6rem",
          "space-2800": "7rem",
          "space-3200": "8rem",
          "space-button-group-gap": "0.5rem",
          "space-card-gap": "1rem",
          "space-card-padding": "1rem",
          "space-table-cell-padding": "0.375rem"
        },
        text: {
          "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-3xl-font-size": "2.25rem",
          "text-heading-3xl-font-weight": "700",
          "text-heading-3xl-font-letter-spacing": "-0.03375rem",
          "text-heading-3xl-font-line-height": "3rem",
          "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-2xl-font-size": "1.875rem",
          "text-heading-2xl-font-weight": "700",
          "text-heading-2xl-font-letter-spacing": "-0.01875rem",
          "text-heading-2xl-font-line-height": "2.5rem",
          "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-xl-font-size": "1.5rem",
          "text-heading-xl-font-weight": "700",
          "text-heading-xl-font-letter-spacing": "-0.0125rem",
          "text-heading-xl-font-line-height": "2rem",
          "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-lg-font-size": "1.25rem",
          "text-heading-lg-font-weight": "650",
          "text-heading-lg-font-letter-spacing": "-0.0125rem",
          "text-heading-lg-font-line-height": "1.5rem",
          "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-md-font-size": "0.875rem",
          "text-heading-md-font-weight": "650",
          "text-heading-md-font-letter-spacing": "0rem",
          "text-heading-md-font-line-height": "1.25rem",
          "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-heading-sm-font-size": "0.8125rem",
          "text-heading-sm-font-weight": "650",
          "text-heading-sm-font-letter-spacing": "0rem",
          "text-heading-sm-font-line-height": "1.25rem",
          "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-body-lg-font-size": "0.875rem",
          "text-body-lg-font-weight": "450",
          "text-body-lg-font-letter-spacing": "0rem",
          "text-body-lg-font-line-height": "1.25rem",
          "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-body-md-font-size": "0.8125rem",
          "text-body-md-font-weight": "450",
          "text-body-md-font-letter-spacing": "0rem",
          "text-body-md-font-line-height": "1.25rem",
          "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-body-sm-font-size": "0.75rem",
          "text-body-sm-font-weight": "450",
          "text-body-sm-font-letter-spacing": "0rem",
          "text-body-sm-font-line-height": "1rem",
          "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
          "text-body-xs-font-size": "0.6875rem",
          "text-body-xs-font-weight": "450",
          "text-body-xs-font-letter-spacing": "0rem",
          "text-body-xs-font-line-height": "0.75rem"
        },
        width: {
          "width-0": "0rem",
          "width-025": "0.0625rem",
          "width-050": "0.125rem",
          "width-100": "0.25rem",
          "width-150": "0.375rem",
          "width-200": "0.5rem",
          "width-300": "0.75rem",
          "width-400": "1rem",
          "width-500": "1.25rem",
          "width-600": "1.5rem",
          "width-700": "1.75rem",
          "width-800": "2rem",
          "width-900": "2.25rem",
          "width-1000": "2.5rem",
          "width-1200": "3rem",
          "width-1600": "4rem",
          "width-2000": "5rem",
          "width-2400": "6rem",
          "width-2800": "7rem",
          "width-3200": "8rem"
        },
        zIndex: {
          "z-index-0": "auto",
          "z-index-1": "100",
          "z-index-2": "400",
          "z-index-3": "510",
          "z-index-4": "512",
          "z-index-5": "513",
          "z-index-6": "514",
          "z-index-7": "515",
          "z-index-8": "516",
          "z-index-9": "517",
          "z-index-10": "518",
          "z-index-11": "519",
          "z-index-12": "520"
        }
      }
    }, themeDefault = themes[themeNameDefault], isTokenName = createIsTokenName(themes[themeNameDefault]);
  }
});
function getTheme(themeName) {
  return themes[themeName];
}
function useTheme() {
  let theme = (0, import_react6.useContext)(ThemeContext);
  if (!theme)
    throw new Error("No theme was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  return theme;
}
function UseTheme(props) {
  let theme = useTheme();
  return props.children(theme);
}
var import_react6;
var ThemeContext;
var init_use_theme = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-theme.js"() {
    import_react6 = __toESM(require_react());
    init_build();
    ThemeContext = /* @__PURE__ */ (0, import_react6.createContext)(null);
  }
});
function defaultResourceIDResolver(resource) {
  if ("id" in resource)
    return resource.id;
  throw new Error("Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`");
}
function useIndexResourceState(resources, {
  selectedResources: initSelectedResources = [],
  allResourcesSelected: initAllResourcesSelected = false,
  resourceIDResolver = defaultResourceIDResolver,
  resourceFilter = void 0
} = {
  selectedResources: [],
  allResourcesSelected: false,
  resourceIDResolver: defaultResourceIDResolver,
  resourceFilter: void 0
}) {
  let [selectedResources, setSelectedResources] = (0, import_react7.useState)(initSelectedResources), [allResourcesSelected, setAllResourcesSelected] = (0, import_react7.useState)(initAllResourcesSelected), handleSelectionChange = (0, import_react7.useCallback)((selectionType, isSelecting, selection, _position) => {
    switch (selectionType === SelectionType.All ? setAllResourcesSelected(isSelecting) : allResourcesSelected && setAllResourcesSelected(false), selectionType) {
      case SelectionType.Single:
        setSelectedResources((newSelectedResources) => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter((id) => id !== selection));
        break;
      case SelectionType.All:
      case SelectionType.Page:
        if (resourceFilter) {
          let filteredResources = resources.filter(resourceFilter);
          setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);
        } else
          setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);
        break;
      case SelectionType.Multi:
        if (!selection)
          break;
        setSelectedResources((currentSelectedResources) => {
          let ids = [], filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;
          for (let i = selection[0]; i <= selection[1]; i++)
            if (filteredResources.includes(resources[i])) {
              let id = resourceIDResolver(resources[i]);
              (isSelecting && !currentSelectedResources.includes(id) || !isSelecting && currentSelectedResources.includes(id)) && ids.push(id);
            }
          return isSelecting ? [...currentSelectedResources, ...ids] : currentSelectedResources.filter((id) => !ids.includes(id));
        });
        break;
      case SelectionType.Range:
        if (!selection)
          break;
        setSelectedResources((currentSelectedResources) => {
          let selectedIds = (resourceFilter ? resources.filter(resourceFilter) : resources).map(resourceIDResolver).slice(Number(selection[0]), Number(selection[1]) + 1), isIndeterminate = selectedIds.some((id) => selectedResources.includes(id));
          return !selectedIds.every((id) => selectedResources.includes(id)) && (isSelecting || isIndeterminate) ? [...(/* @__PURE__ */ new Set([...currentSelectedResources, ...selectedIds])).values()] : currentSelectedResources.filter((id) => !selectedIds.includes(id));
        });
        break;
    }
  }, [allResourcesSelected, resourceFilter, selectedResources, resources, resourceIDResolver]), clearSelection = (0, import_react7.useCallback)(() => {
    setSelectedResources([]), setAllResourcesSelected(false);
  }, []), removeSelectedResources = (0, import_react7.useCallback)((removeResources) => {
    let newSelectedResources = [...selectedResources].filter((resource) => !removeResources.includes(resource));
    setSelectedResources(newSelectedResources), newSelectedResources.length === 0 && setAllResourcesSelected(false);
  }, [selectedResources]);
  return {
    selectedResources,
    allResourcesSelected,
    handleSelectionChange,
    clearSelection,
    removeSelectedResources
  };
}
var import_react7;
var SelectionType;
var init_use_index_resource_state = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-index-resource-state.js"() {
    import_react7 = __toESM(require_react());
    (function(SelectionType3) {
      SelectionType3.All = "all", SelectionType3.Page = "page", SelectionType3.Multi = "multi", SelectionType3.Single = "single", SelectionType3.Range = "range";
    })(SelectionType || (SelectionType = {}));
  }
});
function noop() {
}
function navigationBarCollapsed() {
  return typeof window > "u" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);
}
function stackedContent() {
  return typeof window > "u" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);
}
function getMatches(defaults, forceDefaults) {
  return Object.fromEntries(!isServer && !forceDefaults ? breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches]) : typeof defaults == "object" && defaults !== null ? breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults[directionAlias] ?? false]) : breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, defaults ?? false]));
}
function useBreakpoints(options) {
  let [breakpoints2, setBreakpoints] = (0, import_react8.useState)(getMatches(options?.defaults, true));
  return useIsomorphicLayoutEffect2(() => {
    let mediaQueryLists = breakpointsQueryEntries.map(([_, query]) => window.matchMedia(query)), handler = () => setBreakpoints(getMatches());
    return mediaQueryLists.forEach((mql) => {
      mql.addListener ? mql.addListener(handler) : mql.addEventListener("change", handler);
    }), handler(), () => {
      mediaQueryLists.forEach((mql) => {
        mql.removeListener ? mql.removeListener(handler) : mql.removeEventListener("change", handler);
      });
    };
  }, []), breakpoints2;
}
function getBreakpointsQueryEntries(breakpoints2) {
  return Object.entries(getMediaConditions(breakpoints2)).map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => [`${breakpointsToken.split("-")[1]}${capitalize(direction)}`, mediaCondition])).flat();
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
var import_react8;
var Breakpoints;
var noWindowMatches;
var breakpointsQueryEntries;
var init_breakpoints2 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/breakpoints.js"() {
    import_react8 = __toESM(require_react());
    init_build();
    init_target();
    init_use_isomorphic_layout_effect();
    Breakpoints = {
      // TODO: Update to smDown
      navigationBarCollapsed: "767.95px",
      // TODO: Update to lgDown
      stackedContent: "1039.95px"
    }, noWindowMatches = {
      media: "",
      addListener: noop,
      removeListener: noop,
      matches: false,
      onchange: noop,
      addEventListener: noop,
      removeEventListener: noop,
      dispatchEvent: (_) => true
    };
    breakpointsQueryEntries = getBreakpointsQueryEntries(themeDefault.breakpoints);
  }
});
var import_react9;
var classNamePolarisSummerEditions2023;
var FeaturesContext;
var init_context = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/features/context.js"() {
    import_react9 = __toESM(require_react()), classNamePolarisSummerEditions2023 = "Polaris-Summer-Editions-2023", FeaturesContext = /* @__PURE__ */ (0, import_react9.createContext)(void 0);
  }
});
function debounce(func, waitArg, options) {
  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true, useRAF = !waitArg && waitArg !== 0;
  if (typeof func != "function")
    throw new TypeError("Expected a function");
  let wait = waitArg || 0;
  typeof options == "object" && (leading = Boolean(options.leading), maxing = "maxWait" in options, maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : void 0, trailing = "trailing" in options ? Boolean(options.trailing) : trailing);
  function invokeFunc(time) {
    let args = lastArgs, thisArg = lastThis;
    return lastArgs = void 0, lastThis = void 0, lastInvokeTime = time, result = func.apply(thisArg, args), result;
  }
  function startTimer(pendingFunc, wait2) {
    return useRAF ? (cancelAnimationFrame(timerId), requestAnimationFrame(pendingFunc)) : setTimeout(pendingFunc, wait2);
  }
  function cancelTimer(id) {
    if (useRAF)
      return cancelAnimationFrame(id);
    clearTimeout(id);
  }
  function leadingEdge(time) {
    return lastInvokeTime = time, timerId = startTimer(timerExpired, wait), leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    let timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing && maxWait ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    let timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && maxWait && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    let time = Date.now();
    if (shouldInvoke(time))
      return trailingEdge(time);
    timerId = startTimer(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    return timerId = void 0, trailing && lastArgs ? invokeFunc(time) : (lastArgs = lastThis = void 0, result);
  }
  function cancel() {
    timerId !== void 0 && cancelTimer(timerId), lastInvokeTime = 0, lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(Date.now());
  }
  function pending() {
    return timerId !== void 0;
  }
  function debounced(...args) {
    let time = Date.now(), isInvoking = shouldInvoke(time);
    if (lastArgs = args, lastThis = this, lastCallTime = time, isInvoking) {
      if (timerId === void 0)
        return leadingEdge(lastCallTime);
      if (maxing)
        return timerId = startTimer(timerExpired, wait), invokeFunc(lastCallTime);
    }
    return timerId === void 0 && (timerId = startTimer(timerExpired, wait)), result;
  }
  return debounced.cancel = cancel, debounced.flush = flush, debounced.pending = pending, debounced;
}
var init_debounce = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/debounce.js"() {
  }
});
function getRectForNode(node) {
  if (!(node instanceof Element))
    return new Rect({
      width: window.innerWidth,
      height: window.innerHeight
    });
  let rect = node.getBoundingClientRect();
  return new Rect({
    top: rect.top,
    left: rect.left,
    width: rect.width,
    height: rect.height
  });
}
var Rect;
var init_geometry = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/geometry.js"() {
    Rect = class {
      static get zero() {
        return new Rect();
      }
      constructor({
        top = 0,
        left = 0,
        width: width2 = 0,
        height: height2 = 0
      } = {}) {
        this.top = top, this.left = left, this.width = width2, this.height = height2;
      }
      get center() {
        return {
          x: this.left + this.width / 2,
          y: this.top + this.height / 2
        };
      }
    };
  }
});
function isDocument(node) {
  return node === document;
}
function scrollTopFor(container) {
  return isDocument(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
}
function horizontallyOverlaps(rect1, rect2) {
  let rect1Left = rect1.left, rect1Right = rect1.left + rect1.width, rect2Left = rect2.left;
  return rect2.left + rect2.width < rect1Left || rect1Right < rect2Left;
}
var SIXTY_FPS;
var StickyManager;
var init_sticky_manager = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/sticky-manager/sticky-manager.js"() {
    init_build();
    init_debounce();
    init_shared();
    init_breakpoints2();
    init_geometry();
    SIXTY_FPS = 1e3 / 60, StickyManager = class {
      constructor(container) {
        this.stickyItems = [], this.stuckItems = [], this.container = null, this.topBarOffset = 0, this.handleResize = debounce(() => {
          this.manageStickyItems();
        }, SIXTY_FPS, {
          leading: true,
          trailing: true,
          maxWait: SIXTY_FPS
        }), this.handleScroll = debounce(() => {
          this.manageStickyItems();
        }, SIXTY_FPS, {
          leading: true,
          trailing: true,
          maxWait: SIXTY_FPS
        }), container && this.setContainer(container);
      }
      registerStickyItem(stickyItem) {
        this.stickyItems.push(stickyItem);
      }
      unregisterStickyItem(nodeToRemove) {
        let nodeIndex = this.stickyItems.findIndex(({
          stickyNode
        }) => nodeToRemove === stickyNode);
        this.stickyItems.splice(nodeIndex, 1);
      }
      setContainer(el) {
        this.container = el, isDocument(el) && this.setTopBarOffset(el), this.container.addEventListener("scroll", this.handleScroll), window.addEventListener("resize", this.handleResize), this.manageStickyItems();
      }
      removeScrollListener() {
        this.container && (this.container.removeEventListener("scroll", this.handleScroll), window.removeEventListener("resize", this.handleResize));
      }
      manageStickyItems() {
        if (this.stickyItems.length <= 0)
          return;
        let scrollTop = this.container ? scrollTopFor(this.container) : 0, containerTop = getRectForNode(this.container).top + this.topBarOffset;
        this.stickyItems.forEach((stickyItem) => {
          let {
            handlePositioning
          } = stickyItem, {
            sticky,
            top,
            left,
            width: width2
          } = this.evaluateStickyItem(stickyItem, scrollTop, containerTop);
          this.updateStuckItems(stickyItem, sticky), handlePositioning(sticky, top, left, width2);
        });
      }
      evaluateStickyItem(stickyItem, scrollTop, containerTop) {
        let {
          stickyNode,
          placeHolderNode,
          boundingElement,
          offset,
          disableWhenStacked
        } = stickyItem;
        if (disableWhenStacked && stackedContent().matches)
          return {
            sticky: false,
            top: 0,
            left: 0,
            width: "auto"
          };
        let stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(
          // Important: This will not update when the active theme changes.
          // Update this to `useTheme` once converted to a function component.
          themeDefault.space["space-500"],
          10
        ) : this.getOffset(stickyNode), scrollPosition2 = scrollTop + stickyOffset, placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop, top = containerTop + stickyOffset, width2 = placeHolderNode.getBoundingClientRect().width, left = placeHolderNode.getBoundingClientRect().left, sticky;
        if (boundingElement == null)
          sticky = scrollPosition2 >= placeHolderNodeCurrentTop;
        else {
          let stickyItemHeight = stickyNode.getBoundingClientRect().height || stickyNode.firstElementChild?.getBoundingClientRect().height || 0, stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
          sticky = scrollPosition2 >= placeHolderNodeCurrentTop && scrollPosition2 < stickyItemBottomPosition;
        }
        return {
          sticky,
          top,
          left,
          width: width2
        };
      }
      updateStuckItems(item, sticky) {
        let {
          stickyNode
        } = item;
        sticky && !this.isNodeStuck(stickyNode) ? this.addStuckItem(item) : !sticky && this.isNodeStuck(stickyNode) && this.removeStuckItem(item);
      }
      addStuckItem(stickyItem) {
        this.stuckItems.push(stickyItem);
      }
      removeStuckItem(stickyItem) {
        let {
          stickyNode: nodeToRemove
        } = stickyItem, nodeIndex = this.stuckItems.findIndex(({
          stickyNode
        }) => nodeToRemove === stickyNode);
        this.stuckItems.splice(nodeIndex, 1);
      }
      getOffset(node) {
        if (this.stuckItems.length === 0)
          return 0;
        let offset = 0, count = 0, stuckNodesLength = this.stuckItems.length, nodeRect = getRectForNode(node);
        for (; count < stuckNodesLength; ) {
          let stuckNode = this.stuckItems[count].stickyNode;
          if (stuckNode !== node) {
            let stuckNodeRect = getRectForNode(stuckNode);
            horizontallyOverlaps(nodeRect, stuckNodeRect) || (offset += getRectForNode(stuckNode).height);
          } else
            break;
          count++;
        }
        return offset;
      }
      isNodeStuck(node) {
        return this.stuckItems.findIndex(({
          stickyNode
        }) => node === stickyNode) >= 0;
      }
      setTopBarOffset(container) {
        let topbarElement = container.querySelector(`:not(${scrollable.selector}) ${dataPolarisTopBar.selector}`);
        this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
      }
    };
  }
});
function isScrollBarVisible() {
  let {
    body
  } = document;
  return body.scrollHeight > body.clientHeight;
}
var SCROLL_LOCKING_ATTRIBUTE;
var SCROLL_LOCKING_HIDDEN_ATTRIBUTE;
var SCROLL_LOCKING_WRAPPER_ATTRIBUTE;
var scrollPosition;
var ScrollLockManager;
var init_scroll_lock_manager = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/scroll-lock-manager/scroll-lock-manager.js"() {
    init_target();
    SCROLL_LOCKING_ATTRIBUTE = "data-lock-scrolling", SCROLL_LOCKING_HIDDEN_ATTRIBUTE = "data-lock-scrolling-hidden", SCROLL_LOCKING_WRAPPER_ATTRIBUTE = "data-lock-scrolling-wrapper", scrollPosition = 0;
    ScrollLockManager = class {
      constructor() {
        this.scrollLocks = 0, this.locked = false;
      }
      registerScrollLock() {
        this.scrollLocks += 1, this.handleScrollLocking();
      }
      unregisterScrollLock() {
        this.scrollLocks -= 1, this.handleScrollLocking();
      }
      handleScrollLocking() {
        if (isServer)
          return;
        let {
          scrollLocks
        } = this, {
          body
        } = document, wrapper = body.firstElementChild;
        scrollLocks === 0 ? (body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE), body.removeAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE), wrapper && wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE), window.scroll(0, scrollPosition), this.locked = false) : scrollLocks > 0 && !this.locked && (scrollPosition = window.pageYOffset, body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, ""), isScrollBarVisible() || body.setAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE, ""), wrapper && (wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, ""), wrapper.scrollTop = scrollPosition), this.locked = true);
      }
      resetScrollPosition() {
        scrollPosition = 0;
      }
    };
  }
});
function get(obj, keypath, defaultValue) {
  if (obj == null)
    return;
  let keys = Array.isArray(keypath) ? keypath : getKeypath(keypath), acc = obj;
  for (let i = 0; i < keys.length; i++) {
    let val = acc[keys[i]];
    if (val === void 0)
      return defaultValue;
    acc = val;
  }
  return acc;
}
function getKeypath(str) {
  let path = [], result;
  for (; result = OBJECT_NOTATION_MATCHER.exec(str); ) {
    let [, first, second] = result;
    path.push(first || second);
  }
  return path;
}
var OBJECT_NOTATION_MATCHER;
var init_get = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/get.js"() {
    OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
  }
});
function merge(...objs) {
  let final = {};
  for (let obj of objs)
    final = mergeRecursively(final, obj);
  return final;
}
function mergeRecursively(inputObjA, objB) {
  let objA = Array.isArray(inputObjA) ? [...inputObjA] : {
    ...inputObjA
  };
  for (let key in objB)
    if (Object.prototype.hasOwnProperty.call(objB, key))
      isMergeableValue(objB[key]) && isMergeableValue(objA[key]) ? objA[key] = mergeRecursively(objA[key], objB[key]) : objA[key] = objB[key];
    else
      continue;
  return objA;
}
function isMergeableValue(value) {
  return value !== null && typeof value == "object";
}
var init_merge = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/merge.js"() {
  }
});
var REPLACE_REGEX;
var I18n;
var init_I18n = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/i18n/I18n.js"() {
    init_get();
    init_merge();
    REPLACE_REGEX = /{([^}]*)}/g, I18n = class {
      /**
       * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
       */
      constructor(translation) {
        this.translation = {}, this.translation = Array.isArray(translation) ? merge(...translation.slice().reverse()) : translation;
      }
      translate(id, replacements) {
        let text2 = get(this.translation, id, "");
        return text2 ? replacements ? text2.replace(REPLACE_REGEX, (match2) => {
          let replacement = match2.substring(1, match2.length - 1);
          if (replacements[replacement] === void 0) {
            let replacementData = JSON.stringify(replacements);
            throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);
          }
          return replacements[replacement];
        }) : text2 : "";
      }
      translationKeyExists(path) {
        return Boolean(get(this.translation, path));
      }
    };
  }
});
var import_react10;
var I18nContext;
var init_context2 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/i18n/context.js"() {
    import_react10 = __toESM(require_react()), I18nContext = /* @__PURE__ */ (0, import_react10.createContext)(void 0);
  }
});
var import_react11;
var ScrollLockManagerContext;
var init_context3 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/scroll-lock-manager/context.js"() {
    import_react11 = __toESM(require_react()), ScrollLockManagerContext = /* @__PURE__ */ (0, import_react11.createContext)(void 0);
  }
});
var import_react12;
var StickyManagerContext;
var init_context4 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/sticky-manager/context.js"() {
    import_react12 = __toESM(require_react()), StickyManagerContext = /* @__PURE__ */ (0, import_react12.createContext)(void 0);
  }
});
var import_react13;
var LinkContext;
var init_context5 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/link/context.js"() {
    import_react13 = __toESM(require_react()), LinkContext = /* @__PURE__ */ (0, import_react13.createContext)(void 0);
  }
});
var import_react14;
var MediaQueryContext;
var init_context6 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/media-query/context.js"() {
    import_react14 = __toESM(require_react()), MediaQueryContext = /* @__PURE__ */ (0, import_react14.createContext)(void 0);
  }
});
var import_react15;
var EventListener;
var init_EventListener = __esm({
  "node_modules/@shopify/polaris/build/esm/components/EventListener/EventListener.js"() {
    import_react15 = __toESM(require_react()), EventListener = class extends import_react15.PureComponent {
      componentDidMount() {
        this.attachListener();
      }
      componentDidUpdate({
        passive,
        ...detachProps
      }) {
        this.detachListener(detachProps), this.attachListener();
      }
      componentWillUnmount() {
        this.detachListener();
      }
      render() {
        return null;
      }
      attachListener() {
        let {
          event,
          handler,
          capture,
          passive
        } = this.props;
        window.addEventListener(event, handler, {
          capture,
          passive
        });
      }
      detachListener(prevProps) {
        let {
          event,
          handler,
          capture
        } = prevProps || this.props;
        window.removeEventListener(event, handler, capture);
      }
    };
  }
});
var import_react16;
var MediaQueryProvider;
var init_MediaQueryProvider = __esm({
  "node_modules/@shopify/polaris/build/esm/components/MediaQueryProvider/MediaQueryProvider.js"() {
    import_react16 = __toESM(require_react());
    init_debounce();
    init_breakpoints2();
    init_context6();
    init_EventListener();
    MediaQueryProvider = function({
      children
    }) {
      let [isNavigationCollapsed, setIsNavigationCollapsed] = (0, import_react16.useState)(navigationBarCollapsed().matches), handleResize = (0, import_react16.useCallback)(debounce(() => {
        isNavigationCollapsed !== navigationBarCollapsed().matches && setIsNavigationCollapsed(!isNavigationCollapsed);
      }, 40, {
        trailing: true,
        leading: true,
        maxWait: 40
      }), [isNavigationCollapsed]);
      (0, import_react16.useEffect)(() => {
        setIsNavigationCollapsed(navigationBarCollapsed().matches);
      }, []);
      let context = (0, import_react16.useMemo)(() => ({
        isNavigationCollapsed
      }), [isNavigationCollapsed]);
      return /* @__PURE__ */ import_react16.default.createElement(MediaQueryContext.Provider, {
        value: context
      }, /* @__PURE__ */ import_react16.default.createElement(EventListener, {
        event: "resize",
        handler: handleResize
      }), children);
    };
  }
});
function useIsAfterInitialMount() {
  let [isAfterInitialMount, setIsAfterInitialMount] = (0, import_react17.useState)(false);
  return (0, import_react17.useEffect)(() => {
    setIsAfterInitialMount(true);
  }, []), isAfterInitialMount;
}
var import_react17;
var init_use_is_after_initial_mount = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-is-after-initial-mount.js"() {
    import_react17 = __toESM(require_react());
  }
});
var import_react18;
var PortalsManagerContext;
var init_context7 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/portals/context.js"() {
    import_react18 = __toESM(require_react()), PortalsManagerContext = /* @__PURE__ */ (0, import_react18.createContext)(void 0);
  }
});
function PortalsContainerComponent(_props, ref) {
  return /* @__PURE__ */ import_react19.default.createElement("div", {
    id: "PolarisPortalsContainer",
    ref
  });
}
var import_react19;
var PortalsContainer;
var init_PortalsContainer = __esm({
  "node_modules/@shopify/polaris/build/esm/components/PortalsManager/components/PortalsContainer/PortalsContainer.js"() {
    import_react19 = __toESM(require_react());
    PortalsContainer = /* @__PURE__ */ (0, import_react19.forwardRef)(PortalsContainerComponent);
  }
});
function PortalsManager({
  children,
  container
}) {
  let isMounted = useIsAfterInitialMount(), ref = (0, import_react20.useRef)(null), contextValue = (0, import_react20.useMemo)(() => container ? {
    container
  } : isMounted ? {
    container: ref.current
  } : {
    container: null
  }, [container, isMounted]);
  return /* @__PURE__ */ import_react20.default.createElement(PortalsManagerContext.Provider, {
    value: contextValue
  }, children, container ? null : /* @__PURE__ */ import_react20.default.createElement(PortalsContainer, {
    ref
  }));
}
var import_react20;
var init_PortalsManager = __esm({
  "node_modules/@shopify/polaris/build/esm/components/PortalsManager/PortalsManager.js"() {
    import_react20 = __toESM(require_react());
    init_use_is_after_initial_mount();
    init_context7();
    init_PortalsContainer();
  }
});
var import_react21;
var FocusManagerContext;
var init_context8 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/focus-manager/context.js"() {
    import_react21 = __toESM(require_react()), FocusManagerContext = /* @__PURE__ */ (0, import_react21.createContext)(void 0);
  }
});
function FocusManager({
  children
}) {
  let [trapFocusList, setTrapFocusList] = (0, import_react22.useState)([]), add = (0, import_react22.useCallback)((id) => {
    setTrapFocusList((list2) => [...list2, id]);
  }, []), remove = (0, import_react22.useCallback)((id) => {
    let removed = true;
    return setTrapFocusList((list2) => {
      let clone2 = [...list2], index = clone2.indexOf(id);
      return index === -1 ? removed = false : clone2.splice(index, 1), clone2;
    }), removed;
  }, []), value = (0, import_react22.useMemo)(() => ({
    trapFocusList,
    add,
    remove
  }), [add, trapFocusList, remove]);
  return /* @__PURE__ */ import_react22.default.createElement(FocusManagerContext.Provider, {
    value
  }, children);
}
var import_react22;
var init_FocusManager = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FocusManager/FocusManager.js"() {
    import_react22 = __toESM(require_react());
    init_context8();
  }
});
var import_react23;
var EphemeralPresenceManagerContext;
var init_context9 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/ephemeral-presence-manager/context.js"() {
    import_react23 = __toESM(require_react()), EphemeralPresenceManagerContext = /* @__PURE__ */ (0, import_react23.createContext)(void 0);
  }
});
function EphemeralPresenceManager({
  children
}) {
  let [presenceCounter, setPresenceCounter] = (0, import_react24.useState)(defaultState), addPresence = (0, import_react24.useCallback)((key) => {
    setPresenceCounter((prevList) => ({
      ...prevList,
      [key]: prevList[key] + 1
    }));
  }, []), removePresence = (0, import_react24.useCallback)((key) => {
    setPresenceCounter((prevList) => ({
      ...prevList,
      [key]: prevList[key] - 1
    }));
  }, []), value = (0, import_react24.useMemo)(() => ({
    presenceList: Object.entries(presenceCounter).reduce((previousValue, currentValue) => {
      let [key, value2] = currentValue;
      return {
        ...previousValue,
        [key]: value2 >= 1
      };
    }, {}),
    presenceCounter,
    addPresence,
    removePresence
  }), [addPresence, removePresence, presenceCounter]);
  return /* @__PURE__ */ import_react24.default.createElement(EphemeralPresenceManagerContext.Provider, {
    value
  }, children);
}
var import_react24;
var defaultState;
var init_EphemeralPresenceManager = __esm({
  "node_modules/@shopify/polaris/build/esm/components/EphemeralPresenceManager/EphemeralPresenceManager.js"() {
    import_react24 = __toESM(require_react());
    init_context9();
    defaultState = {
      tooltip: 0
    };
  }
});
function measureScrollbars() {
  let parentEl = document.createElement("div");
  parentEl.setAttribute("style", `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px; height:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px;`);
  let child = document.createElement("div");
  child.setAttribute("style", `width:100%; height: ${SCROLLBAR_TEST_ELEMENT_CHILD_SIZE}; overflow:scroll`), parentEl.appendChild(child), document.body.appendChild(parentEl);
  let scrollbarWidth = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE - (parentEl.firstElementChild?.clientWidth ?? 0), scrollbarWidthWithSafetyHatch = Math.min(scrollbarWidth, MAX_SCROLLBAR_WIDTH);
  document.documentElement.style.setProperty("--pc-app-provider-scrollbar-width", `${scrollbarWidthWithSafetyHatch}px`), document.body.removeChild(parentEl);
}
var import_react25;
var MAX_SCROLLBAR_WIDTH;
var SCROLLBAR_TEST_ELEMENT_PARENT_SIZE;
var SCROLLBAR_TEST_ELEMENT_CHILD_SIZE;
var AppProvider;
var init_AppProvider = __esm({
  "node_modules/@shopify/polaris/build/esm/components/AppProvider/AppProvider.js"() {
    import_react25 = __toESM(require_react());
    init_build();
    init_use_theme();
    init_context();
    init_sticky_manager();
    init_scroll_lock_manager();
    init_I18n();
    init_context2();
    init_context3();
    init_context4();
    init_context5();
    init_MediaQueryProvider();
    init_PortalsManager();
    init_FocusManager();
    init_EphemeralPresenceManager();
    MAX_SCROLLBAR_WIDTH = 20, SCROLLBAR_TEST_ELEMENT_PARENT_SIZE = 30, SCROLLBAR_TEST_ELEMENT_CHILD_SIZE = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE + 10;
    AppProvider = class extends import_react25.Component {
      constructor(props) {
        super(props), this.setBodyStyles = () => {
          document.body.style.backgroundColor = "var(--p-color-bg)", document.body.style.color = "var(--p-color-text)";
        }, this.setRootAttributes = () => {
          let activeThemeName = this.getThemeName();
          themeNames.forEach((themeName) => {
            document.documentElement.classList.toggle(createThemeClassName(themeName), themeName === activeThemeName);
          }), document.documentElement.classList.add(classNamePolarisSummerEditions2023);
        }, this.getThemeName = () => this.props.theme ?? themeNameDefault, this.stickyManager = new StickyManager(), this.scrollLockManager = new ScrollLockManager();
        let {
          i18n,
          linkComponent
        } = this.props;
        this.state = {
          link: linkComponent,
          intl: new I18n(i18n)
        };
      }
      componentDidMount() {
        document != null && (this.stickyManager.setContainer(document), this.setBodyStyles(), this.setRootAttributes()), measureScrollbars();
      }
      componentDidUpdate({
        i18n: prevI18n,
        linkComponent: prevLinkComponent
      }) {
        let {
          i18n,
          linkComponent
        } = this.props;
        this.setRootAttributes(), !(i18n === prevI18n && linkComponent === prevLinkComponent) && this.setState({
          link: linkComponent,
          intl: new I18n(i18n)
        });
      }
      render() {
        let {
          children,
          features
        } = this.props, themeName = this.getThemeName(), {
          intl,
          link
        } = this.state;
        return /* @__PURE__ */ import_react25.default.createElement(ThemeContext.Provider, {
          value: getTheme(themeName)
        }, /* @__PURE__ */ import_react25.default.createElement(FeaturesContext.Provider, {
          value: features
        }, /* @__PURE__ */ import_react25.default.createElement(I18nContext.Provider, {
          value: intl
        }, /* @__PURE__ */ import_react25.default.createElement(ScrollLockManagerContext.Provider, {
          value: this.scrollLockManager
        }, /* @__PURE__ */ import_react25.default.createElement(StickyManagerContext.Provider, {
          value: this.stickyManager
        }, /* @__PURE__ */ import_react25.default.createElement(LinkContext.Provider, {
          value: link
        }, /* @__PURE__ */ import_react25.default.createElement(MediaQueryProvider, null, /* @__PURE__ */ import_react25.default.createElement(PortalsManager, null, /* @__PURE__ */ import_react25.default.createElement(FocusManager, null, /* @__PURE__ */ import_react25.default.createElement(EphemeralPresenceManager, null, children))))))))));
      }
    };
  }
});
var import_react26;
var SvgAlertMinor;
var init_AlertMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/AlertMinor.svg.mjs"() {
    import_react26 = __toESM(require_react(), 1), SvgAlertMinor = function(props) {
      return /* @__PURE__ */ import_react26.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react26.default.createElement("path", {
        d: "M11 13.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"
      }), /* @__PURE__ */ import_react26.default.createElement("path", {
        d: "M10.75 6.25a.75.75 0 0 0-1.5 0v4.5a.75.75 0 1 0 1.5 0v-4.5Z"
      }), /* @__PURE__ */ import_react26.default.createElement("path", {
        fillRule: "evenodd",
        d: "M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14Zm0-1.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z"
      }));
    };
    SvgAlertMinor.displayName = "AlertMinor";
  }
});
var import_react27;
var SvgArrowDownMinor;
var init_ArrowDownMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ArrowDownMinor.svg.mjs"() {
    import_react27 = __toESM(require_react(), 1), SvgArrowDownMinor = function(props) {
      return /* @__PURE__ */ import_react27.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react27.default.createElement("path", {
        fillRule: "evenodd",
        d: "M10 3.5a.75.75 0 0 1 .75.75v9.69l2.72-2.72a.75.75 0 0 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 1.06-1.06l2.72 2.72v-9.69a.75.75 0 0 1 .75-.75Z"
      }));
    };
    SvgArrowDownMinor.displayName = "ArrowDownMinor";
  }
});
var import_react28;
var SvgArrowLeftMinor;
var init_ArrowLeftMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ArrowLeftMinor.svg.mjs"() {
    import_react28 = __toESM(require_react(), 1), SvgArrowLeftMinor = function(props) {
      return /* @__PURE__ */ import_react28.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react28.default.createElement("path", {
        fillRule: "evenodd",
        d: "M16.75 10a.75.75 0 0 1-.75.75h-9.69l2.72 2.72a.75.75 0 0 1-1.06 1.06l-4-4a.75.75 0 0 1 0-1.06l4-4a.75.75 0 0 1 1.06 1.06l-2.72 2.72h9.69a.75.75 0 0 1 .75.75Z"
      }));
    };
    SvgArrowLeftMinor.displayName = "ArrowLeftMinor";
  }
});
var import_react29;
var SvgArrowRightMinor;
var init_ArrowRightMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ArrowRightMinor.svg.mjs"() {
    import_react29 = __toESM(require_react(), 1), SvgArrowRightMinor = function(props) {
      return /* @__PURE__ */ import_react29.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react29.default.createElement("path", {
        fillRule: "evenodd",
        d: "M3.5 10a.75.75 0 0 1 .75-.75h9.69l-2.72-2.72a.75.75 0 1 1 1.06-1.06l4 4a.75.75 0 0 1 0 1.06l-4 4a.75.75 0 0 1-1.06-1.06l2.72-2.72h-9.69a.75.75 0 0 1-.75-.75Z"
      }));
    };
    SvgArrowRightMinor.displayName = "ArrowRightMinor";
  }
});
var import_react30;
var SvgArrowUpMinor;
var init_ArrowUpMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ArrowUpMinor.svg.mjs"() {
    import_react30 = __toESM(require_react(), 1), SvgArrowUpMinor = function(props) {
      return /* @__PURE__ */ import_react30.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react30.default.createElement("path", {
        fillRule: "evenodd",
        d: "M10 16.5a.75.75 0 0 1-.75-.75v-9.69l-2.72 2.72a.75.75 0 1 1-1.06-1.06l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 1 1-1.06 1.06l-2.72-2.72v9.69a.75.75 0 0 1-.75.75Z"
      }));
    };
    SvgArrowUpMinor.displayName = "ArrowUpMinor";
  }
});
var import_react31;
var SvgCancelMajor;
var init_CancelMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/CancelMajor.svg.mjs"() {
    import_react31 = __toESM(require_react(), 1), SvgCancelMajor = function(props) {
      return /* @__PURE__ */ import_react31.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react31.default.createElement("path", {
        d: "M13.97 15.03a.75.75 0 1 0 1.06-1.06l-3.97-3.97 3.97-3.97a.75.75 0 0 0-1.06-1.06l-3.97 3.97-3.97-3.97a.75.75 0 0 0-1.06 1.06l3.97 3.97-3.97 3.97a.75.75 0 1 0 1.06 1.06l3.97-3.97 3.97 3.97Z"
      }));
    };
    SvgCancelMajor.displayName = "CancelMajor";
  }
});
var import_react32;
var SvgCancelMinor;
var init_CancelMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/CancelMinor.svg.mjs"() {
    import_react32 = __toESM(require_react(), 1), SvgCancelMinor = function(props) {
      return /* @__PURE__ */ import_react32.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react32.default.createElement("path", {
        d: "M13.97 15.03a.75.75 0 1 0 1.06-1.06l-3.97-3.97 3.97-3.97a.75.75 0 0 0-1.06-1.06l-3.97 3.97-3.97-3.97a.75.75 0 0 0-1.06 1.06l3.97 3.97-3.97 3.97a.75.75 0 1 0 1.06 1.06l3.97-3.97 3.97 3.97Z"
      }));
    };
    SvgCancelMinor.displayName = "CancelMinor";
  }
});
var import_react33;
var SvgCancelSmallMinor;
var init_CancelSmallMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/CancelSmallMinor.svg.mjs"() {
    import_react33 = __toESM(require_react(), 1), SvgCancelSmallMinor = function(props) {
      return /* @__PURE__ */ import_react33.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react33.default.createElement("path", {
        d: "M12.72 13.78a.75.75 0 1 0 1.06-1.06l-2.72-2.72 2.72-2.72a.75.75 0 0 0-1.06-1.06l-2.72 2.72-2.72-2.72a.75.75 0 0 0-1.06 1.06l2.72 2.72-2.72 2.72a.75.75 0 1 0 1.06 1.06l2.72-2.72 2.72 2.72Z"
      }));
    };
    SvgCancelSmallMinor.displayName = "CancelSmallMinor";
  }
});
var import_react34;
var SvgChevronDownMinor;
var init_ChevronDownMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ChevronDownMinor.svg.mjs"() {
    import_react34 = __toESM(require_react(), 1), SvgChevronDownMinor = function(props) {
      return /* @__PURE__ */ import_react34.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react34.default.createElement("path", {
        fillRule: "evenodd",
        d: "M5.72 8.47a.75.75 0 0 1 1.06 0l3.47 3.47 3.47-3.47a.75.75 0 1 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 0-1.06Z"
      }));
    };
    SvgChevronDownMinor.displayName = "ChevronDownMinor";
  }
});
var import_react35;
var SvgChevronLeftMinor;
var init_ChevronLeftMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ChevronLeftMinor.svg.mjs"() {
    import_react35 = __toESM(require_react(), 1), SvgChevronLeftMinor = function(props) {
      return /* @__PURE__ */ import_react35.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react35.default.createElement("path", {
        fillRule: "evenodd",
        d: "M11.78 5.47a.75.75 0 0 1 0 1.06l-3.47 3.47 3.47 3.47a.75.75 0 1 1-1.06 1.06l-4-4a.75.75 0 0 1 0-1.06l4-4a.75.75 0 0 1 1.06 0Z"
      }));
    };
    SvgChevronLeftMinor.displayName = "ChevronLeftMinor";
  }
});
var import_react36;
var SvgChevronRightMinor;
var init_ChevronRightMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ChevronRightMinor.svg.mjs"() {
    import_react36 = __toESM(require_react(), 1), SvgChevronRightMinor = function(props) {
      return /* @__PURE__ */ import_react36.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react36.default.createElement("path", {
        fillRule: "evenodd",
        d: "M7.72 14.53a.75.75 0 0 1 0-1.06l3.47-3.47-3.47-3.47a.75.75 0 0 1 1.06-1.06l4 4a.75.75 0 0 1 0 1.06l-4 4a.75.75 0 0 1-1.06 0Z"
      }));
    };
    SvgChevronRightMinor.displayName = "ChevronRightMinor";
  }
});
var import_react37;
var SvgChevronUpMinor;
var init_ChevronUpMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ChevronUpMinor.svg.mjs"() {
    import_react37 = __toESM(require_react(), 1), SvgChevronUpMinor = function(props) {
      return /* @__PURE__ */ import_react37.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react37.default.createElement("path", {
        fillRule: "evenodd",
        d: "M14.53 12.28a.75.75 0 0 1-1.06 0l-3.47-3.47-3.47 3.47a.75.75 0 0 1-1.06-1.06l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 0 1 0 1.06Z"
      }));
    };
    SvgChevronUpMinor.displayName = "ChevronUpMinor";
  }
});
var import_react38;
var SvgCircleAlertMajor;
var init_CircleAlertMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/CircleAlertMajor.svg.mjs"() {
    import_react38 = __toESM(require_react(), 1), SvgCircleAlertMajor = function(props) {
      return /* @__PURE__ */ import_react38.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react38.default.createElement("path", {
        d: "M10 6a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5a.75.75 0 0 1 .75-.75Z"
      }), /* @__PURE__ */ import_react38.default.createElement("path", {
        d: "M11 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"
      }), /* @__PURE__ */ import_react38.default.createElement("path", {
        fillRule: "evenodd",
        d: "M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Zm-1.5 0a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z"
      }));
    };
    SvgCircleAlertMajor.displayName = "CircleAlertMajor";
  }
});
var import_react39;
var SvgCircleCancelMinor;
var init_CircleCancelMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/CircleCancelMinor.svg.mjs"() {
    import_react39 = __toESM(require_react(), 1), SvgCircleCancelMinor = function(props) {
      return /* @__PURE__ */ import_react39.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react39.default.createElement("path", {
        d: "M13.03 6.97a.75.75 0 0 1 0 1.06l-1.97 1.97 1.97 1.97a.75.75 0 1 1-1.06 1.06l-1.97-1.97-1.97 1.97a.75.75 0 0 1-1.06-1.06l1.97-1.97-1.97-1.97a.75.75 0 0 1 1.06-1.06l1.97 1.97 1.97-1.97a.75.75 0 0 1 1.06 0Z"
      }), /* @__PURE__ */ import_react39.default.createElement("path", {
        fillRule: "evenodd",
        d: "M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14Zm0-1.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z"
      }));
    };
    SvgCircleCancelMinor.displayName = "CircleCancelMinor";
  }
});
var import_react40;
var SvgColumns3Minor;
var init_Columns3Minor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/Columns3Minor.svg.mjs"() {
    import_react40 = __toESM(require_react(), 1), SvgColumns3Minor = function(props) {
      return /* @__PURE__ */ import_react40.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react40.default.createElement("path", {
        fillRule: "evenodd",
        d: "M6 3a3 3 0 0 0-3 3v8a3 3 0 0 0 3 3h8a3 3 0 0 0 3-3v-8a3 3 0 0 0-3-3h-8Zm5.25 1.5h-2.5v11h2.5v-11Zm1.5 0v11h1.25a1.5 1.5 0 0 0 1.5-1.5v-8a1.5 1.5 0 0 0-1.5-1.5h-1.25Zm-6.75 0h1.25v11h-1.25a1.5 1.5 0 0 1-1.5-1.5v-8a1.5 1.5 0 0 1 1.5-1.5Z"
      }));
    };
    SvgColumns3Minor.displayName = "Columns3Minor";
  }
});
var import_react41;
var SvgDeleteMinor;
var init_DeleteMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/DeleteMinor.svg.mjs"() {
    import_react41 = __toESM(require_react(), 1), SvgDeleteMinor = function(props) {
      return /* @__PURE__ */ import_react41.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react41.default.createElement("path", {
        d: "M11.5 8.25a.75.75 0 0 1 .75.75v4.25a.75.75 0 0 1-1.5 0v-4.25a.75.75 0 0 1 .75-.75Z"
      }), /* @__PURE__ */ import_react41.default.createElement("path", {
        d: "M9.25 9a.75.75 0 0 0-1.5 0v4.25a.75.75 0 0 0 1.5 0v-4.25Z"
      }), /* @__PURE__ */ import_react41.default.createElement("path", {
        fillRule: "evenodd",
        d: "M7.25 5.25a2.75 2.75 0 0 1 5.5 0h3a.75.75 0 0 1 0 1.5h-.75v5.45c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311c-.642.327-1.482.327-3.162.327h-.4c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311c-.327-.642-.327-1.482-.327-3.162v-5.45h-.75a.75.75 0 0 1 0-1.5h3Zm1.5 0a1.25 1.25 0 1 1 2.5 0h-2.5Zm-2.25 1.5h7v5.45c0 .865-.001 1.423-.036 1.848-.033.408-.09.559-.128.633a1.5 1.5 0 0 1-.655.655c-.074.038-.225.095-.633.128-.425.035-.983.036-1.848.036h-.4c-.865 0-1.423-.001-1.848-.036-.408-.033-.559-.09-.633-.128a1.5 1.5 0 0 1-.656-.655c-.037-.074-.094-.225-.127-.633-.035-.425-.036-.983-.036-1.848v-5.45Z"
      }));
    };
    SvgDeleteMinor.displayName = "DeleteMinor";
  }
});
var import_react42;
var SvgDiamondAlertMinor;
var init_DiamondAlertMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/DiamondAlertMinor.svg.mjs"() {
    import_react42 = __toESM(require_react(), 1), SvgDiamondAlertMinor = function(props) {
      return /* @__PURE__ */ import_react42.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react42.default.createElement("path", {
        d: "M10 6a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5a.75.75 0 0 1 .75-.75Z"
      }), /* @__PURE__ */ import_react42.default.createElement("path", {
        d: "M11 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"
      }), /* @__PURE__ */ import_react42.default.createElement("path", {
        fillRule: "evenodd",
        d: "M11.237 3.177a1.75 1.75 0 0 0-2.474 0l-5.586 5.585a1.75 1.75 0 0 0 0 2.475l5.586 5.586a1.75 1.75 0 0 0 2.474 0l5.586-5.586a1.75 1.75 0 0 0 0-2.475l-5.586-5.585Zm-1.414 1.06a.25.25 0 0 1 .354 0l5.586 5.586a.25.25 0 0 1 0 .354l-5.586 5.585a.25.25 0 0 1-.354 0l-5.586-5.585a.25.25 0 0 1 0-.354l5.586-5.586Z"
      }));
    };
    SvgDiamondAlertMinor.displayName = "DiamondAlertMinor";
  }
});
var import_react43;
var SvgDuplicateMinor;
var init_DuplicateMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/DuplicateMinor.svg.mjs"() {
    import_react43 = __toESM(require_react(), 1), SvgDuplicateMinor = function(props) {
      return /* @__PURE__ */ import_react43.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react43.default.createElement("path", {
        d: "M8.75 8.5a.75.75 0 0 1 .75.75v1.25h1.25a.75.75 0 0 1 0 1.5h-1.25v1.25a.75.75 0 0 1-1.5 0v-1.25h-1.25a.75.75 0 0 1 0-1.5h1.25v-1.25a.75.75 0 0 1 .75-.75Z"
      }), /* @__PURE__ */ import_react43.default.createElement("path", {
        fillRule: "evenodd",
        d: "M8.75 3.5a2.75 2.75 0 0 0-2.74 2.51 2.75 2.75 0 0 0-2.51 2.74v5a2.75 2.75 0 0 0 2.75 2.75h5a2.75 2.75 0 0 0 2.74-2.51 2.75 2.75 0 0 0 2.51-2.74v-5a2.75 2.75 0 0 0-2.75-2.75h-5Zm2.5 2.5h-3.725c.116-.57.62-1 1.225-1h5c.69 0 1.25.56 1.25 1.25v5c0 .605-.43 1.11-1 1.225v-3.725a2.75 2.75 0 0 0-2.75-2.75Zm-5 1.5c-.69 0-1.25.56-1.25 1.25v5c0 .69.56 1.25 1.25 1.25h5c.69 0 1.25-.56 1.25-1.25v-5c0-.69-.56-1.25-1.25-1.25h-5Z"
      }));
    };
    SvgDuplicateMinor.displayName = "DuplicateMinor";
  }
});
var import_react44;
var SvgEditMinor;
var init_EditMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/EditMinor.svg.mjs"() {
    import_react44 = __toESM(require_react(), 1), SvgEditMinor = function(props) {
      return /* @__PURE__ */ import_react44.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react44.default.createElement("path", {
        fillRule: "evenodd",
        d: "M15.655 4.344a2.695 2.695 0 0 0-3.81 0l-.599.599-.009-.009-1.06 1.06.008.01-5.88 5.88a2.75 2.75 0 0 0-.805 1.944v1.922a.75.75 0 0 0 .75.75h1.922a2.75 2.75 0 0 0 1.944-.806l7.54-7.539a2.695 2.695 0 0 0 0-3.81Zm-4.409 2.72-5.88 5.88a1.25 1.25 0 0 0-.366.884v1.172h1.172c.331 0 .65-.132.883-.366l5.88-5.88-1.689-1.69Zm2.75.629.599-.599a1.195 1.195 0 1 0-1.69-1.689l-.598.599 1.69 1.689Z"
      }));
    };
    SvgEditMinor.displayName = "EditMinor";
  }
});
var import_react45;
var SvgEnableSelectionMinor;
var init_EnableSelectionMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/EnableSelectionMinor.svg.mjs"() {
    import_react45 = __toESM(require_react(), 1), SvgEnableSelectionMinor = function(props) {
      return /* @__PURE__ */ import_react45.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react45.default.createElement("path", {
        d: "M13.28 8.78a.75.75 0 0 0-1.06-1.06l-2.97 2.97-1.22-1.22a.75.75 0 0 0-1.06 1.06l1.75 1.75a.75.75 0 0 0 1.06 0l3.5-3.5Z"
      }), /* @__PURE__ */ import_react45.default.createElement("path", {
        fillRule: "evenodd",
        d: "M6.25 3.5a2.75 2.75 0 0 0-2.75 2.75v7.5a2.75 2.75 0 0 0 2.75 2.75h7.5a2.75 2.75 0 0 0 2.75-2.75v-7.5a2.75 2.75 0 0 0-2.75-2.75h-7.5Zm-1.25 2.75c0-.69.56-1.25 1.25-1.25h7.5c.69 0 1.25.56 1.25 1.25v7.5c0 .69-.56 1.25-1.25 1.25h-7.5c-.69 0-1.25-.56-1.25-1.25v-7.5Z"
      }));
    };
    SvgEnableSelectionMinor.displayName = "EnableSelectionMinor";
  }
});
var import_react46;
var SvgExitMajor;
var init_ExitMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/ExitMajor.svg.mjs"() {
    import_react46 = __toESM(require_react(), 1), SvgExitMajor = function(props) {
      return /* @__PURE__ */ import_react46.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react46.default.createElement("path", {
        d: "M9.75 3a2.25 2.25 0 0 0-2.25 2.25.75.75 0 0 0 1.5 0 .75.75 0 0 1 .75-.75h4a.75.75 0 0 1 .75.75v9.5a.75.75 0 0 1-.75.75h-4a.75.75 0 0 1-.75-.75.75.75 0 0 0-1.5 0 2.25 2.25 0 0 0 2.25 2.25h4a2.25 2.25 0 0 0 2.25-2.25v-9.5a2.25 2.25 0 0 0-2.25-2.25h-4Z"
      }), /* @__PURE__ */ import_react46.default.createElement("path", {
        d: "M12.25 10.75a.75.75 0 0 0 0-1.5h-5.69l.97-.97a.75.75 0 0 0-1.06-1.06l-2.25 2.25a.75.75 0 0 0 0 1.06l2.25 2.25a.75.75 0 0 0 1.06-1.06l-.97-.97h5.69Z"
      }));
    };
    SvgExitMajor.displayName = "ExitMajor";
  }
});
var import_react47;
var SvgFilterMinor;
var init_FilterMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/FilterMinor.svg.mjs"() {
    import_react47 = __toESM(require_react(), 1), SvgFilterMinor = function(props) {
      return /* @__PURE__ */ import_react47.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react47.default.createElement("path", {
        d: "M3 6a.75.75 0 0 1 .75-.75h12.5a.75.75 0 0 1 0 1.5h-12.5a.75.75 0 0 1-.75-.75Z"
      }), /* @__PURE__ */ import_react47.default.createElement("path", {
        d: "M6.75 14a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
      }), /* @__PURE__ */ import_react47.default.createElement("path", {
        d: "M5.5 9.25a.75.75 0 0 0 0 1.5h9a.75.75 0 0 0 0-1.5h-9Z"
      }));
    };
    SvgFilterMinor.displayName = "FilterMinor";
  }
});
var import_react48;
var SvgHorizontalDotsMinor;
var init_HorizontalDotsMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/HorizontalDotsMinor.svg.mjs"() {
    import_react48 = __toESM(require_react(), 1), SvgHorizontalDotsMinor = function(props) {
      return /* @__PURE__ */ import_react48.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react48.default.createElement("path", {
        d: "M6 10a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"
      }), /* @__PURE__ */ import_react48.default.createElement("path", {
        d: "M11.5 10a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"
      }), /* @__PURE__ */ import_react48.default.createElement("path", {
        d: "M15.5 11.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"
      }));
    };
    SvgHorizontalDotsMinor.displayName = "HorizontalDotsMinor";
  }
});
var import_react49;
var SvgInfoMinor;
var init_InfoMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/InfoMinor.svg.mjs"() {
    import_react49 = __toESM(require_react(), 1), SvgInfoMinor = function(props) {
      return /* @__PURE__ */ import_react49.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react49.default.createElement("path", {
        d: "M11 6.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"
      }), /* @__PURE__ */ import_react49.default.createElement("path", {
        d: "M10.75 9.25a.75.75 0 0 0-1.5 0v4.5a.75.75 0 0 0 1.5 0v-4.5Z"
      }), /* @__PURE__ */ import_react49.default.createElement("path", {
        fillRule: "evenodd",
        d: "M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14Zm0-1.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z"
      }));
    };
    SvgInfoMinor.displayName = "InfoMinor";
  }
});
var import_react50;
var SvgMinusMinor;
var init_MinusMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/MinusMinor.svg.mjs"() {
    import_react50 = __toESM(require_react(), 1), SvgMinusMinor = function(props) {
      return /* @__PURE__ */ import_react50.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react50.default.createElement("path", {
        fillRule: "evenodd",
        d: "M6 10a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Z"
      }));
    };
    SvgMinusMinor.displayName = "MinusMinor";
  }
});
var import_react51;
var SvgMobileCancelMajor;
var init_MobileCancelMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/MobileCancelMajor.svg.mjs"() {
    import_react51 = __toESM(require_react(), 1), SvgMobileCancelMajor = function(props) {
      return /* @__PURE__ */ import_react51.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react51.default.createElement("path", {
        d: "M12.72 13.78a.75.75 0 1 0 1.06-1.06l-2.72-2.72 2.72-2.72a.75.75 0 0 0-1.06-1.06l-2.72 2.72-2.72-2.72a.75.75 0 0 0-1.06 1.06l2.72 2.72-2.72 2.72a.75.75 0 1 0 1.06 1.06l2.72-2.72 2.72 2.72Z"
      }));
    };
    SvgMobileCancelMajor.displayName = "MobileCancelMajor";
  }
});
var import_react52;
var SvgMobileHamburgerMajor;
var init_MobileHamburgerMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/MobileHamburgerMajor.svg.mjs"() {
    import_react52 = __toESM(require_react(), 1), SvgMobileHamburgerMajor = function(props) {
      return /* @__PURE__ */ import_react52.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react52.default.createElement("path", {
        fillRule: "evenodd",
        d: "M3 4.75a.75.75 0 0 1 .75-.75h12.5a.75.75 0 0 1 0 1.5h-12.5a.75.75 0 0 1-.75-.75Z"
      }), /* @__PURE__ */ import_react52.default.createElement("path", {
        fillRule: "evenodd",
        d: "M3 10a.75.75 0 0 1 .75-.75h12.5a.75.75 0 0 1 0 1.5h-12.5a.75.75 0 0 1-.75-.75Z"
      }), /* @__PURE__ */ import_react52.default.createElement("path", {
        fillRule: "evenodd",
        d: "M3 15.25a.75.75 0 0 1 .75-.75h12.5a.75.75 0 0 1 0 1.5h-12.5a.75.75 0 0 1-.75-.75Z"
      }));
    };
    SvgMobileHamburgerMajor.displayName = "MobileHamburgerMajor";
  }
});
var import_react53;
var SvgPlayMinor;
var init_PlayMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/PlayMinor.svg.mjs"() {
    import_react53 = __toESM(require_react(), 1), SvgPlayMinor = function(props) {
      return /* @__PURE__ */ import_react53.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react53.default.createElement("path", {
        fillRule: "evenodd",
        d: "M15.375 8.485c1.167.674 1.167 2.358 0 3.031l-7.5 4.33c-1.167.674-2.625-.168-2.625-1.515v-8.66c0-1.348 1.458-2.19 2.625-1.516l7.5 4.33Zm-.75 1.732a.25.25 0 0 0 0-.433l-7.5-4.33a.25.25 0 0 0-.375.217v8.66a.25.25 0 0 0 .375.216l7.5-4.33Z"
      }));
    };
    SvgPlayMinor.displayName = "PlayMinor";
  }
});
var import_react54;
var SvgPlusMinor;
var init_PlusMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/PlusMinor.svg.mjs"() {
    import_react54 = __toESM(require_react(), 1), SvgPlusMinor = function(props) {
      return /* @__PURE__ */ import_react54.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react54.default.createElement("path", {
        d: "M10.75 6.75a.75.75 0 0 0-1.5 0v2.5h-2.5a.75.75 0 0 0 0 1.5h2.5v2.5a.75.75 0 0 0 1.5 0v-2.5h2.5a.75.75 0 0 0 0-1.5h-2.5v-2.5Z"
      }));
    };
    SvgPlusMinor.displayName = "PlusMinor";
  }
});
var import_react55;
var SvgRiskMajor;
var init_RiskMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/RiskMajor.svg.mjs"() {
    import_react55 = __toESM(require_react(), 1), SvgRiskMajor = function(props) {
      return /* @__PURE__ */ import_react55.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react55.default.createElement("path", {
        d: "M10 6.75a.75.75 0 0 1 .75.75v3.5a.75.75 0 1 1-1.5 0v-3.5a.75.75 0 0 1 .75-.75Z"
      }), /* @__PURE__ */ import_react55.default.createElement("path", {
        d: "M11 13.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"
      }), /* @__PURE__ */ import_react55.default.createElement("path", {
        fillRule: "evenodd",
        d: "M10 3.5c-1.045 0-1.784.702-2.152 1.447a449.26 449.26 0 0 1-2.005 3.847l-.028.052a403.426 403.426 0 0 0-2.008 3.856c-.372.752-.478 1.75.093 2.614.57.863 1.542 1.184 2.464 1.184h7.272c.922 0 1.895-.32 2.464-1.184.57-.864.465-1.862.093-2.614-.21-.424-1.113-2.147-2.004-3.847l-.032-.061a429.497 429.497 0 0 1-2.005-3.847c-.368-.745-1.107-1.447-2.152-1.447Zm-.808 2.112c.404-.816 1.212-.816 1.616 0 .202.409 1.112 2.145 2.022 3.88a418.904 418.904 0 0 1 2.018 3.875c.404.817 0 1.633-1.212 1.633h-7.272c-1.212 0-1.617-.816-1.212-1.633.202-.408 1.113-2.147 2.023-3.883a421.932 421.932 0 0 0 2.017-3.872Z"
      }));
    };
    SvgRiskMajor.displayName = "RiskMajor";
  }
});
var import_react56;
var SvgRiskMinor;
var init_RiskMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/RiskMinor.svg.mjs"() {
    import_react56 = __toESM(require_react(), 1), SvgRiskMinor = function(props) {
      return /* @__PURE__ */ import_react56.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react56.default.createElement("path", {
        d: "M10 6.75a.75.75 0 0 1 .75.75v3.5a.75.75 0 1 1-1.5 0v-3.5a.75.75 0 0 1 .75-.75Z"
      }), /* @__PURE__ */ import_react56.default.createElement("path", {
        d: "M11 13.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"
      }), /* @__PURE__ */ import_react56.default.createElement("path", {
        fillRule: "evenodd",
        d: "M10 3.5c-1.045 0-1.784.702-2.152 1.447a449.26 449.26 0 0 1-2.005 3.847l-.028.052a403.426 403.426 0 0 0-2.008 3.856c-.372.752-.478 1.75.093 2.614.57.863 1.542 1.184 2.464 1.184h7.272c.922 0 1.895-.32 2.464-1.184.57-.864.465-1.862.093-2.614-.21-.424-1.113-2.147-2.004-3.847l-.032-.061a429.497 429.497 0 0 1-2.005-3.847c-.368-.745-1.107-1.447-2.152-1.447Zm-.808 2.112c.404-.816 1.212-.816 1.616 0 .202.409 1.112 2.145 2.022 3.88a418.904 418.904 0 0 1 2.018 3.875c.404.817 0 1.633-1.212 1.633h-7.272c-1.212 0-1.617-.816-1.212-1.633.202-.408 1.113-2.147 2.023-3.883a421.932 421.932 0 0 0 2.017-3.872Z"
      }));
    };
    SvgRiskMinor.displayName = "RiskMinor";
  }
});
var import_react57;
var SvgSearchMinor;
var init_SearchMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/SearchMinor.svg.mjs"() {
    import_react57 = __toESM(require_react(), 1), SvgSearchMinor = function(props) {
      return /* @__PURE__ */ import_react57.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react57.default.createElement("path", {
        fillRule: "evenodd",
        d: "M12.323 13.383a5.5 5.5 0 1 1 1.06-1.06l2.897 2.897a.75.75 0 1 1-1.06 1.06l-2.897-2.897Zm.677-4.383a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
      }));
    };
    SvgSearchMinor.displayName = "SearchMinor";
  }
});
var import_react58;
var SvgSelectMinor;
var init_SelectMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/SelectMinor.svg.mjs"() {
    import_react58 = __toESM(require_react(), 1), SvgSelectMinor = function(props) {
      return /* @__PURE__ */ import_react58.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react58.default.createElement("path", {
        d: "M10.884 4.323a1.25 1.25 0 0 0-1.768 0l-2.646 2.647a.75.75 0 0 0 1.06 1.06l2.47-2.47 2.47 2.47a.75.75 0 1 0 1.06-1.06l-2.646-2.647Z"
      }), /* @__PURE__ */ import_react58.default.createElement("path", {
        d: "m13.53 13.03-2.646 2.647a1.25 1.25 0 0 1-1.768 0l-2.646-2.647a.75.75 0 0 1 1.06-1.06l2.47 2.47 2.47-2.47a.75.75 0 0 1 1.06 1.06Z"
      }));
    };
    SvgSelectMinor.displayName = "SelectMinor";
  }
});
var import_react59;
var SvgSortAscendingMajor;
var init_SortAscendingMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/SortAscendingMajor.svg.mjs"() {
    import_react59 = __toESM(require_react(), 1), SvgSortAscendingMajor = function(props) {
      return /* @__PURE__ */ import_react59.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react59.default.createElement("path", {
        fillRule: "evenodd",
        d: "M9.116 4.323a1.25 1.25 0 0 1 1.768 0l2.646 2.647a.75.75 0 0 1-1.06 1.06l-2.47-2.47-2.47 2.47a.75.75 0 1 1-1.06-1.06l2.646-2.647Z"
      }), /* @__PURE__ */ import_react59.default.createElement("path", {
        fillOpacity: 0.33,
        fillRule: "evenodd",
        d: "M9.116 15.677a1.25 1.25 0 0 0 1.768 0l2.646-2.647a.75.75 0 0 0-1.06-1.06l-2.47 2.47-2.47-2.47a.75.75 0 0 0-1.06 1.06l2.646 2.647Z"
      }));
    };
    SvgSortAscendingMajor.displayName = "SortAscendingMajor";
  }
});
var import_react60;
var SvgSortDescendingMajor;
var init_SortDescendingMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/SortDescendingMajor.svg.mjs"() {
    import_react60 = __toESM(require_react(), 1), SvgSortDescendingMajor = function(props) {
      return /* @__PURE__ */ import_react60.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react60.default.createElement("path", {
        fillOpacity: 0.33,
        fillRule: "evenodd",
        d: "M9.116 4.823a1.25 1.25 0 0 1 1.768 0l2.646 2.647a.75.75 0 0 1-1.06 1.06l-2.47-2.47-2.47 2.47a.75.75 0 1 1-1.06-1.06l2.646-2.647Z"
      }), /* @__PURE__ */ import_react60.default.createElement("path", {
        fillRule: "evenodd",
        d: "M9.116 15.177a1.25 1.25 0 0 0 1.768 0l2.646-2.647a.75.75 0 0 0-1.06-1.06l-2.47 2.47-2.47-2.47a.75.75 0 0 0-1.06 1.06l2.646 2.647Z"
      }));
    };
    SvgSortDescendingMajor.displayName = "SortDescendingMajor";
  }
});
var import_react61;
var SvgSortMinor;
var init_SortMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/SortMinor.svg.mjs"() {
    import_react61 = __toESM(require_react(), 1), SvgSortMinor = function(props) {
      return /* @__PURE__ */ import_react61.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react61.default.createElement("path", {
        d: "M7.75 6.06v7.69a.75.75 0 0 1-1.5 0v-7.69l-1.72 1.72a.75.75 0 0 1-1.06-1.06l3-3a.75.75 0 0 1 1.06 0l3 3a.75.75 0 1 1-1.06 1.06l-1.72-1.72Z"
      }), /* @__PURE__ */ import_react61.default.createElement("path", {
        d: "M13.75 6.25a.75.75 0 0 0-1.5 0v7.69l-1.72-1.72a.75.75 0 1 0-1.06 1.06l3 3a.75.75 0 0 0 1.06 0l3-3a.75.75 0 1 0-1.06-1.06l-1.72 1.72v-7.69Z"
      }));
    };
    SvgSortMinor.displayName = "SortMinor";
  }
});
var import_react62;
var SvgTickMinor;
var init_TickMinor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/TickMinor.svg.mjs"() {
    import_react62 = __toESM(require_react(), 1), SvgTickMinor = function(props) {
      return /* @__PURE__ */ import_react62.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react62.default.createElement("path", {
        fillRule: "evenodd",
        d: "M15.78 5.97a.75.75 0 0 1 0 1.06l-6.5 6.5a.75.75 0 0 1-1.06 0l-3.25-3.25a.75.75 0 1 1 1.06-1.06l2.72 2.72 5.97-5.97a.75.75 0 0 1 1.06 0Z"
      }));
    };
    SvgTickMinor.displayName = "TickMinor";
  }
});
var import_react63;
var SvgUploadMajor;
var init_UploadMajor_svg = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/icons/UploadMajor.svg.mjs"() {
    import_react63 = __toESM(require_react(), 1), SvgUploadMajor = function(props) {
      return /* @__PURE__ */ import_react63.default.createElement("svg", Object.assign({
        viewBox: "0 0 20 20"
      }, props), /* @__PURE__ */ import_react63.default.createElement("path", {
        d: "M16.5 6.26a.75.75 0 0 1-1.5 0v-.51a.75.75 0 0 0-.75-.75h-8.5a.75.75 0 0 0-.75.75v.51a.75.75 0 0 1-1.5 0v-.51a2.25 2.25 0 0 1 2.25-2.25h8.5a2.25 2.25 0 0 1 2.25 2.25v.51Z"
      }), /* @__PURE__ */ import_react63.default.createElement("path", {
        d: "M10.75 16.01a.75.75 0 0 1-1.5 0v-6.69l-1.72 1.72a.75.75 0 1 1-1.06-1.06l3-3a.75.75 0 0 1 1.06 0l3 3a.75.75 0 1 1-1.06 1.06l-1.72-1.72v6.69Z"
      }));
    };
    SvgUploadMajor.displayName = "UploadMajor";
  }
});
var import_react64;
var init_dist3 = __esm({
  "node_modules/@shopify/polaris/node_modules/@shopify/polaris-icons/dist/index.mjs"() {
    init_AlertMinor_svg();
    init_ArrowDownMinor_svg();
    init_ArrowLeftMinor_svg();
    init_ArrowRightMinor_svg();
    init_ArrowUpMinor_svg();
    init_CancelMajor_svg();
    init_CancelMinor_svg();
    init_CancelSmallMinor_svg();
    init_ChevronDownMinor_svg();
    init_ChevronLeftMinor_svg();
    init_ChevronRightMinor_svg();
    init_ChevronUpMinor_svg();
    init_CircleAlertMajor_svg();
    init_CircleCancelMinor_svg();
    init_Columns3Minor_svg();
    init_DeleteMinor_svg();
    init_DiamondAlertMinor_svg();
    init_DuplicateMinor_svg();
    init_EditMinor_svg();
    init_EnableSelectionMinor_svg();
    init_ExitMajor_svg();
    init_FilterMinor_svg();
    init_HorizontalDotsMinor_svg();
    init_InfoMinor_svg();
    init_MinusMinor_svg();
    init_MobileCancelMajor_svg();
    init_MobileHamburgerMajor_svg();
    init_PlayMinor_svg();
    init_PlusMinor_svg();
    init_RiskMajor_svg();
    init_RiskMinor_svg();
    init_SearchMinor_svg();
    init_SelectMinor_svg();
    init_SortAscendingMajor_svg();
    init_SortDescendingMajor_svg();
    init_SortMinor_svg();
    init_TickMinor_svg();
    init_UploadMajor_svg();
    import_react64 = __toESM(require_react(), 1);
  }
});
function isObject2(value) {
  let type = typeof value;
  return value != null && (type === "object" || type === "function");
}
var init_is_object2 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/is-object.js"() {
  }
});
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}
function variationName(name, value) {
  return `${name}${value.charAt(0).toUpperCase()}${value.slice(1)}`;
}
function sanitizeCustomProperties(styles130) {
  let nonNullValues = Object.entries(styles130).filter(([_, value]) => value != null);
  return nonNullValues.length ? Object.fromEntries(nonNullValues) : void 0;
}
function getResponsiveProps(componentName, componentProp, tokenSubgroup, responsiveProp) {
  if (!responsiveProp)
    return {};
  let result;
  return isObject2(responsiveProp) ? result = Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, aliasOrScale]) => [breakpointAlias, `var(--p-${tokenSubgroup}-${aliasOrScale})`])) : result = {
    [breakpointsAliases[0]]: `var(--p-${tokenSubgroup}-${responsiveProp})`
  }, Object.fromEntries(Object.entries(result).map(([breakpointAlias, value]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, value]));
}
function getResponsiveValue(componentName, componentProp, responsiveProp) {
  return responsiveProp ? isObject2(responsiveProp) ? Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, responsiveValue]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, responsiveValue])) : {
    [`--pc-${componentName}-${componentProp}-${breakpointsAliases[0]}`]: responsiveProp
  } : {};
}
var init_css = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/css.js"() {
    init_build();
    init_is_object2();
  }
});
function isElementInViewport(element) {
  let {
    top,
    left,
    bottom,
    right
  } = element.getBoundingClientRect();
  return top >= 0 && right <= window.innerWidth && bottom <= window.innerHeight && left >= 0;
}
var init_is_element_in_viewport = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/is-element-in-viewport.js"() {
  }
});
function nextFocusableNode(node, filter) {
  let allFocusableElements = [...document.querySelectorAll(FOCUSABLE_SELECTOR)], sliceLocation = allFocusableElements.indexOf(node) + 1, focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);
  for (let focusableElement of focusableElementsAfterNode)
    if (isElementInViewport(focusableElement) && (!filter || filter && filter(focusableElement)))
      return focusableElement;
  return null;
}
function findFirstFocusableNode(element, onlyDescendants = true) {
  return !onlyDescendants && matches(element, FOCUSABLE_SELECTOR) ? element : element.querySelector(FOCUSABLE_SELECTOR);
}
function findFirstFocusableNodeIncludingDisabled(element) {
  let focusableSelector = "a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]";
  return matches(element, focusableSelector) ? element : element.querySelector(focusableSelector);
}
function focusFirstFocusableNode(element, onlyDescendants = true) {
  findFirstFocusableNode(element, onlyDescendants)?.focus();
}
function focusNextFocusableNode(node, filter) {
  let nextFocusable = nextFocusableNode(node, filter);
  return nextFocusable && nextFocusable instanceof HTMLElement ? (nextFocusable.focus(), true) : false;
}
function findFirstKeyboardFocusableNode(element, onlyDescendants = true) {
  return !onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS) ? element : element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
}
function focusFirstKeyboardFocusableNode(element, onlyDescendants = true) {
  let firstFocusable = findFirstKeyboardFocusableNode(element, onlyDescendants);
  return firstFocusable ? (firstFocusable.focus(), true) : false;
}
function findLastKeyboardFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS))
    return element;
  let allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
  return allFocusable[allFocusable.length - 1];
}
function focusLastKeyboardFocusableNode(element, onlyDescendants = true) {
  let lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);
  return lastFocusable ? (lastFocusable.focus(), true) : false;
}
function wrapFocusPreviousFocusableMenuItem(parentElement, currentFocusedElement) {
  let allFocusableChildren = getMenuFocusableDescendants(parentElement), currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
  currentItemIdx === -1 ? allFocusableChildren[0].focus() : allFocusableChildren[(currentItemIdx - 1 + allFocusableChildren.length) % allFocusableChildren.length].focus();
}
function wrapFocusNextFocusableMenuItem(parentElement, currentFocusedElement) {
  let allFocusableChildren = getMenuFocusableDescendants(parentElement), currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
  currentItemIdx === -1 ? allFocusableChildren[0].focus() : allFocusableChildren[(currentItemIdx + 1) % allFocusableChildren.length].focus();
}
function getMenuFocusableDescendants(element) {
  return element.querySelectorAll(MENUITEM_FOCUSABLE_SELECTORS);
}
function getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement) {
  let currentItemIdx = 0;
  for (let focusableChild of allFocusableChildren) {
    if (focusableChild === currentFocusedElement)
      break;
    currentItemIdx++;
  }
  return currentItemIdx === allFocusableChildren.length ? -1 : currentItemIdx;
}
function matches(node, selector) {
  if (node.matches)
    return node.matches(selector);
  let matches2 = (node.ownerDocument || document).querySelectorAll(selector), i = matches2.length;
  for (; --i >= 0 && matches2.item(i) !== node; )
    return i > -1;
}
var FOCUSABLE_SELECTOR;
var KEYBOARD_FOCUSABLE_SELECTORS;
var MENUITEM_FOCUSABLE_SELECTORS;
var handleMouseUpByBlurring;
var init_focus = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/focus.js"() {
    init_is_element_in_viewport();
    FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]', KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]:not([tabindex="-1"])', MENUITEM_FOCUSABLE_SELECTORS = 'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])', handleMouseUpByBlurring = ({
      currentTarget
    }) => currentTarget.blur();
  }
});
var styles;
var init_Button_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Button/Button.scss.js"() {
    styles = {
      Button: "Polaris-Button",
      pressed: "Polaris-Button--pressed",
      Content: "Polaris-Button__Content",
      variantPrimary: "Polaris-Button--variantPrimary",
      variantTertiary: "Polaris-Button--variantTertiary",
      variantPlain: "Polaris-Button--variantPlain",
      variantMonochromePlain: "Polaris-Button--variantMonochromePlain",
      disabled: "Polaris-Button--disabled",
      textAlignLeft: "Polaris-Button--textAlignLeft",
      textAlignStart: "Polaris-Button--textAlignStart",
      textAlignCenter: "Polaris-Button--textAlignCenter",
      textAlignRight: "Polaris-Button--textAlignRight",
      textAlignEnd: "Polaris-Button--textAlignEnd",
      Icon: "Polaris-Button__Icon",
      fullWidth: "Polaris-Button--fullWidth",
      hidden: "Polaris-Button--hidden",
      Spinner: "Polaris-Button__Spinner",
      toneCritical: "Polaris-Button--toneCritical",
      toneSuccess: "Polaris-Button--toneSuccess",
      iconOnly: "Polaris-Button--iconOnly",
      loading: "Polaris-Button--loading",
      removeUnderline: "Polaris-Button--removeUnderline",
      sizeMicro: "Polaris-Button--sizeMicro",
      sizeSlim: "Polaris-Button--sizeSlim",
      sizeLarge: "Polaris-Button--sizeLarge",
      Text: "Polaris-Button__Text"
    };
  }
});
var styles2;
var init_Icon_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Icon/Icon.scss.js"() {
    styles2 = {
      Icon: "Polaris-Icon",
      toneInherit: "Polaris-Icon--toneInherit",
      toneBase: "Polaris-Icon--toneBase",
      toneSubdued: "Polaris-Icon--toneSubdued",
      toneCaution: "Polaris-Icon--toneCaution",
      toneWarning: "Polaris-Icon--toneWarning",
      toneCritical: "Polaris-Icon--toneCritical",
      toneInteractive: "Polaris-Icon--toneInteractive",
      toneInfo: "Polaris-Icon--toneInfo",
      toneSuccess: "Polaris-Icon--toneSuccess",
      tonePrimary: "Polaris-Icon--tonePrimary",
      toneEmphasis: "Polaris-Icon--toneEmphasis",
      toneMagic: "Polaris-Icon--toneMagic",
      toneTextCaution: "Polaris-Icon--toneTextCaution",
      toneTextWarning: "Polaris-Icon--toneTextWarning",
      toneTextCritical: "Polaris-Icon--toneTextCritical",
      toneTextInfo: "Polaris-Icon--toneTextInfo",
      toneTextPrimary: "Polaris-Icon--toneTextPrimary",
      toneTextSuccess: "Polaris-Icon--toneTextSuccess",
      toneTextMagic: "Polaris-Icon--toneTextMagic",
      Svg: "Polaris-Icon__Svg",
      Img: "Polaris-Icon__Img",
      Placeholder: "Polaris-Icon__Placeholder"
    };
  }
});
var styles3;
var init_Text_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Text/Text.scss.js"() {
    styles3 = {
      root: "Polaris-Text--root",
      block: "Polaris-Text--block",
      truncate: "Polaris-Text--truncate",
      visuallyHidden: "Polaris-Text--visuallyHidden",
      start: "Polaris-Text--start",
      center: "Polaris-Text--center",
      end: "Polaris-Text--end",
      justify: "Polaris-Text--justify",
      success: "Polaris-Text--success",
      critical: "Polaris-Text--critical",
      caution: "Polaris-Text--caution",
      subdued: "Polaris-Text--subdued",
      magic: "Polaris-Text--magic",
      "magic-subdued": "Polaris-Text__magic--subdued",
      "text-inverse": "Polaris-Text__text--inverse",
      headingSm: "Polaris-Text--headingSm",
      headingMd: "Polaris-Text--headingMd",
      headingLg: "Polaris-Text--headingLg",
      headingXl: "Polaris-Text--headingXl",
      heading2xl: "Polaris-Text--heading2xl",
      heading3xl: "Polaris-Text--heading3xl",
      bodyXs: "Polaris-Text--bodyXs",
      bodySm: "Polaris-Text--bodySm",
      bodyMd: "Polaris-Text--bodyMd",
      bodyLg: "Polaris-Text--bodyLg",
      regular: "Polaris-Text--regular",
      medium: "Polaris-Text--medium",
      semibold: "Polaris-Text--semibold",
      bold: "Polaris-Text--bold",
      break: "Polaris-Text--break",
      numeric: "Polaris-Text--numeric",
      "line-through": "Polaris-Text__line--through"
    };
  }
});
var import_react65;
var Text;
var init_Text = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Text/Text.js"() {
    import_react65 = __toESM(require_react());
    init_css();
    init_Text_scss();
    Text = ({
      alignment,
      as,
      breakWord,
      children,
      tone,
      fontWeight,
      id,
      numeric = false,
      truncate = false,
      variant,
      visuallyHidden = false,
      textDecorationLine
    }) => {
      let Component9 = as || (visuallyHidden ? "span" : "p"), className = classNames(styles3.root, variant && styles3[variant], fontWeight && styles3[fontWeight], (alignment || truncate) && styles3.block, alignment && styles3[alignment], breakWord && styles3.break, tone && styles3[tone], numeric && styles3.numeric, truncate && styles3.truncate, visuallyHidden && styles3.visuallyHidden, textDecorationLine && styles3[textDecorationLine]);
      return /* @__PURE__ */ import_react65.default.createElement(Component9, Object.assign({
        className
      }, id && {
        id
      }), children);
    };
  }
});
function Icon({
  source,
  tone,
  accessibilityLabel
}) {
  let sourceType;
  typeof source == "function" ? sourceType = "function" : source === "placeholder" ? sourceType = "placeholder" : sourceType = "external", tone && sourceType === "external" && console.warn("Recoloring external SVGs is not supported. Set the intended color on your SVG instead.");
  let className = classNames(styles2.Icon, tone && styles2[variationName("tone", tone)]), SourceComponent = source, contentMarkup = {
    function: /* @__PURE__ */ import_react66.default.createElement(SourceComponent, {
      className: styles2.Svg,
      focusable: "false",
      "aria-hidden": "true"
    }),
    placeholder: /* @__PURE__ */ import_react66.default.createElement("div", {
      className: styles2.Placeholder
    }),
    external: /* @__PURE__ */ import_react66.default.createElement("img", {
      className: styles2.Img,
      src: `data:image/svg+xml;utf8,${source}`,
      alt: "",
      "aria-hidden": "true"
    })
  };
  return /* @__PURE__ */ import_react66.default.createElement("span", {
    className
  }, accessibilityLabel && /* @__PURE__ */ import_react66.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, accessibilityLabel), contentMarkup[sourceType]);
}
var import_react66;
var init_Icon = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Icon/Icon.js"() {
    import_react66 = __toESM(require_react());
    init_css();
    init_Icon_scss();
    init_Text();
  }
});
var styles4;
var init_Spinner_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Spinner/Spinner.scss.js"() {
    styles4 = {
      Spinner: "Polaris-Spinner",
      sizeSmall: "Polaris-Spinner--sizeSmall",
      sizeLarge: "Polaris-Spinner--sizeLarge"
    };
  }
});
function Spinner({
  size: size2 = "large",
  accessibilityLabel,
  hasFocusableParent
}) {
  let isAfterInitialMount = useIsAfterInitialMount(), className = classNames(styles4.Spinner, size2 && styles4[variationName("size", size2)]), spinnerSVGMarkup = size2 === "large" ? /* @__PURE__ */ import_react67.default.createElement("svg", {
    viewBox: "0 0 44 44",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ import_react67.default.createElement("path", {
    d: "M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z"
  })) : /* @__PURE__ */ import_react67.default.createElement("svg", {
    viewBox: "0 0 20 20",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ import_react67.default.createElement("path", {
    d: "M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z"
  })), spanAttributes = {
    ...!hasFocusableParent && {
      role: "status"
    }
  }, accessibilityLabelMarkup = (isAfterInitialMount || !hasFocusableParent) && /* @__PURE__ */ import_react67.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, accessibilityLabel);
  return /* @__PURE__ */ import_react67.default.createElement(import_react67.default.Fragment, null, /* @__PURE__ */ import_react67.default.createElement("span", {
    className
  }, spinnerSVGMarkup), /* @__PURE__ */ import_react67.default.createElement("span", spanAttributes, accessibilityLabelMarkup));
}
var import_react67;
var init_Spinner = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Spinner/Spinner.js"() {
    import_react67 = __toESM(require_react());
    init_css();
    init_use_is_after_initial_mount();
    init_Spinner_scss();
    init_Text();
  }
});
function useDisableClick(disabled, handleClick) {
  let handleClickWrapper = (0, import_react68.useCallback)((event) => {
    disabled && (event.preventDefault(), event.stopPropagation());
  }, [disabled]);
  return disabled ? handleClickWrapper : handleClick;
}
var import_react68;
var init_use_disable_interaction = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-disable-interaction.js"() {
    import_react68 = __toESM(require_react());
  }
});
function useLink() {
  return (0, import_react69.useContext)(LinkContext);
}
var import_react69;
var init_hooks = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/link/hooks.js"() {
    import_react69 = __toESM(require_react());
    init_context5();
  }
});
var import_react70;
var UnstyledLink;
var init_UnstyledLink = __esm({
  "node_modules/@shopify/polaris/build/esm/components/UnstyledLink/UnstyledLink.js"() {
    import_react70 = __toESM(require_react());
    init_shared();
    init_hooks();
    UnstyledLink = /* @__PURE__ */ (0, import_react70.memo)(/* @__PURE__ */ (0, import_react70.forwardRef)(function(props, _ref) {
      let LinkComponent = useLink();
      if (LinkComponent)
        return /* @__PURE__ */ import_react70.default.createElement(LinkComponent, Object.assign({}, unstyled.props, props, {
          ref: _ref
        }));
      let {
        external,
        url,
        target: targetProp,
        ...rest
      } = props, target;
      external ? target = "_blank" : target = targetProp ?? void 0;
      let rel = target === "_blank" ? "noopener noreferrer" : void 0;
      return /* @__PURE__ */ import_react70.default.createElement("a", Object.assign({
        target
      }, rest, {
        href: url,
        rel
      }, unstyled.props, {
        ref: _ref
      }));
    }));
  }
});
function UnstyledButton({
  id,
  children,
  className,
  url,
  external,
  target,
  download,
  submit,
  disabled,
  loading,
  pressed,
  accessibilityLabel,
  role,
  ariaControls,
  ariaExpanded,
  ariaDescribedBy,
  ariaChecked,
  onClick,
  onFocus,
  onBlur,
  onKeyDown,
  onKeyPress,
  onKeyUp,
  onMouseEnter,
  onTouchStart,
  ...rest
}) {
  let buttonMarkup, commonProps = {
    id,
    className,
    "aria-label": accessibilityLabel
  }, interactiveProps = {
    ...commonProps,
    role,
    onClick,
    onFocus,
    onBlur,
    onMouseUp: handleMouseUpByBlurring,
    onMouseEnter,
    onTouchStart
  }, handleClick = useDisableClick(disabled, onClick);
  return url ? buttonMarkup = disabled ? (
    // Render an `<a>` so toggling disabled/enabled state changes only the
    // `href` attribute instead of replacing the whole element.
    /* @__PURE__ */ import_react71.default.createElement("a", commonProps, children)
  ) : /* @__PURE__ */ import_react71.default.createElement(UnstyledLink, Object.assign({}, interactiveProps, {
    url,
    external,
    target,
    download
  }, rest), children) : buttonMarkup = /* @__PURE__ */ import_react71.default.createElement("button", Object.assign({}, interactiveProps, {
    "aria-disabled": disabled,
    type: submit ? "submit" : "button",
    "aria-busy": loading ? true : void 0,
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-describedby": ariaDescribedBy,
    "aria-checked": ariaChecked,
    "aria-pressed": pressed,
    onKeyDown,
    onKeyUp,
    onKeyPress,
    onClick: handleClick,
    tabIndex: disabled ? -1 : void 0
  }, rest), children), buttonMarkup;
}
var import_react71;
var init_UnstyledButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/UnstyledButton/UnstyledButton.js"() {
    import_react71 = __toESM(require_react());
    init_focus();
    init_use_disable_interaction();
    init_UnstyledLink();
  }
});
var MissingAppProviderError;
var init_errors5 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/errors.js"() {
    MissingAppProviderError = class extends Error {
      constructor(message2 = "") {
        super(`${message2 && `${message2} `}Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.`), this.name = "MissingAppProviderError";
      }
    };
  }
});
function useI18n() {
  let i18n = (0, import_react72.useContext)(I18nContext);
  if (!i18n)
    throw new MissingAppProviderError("No i18n was provided.");
  return i18n;
}
var import_react72;
var init_hooks2 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/i18n/hooks.js"() {
    import_react72 = __toESM(require_react());
    init_errors5();
    init_context2();
  }
});
function Button({
  id,
  children,
  url,
  disabled,
  external,
  download,
  target,
  submit,
  loading,
  pressed,
  accessibilityLabel,
  role,
  ariaControls,
  ariaExpanded,
  ariaDescribedBy,
  ariaChecked,
  onClick,
  onFocus,
  onBlur,
  onKeyDown,
  onKeyPress,
  onKeyUp,
  onMouseEnter,
  onTouchStart,
  onPointerDown,
  icon,
  disclosure,
  removeUnderline,
  size: size2 = DEFAULT_SIZE,
  textAlign,
  fullWidth,
  dataPrimaryLink,
  tone,
  variant
}) {
  let i18n = useI18n(), isDisabled = disabled || loading, className = classNames(styles.Button, fullWidth && styles.fullWidth, icon && children == null && styles.iconOnly, isDisabled && styles.disabled, loading && styles.loading, pressed && !disabled && !url && styles.pressed, removeUnderline && styles.removeUnderline, size2 && size2 !== DEFAULT_SIZE && styles[variationName("size", size2)], textAlign && styles[variationName("textAlign", textAlign)], tone && styles[variationName("tone", tone)], variant && styles[variationName("variant", variant)]), disclosureMarkup = disclosure ? /* @__PURE__ */ import_react73.default.createElement("span", {
    className: styles.Icon
  }, /* @__PURE__ */ import_react73.default.createElement("div", {
    className: classNames(styles.DisclosureIcon, loading && styles.hidden)
  }, /* @__PURE__ */ import_react73.default.createElement(Icon, {
    source: loading ? "placeholder" : getDisclosureIconSource(disclosure, SvgChevronUpMinor, SvgChevronDownMinor)
  }))) : null, iconSource = isIconSource(icon) ? /* @__PURE__ */ import_react73.default.createElement(Icon, {
    source: loading ? "placeholder" : icon
  }) : icon, iconMarkup = iconSource ? /* @__PURE__ */ import_react73.default.createElement("span", {
    className: classNames(styles.Icon, loading && styles.hidden)
  }, iconSource) : null, childMarkup = children ? /* @__PURE__ */ import_react73.default.createElement("span", {
    className: classNames(styles.Text, removeUnderline && styles.removeUnderline),
    key: disabled ? "text-disabled" : "text"
  }, children) : null, spinnerSVGMarkup = loading ? /* @__PURE__ */ import_react73.default.createElement("span", {
    className: styles.Spinner
  }, /* @__PURE__ */ import_react73.default.createElement(Spinner, {
    size: "small",
    accessibilityLabel: i18n.translate("Polaris.Button.spinnerAccessibilityLabel")
  })) : null, commonProps = {
    id,
    className,
    accessibilityLabel,
    ariaDescribedBy,
    role,
    onClick,
    onFocus,
    onBlur,
    onMouseUp: handleMouseUpByBlurring,
    onMouseEnter,
    onTouchStart,
    "data-primary-link": dataPrimaryLink
  }, linkProps = {
    url,
    external,
    download,
    target
  }, actionProps = {
    submit,
    disabled: isDisabled,
    loading,
    ariaControls,
    ariaExpanded,
    ariaChecked,
    pressed,
    onKeyDown,
    onKeyUp,
    onKeyPress,
    onPointerDown
  };
  return /* @__PURE__ */ import_react73.default.createElement(UnstyledButton, Object.assign({}, commonProps, linkProps, actionProps), /* @__PURE__ */ import_react73.default.createElement("span", {
    className: styles.Content
  }, spinnerSVGMarkup, iconMarkup, childMarkup, disclosureMarkup));
}
function isIconSource(x) {
  return typeof x == "string" || typeof x == "object" && x.body || typeof x == "function";
}
function getDisclosureIconSource(disclosure, upIcon, downIcon) {
  return disclosure === "select" ? SvgSelectMinor : disclosure === "up" ? upIcon : downIcon;
}
var import_react73;
var DEFAULT_SIZE;
var init_Button = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Button/Button.js"() {
    import_react73 = __toESM(require_react());
    init_dist3();
    init_css();
    init_focus();
    init_Button_scss();
    init_Icon();
    init_Spinner();
    init_UnstyledButton();
    init_hooks2();
    DEFAULT_SIZE = "medium";
  }
});
function buttonsFrom(actions, overrides = {}) {
  return Array.isArray(actions) ? actions.map((action4, index) => buttonFrom(action4, overrides, index)) : buttonFrom(actions, overrides);
}
function buttonFrom({
  content,
  onAction,
  plain,
  destructive,
  ...action4
}, overrides, key) {
  let plainVariant = plain ? "plain" : void 0, destructiveVariant = destructive ? "primary" : void 0, tone = !overrides?.tone && destructive ? "critical" : overrides?.tone;
  return /* @__PURE__ */ import_react74.default.createElement(Button, Object.assign({
    key,
    onClick: onAction,
    tone,
    variant: plainVariant || destructiveVariant
  }, action4, overrides), content);
}
var import_react74;
var init_utils4 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Button/utils.js"() {
    import_react74 = __toESM(require_react());
    init_Button();
  }
});
var styles5;
var init_ShadowBevel_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ShadowBevel/ShadowBevel.scss.js"() {
    styles5 = {
      ShadowBevel: "Polaris-ShadowBevel"
    };
  }
});
function ShadowBevel(props) {
  let {
    as = "div",
    bevel = true,
    borderRadius,
    boxShadow,
    children,
    zIndex: zIndex2 = "0"
  } = props, Component9 = as;
  return /* @__PURE__ */ import_react75.default.createElement(Component9, {
    className: styles5.ShadowBevel,
    style: {
      "--pc-shadow-bevel-z-index": zIndex2,
      ...getResponsiveValue("shadow-bevel", "content", mapResponsiveProp(bevel, (bevel2) => bevel2 ? '""' : "none")),
      ...getResponsiveValue("shadow-bevel", "box-shadow", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-shadow-${boxShadow})` : "none")),
      ...getResponsiveValue("shadow-bevel", "border-radius", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-border-radius-${borderRadius})` : "var(--p-border-radius-0)"))
    }
  }, children);
}
function mapResponsiveProp(responsiveProp, callback) {
  return typeof responsiveProp == "boolean" ? callback(responsiveProp) : Object.fromEntries(Object.entries(responsiveProp).map(([breakpointsAlias, value]) => [breakpointsAlias, callback(value)]));
}
var import_react75;
var init_ShadowBevel = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ShadowBevel/ShadowBevel.js"() {
    import_react75 = __toESM(require_react());
    init_css();
    init_ShadowBevel_scss();
  }
});
var styles6;
var init_Box_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Box/Box.scss.js"() {
    styles6 = {
      listReset: "Polaris-Box--listReset",
      Box: "Polaris-Box",
      visuallyHidden: "Polaris-Box--visuallyHidden",
      printHidden: "Polaris-Box--printHidden"
    };
  }
});
var import_react76;
var Box;
var init_Box = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Box/Box.js"() {
    import_react76 = __toESM(require_react());
    init_css();
    init_Box_scss();
    Box = /* @__PURE__ */ (0, import_react76.forwardRef)(({
      as = "div",
      background,
      borderColor,
      borderStyle,
      borderWidth,
      borderBlockStartWidth,
      borderBlockEndWidth,
      borderInlineStartWidth,
      borderInlineEndWidth,
      borderRadius,
      borderEndStartRadius,
      borderEndEndRadius,
      borderStartStartRadius,
      borderStartEndRadius,
      children,
      color: color2,
      id,
      minHeight,
      minWidth,
      maxWidth,
      overflowX,
      overflowY,
      outlineColor,
      outlineStyle,
      outlineWidth,
      padding,
      paddingBlock,
      paddingBlockStart,
      paddingBlockEnd,
      paddingInline,
      paddingInlineStart,
      paddingInlineEnd,
      role,
      shadow: shadow2,
      tabIndex,
      width: width2,
      printHidden,
      visuallyHidden,
      position,
      insetBlockStart,
      insetBlockEnd,
      insetInlineStart,
      insetInlineEnd,
      zIndex: zIndex2,
      opacity,
      ...restProps
    }, ref) => {
      let borderStyleValue = borderStyle || (borderColor || borderWidth || borderBlockStartWidth || borderBlockEndWidth || borderInlineStartWidth || borderInlineEndWidth ? "solid" : void 0), outlineStyleValue = outlineStyle || (outlineColor || outlineWidth ? "solid" : void 0), style = {
        "--pc-box-color": color2 ? `var(--p-color-${color2})` : void 0,
        "--pc-box-background": background ? `var(--p-color-${background})` : void 0,
        // eslint-disable-next-line no-nested-ternary
        "--pc-box-border-color": borderColor ? borderColor === "transparent" ? "transparent" : `var(--p-color-${borderColor})` : void 0,
        "--pc-box-border-style": borderStyleValue,
        "--pc-box-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
        "--pc-box-border-end-start-radius": borderEndStartRadius ? `var(--p-border-radius-${borderEndStartRadius})` : void 0,
        "--pc-box-border-end-end-radius": borderEndEndRadius ? `var(--p-border-radius-${borderEndEndRadius})` : void 0,
        "--pc-box-border-start-start-radius": borderStartStartRadius ? `var(--p-border-radius-${borderStartStartRadius})` : void 0,
        "--pc-box-border-start-end-radius": borderStartEndRadius ? `var(--p-border-radius-${borderStartEndRadius})` : void 0,
        "--pc-box-border-width": borderWidth ? `var(--p-border-width-${borderWidth})` : void 0,
        "--pc-box-border-block-start-width": borderBlockStartWidth ? `var(--p-border-width-${borderBlockStartWidth})` : void 0,
        "--pc-box-border-block-end-width": borderBlockEndWidth ? `var(--p-border-width-${borderBlockEndWidth})` : void 0,
        "--pc-box-border-inline-start-width": borderInlineStartWidth ? `var(--p-border-width-${borderInlineStartWidth})` : void 0,
        "--pc-box-border-inline-end-width": borderInlineEndWidth ? `var(--p-border-width-${borderInlineEndWidth})` : void 0,
        "--pc-box-min-height": minHeight,
        "--pc-box-min-width": minWidth,
        "--pc-box-max-width": maxWidth,
        "--pc-box-outline-color": outlineColor ? `var(--p-color-${outlineColor})` : void 0,
        "--pc-box-outline-style": outlineStyleValue,
        "--pc-box-outline-width": outlineWidth ? `var(--p-border-width-${outlineWidth})` : void 0,
        "--pc-box-overflow-x": overflowX,
        "--pc-box-overflow-y": overflowY,
        ...getResponsiveProps("box", "padding-block-start", "space", paddingBlockStart || paddingBlock || padding),
        ...getResponsiveProps("box", "padding-block-end", "space", paddingBlockEnd || paddingBlock || padding),
        ...getResponsiveProps("box", "padding-inline-start", "space", paddingInlineStart || paddingInline || padding),
        ...getResponsiveProps("box", "padding-inline-end", "space", paddingInlineEnd || paddingInline || padding),
        "--pc-box-shadow": shadow2 ? `var(--p-shadow-${shadow2})` : void 0,
        "--pc-box-width": width2,
        position,
        "--pc-box-inset-block-start": insetBlockStart ? `var(--p-space-${insetBlockStart})` : void 0,
        "--pc-box-inset-block-end": insetBlockEnd ? `var(--p-space-${insetBlockEnd})` : void 0,
        "--pc-box-inset-inline-start": insetInlineStart ? `var(--p-space-${insetInlineStart})` : void 0,
        "--pc-box-inset-inline-end": insetInlineEnd ? `var(--p-space-${insetInlineEnd})` : void 0,
        zIndex: zIndex2,
        opacity
      }, className = classNames(styles6.Box, visuallyHidden && styles6.visuallyHidden, printHidden && styles6.printHidden, as === "ul" && styles6.listReset);
      return /* @__PURE__ */ import_react76.default.createElement(as, {
        className,
        id,
        ref,
        style: sanitizeCustomProperties(style),
        role,
        tabIndex,
        ...restProps
      }, children);
    });
    Box.displayName = "Box";
  }
});
var import_react77;
var Card;
var init_Card = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Card/Card.js"() {
    import_react77 = __toESM(require_react());
    init_breakpoints2();
    init_within_content_context();
    init_ShadowBevel();
    init_Box();
    Card = ({
      children,
      background = "bg-surface",
      padding = {
        xs: "400"
      },
      roundedAbove = "sm"
    }) => {
      let breakpoints2 = useBreakpoints(), defaultBorderRadius = "300", hasBorderRadius = Boolean(breakpoints2[`${roundedAbove}Up`]);
      return /* @__PURE__ */ import_react77.default.createElement(WithinContentContext.Provider, {
        value: true
      }, /* @__PURE__ */ import_react77.default.createElement(ShadowBevel, {
        boxShadow: "100",
        borderRadius: hasBorderRadius ? defaultBorderRadius : "0",
        zIndex: "32"
      }, /* @__PURE__ */ import_react77.default.createElement(Box, {
        background,
        padding,
        overflowX: "hidden",
        overflowY: "hidden",
        minHeight: "100%"
      }, children)));
    };
  }
});
var styles7;
var init_SettingAction_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SettingAction/SettingAction.scss.js"() {
    styles7 = {
      SettingAction: "Polaris-SettingAction",
      Setting: "Polaris-SettingAction__Setting",
      Action: "Polaris-SettingAction__Action"
    };
  }
});
function SettingAction({
  action: action4,
  children
}) {
  return /* @__PURE__ */ import_react78.default.createElement("div", {
    className: styles7.SettingAction
  }, /* @__PURE__ */ import_react78.default.createElement("div", {
    className: styles7.Setting
  }, children), /* @__PURE__ */ import_react78.default.createElement("div", {
    className: styles7.Action
  }, action4));
}
var import_react78;
var init_SettingAction = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SettingAction/SettingAction.js"() {
    import_react78 = __toESM(require_react());
    init_SettingAction_scss();
  }
});
var styles8;
var init_InlineStack_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/InlineStack/InlineStack.scss.js"() {
    styles8 = {
      InlineStack: "Polaris-InlineStack"
    };
  }
});
var import_react79;
var InlineStack;
var init_InlineStack = __esm({
  "node_modules/@shopify/polaris/build/esm/components/InlineStack/InlineStack.js"() {
    import_react79 = __toESM(require_react());
    init_css();
    init_InlineStack_scss();
    InlineStack = function({
      align,
      blockAlign,
      gap,
      wrap: wrap32 = true,
      children
    }) {
      let style = {
        "--pc-inline-stack-align": align,
        "--pc-inline-stack-block-align": blockAlign,
        "--pc-inline-stack-wrap": wrap32 ? "wrap" : "nowrap",
        ...getResponsiveProps("inline-stack", "gap", "space", gap)
      };
      return /* @__PURE__ */ import_react79.default.createElement("div", {
        className: styles8.InlineStack,
        style
      }, children);
    };
  }
});
var styles9;
var init_BlockStack_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/BlockStack/BlockStack.scss.js"() {
    styles9 = {
      BlockStack: "Polaris-BlockStack",
      listReset: "Polaris-BlockStack--listReset",
      fieldsetReset: "Polaris-BlockStack--fieldsetReset"
    };
  }
});
var import_react80;
var BlockStack;
var init_BlockStack = __esm({
  "node_modules/@shopify/polaris/build/esm/components/BlockStack/BlockStack.js"() {
    import_react80 = __toESM(require_react());
    init_css();
    init_BlockStack_scss();
    BlockStack = ({
      as = "div",
      children,
      align,
      inlineAlign,
      gap,
      id,
      reverseOrder = false,
      ...restProps
    }) => {
      let className = classNames(styles9.BlockStack, (as === "ul" || as === "ol") && styles9.listReset, as === "fieldset" && styles9.fieldsetReset), style = {
        "--pc-block-stack-align": align ? `${align}` : null,
        "--pc-block-stack-inline-align": inlineAlign ? `${inlineAlign}` : null,
        "--pc-block-stack-order": reverseOrder ? "column-reverse" : "column",
        ...getResponsiveProps("block-stack", "gap", "space", gap)
      };
      return /* @__PURE__ */ import_react80.default.createElement(as, {
        className,
        style: sanitizeCustomProperties(style),
        ...restProps
      }, children);
    };
  }
});
var styles10;
var init_Avatar_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Avatar/Avatar.scss.js"() {
    styles10 = {
      Avatar: "Polaris-Avatar",
      imageHasLoaded: "Polaris-Avatar--imageHasLoaded",
      Text: "Polaris-Avatar__Text",
      long: "Polaris-Avatar--long",
      hidden: "Polaris-Avatar--hidden",
      sizeXs: "Polaris-Avatar--sizeXs",
      sizeSm: "Polaris-Avatar--sizeSm",
      sizeMd: "Polaris-Avatar--sizeMd",
      sizeLg: "Polaris-Avatar--sizeLg",
      sizeXl: "Polaris-Avatar--sizeXl",
      styleOne: "Polaris-Avatar--styleOne",
      styleTwo: "Polaris-Avatar--styleTwo",
      styleThree: "Polaris-Avatar--styleThree",
      styleFour: "Polaris-Avatar--styleFour",
      styleFive: "Polaris-Avatar--styleFive",
      styleSix: "Polaris-Avatar--styleSix",
      styleSeven: "Polaris-Avatar--styleSeven",
      Image: "Polaris-Avatar__Image",
      Initials: "Polaris-Avatar__Initials",
      Svg: "Polaris-Avatar__Svg"
    };
  }
});
function Image({
  alt,
  sourceSet,
  source,
  crossOrigin,
  onLoad,
  className,
  ...rest
}) {
  let finalSourceSet = sourceSet ? sourceSet.map(({
    source: subSource,
    descriptor
  }) => `${subSource} ${descriptor}`).join(",") : null, handleLoad = (0, import_react81.useCallback)(() => {
    onLoad && onLoad();
  }, [onLoad]);
  return /* @__PURE__ */ import_react81.default.createElement("img", Object.assign({
    alt,
    src: source,
    crossOrigin,
    className,
    onLoad: handleLoad
  }, finalSourceSet ? {
    srcSet: finalSourceSet
  } : {}, rest));
}
var import_react81;
var init_Image = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Image/Image.js"() {
    import_react81 = __toESM(require_react());
  }
});
function xorHash(str) {
  let hash = 0;
  for (let char of str)
    hash ^= char.charCodeAt(0);
  return hash;
}
function styleClass(name) {
  return name ? STYLE_CLASSES[xorHash(name) % STYLE_CLASSES.length] : STYLE_CLASSES[0];
}
function Avatar({
  name,
  source,
  onError,
  initials,
  customer,
  size: size2 = "md",
  accessibilityLabel
}) {
  let i18n = useI18n(), isAfterInitialMount = useIsAfterInitialMount(), [status, setStatus] = (0, import_react82.useState)(Status.Pending);
  (0, import_react82.useEffect)(() => {
    setStatus(Status.Pending);
  }, [source]);
  let handleError = (0, import_react82.useCallback)(() => {
    setStatus(Status.Errored), onError && onError();
  }, [onError]), handleLoad = (0, import_react82.useCallback)(() => {
    setStatus(Status.Loaded);
  }, []), hasImage = source && status !== Status.Errored, nameString = name || initials, label;
  if (accessibilityLabel)
    label = accessibilityLabel;
  else if (name)
    label = name;
  else if (initials) {
    let splitInitials = initials.split("").join(" ");
    label = i18n.translate("Polaris.Avatar.labelWithInitials", {
      initials: splitInitials
    });
  }
  let className = classNames(styles10.Avatar, size2 && styles10[variationName("size", size2)], hasImage && status === Status.Loaded && styles10.imageHasLoaded, !customer && !hasImage && styles10[variationName("style", styleClass(nameString))]), textClassName = classNames(styles10.Text, (initials?.length || 0) > 2 && styles10.long), imageClassName = classNames(styles10.Image, status !== Status.Loaded && styles10.hidden), imageMarkUp = source && isAfterInitialMount && status !== Status.Errored ? /* @__PURE__ */ import_react82.default.createElement(Image, {
    className: imageClassName,
    source,
    alt: "",
    role: "presentation",
    onLoad: handleLoad,
    onError: handleError
  }) : null, verticalOffset = "0.35em", avatarPath = /* @__PURE__ */ import_react82.default.createElement(import_react82.default.Fragment, null, /* @__PURE__ */ import_react82.default.createElement("path", {
    fill: "none",
    d: "M25.5 13.5C25.5 16.5376 23.0376 19 20 19C16.9624 19 14.5 16.5376 14.5 13.5C14.5 10.4624 16.9624 8 20 8C23.0376 8 25.5 10.4624 25.5 13.5Z",
    stroke: "currentColor",
    strokeWidth: avatarStrokeWidth[size2]
  }), /* @__PURE__ */ import_react82.default.createElement("path", {
    fill: "none",
    d: "M10.3433 29.682L9.47 31.254C9.03481 32.0373 9.60125 33 10.4974 33H29.5026C30.3988 33 30.9652 32.0373 30.53 31.254L29.6567 29.682C27.7084 26.175 24.0119 24 20 24C15.9882 24 12.2916 26.175 10.3433 29.682Z",
    stroke: "currentColor",
    strokeWidth: avatarStrokeWidth[size2],
    strokeLinecap: "round",
    strokeLinejoin: "round"
  })), avatarBody = customer || !initials ? avatarPath : /* @__PURE__ */ import_react82.default.createElement("text", {
    className: textClassName,
    x: "50%",
    y: "50%",
    dy: verticalOffset,
    fill: "currentColor",
    textAnchor: "middle"
  }, initials), svgMarkup = hasImage ? null : /* @__PURE__ */ import_react82.default.createElement("span", {
    className: styles10.Initials
  }, /* @__PURE__ */ import_react82.default.createElement("svg", {
    className: styles10.Svg,
    viewBox: "0 0 40 40"
  }, avatarBody));
  return /* @__PURE__ */ import_react82.default.createElement("span", {
    "aria-label": label,
    role: label ? "img" : "presentation",
    className
  }, svgMarkup, imageMarkUp);
}
var import_react82;
var Status;
var STYLE_CLASSES;
var avatarStrokeWidth;
var init_Avatar = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Avatar/Avatar.js"() {
    import_react82 = __toESM(require_react());
    init_css();
    init_use_is_after_initial_mount();
    init_Avatar_scss();
    init_hooks2();
    init_Image();
    (function(Status2) {
      Status2.Pending = "PENDING", Status2.Loaded = "LOADED", Status2.Errored = "ERRORED";
    })(Status || (Status = {}));
    STYLE_CLASSES = ["one", "two", "three", "four", "five", "six", "seven"], avatarStrokeWidth = {
      xs: "3",
      sm: "2.5",
      md: "2.5",
      lg: "2.5",
      xl: "2"
    };
  }
});
function AccountConnection({
  connected = false,
  action: action4,
  avatarUrl,
  accountName = "",
  title,
  details,
  termsOfService
}) {
  let breakpoints2 = useBreakpoints(), initials = accountName ? accountName.split(/\s+/).map((name) => name[0]).join("") : void 0, avatarMarkup = connected ? /* @__PURE__ */ import_react83.default.createElement("span", null, /* @__PURE__ */ import_react83.default.createElement(Avatar, {
    accessibilityLabel: "",
    name: accountName,
    initials,
    source: avatarUrl
  })) : null, titleContent = title || accountName, titleMarkup = /* @__PURE__ */ import_react83.default.createElement(Text, {
    as: "h2",
    variant: "headingSm"
  }, titleContent), detailsMarkup = details ? /* @__PURE__ */ import_react83.default.createElement(Text, {
    as: "span",
    tone: "subdued"
  }, details) : null, termsOfServiceMarkup = termsOfService ? /* @__PURE__ */ import_react83.default.createElement(Box, {
    paddingBlockStart: breakpoints2.mdUp ? "400" : "500"
  }, termsOfService) : null, actionElement = action4 ? buttonFrom(action4, {
    variant: connected ? void 0 : "primary"
  }) : null;
  return /* @__PURE__ */ import_react83.default.createElement(Card, null, /* @__PURE__ */ import_react83.default.createElement(SettingAction, {
    action: actionElement
  }, /* @__PURE__ */ import_react83.default.createElement(InlineStack, {
    gap: "400"
  }, avatarMarkup, /* @__PURE__ */ import_react83.default.createElement(BlockStack, {
    gap: "100"
  }, titleMarkup, detailsMarkup))), termsOfServiceMarkup);
}
var import_react83;
var init_AccountConnection = __esm({
  "node_modules/@shopify/polaris/build/esm/components/AccountConnection/AccountConnection.js"() {
    import_react83 = __toESM(require_react());
    init_breakpoints2();
    init_utils4();
    init_Card();
    init_SettingAction();
    init_InlineStack();
    init_BlockStack();
    init_Avatar();
    init_Box();
    init_Text();
  }
});
function FilterActionsProvider({
  children,
  filterActions
}) {
  return /* @__PURE__ */ import_react84.default.createElement(FilterActionsContext.Provider, {
    value: filterActions
  }, children);
}
var import_react84;
var FilterActionsContext;
var init_FilterActionsProvider = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FilterActionsProvider/FilterActionsProvider.js"() {
    import_react84 = __toESM(require_react()), FilterActionsContext = /* @__PURE__ */ (0, import_react84.createContext)(false);
  }
});
var styles11;
var init_ActionList_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionList/ActionList.scss.js"() {
    styles11 = {
      Item: "Polaris-ActionList__Item",
      default: "Polaris-ActionList--default",
      active: "Polaris-ActionList--active",
      destructive: "Polaris-ActionList--destructive",
      disabled: "Polaris-ActionList--disabled",
      Prefix: "Polaris-ActionList__Prefix",
      Suffix: "Polaris-ActionList__Suffix",
      indented: "Polaris-ActionList--indented",
      menu: "Polaris-ActionList--menu",
      Text: "Polaris-ActionList__Text"
    };
  }
});
var import_react85;
var WithinFilterContext;
var init_within_filter_context = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/within-filter-context.js"() {
    import_react85 = __toESM(require_react()), WithinFilterContext = /* @__PURE__ */ (0, import_react85.createContext)(false);
  }
});
var styles12;
var init_Badge_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Badge/Badge.scss.js"() {
    styles12 = {
      Badge: "Polaris-Badge",
      toneSuccess: "Polaris-Badge--toneSuccess",
      "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
      toneInfo: "Polaris-Badge--toneInfo",
      "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
      toneAttention: "Polaris-Badge--toneAttention",
      "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
      toneWarning: "Polaris-Badge--toneWarning",
      "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
      toneCritical: "Polaris-Badge--toneCritical",
      "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
      toneNew: "Polaris-Badge--toneNew",
      toneMagic: "Polaris-Badge--toneMagic",
      "toneRead-only": "Polaris-Badge__toneRead--only",
      toneEnabled: "Polaris-Badge--toneEnabled",
      sizeLarge: "Polaris-Badge--sizeLarge",
      withinFilter: "Polaris-Badge--withinFilter",
      Icon: "Polaris-Badge__Icon",
      PipContainer: "Polaris-Badge__PipContainer"
    };
  }
});
var ToneValue;
var ProgressValue;
var init_types2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Badge/types.js"() {
    (function(ToneValue2) {
      ToneValue2.Info = "info", ToneValue2.Success = "success", ToneValue2.Warning = "warning", ToneValue2.Critical = "critical", ToneValue2.Attention = "attention", ToneValue2.New = "new", ToneValue2.Magic = "magic", ToneValue2.InfoStrong = "info-strong", ToneValue2.SuccessStrong = "success-strong", ToneValue2.WarningStrong = "warning-strong", ToneValue2.CriticalStrong = "critical-strong", ToneValue2.AttentionStrong = "attention-strong", ToneValue2.ReadOnly = "read-only", ToneValue2.Enabled = "enabled";
    })(ToneValue || (ToneValue = {}));
    (function(ProgressValue2) {
      ProgressValue2.Incomplete = "incomplete", ProgressValue2.PartiallyComplete = "partiallyComplete", ProgressValue2.Complete = "complete";
    })(ProgressValue || (ProgressValue = {}));
  }
});
function getDefaultAccessibilityLabel(i18n, progress, tone) {
  let progressLabel = "", toneLabel = "";
  if (!progress && !tone)
    return "";
  switch (progress) {
    case ProgressValue.Incomplete:
      progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.incomplete");
      break;
    case ProgressValue.PartiallyComplete:
      progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.partiallyComplete");
      break;
    case ProgressValue.Complete:
      progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.complete");
      break;
  }
  switch (tone) {
    case ToneValue.Info:
    case ToneValue.InfoStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.info");
      break;
    case ToneValue.Success:
    case ToneValue.SuccessStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.success");
      break;
    case ToneValue.Warning:
    case ToneValue.WarningStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.warning");
      break;
    case ToneValue.Critical:
    case ToneValue.CriticalStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.critical");
      break;
    case ToneValue.Attention:
    case ToneValue.AttentionStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.attention");
      break;
    case ToneValue.New:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.new");
      break;
    case ToneValue.ReadOnly:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.readOnly");
      break;
    case ToneValue.Enabled:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.enabled");
      break;
  }
  return !tone && progress ? progressLabel : tone && !progress ? toneLabel : i18n.translate("Polaris.Badge.progressAndTone", {
    progressLabel,
    toneLabel
  });
}
var init_utils5 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Badge/utils.js"() {
    init_types2();
  }
});
var styles13;
var init_Pip_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Badge/components/Pip/Pip.scss.js"() {
    styles13 = {
      Pip: "Polaris-Badge-Pip",
      toneInfo: "Polaris-Badge-Pip--toneInfo",
      toneSuccess: "Polaris-Badge-Pip--toneSuccess",
      toneNew: "Polaris-Badge-Pip--toneNew",
      toneAttention: "Polaris-Badge-Pip--toneAttention",
      toneWarning: "Polaris-Badge-Pip--toneWarning",
      toneCritical: "Polaris-Badge-Pip--toneCritical",
      progressIncomplete: "Polaris-Badge-Pip--progressIncomplete",
      progressPartiallyComplete: "Polaris-Badge-Pip--progressPartiallyComplete",
      progressComplete: "Polaris-Badge-Pip--progressComplete"
    };
  }
});
function Pip({
  tone,
  progress = "complete",
  accessibilityLabelOverride
}) {
  let i18n = useI18n(), className = classNames(styles13.Pip, tone && styles13[variationName("tone", tone)], progress && styles13[variationName("progress", progress)]), accessibilityLabel = accessibilityLabelOverride || getDefaultAccessibilityLabel(i18n, progress, tone);
  return /* @__PURE__ */ import_react86.default.createElement("span", {
    className
  }, /* @__PURE__ */ import_react86.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, accessibilityLabel));
}
var import_react86;
var init_Pip = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Badge/components/Pip/Pip.js"() {
    import_react86 = __toESM(require_react());
    init_css();
    init_utils5();
    init_Pip_scss();
    init_hooks2();
    init_Text();
  }
});
function Badge({
  children,
  tone,
  progress,
  icon,
  size: size2 = DEFAULT_SIZE2,
  toneAndProgressLabelOverride
}) {
  let i18n = useI18n(), withinFilter = (0, import_react87.useContext)(WithinFilterContext), className = classNames(styles12.Badge, tone && styles12[variationName("tone", tone)], size2 && size2 !== DEFAULT_SIZE2 && styles12[variationName("size", size2)], withinFilter && styles12.withinFilter), accessibilityLabel = toneAndProgressLabelOverride || getDefaultAccessibilityLabel(i18n, progress, tone), accessibilityMarkup = Boolean(accessibilityLabel) && /* @__PURE__ */ import_react87.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, accessibilityLabel);
  return progress && !icon && (accessibilityMarkup = /* @__PURE__ */ import_react87.default.createElement("span", {
    className: styles12.Icon
  }, /* @__PURE__ */ import_react87.default.createElement(Icon, {
    accessibilityLabel,
    source: progressIconMap[progress]
  }))), /* @__PURE__ */ import_react87.default.createElement("span", {
    className
  }, accessibilityMarkup, icon && /* @__PURE__ */ import_react87.default.createElement("span", {
    className: styles12.Icon
  }, /* @__PURE__ */ import_react87.default.createElement(Icon, {
    source: icon
  })), children && /* @__PURE__ */ import_react87.default.createElement(Text, {
    as: "span",
    variant: "bodySm",
    fontWeight: tone === "new" ? "medium" : void 0
  }, children));
}
var import_react87;
var DEFAULT_SIZE2;
var progressIconMap;
var init_Badge = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Badge/Badge.js"() {
    import_react87 = __toESM(require_react());
    init_css();
    init_within_filter_context();
    init_Badge_scss();
    init_utils5();
    init_Pip();
    init_hooks2();
    init_Icon();
    init_Text();
    DEFAULT_SIZE2 = "medium", progressIconMap = {
      complete: () => /* @__PURE__ */ import_react87.default.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ import_react87.default.createElement("path", {
        d: "M6 10c0-.93 0-1.395.102-1.776a3 3 0 0 1 2.121-2.122C8.605 6 9.07 6 10 6c.93 0 1.395 0 1.776.102a3 3 0 0 1 2.122 2.122C14 8.605 14 9.07 14 10s0 1.395-.102 1.777a3 3 0 0 1-2.122 2.12C11.395 14 10.93 14 10 14s-1.395 0-1.777-.102a3 3 0 0 1-2.12-2.121C6 11.395 6 10.93 6 10Z"
      })),
      partiallyComplete: () => /* @__PURE__ */ import_react87.default.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ import_react87.default.createElement("path", {
        fillRule: "evenodd",
        d: "m8.888 6.014-.017-.018-.02.02c-.253.013-.45.038-.628.086a3 3 0 0 0-2.12 2.122C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.121 2.12C8.605 14 9.07 14 10 14c.93 0 1.395 0 1.776-.102a3 3 0 0 0 2.122-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.122-2.122C11.395 6 10.93 6 10 6c-.475 0-.829 0-1.112.014ZM8.446 7.34a1.75 1.75 0 0 0-1.041.94l4.314 4.315c.443-.2.786-.576.941-1.042L8.446 7.34Zm4.304 2.536L10.124 7.25c.908.001 1.154.013 1.329.06a1.75 1.75 0 0 1 1.237 1.237c.047.175.059.42.06 1.329ZM8.547 12.69c.182.05.442.06 1.453.06h.106L7.25 9.894V10c0 1.01.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237Z"
      })),
      incomplete: () => /* @__PURE__ */ import_react87.default.createElement("svg", {
        viewBox: "0 0 20 20"
      }, /* @__PURE__ */ import_react87.default.createElement("path", {
        fillRule: "evenodd",
        d: "M8.547 12.69c.183.05.443.06 1.453.06s1.27-.01 1.453-.06a1.75 1.75 0 0 0 1.237-1.237c.05-.182.06-.443.06-1.453s-.01-1.27-.06-1.453a1.75 1.75 0 0 0-1.237-1.237c-.182-.05-.443-.06-1.453-.06s-1.27.01-1.453.06A1.75 1.75 0 0 0 7.31 8.547c-.05.183-.06.443-.06 1.453s.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237ZM6.102 8.224C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.122 2.12C8.605 14 9.07 14 10 14s1.395 0 1.777-.102a3 3 0 0 0 2.12-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.121-2.122C11.395 6 10.93 6 10 6c-.93 0-1.395 0-1.776.102a3 3 0 0 0-2.122 2.122Z"
      }))
    };
    Badge.Pip = Pip;
  }
});
function useToggle(initialState) {
  let [value, setState] = (0, import_react88.useState)(initialState);
  return {
    value,
    toggle: (0, import_react88.useCallback)(() => setState((state) => !state), []),
    setTrue: (0, import_react88.useCallback)(() => setState(true), []),
    setFalse: (0, import_react88.useCallback)(() => setState(false), [])
  };
}
var import_react88;
var init_use_toggle = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-toggle.js"() {
    import_react88 = __toESM(require_react());
  }
});
var styles14;
var init_Tooltip_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tooltip/Tooltip.scss.js"() {
    styles14 = {
      TooltipContainer: "Polaris-Tooltip__TooltipContainer",
      HasUnderline: "Polaris-Tooltip__HasUnderline"
    };
  }
});
function useEphemeralPresenceManager() {
  let ephemeralPresenceManager = (0, import_react89.useContext)(EphemeralPresenceManagerContext);
  if (!ephemeralPresenceManager)
    throw new Error("No ephemeral presence manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  return ephemeralPresenceManager;
}
function useReadOnlyEphemeralPresenceManager() {
  let {
    presenceList,
    presenceCounter
  } = useEphemeralPresenceManager();
  return {
    presenceList,
    presenceCounter
  };
}
var import_react89;
var init_hooks3 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/ephemeral-presence-manager/hooks.js"() {
    import_react89 = __toESM(require_react());
    init_context9();
  }
});
function usePortalsManager() {
  let portalsManager = (0, import_react90.useContext)(PortalsManagerContext);
  if (!portalsManager)
    throw new Error("No portals manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  return portalsManager;
}
var import_react90;
var init_hooks4 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/portals/hooks.js"() {
    import_react90 = __toESM(require_react());
    init_context7();
  }
});
function Portal({
  children,
  idPrefix = "",
  onPortalCreated = noop2
}) {
  let {
    container
  } = usePortalsManager(), uniqueId = (0, import_react91.useId)(), portalId = idPrefix !== "" ? `${idPrefix}-${uniqueId}` : uniqueId;
  return (0, import_react91.useEffect)(() => {
    onPortalCreated();
  }, [onPortalCreated]), container ? /* @__PURE__ */ (0, import_react_dom.createPortal)(/* @__PURE__ */ import_react91.default.createElement("div", {
    "data-portal-id": portalId
  }, children), container) : null;
}
function noop2() {
}
var import_react91;
var import_react_dom;
var init_Portal = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Portal/Portal.js"() {
    import_react91 = __toESM(require_react()), import_react_dom = __toESM(require_react_dom());
    init_hooks4();
  }
});
var styles15;
var init_TooltipOverlay_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tooltip/components/TooltipOverlay/TooltipOverlay.scss.js"() {
    styles15 = {
      TooltipOverlay: "Polaris-Tooltip-TooltipOverlay",
      Tail: "Polaris-Tooltip-TooltipOverlay__Tail",
      positionedAbove: "Polaris-Tooltip-TooltipOverlay--positionedAbove",
      measuring: "Polaris-Tooltip-TooltipOverlay--measuring",
      measured: "Polaris-Tooltip-TooltipOverlay--measured",
      instant: "Polaris-Tooltip-TooltipOverlay--instant",
      Content: "Polaris-Tooltip-TooltipOverlay__Content",
      default: "Polaris-Tooltip-TooltipOverlay--default",
      wide: "Polaris-Tooltip-TooltipOverlay--wide"
    };
  }
});
function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset = 0) {
  let activatorTop = activatorRect.top, activatorBottom = activatorTop + activatorRect.height, spaceAbove = activatorRect.top - topBarOffset, spaceBelow = containerRect.height - activatorRect.top - activatorRect.height, desiredHeight = overlayRect.height, verticalMargins = overlayMargins.activator + overlayMargins.container, minimumSpaceToScroll = overlayMargins.container, distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0), distanceToBottomScroll = containerRect.top + Math.min(containerRect.height, scrollableContainerRect.top + scrollableContainerRect.height) - (activatorRect.top + activatorRect.height), enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll, enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll, heightIfBelow = Math.min(spaceBelow, desiredHeight), heightIfAbove = Math.min(spaceAbove, desiredHeight), containerRectTop = fixed ? 0 : containerRect.top, positionIfAbove = {
    height: heightIfAbove - verticalMargins,
    top: activatorTop + containerRectTop - heightIfAbove,
    positioning: "above"
  }, positionIfBelow = {
    height: heightIfBelow - verticalMargins,
    top: activatorBottom + containerRectTop,
    positioning: "below"
  };
  return preferredPosition === "above" ? (enoughSpaceFromTopScroll || distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow : preferredPosition === "below" ? (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove : enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll ? spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow : distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
}
function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
  let maximum = containerRect.width - overlayRect.width;
  if (preferredAlignment === "left")
    return Math.min(maximum, Math.max(0, activatorRect.left - overlayMargins.horizontal));
  if (preferredAlignment === "right") {
    let activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
    return Math.min(maximum, Math.max(0, activatorRight - overlayMargins.horizontal));
  }
  return Math.min(maximum, Math.max(0, activatorRect.center.x - overlayRect.width / 2));
}
function rectIsOutsideOfRect(inner, outer) {
  let {
    center
  } = inner;
  return center.y < outer.top || center.y > outer.top + outer.height;
}
function intersectionWithViewport(rect, viewport = windowRect()) {
  let top = Math.max(rect.top, 0), left = Math.max(rect.left, 0), bottom = Math.min(rect.top + rect.height, viewport.height), right = Math.min(rect.left + rect.width, viewport.width);
  return new Rect({
    top,
    left,
    height: bottom - top,
    width: right - left
  });
}
function windowRect() {
  return new Rect({
    top: window.scrollY,
    left: window.scrollX,
    height: window.innerHeight,
    width: document.body.clientWidth
  });
}
var init_math = __esm({
  "node_modules/@shopify/polaris/build/esm/components/PositionedOverlay/utilities/math.js"() {
    init_geometry();
  }
});
var styles16;
var init_PositionedOverlay_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/PositionedOverlay/PositionedOverlay.scss.js"() {
    styles16 = {
      PositionedOverlay: "Polaris-PositionedOverlay",
      fixed: "Polaris-PositionedOverlay--fixed",
      calculating: "Polaris-PositionedOverlay--calculating",
      preventInteraction: "Polaris-PositionedOverlay--preventInteraction"
    };
  }
});
function useLazyRef(initialValue) {
  let lazyRef = (0, import_react92.useRef)(UNIQUE_IDENTIFIER);
  return lazyRef.current === UNIQUE_IDENTIFIER && (lazyRef.current = initialValue()), lazyRef;
}
var import_react92;
var UNIQUE_IDENTIFIER;
var init_use_lazy_ref = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-lazy-ref.js"() {
    import_react92 = __toESM(require_react()), UNIQUE_IDENTIFIER = Symbol("unique_identifier");
  }
});
function useComponentDidMount(callback) {
  let isAfterInitialMount = useIsAfterInitialMount(), hasInvokedLifeCycle = (0, import_react93.useRef)(false);
  if (isAfterInitialMount && !hasInvokedLifeCycle.current)
    return hasInvokedLifeCycle.current = true, callback();
}
var import_react93;
var init_use_component_did_mount = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-component-did-mount.js"() {
    import_react93 = __toESM(require_react());
    init_use_is_after_initial_mount();
  }
});
var import_react94;
var ScrollableContext;
var init_context10 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Scrollable/context.js"() {
    import_react94 = __toESM(require_react()), ScrollableContext = /* @__PURE__ */ (0, import_react94.createContext)(void 0);
  }
});
var styles17;
var init_Scrollable_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Scrollable/Scrollable.scss.js"() {
    styles17 = {
      Scrollable: "Polaris-Scrollable",
      hasTopShadow: "Polaris-Scrollable--hasTopShadow",
      hasBottomShadow: "Polaris-Scrollable--hasBottomShadow",
      horizontal: "Polaris-Scrollable--horizontal",
      vertical: "Polaris-Scrollable--vertical"
    };
  }
});
function ScrollTo() {
  let anchorNode = (0, import_react95.useRef)(null), scrollToPosition = (0, import_react95.useContext)(ScrollableContext);
  (0, import_react95.useEffect)(() => {
    !scrollToPosition || !anchorNode.current || scrollToPosition(anchorNode.current.offsetTop);
  }, [scrollToPosition]);
  let id = (0, import_react95.useId)();
  return /* @__PURE__ */ import_react95.default.createElement("a", {
    id,
    ref: anchorNode
  });
}
var import_react95;
var init_ScrollTo = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Scrollable/components/ScrollTo/ScrollTo.js"() {
    import_react95 = __toESM(require_react());
    init_context10();
  }
});
function prefersReducedMotion() {
  try {
    return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
  } catch {
    return false;
  }
}
function performScrollHint(elem) {
  if (!elem || prefersReducedMotion())
    return;
  let scrollableDistance = elem.scrollHeight - elem.clientHeight, distanceToPeek = Math.min(MAX_SCROLL_HINT_DISTANCE, scrollableDistance) - LOW_RES_BUFFER, goBackToTop = () => {
    requestAnimationFrame(() => {
      elem.scrollTop >= distanceToPeek && (elem.removeEventListener("scroll", goBackToTop), elem.scrollTo({
        top: 0,
        behavior: "smooth"
      }));
    });
  };
  elem.addEventListener("scroll", goBackToTop), elem.scrollTo({
    top: MAX_SCROLL_HINT_DISTANCE,
    behavior: "smooth"
  });
}
var import_react96;
var MAX_SCROLL_HINT_DISTANCE;
var LOW_RES_BUFFER;
var ScrollableComponent;
var forNode;
var Scrollable;
var init_Scrollable = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Scrollable/Scrollable.js"() {
    import_react96 = __toESM(require_react());
    init_debounce();
    init_css();
    init_shared();
    init_use_lazy_ref();
    init_use_component_did_mount();
    init_context10();
    init_Scrollable_scss();
    init_ScrollTo();
    init_sticky_manager();
    init_context4();
    MAX_SCROLL_HINT_DISTANCE = 100, LOW_RES_BUFFER = 2, ScrollableComponent = /* @__PURE__ */ (0, import_react96.forwardRef)(({
      children,
      className,
      horizontal = true,
      vertical = true,
      shadow: shadow2,
      hint,
      focusable,
      onScrolledToBottom,
      ...rest
    }, forwardedRef) => {
      let [topShadow, setTopShadow] = (0, import_react96.useState)(false), [bottomShadow, setBottomShadow] = (0, import_react96.useState)(false), stickyManager = useLazyRef(() => new StickyManager()), scrollArea = (0, import_react96.useRef)(null), scrollTo = (0, import_react96.useCallback)((scrollY, options = {}) => {
        let optionsBehavior = options.behavior || "smooth", behavior = prefersReducedMotion() ? "auto" : optionsBehavior;
        scrollArea.current?.scrollTo({
          top: scrollY,
          behavior
        });
      }, []), defaultRef = (0, import_react96.useRef)();
      (0, import_react96.useImperativeHandle)(forwardedRef || defaultRef, () => ({
        scrollTo
      }));
      let handleScroll = (0, import_react96.useCallback)(() => {
        let currentScrollArea = scrollArea.current;
        currentScrollArea && requestAnimationFrame(() => {
          let {
            scrollTop,
            clientHeight,
            scrollHeight
          } = currentScrollArea, canScroll = Boolean(scrollHeight > clientHeight), isBelowTopOfScroll = Boolean(scrollTop > 0), isAtBottomOfScroll = Boolean(scrollTop + clientHeight >= scrollHeight - LOW_RES_BUFFER);
          setTopShadow(isBelowTopOfScroll), setBottomShadow(!isAtBottomOfScroll), canScroll && isAtBottomOfScroll && onScrolledToBottom && onScrolledToBottom();
        });
      }, [onScrolledToBottom]);
      useComponentDidMount(() => {
        handleScroll(), hint && requestAnimationFrame(() => performScrollHint(scrollArea.current));
      }), (0, import_react96.useEffect)(() => {
        let currentScrollArea = scrollArea.current;
        if (!currentScrollArea)
          return;
        let handleResize = debounce(handleScroll, 50, {
          trailing: true
        });
        return stickyManager.current?.setContainer(currentScrollArea), currentScrollArea.addEventListener("scroll", handleScroll), globalThis.addEventListener("resize", handleResize), () => {
          currentScrollArea.removeEventListener("scroll", handleScroll), globalThis.removeEventListener("resize", handleResize);
        };
      }, [stickyManager, handleScroll]);
      let finalClassName = classNames(className, styles17.Scrollable, vertical && styles17.vertical, horizontal && styles17.horizontal, shadow2 && topShadow && styles17.hasTopShadow, shadow2 && bottomShadow && styles17.hasBottomShadow);
      return /* @__PURE__ */ import_react96.default.createElement(ScrollableContext.Provider, {
        value: scrollTo
      }, /* @__PURE__ */ import_react96.default.createElement(StickyManagerContext.Provider, {
        value: stickyManager.current
      }, /* @__PURE__ */ import_react96.default.createElement("div", Object.assign({
        className: finalClassName
      }, scrollable.props, rest, {
        ref: scrollArea,
        tabIndex: focusable ? 0 : void 0
      }), children)));
    });
    ScrollableComponent.displayName = "Scrollable";
    forNode = (node) => {
      let closestElement = node.closest(scrollable.selector);
      return closestElement instanceof HTMLElement ? closestElement : document;
    }, Scrollable = ScrollableComponent;
    Scrollable.ScrollTo = ScrollTo;
    Scrollable.forNode = forNode;
  }
});
function getMarginsForNode(node) {
  let nodeStyles = window.getComputedStyle(node);
  return {
    activator: parseFloat(nodeStyles.marginTop || "0"),
    container: parseFloat(nodeStyles.marginBottom || "0"),
    horizontal: parseFloat(nodeStyles.marginLeft || "0")
  };
}
function getZIndexForLayerFromNode(node) {
  let layerNode = node.closest(layer.selector) || document.body, zIndex2 = layerNode === document.body ? "auto" : parseInt(window.getComputedStyle(layerNode).zIndex || "0", 10);
  return zIndex2 === "auto" || isNaN(zIndex2) ? null : zIndex2;
}
function isDocument2(node) {
  return node === document;
}
var import_react97;
var OBSERVER_CONFIG;
var PositionedOverlay;
var init_PositionedOverlay = __esm({
  "node_modules/@shopify/polaris/build/esm/components/PositionedOverlay/PositionedOverlay.js"() {
    import_react97 = __toESM(require_react());
    init_css();
    init_geometry();
    init_shared();
    init_math();
    init_PositionedOverlay_scss();
    init_Scrollable();
    init_EventListener();
    OBSERVER_CONFIG = {
      childList: true,
      subtree: true,
      characterData: true,
      attributeFilter: ["style"]
    }, PositionedOverlay = class extends import_react97.PureComponent {
      constructor(props) {
        super(props), this.state = {
          measuring: true,
          activatorRect: getRectForNode(this.props.activator),
          right: void 0,
          left: void 0,
          top: 0,
          height: 0,
          width: null,
          positioning: "below",
          zIndex: null,
          outsideScrollableContainer: false,
          lockPosition: false,
          chevronOffset: 0
        }, this.overlay = null, this.scrollableContainers = [], this.overlayDetails = () => {
          let {
            measuring,
            left,
            right,
            positioning,
            height: height2,
            activatorRect,
            chevronOffset
          } = this.state;
          return {
            measuring,
            left,
            right,
            desiredHeight: height2,
            positioning,
            activatorRect,
            chevronOffset
          };
        }, this.setOverlay = (node) => {
          this.overlay = node;
        }, this.setScrollableContainers = () => {
          let containers = [], scrollableContainer = Scrollable.forNode(this.props.activator);
          if (scrollableContainer)
            for (containers.push(scrollableContainer); scrollableContainer?.parentElement; )
              scrollableContainer = Scrollable.forNode(scrollableContainer.parentElement), containers.push(scrollableContainer);
          this.scrollableContainers = containers;
        }, this.registerScrollHandlers = () => {
          this.scrollableContainers.forEach((node) => {
            node.addEventListener("scroll", this.handleMeasurement);
          });
        }, this.unregisterScrollHandlers = () => {
          this.scrollableContainers.forEach((node) => {
            node.removeEventListener("scroll", this.handleMeasurement);
          });
        }, this.handleMeasurement = () => {
          let {
            lockPosition,
            top
          } = this.state;
          this.observer.disconnect(), this.setState(({
            left,
            top: top2,
            right
          }) => ({
            left,
            right,
            top: top2,
            height: 0,
            positioning: "below",
            measuring: true
          }), () => {
            if (this.overlay == null || this.firstScrollableContainer == null)
              return;
            let {
              activator,
              preferredPosition = "below",
              preferredAlignment = "center",
              onScrollOut,
              fullWidth,
              fixed,
              preferInputActivator = true
            } = this.props, preferredActivator = preferInputActivator && activator.querySelector("input") || activator, activatorRect = getRectForNode(preferredActivator), currentOverlayRect = getRectForNode(this.overlay), scrollableElement = isDocument2(this.firstScrollableContainer) ? document.body : this.firstScrollableContainer, scrollableContainerRect = getRectForNode(scrollableElement), overlayRect = fullWidth ? new Rect({
              ...currentOverlayRect,
              width: activatorRect.width
            }) : currentOverlayRect;
            scrollableElement === document.body && (scrollableContainerRect.height = document.body.scrollHeight);
            let topBarOffset = 0, topBarElement = scrollableElement.querySelector(`${dataPolarisTopBar.selector}`);
            topBarElement && (topBarOffset = topBarElement.clientHeight);
            let overlayMargins = this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement ? getMarginsForNode(this.overlay.firstElementChild) : {
              activator: 0,
              container: 0,
              horizontal: 0
            }, containerRect = windowRect(), zIndexForLayer = getZIndexForLayerFromNode(activator), zIndex2 = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1, verticalPosition = calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset), horizontalPosition = calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment), chevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;
            this.setState({
              measuring: false,
              activatorRect: getRectForNode(activator),
              left: preferredAlignment !== "right" ? horizontalPosition : void 0,
              right: preferredAlignment === "right" ? horizontalPosition : void 0,
              top: lockPosition ? top : verticalPosition.top,
              lockPosition: Boolean(fixed),
              height: verticalPosition.height || 0,
              width: fullWidth ? overlayRect.width : null,
              positioning: verticalPosition.positioning,
              outsideScrollableContainer: onScrollOut != null && rectIsOutsideOfRect(activatorRect, intersectionWithViewport(scrollableContainerRect)),
              zIndex: zIndex2,
              chevronOffset
            }, () => {
              this.overlay && (this.observer.observe(this.overlay, OBSERVER_CONFIG), this.observer.observe(activator, OBSERVER_CONFIG));
            });
          });
        }, this.observer = new MutationObserver(this.handleMeasurement);
      }
      componentDidMount() {
        this.setScrollableContainers(), this.scrollableContainers.length && !this.props.fixed && this.registerScrollHandlers(), this.handleMeasurement();
      }
      componentWillUnmount() {
        this.observer.disconnect(), this.scrollableContainers.length && !this.props.fixed && this.unregisterScrollHandlers();
      }
      componentDidUpdate() {
        let {
          outsideScrollableContainer,
          top
        } = this.state, {
          onScrollOut,
          active
        } = this.props;
        active && onScrollOut != null && top !== 0 && outsideScrollableContainer && onScrollOut();
      }
      render() {
        let {
          left,
          right,
          top,
          zIndex: zIndex2,
          width: width2
        } = this.state, {
          render,
          fixed,
          preventInteraction,
          classNames: propClassNames,
          zIndexOverride
        } = this.props, style = {
          top: top == null || isNaN(top) ? void 0 : top,
          left: left == null || isNaN(left) ? void 0 : left,
          right: right == null || isNaN(right) ? void 0 : right,
          width: width2 == null || isNaN(width2) ? void 0 : width2,
          zIndex: zIndexOverride || zIndex2 || void 0
        }, className = classNames(styles16.PositionedOverlay, fixed && styles16.fixed, preventInteraction && styles16.preventInteraction, propClassNames);
        return /* @__PURE__ */ import_react97.default.createElement("div", {
          className,
          style,
          ref: this.setOverlay
        }, /* @__PURE__ */ import_react97.default.createElement(EventListener, {
          event: "resize",
          handler: this.handleMeasurement
        }), render(this.overlayDetails()));
      }
      get firstScrollableContainer() {
        return this.scrollableContainers[0] ?? null;
      }
      forceUpdatePosition() {
        requestAnimationFrame(this.handleMeasurement);
      }
    };
  }
});
function TooltipOverlay({
  active,
  activator,
  preferredPosition = "above",
  preventInteraction,
  id,
  children,
  accessibilityLabel,
  width: width2,
  padding,
  borderRadius,
  zIndexOverride,
  instant
}) {
  let i18n = useI18n();
  return active ? /* @__PURE__ */ import_react98.default.createElement(PositionedOverlay, {
    active,
    activator,
    preferredPosition,
    preventInteraction,
    render: renderTooltip,
    zIndexOverride
  }) : null;
  function renderTooltip(overlayDetails) {
    let {
      measuring,
      desiredHeight,
      positioning,
      chevronOffset
    } = overlayDetails, containerClassName = classNames(styles15.TooltipOverlay, measuring && styles15.measuring, !measuring && styles15.measured, instant && styles15.instant, positioning === "above" && styles15.positionedAbove), contentClassName = classNames(styles15.Content, width2 && styles15[width2]), contentStyles = measuring ? void 0 : {
      minHeight: desiredHeight
    }, style = {
      "--pc-tooltip-chevron-x-pos": `${chevronOffset}px`,
      "--pc-tooltip-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
      "--pc-tooltip-padding": padding && padding === "default" ? "var(--p-space-100) var(--p-space-200)" : `var(--p-space-${padding})`
    };
    return /* @__PURE__ */ import_react98.default.createElement("div", Object.assign({
      style,
      className: containerClassName
    }, layer.props), /* @__PURE__ */ import_react98.default.createElement("svg", {
      className: styles15.Tail,
      width: "19",
      height: "11",
      fill: "none"
    }, positioning === "above" ? tailDownPaths : tailUpPaths), /* @__PURE__ */ import_react98.default.createElement("div", {
      id,
      role: "tooltip",
      className: contentClassName,
      style: {
        ...contentStyles,
        ...style
      },
      "aria-label": accessibilityLabel ? i18n.translate("Polaris.TooltipOverlay.accessibilityLabel", {
        label: accessibilityLabel
      }) : void 0
    }, children));
  }
}
var import_react98;
var tailUpPaths;
var tailDownPaths;
var init_TooltipOverlay = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js"() {
    import_react98 = __toESM(require_react());
    init_css();
    init_shared();
    init_TooltipOverlay_scss();
    init_PositionedOverlay();
    init_hooks2();
    tailUpPaths = /* @__PURE__ */ import_react98.default.createElement(import_react98.default.Fragment, null, /* @__PURE__ */ import_react98.default.createElement("path", {
      d: "M18.829 8.171 11.862.921A3 3 0 0 0 7.619.838L0 8.171h1.442l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557h1.387Z",
      fill: "#E3E3E3"
    }), /* @__PURE__ */ import_react98.default.createElement("path", {
      d: "M17.442 10.171h-16v-2l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557v2Z",
      fill: "var(--p-color-bg-surface)"
    })), tailDownPaths = /* @__PURE__ */ import_react98.default.createElement(import_react98.default.Fragment, null, /* @__PURE__ */ import_react98.default.createElement("path", {
      d: "m0 2 6.967 7.25a3 3 0 0 0 4.243.083L18.829 2h-1.442l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2H0Z",
      fill: "#D4D4D4"
    }), /* @__PURE__ */ import_react98.default.createElement("path", {
      d: "M1.387 0h16v2l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2V0Z",
      fill: "var(--p-color-bg-surface)"
    }));
  }
});
function Tooltip({
  children,
  content,
  dismissOnMouseOut,
  active: originalActive,
  hoverDelay,
  preferredPosition = "above",
  activatorWrapper = "span",
  accessibilityLabel,
  width: width2 = "default",
  padding = "default",
  borderRadius: borderRadiusProp,
  zIndexOverride,
  hasUnderline,
  persistOnClick,
  onOpen,
  onClose
}) {
  let borderRadius = borderRadiusProp || "200", WrapperComponent = activatorWrapper, {
    value: active,
    setTrue: setActiveTrue,
    setFalse: handleBlur
  } = useToggle(Boolean(originalActive)), {
    value: persist,
    toggle: togglePersisting
  } = useToggle(Boolean(originalActive) && Boolean(persistOnClick)), [activatorNode, setActivatorNode] = (0, import_react99.useState)(null), {
    presenceList,
    addPresence,
    removePresence
  } = useEphemeralPresenceManager(), id = (0, import_react99.useId)(), activatorContainer = (0, import_react99.useRef)(null), mouseEntered = (0, import_react99.useRef)(false), [shouldAnimate, setShouldAnimate] = (0, import_react99.useState)(Boolean(!originalActive)), hoverDelayTimeout = (0, import_react99.useRef)(null), hoverOutTimeout = (0, import_react99.useRef)(null), handleFocus = (0, import_react99.useCallback)(() => {
    originalActive !== false && setActiveTrue();
  }, [originalActive, setActiveTrue]);
  (0, import_react99.useEffect)(() => {
    let accessibilityNode = (activatorContainer.current ? findFirstFocusableNode(activatorContainer.current) : null) || activatorContainer.current;
    accessibilityNode && (accessibilityNode.tabIndex = 0, accessibilityNode.setAttribute("aria-describedby", id), accessibilityNode.setAttribute("data-polaris-tooltip-activator", "true"));
  }, [id, children]), (0, import_react99.useEffect)(() => () => {
    hoverDelayTimeout.current && clearTimeout(hoverDelayTimeout.current), hoverOutTimeout.current && clearTimeout(hoverOutTimeout.current);
  }, []);
  let handleOpen = (0, import_react99.useCallback)(() => {
    setShouldAnimate(!presenceList.tooltip && !active), onOpen?.(), addPresence("tooltip");
  }, [addPresence, presenceList.tooltip, onOpen, active]), handleClose = (0, import_react99.useCallback)(() => {
    onClose?.(), setShouldAnimate(false), hoverOutTimeout.current = setTimeout(() => {
      removePresence("tooltip");
    }, HOVER_OUT_TIMEOUT);
  }, [removePresence, onClose]), handleKeyUp = (0, import_react99.useCallback)((event) => {
    event.key === "Escape" && (handleClose?.(), handleBlur(), persistOnClick && togglePersisting());
  }, [handleBlur, handleClose, persistOnClick, togglePersisting]);
  (0, import_react99.useEffect)(() => {
    originalActive === false && active && (handleClose(), handleBlur());
  }, [originalActive, active, handleClose, handleBlur]);
  let portal2 = activatorNode ? /* @__PURE__ */ import_react99.default.createElement(Portal, {
    idPrefix: "tooltip"
  }, /* @__PURE__ */ import_react99.default.createElement(TooltipOverlay, {
    id,
    preferredPosition,
    activator: activatorNode,
    active,
    accessibilityLabel,
    onClose: noop3,
    preventInteraction: dismissOnMouseOut,
    width: width2,
    padding,
    borderRadius,
    zIndexOverride,
    instant: !shouldAnimate
  }, content)) : null, wrapperClassNames = classNames(activatorWrapper === "div" && styles14.TooltipContainer, hasUnderline && styles14.HasUnderline);
  return /* @__PURE__ */ import_react99.default.createElement(WrapperComponent, {
    onFocus: () => {
      handleOpen(), handleFocus();
    },
    onBlur: () => {
      handleClose(), handleBlur(), persistOnClick && togglePersisting();
    },
    onMouseLeave: handleMouseLeave,
    onMouseOver: handleMouseEnterFix,
    onMouseDown: persistOnClick ? togglePersisting : void 0,
    ref: setActivator,
    onKeyUp: handleKeyUp,
    className: wrapperClassNames
  }, children, portal2);
  function setActivator(node) {
    let activatorContainerRef = activatorContainer;
    if (node == null) {
      activatorContainerRef.current = null, setActivatorNode(null);
      return;
    }
    node.firstElementChild instanceof HTMLElement && setActivatorNode(node.firstElementChild), activatorContainerRef.current = node;
  }
  function handleMouseEnter() {
    mouseEntered.current = true, hoverDelay && !presenceList.tooltip ? hoverDelayTimeout.current = setTimeout(() => {
      handleOpen(), handleFocus();
    }, hoverDelay) : (handleOpen(), handleFocus());
  }
  function handleMouseLeave() {
    hoverDelayTimeout.current && (clearTimeout(hoverDelayTimeout.current), hoverDelayTimeout.current = null), mouseEntered.current = false, handleClose(), persist || handleBlur();
  }
  function handleMouseEnterFix() {
    !mouseEntered.current && handleMouseEnter();
  }
}
function noop3() {
}
var import_react99;
var HOVER_OUT_TIMEOUT;
var init_Tooltip = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tooltip/Tooltip.js"() {
    import_react99 = __toESM(require_react());
    init_focus();
    init_use_toggle();
    init_css();
    init_Tooltip_scss();
    init_hooks3();
    init_Portal();
    init_TooltipOverlay();
    HOVER_OUT_TIMEOUT = 150;
  }
});
function Item({
  id,
  badge,
  content,
  accessibilityLabel,
  helpText,
  url,
  onAction,
  onMouseEnter,
  icon,
  image,
  prefix,
  suffix,
  disabled,
  external,
  destructive,
  ellipsis,
  truncate,
  active,
  role,
  variant = "default"
}) {
  let className = classNames(styles11.Item, disabled && styles11.disabled, destructive && styles11.destructive, active && styles11.active, variant === "default" && styles11.default, variant === "indented" && styles11.indented, variant === "menu" && styles11.menu), prefixMarkup = null;
  prefix ? prefixMarkup = /* @__PURE__ */ import_react100.default.createElement("span", {
    className: styles11.Prefix
  }, prefix) : icon ? prefixMarkup = /* @__PURE__ */ import_react100.default.createElement("span", {
    className: styles11.Prefix
  }, /* @__PURE__ */ import_react100.default.createElement(Icon, {
    source: icon
  })) : image && (prefixMarkup = /* @__PURE__ */ import_react100.default.createElement("span", {
    role: "presentation",
    className: styles11.Prefix,
    style: {
      backgroundImage: `url(${image}`
    }
  }));
  let contentText = content || "";
  truncate && content ? contentText = /* @__PURE__ */ import_react100.default.createElement(TruncateText, null, content) : ellipsis && (contentText = `${content}\u2026`);
  let contentMarkup = helpText ? /* @__PURE__ */ import_react100.default.createElement(import_react100.default.Fragment, null, /* @__PURE__ */ import_react100.default.createElement(Box, null, contentText), /* @__PURE__ */ import_react100.default.createElement(Text, {
    as: "span",
    variant: "bodySm",
    tone: active || disabled ? void 0 : "subdued"
  }, helpText)) : contentText, badgeMarkup = badge && /* @__PURE__ */ import_react100.default.createElement("span", {
    className: styles11.Suffix
  }, /* @__PURE__ */ import_react100.default.createElement(Badge, {
    tone: badge.tone
  }, badge.content)), suffixMarkup = suffix && /* @__PURE__ */ import_react100.default.createElement(Box, null, /* @__PURE__ */ import_react100.default.createElement("span", {
    className: styles11.Suffix
  }, suffix)), textMarkup = /* @__PURE__ */ import_react100.default.createElement("span", {
    className: styles11.Text
  }, contentMarkup), contentElement = /* @__PURE__ */ import_react100.default.createElement(InlineStack, {
    blockAlign: "center",
    gap: "150",
    wrap: !truncate
  }, prefixMarkup, textMarkup, badgeMarkup, suffixMarkup), contentWrapper = /* @__PURE__ */ import_react100.default.createElement(Box, {
    width: "100%"
  }, contentElement), scrollMarkup = active ? /* @__PURE__ */ import_react100.default.createElement(Scrollable.ScrollTo, null) : null, control = url ? /* @__PURE__ */ import_react100.default.createElement(UnstyledLink, {
    id,
    url: disabled ? null : url,
    className,
    external,
    "aria-label": accessibilityLabel,
    onClick: disabled ? null : onAction,
    role
  }, contentWrapper) : /* @__PURE__ */ import_react100.default.createElement("button", {
    id,
    type: "button",
    className,
    disabled,
    "aria-label": accessibilityLabel,
    onClick: onAction,
    onMouseUp: handleMouseUpByBlurring,
    role,
    onMouseEnter
  }, contentWrapper);
  return /* @__PURE__ */ import_react100.default.createElement(import_react100.default.Fragment, null, scrollMarkup, control);
}
var import_react100;
var TruncateText;
var init_Item = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionList/components/Item/Item.js"() {
    import_react100 = __toESM(require_react());
    init_css();
    init_ActionList_scss();
    init_focus();
    init_use_isomorphic_layout_effect();
    init_use_theme();
    init_Badge();
    init_Tooltip();
    init_Icon();
    init_Box();
    init_Text();
    init_Scrollable();
    init_UnstyledLink();
    init_InlineStack();
    TruncateText = ({
      children
    }) => {
      let theme = useTheme(), textRef = (0, import_react100.useRef)(null), [isOverflowing, setIsOverflowing] = (0, import_react100.useState)(false);
      return useIsomorphicLayoutEffect2(() => {
        textRef.current && setIsOverflowing(textRef.current.scrollWidth > textRef.current.offsetWidth);
      }, [children]), isOverflowing ? /* @__PURE__ */ import_react100.default.createElement(Tooltip, {
        zIndexOverride: Number(theme.zIndex["z-index-11"]),
        preferredPosition: "above",
        hoverDelay: 1e3,
        content: children,
        dismissOnMouseOut: true
      }, /* @__PURE__ */ import_react100.default.createElement(Text, {
        as: "span",
        truncate: true
      }, children)) : /* @__PURE__ */ import_react100.default.createElement(Text, {
        as: "span",
        truncate: true
      }, /* @__PURE__ */ import_react100.default.createElement(Box, {
        width: "100%",
        ref: textRef
      }, children));
    };
  }
});
function Section({
  section,
  hasMultipleSections,
  isFirst,
  actionRole,
  onActionAnyItem
}) {
  let handleAction = (itemOnAction) => () => {
    itemOnAction && itemOnAction(), onActionAnyItem && onActionAnyItem();
  }, actionMarkup = section.items.map(({
    content,
    helpText,
    onAction,
    ...item
  }, index) => {
    let itemMarkup = /* @__PURE__ */ import_react101.default.createElement(Item, Object.assign({
      content,
      helpText,
      role: actionRole,
      onAction: handleAction(onAction)
    }, item));
    return /* @__PURE__ */ import_react101.default.createElement(Box, {
      as: "li",
      key: `${content}-${index}`,
      role: actionRole === "menuitem" ? "presentation" : void 0
    }, /* @__PURE__ */ import_react101.default.createElement(InlineStack, {
      wrap: false
    }, itemMarkup));
  }), titleMarkup = null;
  section.title && (titleMarkup = typeof section.title == "string" ? /* @__PURE__ */ import_react101.default.createElement(Box, {
    paddingBlockStart: "300",
    paddingBlockEnd: "100",
    paddingInlineStart: "300",
    paddingInlineEnd: "300"
  }, /* @__PURE__ */ import_react101.default.createElement(Text, {
    as: "p",
    variant: "headingSm"
  }, section.title)) : /* @__PURE__ */ import_react101.default.createElement(Box, {
    padding: "200",
    paddingInlineEnd: "150"
  }, section.title));
  let sectionRole;
  switch (actionRole) {
    case "option":
      sectionRole = "presentation";
      break;
    case "menuitem":
      sectionRole = hasMultipleSections ? "presentation" : "menu";
      break;
    default:
      sectionRole = void 0;
      break;
  }
  let sectionMarkup = /* @__PURE__ */ import_react101.default.createElement(import_react101.default.Fragment, null, titleMarkup, /* @__PURE__ */ import_react101.default.createElement(Box, Object.assign({
    as: "div",
    padding: "150"
  }, hasMultipleSections && {
    paddingBlockStart: "0"
  }, {
    tabIndex: hasMultipleSections ? void 0 : -1
  }), /* @__PURE__ */ import_react101.default.createElement(BlockStack, Object.assign({
    gap: "100",
    as: "ul"
  }, sectionRole && {
    role: sectionRole
  }), actionMarkup)));
  return hasMultipleSections ? /* @__PURE__ */ import_react101.default.createElement(Box, Object.assign({
    as: "li",
    role: "presentation",
    borderColor: "border-secondary"
  }, !isFirst && {
    borderBlockStartWidth: "025"
  }, !section.title && {
    paddingBlockStart: "150"
  }), sectionMarkup) : sectionMarkup;
}
var import_react101;
var init_Section = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionList/components/Section/Section.js"() {
    import_react101 = __toESM(require_react());
    init_Item();
    init_Box();
    init_InlineStack();
    init_Text();
    init_BlockStack();
  }
});
function KeypressListener({
  keyCode,
  handler,
  keyEvent = "keyup",
  options,
  useCapture
}) {
  let tracked = (0, import_react102.useRef)({
    handler,
    keyCode
  });
  useIsomorphicLayoutEffect2(() => {
    tracked.current = {
      handler,
      keyCode
    };
  }, [handler, keyCode]);
  let handleKeyEvent = (0, import_react102.useCallback)((event) => {
    let {
      handler: handler2,
      keyCode: keyCode2
    } = tracked.current;
    event.keyCode === keyCode2 && handler2(event);
  }, []);
  return (0, import_react102.useEffect)(() => (document.addEventListener(keyEvent, handleKeyEvent, useCapture || options), () => {
    document.removeEventListener(keyEvent, handleKeyEvent, useCapture || options);
  }), [keyEvent, handleKeyEvent, useCapture, options]), null;
}
var import_react102;
var init_KeypressListener = __esm({
  "node_modules/@shopify/polaris/build/esm/components/KeypressListener/KeypressListener.js"() {
    import_react102 = __toESM(require_react());
    init_use_isomorphic_layout_effect();
  }
});
var styles18;
var init_TextField_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TextField/TextField.scss.js"() {
    styles18 = {
      TextField: "Polaris-TextField",
      ClearButton: "Polaris-TextField__ClearButton",
      disabled: "Polaris-TextField--disabled",
      error: "Polaris-TextField--error",
      readOnly: "Polaris-TextField--readOnly",
      Input: "Polaris-TextField__Input",
      Backdrop: "Polaris-TextField__Backdrop",
      multiline: "Polaris-TextField--multiline",
      hasValue: "Polaris-TextField--hasValue",
      focus: "Polaris-TextField--focus",
      VerticalContent: "Polaris-TextField__VerticalContent",
      toneMagic: "Polaris-TextField--toneMagic",
      Prefix: "Polaris-TextField__Prefix",
      suggestion: "Polaris-TextField--suggestion",
      borderless: "Polaris-TextField--borderless",
      slim: "Polaris-TextField--slim",
      "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
      "Input-suffixed": "Polaris-TextField__Input--suffixed",
      "Input-alignRight": "Polaris-TextField__Input--alignRight",
      "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
      "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
      Suffix: "Polaris-TextField__Suffix",
      CharacterCount: "Polaris-TextField__CharacterCount",
      AlignFieldBottom: "Polaris-TextField__AlignFieldBottom",
      Spinner: "Polaris-TextField__Spinner",
      SpinnerIcon: "Polaris-TextField__SpinnerIcon",
      Resizer: "Polaris-TextField__Resizer",
      DummyInput: "Polaris-TextField__DummyInput",
      Segment: "Polaris-TextField__Segment",
      monospaced: "Polaris-TextField--monospaced"
    };
  }
});
var import_react103;
var Spinner2;
var init_Spinner2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TextField/components/Spinner/Spinner.js"() {
    import_react103 = __toESM(require_react());
    init_dist3();
    init_TextField_scss();
    init_Icon();
    Spinner2 = /* @__PURE__ */ import_react103.default.forwardRef(function({
      onChange,
      onClick,
      onMouseDown,
      onMouseUp,
      onBlur
    }, ref) {
      function handleStep(step) {
        return () => onChange(step);
      }
      function handleMouseDown(onChange2) {
        return (event) => {
          event.button === 0 && onMouseDown?.(onChange2);
        };
      }
      return /* @__PURE__ */ import_react103.default.createElement("div", {
        className: styles18.Spinner,
        onClick,
        "aria-hidden": true,
        ref
      }, /* @__PURE__ */ import_react103.default.createElement("div", {
        role: "button",
        className: styles18.Segment,
        tabIndex: -1,
        onClick: handleStep(1),
        onMouseDown: handleMouseDown(handleStep(1)),
        onMouseUp,
        onBlur
      }, /* @__PURE__ */ import_react103.default.createElement("div", {
        className: styles18.SpinnerIcon
      }, /* @__PURE__ */ import_react103.default.createElement(Icon, {
        source: SvgChevronUpMinor
      }))), /* @__PURE__ */ import_react103.default.createElement("div", {
        role: "button",
        className: styles18.Segment,
        tabIndex: -1,
        onClick: handleStep(-1),
        onMouseDown: handleMouseDown(handleStep(-1)),
        onMouseUp,
        onBlur
      }, /* @__PURE__ */ import_react103.default.createElement("div", {
        className: styles18.SpinnerIcon
      }, /* @__PURE__ */ import_react103.default.createElement(Icon, {
        source: SvgChevronDownMinor
      }))));
    });
  }
});
var styles19;
var init_Labelled_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Labelled/Labelled.scss.js"() {
    styles19 = {
      hidden: "Polaris-Labelled--hidden",
      LabelWrapper: "Polaris-Labelled__LabelWrapper",
      disabled: "Polaris-Labelled--disabled",
      HelpText: "Polaris-Labelled__HelpText",
      readOnly: "Polaris-Labelled--readOnly",
      Error: "Polaris-Labelled__Error",
      Action: "Polaris-Labelled__Action"
    };
  }
});
var styles20;
var init_InlineError_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/InlineError/InlineError.scss.js"() {
    styles20 = {
      InlineError: "Polaris-InlineError",
      Icon: "Polaris-InlineError__Icon"
    };
  }
});
function InlineError({
  message: message2,
  fieldID
}) {
  return message2 ? /* @__PURE__ */ import_react104.default.createElement("div", {
    id: errorTextID(fieldID),
    className: styles20.InlineError
  }, /* @__PURE__ */ import_react104.default.createElement("div", {
    className: styles20.Icon
  }, /* @__PURE__ */ import_react104.default.createElement(Icon, {
    source: SvgCircleAlertMajor
  })), message2) : null;
}
function errorTextID(id) {
  return `${id}Error`;
}
var import_react104;
var init_InlineError = __esm({
  "node_modules/@shopify/polaris/build/esm/components/InlineError/InlineError.js"() {
    import_react104 = __toESM(require_react());
    init_dist3();
    init_InlineError_scss();
    init_Icon();
  }
});
var styles21;
var init_Label_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Label/Label.scss.js"() {
    styles21 = {
      Label: "Polaris-Label",
      hidden: "Polaris-Label--hidden",
      Text: "Polaris-Label__Text",
      RequiredIndicator: "Polaris-Label__RequiredIndicator"
    };
  }
});
function labelID(id) {
  return `${id}Label`;
}
function Label({
  children,
  id,
  hidden,
  requiredIndicator
}) {
  let className = classNames(styles21.Label, hidden && styles21.hidden);
  return /* @__PURE__ */ import_react105.default.createElement("div", {
    className
  }, /* @__PURE__ */ import_react105.default.createElement("label", {
    id: labelID(id),
    htmlFor: id,
    className: classNames(styles21.Text, requiredIndicator && styles21.RequiredIndicator)
  }, children));
}
var import_react105;
var init_Label = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Label/Label.js"() {
    import_react105 = __toESM(require_react());
    init_css();
    init_Label_scss();
  }
});
function Labelled({
  id,
  label,
  error,
  action: action4,
  helpText,
  children,
  labelHidden,
  requiredIndicator,
  disabled,
  readOnly,
  ...rest
}) {
  let className = classNames(labelHidden && styles19.hidden, disabled && styles19.disabled, readOnly && styles19.readOnly), actionMarkup = action4 ? /* @__PURE__ */ import_react106.default.createElement("div", {
    className: styles19.Action
  }, buttonFrom(action4, {
    variant: "plain"
  })) : null, helpTextMarkup = helpText ? /* @__PURE__ */ import_react106.default.createElement("div", {
    className: styles19.HelpText,
    id: helpTextID(id),
    "aria-disabled": disabled
  }, /* @__PURE__ */ import_react106.default.createElement(Text, {
    as: "span",
    tone: "subdued",
    breakWord: true
  }, helpText)) : null, errorMarkup = error && typeof error != "boolean" && /* @__PURE__ */ import_react106.default.createElement("div", {
    className: styles19.Error
  }, /* @__PURE__ */ import_react106.default.createElement(InlineError, {
    message: error,
    fieldID: id
  })), labelMarkup = label ? /* @__PURE__ */ import_react106.default.createElement("div", {
    className: styles19.LabelWrapper
  }, /* @__PURE__ */ import_react106.default.createElement(Label, Object.assign({
    id,
    requiredIndicator
  }, rest, {
    hidden: false
  }), label), actionMarkup) : null;
  return /* @__PURE__ */ import_react106.default.createElement("div", {
    className
  }, labelMarkup, children, errorMarkup, helpTextMarkup);
}
function helpTextID(id) {
  return `${id}HelpText`;
}
var import_react106;
var init_Labelled = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Labelled/Labelled.js"() {
    import_react106 = __toESM(require_react());
    init_css();
    init_Labelled_scss();
    init_InlineError();
    init_Label();
    init_utils4();
    init_Text();
  }
});
var styles22;
var init_Connected_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Connected/Connected.scss.js"() {
    styles22 = {
      Connected: "Polaris-Connected",
      Item: "Polaris-Connected__Item",
      "Item-primary": "Polaris-Connected__Item--primary",
      "Item-focused": "Polaris-Connected__Item--focused"
    };
  }
});
function Item2({
  children,
  position
}) {
  let {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle(false), className = classNames(styles22.Item, focused && styles22["Item-focused"], position === "primary" ? styles22["Item-primary"] : styles22["Item-connection"]);
  return /* @__PURE__ */ import_react107.default.createElement("div", {
    onBlur: forceFalseFocused,
    onFocus: forceTrueFocused,
    className
  }, children);
}
var import_react107;
var init_Item2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Connected/components/Item/Item.js"() {
    import_react107 = __toESM(require_react());
    init_css();
    init_use_toggle();
    init_Connected_scss();
  }
});
function Connected({
  children,
  left,
  right
}) {
  let leftConnectionMarkup = left ? /* @__PURE__ */ import_react108.default.createElement(Item2, {
    position: "left"
  }, left) : null, rightConnectionMarkup = right ? /* @__PURE__ */ import_react108.default.createElement(Item2, {
    position: "right"
  }, right) : null;
  return /* @__PURE__ */ import_react108.default.createElement("div", {
    className: styles22.Connected
  }, leftConnectionMarkup, /* @__PURE__ */ import_react108.default.createElement(Item2, {
    position: "primary"
  }, children), rightConnectionMarkup);
}
var import_react108;
var init_Connected = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Connected/Connected.js"() {
    import_react108 = __toESM(require_react());
    init_Connected_scss();
    init_Item2();
  }
});
function Resizer({
  contents,
  currentHeight: currentHeightProp = null,
  minimumLines,
  onHeightChange
}) {
  let contentNode = (0, import_react109.useRef)(null), minimumLinesNode = (0, import_react109.useRef)(null), animationFrame = (0, import_react109.useRef)(), currentHeight = (0, import_react109.useRef)(currentHeightProp);
  currentHeightProp !== currentHeight.current && (currentHeight.current = currentHeightProp), (0, import_react109.useEffect)(() => () => {
    animationFrame.current && cancelAnimationFrame(animationFrame.current);
  }, []);
  let minimumLinesMarkup = minimumLines ? /* @__PURE__ */ import_react109.default.createElement("div", {
    ref: minimumLinesNode,
    className: styles18.DummyInput,
    dangerouslySetInnerHTML: {
      __html: getContentsForMinimumLines(minimumLines)
    }
  }) : null, handleHeightCheck = (0, import_react109.useCallback)(() => {
    animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
      if (!contentNode.current || !minimumLinesNode.current)
        return;
      let newHeight = Math.max(contentNode.current.offsetHeight, minimumLinesNode.current.offsetHeight);
      newHeight !== currentHeight.current && onHeightChange(newHeight);
    });
  }, [onHeightChange]);
  return useIsomorphicLayoutEffect2(() => {
    handleHeightCheck();
  }), /* @__PURE__ */ import_react109.default.createElement("div", {
    "aria-hidden": true,
    className: styles18.Resizer
  }, /* @__PURE__ */ import_react109.default.createElement(EventListener, {
    event: "resize",
    handler: handleHeightCheck
  }), /* @__PURE__ */ import_react109.default.createElement("div", {
    ref: contentNode,
    className: styles18.DummyInput,
    dangerouslySetInnerHTML: {
      __html: getFinalContents(contents)
    }
  }), minimumLinesMarkup);
}
function replaceEntity(entity) {
  return ENTITIES_TO_REPLACE[entity];
}
function getContentsForMinimumLines(minimumLines) {
  let content = "";
  for (let line = 0; line < minimumLines; line++)
    content += "<br>";
  return content;
}
function getFinalContents(contents) {
  return contents ? `${contents.replace(REPLACE_REGEX2, replaceEntity)}<br>` : "<br>";
}
var import_react109;
var ENTITIES_TO_REPLACE;
var REPLACE_REGEX2;
var init_Resizer = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TextField/components/Resizer/Resizer.js"() {
    import_react109 = __toESM(require_react());
    init_use_isomorphic_layout_effect();
    init_TextField_scss();
    init_EventListener();
    ENTITIES_TO_REPLACE = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "\n": "<br>",
      "\r": ""
    }, REPLACE_REGEX2 = new RegExp(`[${Object.keys(ENTITIES_TO_REPLACE).join()}]`, "g");
  }
});
function TextField({
  prefix,
  suffix,
  verticalContent,
  placeholder,
  value = "",
  helpText,
  label,
  labelAction,
  labelHidden,
  disabled,
  clearButton,
  readOnly,
  autoFocus,
  focused,
  multiline,
  error,
  connectedRight,
  connectedLeft,
  type = "text",
  name,
  id: idProp,
  role,
  step,
  largeStep,
  autoComplete,
  max,
  maxLength,
  maxHeight,
  min,
  minLength,
  pattern,
  inputMode,
  spellCheck,
  ariaOwns,
  ariaControls,
  ariaExpanded,
  ariaActiveDescendant,
  ariaAutocomplete,
  showCharacterCount,
  align,
  requiredIndicator,
  monospaced,
  selectTextOnFocus,
  suggestion,
  variant = "inherit",
  size: size2 = "medium",
  onClearButtonClick,
  onChange,
  onSpinnerChange,
  onFocus,
  onBlur,
  tone
}) {
  let i18n = useI18n(), [height2, setHeight] = (0, import_react110.useState)(null), [focus, setFocus] = (0, import_react110.useState)(Boolean(focused)), isAfterInitial = useIsAfterInitialMount(), uniqId = (0, import_react110.useId)(), id = idProp ?? uniqId, textFieldRef = (0, import_react110.useRef)(null), inputRef = (0, import_react110.useRef)(null), textAreaRef = (0, import_react110.useRef)(null), prefixRef = (0, import_react110.useRef)(null), suffixRef = (0, import_react110.useRef)(null), verticalContentRef = (0, import_react110.useRef)(null), buttonPressTimer = (0, import_react110.useRef)(), spinnerRef = (0, import_react110.useRef)(null), getInputRef = (0, import_react110.useCallback)(() => multiline ? textAreaRef.current : inputRef.current, [multiline]);
  (0, import_react110.useEffect)(() => {
    let input2 = getInputRef();
    !input2 || focused === void 0 || (focused ? input2.focus() : input2.blur());
  }, [focused, verticalContent, getInputRef]), (0, import_react110.useEffect)(() => {
    let input2 = inputRef.current;
    !input2 || !(type === "text" || type === "tel" || type === "search" || type === "url" || type === "password") || !suggestion || input2.setSelectionRange(value.length, suggestion.length);
  }, [focus, value, type, suggestion]);
  let normalizedValue = suggestion || value, normalizedStep = step ?? 1, normalizedMax = max ?? 1 / 0, normalizedMin = min ?? -1 / 0, className = classNames(styles18.TextField, Boolean(normalizedValue) && styles18.hasValue, disabled && styles18.disabled, readOnly && styles18.readOnly, error && styles18.error, tone && styles18[variationName("tone", tone)], multiline && styles18.multiline, focus && !disabled && styles18.focus, variant !== "inherit" && styles18[variant], size2 === "slim" && styles18.slim), inputType = type === "currency" ? "text" : type, isNumericType = type === "number" || type === "integer", prefixMarkup = prefix ? /* @__PURE__ */ import_react110.default.createElement("div", {
    className: styles18.Prefix,
    id: `${id}-Prefix`,
    ref: prefixRef
  }, prefix) : null, suffixMarkup = suffix ? /* @__PURE__ */ import_react110.default.createElement("div", {
    className: styles18.Suffix,
    id: `${id}-Suffix`,
    ref: suffixRef
  }, suffix) : null, characterCountMarkup = null;
  if (showCharacterCount) {
    let characterCount = normalizedValue.length, characterCountLabel = maxLength ? i18n.translate("Polaris.TextField.characterCountWithMaxLength", {
      count: characterCount,
      limit: maxLength
    }) : i18n.translate("Polaris.TextField.characterCount", {
      count: characterCount
    }), characterCountClassName = classNames(styles18.CharacterCount, multiline && styles18.AlignFieldBottom), characterCountText = maxLength ? `${characterCount}/${maxLength}` : characterCount;
    characterCountMarkup = /* @__PURE__ */ import_react110.default.createElement("div", {
      id: `${id}-CharacterCounter`,
      className: characterCountClassName,
      "aria-label": characterCountLabel,
      "aria-live": focus ? "polite" : "off",
      "aria-atomic": "true",
      onClick: handleClickChild
    }, characterCountText);
  }
  let clearButtonMarkup = clearButton && normalizedValue !== "" ? /* @__PURE__ */ import_react110.default.createElement("button", {
    type: "button",
    className: styles18.ClearButton,
    onClick: handleClearButtonPress,
    disabled
  }, /* @__PURE__ */ import_react110.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, i18n.translate("Polaris.Common.clear")), /* @__PURE__ */ import_react110.default.createElement(Icon, {
    source: SvgCircleCancelMinor,
    tone: "base"
  })) : null, handleNumberChange = (0, import_react110.useCallback)((steps, stepAmount = normalizedStep) => {
    if (onChange == null && onSpinnerChange == null)
      return;
    let dpl = (num) => (num.toString().split(".")[1] || []).length, numericValue = value ? parseFloat(value) : 0;
    if (isNaN(numericValue))
      return;
    let decimalPlaces = type === "integer" ? 0 : Math.max(dpl(numericValue), dpl(stepAmount)), newValue = Math.min(Number(normalizedMax), Math.max(numericValue + steps * stepAmount, Number(normalizedMin)));
    onSpinnerChange != null ? onSpinnerChange(String(newValue.toFixed(decimalPlaces)), id) : onChange?.(String(newValue.toFixed(decimalPlaces)), id);
  }, [id, normalizedMax, normalizedMin, onChange, onSpinnerChange, normalizedStep, type, value]), handleSpinnerButtonRelease = (0, import_react110.useCallback)(() => {
    clearTimeout(buttonPressTimer.current);
  }, []), handleSpinnerButtonPress = (0, import_react110.useCallback)((onChange2) => {
    let interval = 200, onChangeInterval = () => {
      interval > 50 && (interval -= 10), onChange2(0), buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
    };
    buttonPressTimer.current = window.setTimeout(onChangeInterval, interval), document.addEventListener("mouseup", handleSpinnerButtonRelease, {
      once: true
    });
  }, [handleSpinnerButtonRelease]), spinnerMarkup = isNumericType && step !== 0 && !disabled && !readOnly ? /* @__PURE__ */ import_react110.default.createElement(Spinner2, {
    onClick: handleClickChild,
    onChange: handleNumberChange,
    onMouseDown: handleSpinnerButtonPress,
    onMouseUp: handleSpinnerButtonRelease,
    ref: spinnerRef,
    onBlur: handleOnBlur
  }) : null, style = multiline && height2 ? {
    height: height2,
    maxHeight
  } : null, handleExpandingResize = (0, import_react110.useCallback)((height3) => {
    setHeight(height3);
  }, []), resizer = multiline && isAfterInitial ? /* @__PURE__ */ import_react110.default.createElement(Resizer, {
    contents: normalizedValue || placeholder,
    currentHeight: height2,
    minimumLines: typeof multiline == "number" ? multiline : 1,
    onHeightChange: handleExpandingResize
  }) : null, describedBy = [];
  error && describedBy.push(`${id}Error`), helpText && describedBy.push(helpTextID(id)), showCharacterCount && describedBy.push(`${id}-CharacterCounter`);
  let labelledBy = [];
  prefix && labelledBy.push(`${id}-Prefix`), suffix && labelledBy.push(`${id}-Suffix`), verticalContent && labelledBy.push(`${id}-VerticalContent`), labelledBy.unshift(labelID(id));
  let inputClassName = classNames(styles18.Input, align && styles18[variationName("Input-align", align)], suffix && styles18["Input-suffixed"], clearButton && styles18["Input-hasClearButton"], monospaced && styles18.monospaced, suggestion && styles18.suggestion), handleOnFocus = (event) => {
    setFocus(true), selectTextOnFocus && !suggestion && getInputRef()?.select(), onFocus && onFocus(event);
  };
  useEventListener("wheel", handleOnWheel, inputRef);
  function handleOnWheel(event) {
    document.activeElement === event.target && isNumericType && event.stopPropagation();
  }
  let input = /* @__PURE__ */ (0, import_react110.createElement)(multiline ? "textarea" : "input", {
    name,
    id,
    disabled,
    readOnly,
    role,
    autoFocus,
    value: normalizedValue,
    placeholder,
    style,
    autoComplete,
    className: inputClassName,
    ref: multiline ? textAreaRef : inputRef,
    min,
    max,
    step,
    minLength,
    maxLength,
    spellCheck,
    pattern,
    inputMode,
    type: inputType,
    rows: getRows(multiline),
    "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
    "aria-labelledby": labelledBy.join(" "),
    "aria-invalid": Boolean(error),
    "aria-owns": ariaOwns,
    "aria-activedescendant": ariaActiveDescendant,
    "aria-autocomplete": ariaAutocomplete,
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-required": requiredIndicator,
    ...normalizeAriaMultiline(multiline),
    onFocus: handleOnFocus,
    onBlur: handleOnBlur,
    onClick: handleClickChild,
    onKeyPress: handleKeyPress,
    onKeyDown: handleKeyDown5,
    onChange: suggestion ? void 0 : handleChange,
    onInput: suggestion ? handleChange : void 0,
    // 1Password disable data attribute
    "data-1p-ignore": autoComplete === "off" || void 0,
    // LastPass disable data attribute
    "data-lpignore": autoComplete === "off" || void 0,
    // Dashlane disable data attribute
    "data-form-type": autoComplete === "off" ? "other" : void 0
  }), inputWithVerticalContentMarkup = verticalContent ? /* @__PURE__ */ import_react110.default.createElement("div", {
    className: styles18.VerticalContent,
    id: `${id}-VerticalContent`,
    ref: verticalContentRef,
    onClick: handleClickChild
  }, verticalContent, input) : null, inputMarkup = verticalContent ? inputWithVerticalContentMarkup : input, backdropMarkup = /* @__PURE__ */ import_react110.default.createElement("div", {
    className: classNames(styles18.Backdrop, connectedLeft && styles18["Backdrop-connectedLeft"], connectedRight && styles18["Backdrop-connectedRight"])
  });
  return /* @__PURE__ */ import_react110.default.createElement(Labelled, {
    label,
    id,
    error,
    action: labelAction,
    labelHidden,
    helpText,
    requiredIndicator,
    disabled,
    readOnly
  }, /* @__PURE__ */ import_react110.default.createElement(Connected, {
    left: connectedLeft,
    right: connectedRight
  }, /* @__PURE__ */ import_react110.default.createElement("div", {
    className,
    onClick: handleClick,
    ref: textFieldRef
  }, prefixMarkup, inputMarkup, suffixMarkup, characterCountMarkup, clearButtonMarkup, spinnerMarkup, backdropMarkup, resizer)));
  function handleChange(event) {
    onChange && onChange(event.currentTarget.value, id);
  }
  function handleClick(event) {
    let {
      target
    } = event, inputRefRole = inputRef?.current?.getAttribute("role");
    if (target === inputRef.current && inputRefRole === "combobox") {
      inputRef.current?.focus(), handleOnFocus(event);
      return;
    }
    isPrefixOrSuffix(target) || isVerticalContent(target) || isInput(target) || isSpinner(target) || focus || getInputRef()?.focus();
  }
  function handleClickChild(event) {
    !isSpinner(event.target) && !isInput(event.target) && event.stopPropagation(), !(isPrefixOrSuffix(event.target) || isVerticalContent(event.target) || isInput(event.target) || focus) && (setFocus(true), getInputRef()?.focus());
  }
  function handleClearButtonPress() {
    onClearButtonClick && onClearButtonClick(id);
  }
  function handleKeyPress(event) {
    let {
      key,
      which
    } = event, numbersSpec = /[\d.,eE+-]$/, integerSpec = /[\deE+-]$/;
    !isNumericType || which === Key.Enter || type === "number" && numbersSpec.test(key) || type === "integer" && integerSpec.test(key) || event.preventDefault();
  }
  function handleKeyDown5(event) {
    if (!isNumericType)
      return;
    let {
      key,
      which
    } = event;
    type === "integer" && (key === "ArrowUp" || which === Key.UpArrow) && (handleNumberChange(1), event.preventDefault()), type === "integer" && (key === "ArrowDown" || which === Key.DownArrow) && (handleNumberChange(-1), event.preventDefault()), (which === Key.Home || key === "Home") && min !== void 0 && (onSpinnerChange != null ? onSpinnerChange(String(min), id) : onChange?.(String(min), id)), (which === Key.End || key === "End") && max !== void 0 && (onSpinnerChange != null ? onSpinnerChange(String(max), id) : onChange?.(String(max), id)), (which === Key.PageUp || key === "PageUp") && largeStep !== void 0 && handleNumberChange(1, largeStep), (which === Key.PageDown || key === "PageDown") && largeStep !== void 0 && handleNumberChange(-1, largeStep);
  }
  function handleOnBlur(event) {
    setFocus(false), !textFieldRef.current?.contains(event?.relatedTarget) && onBlur && onBlur(event);
  }
  function isInput(target) {
    let input2 = getInputRef();
    return target instanceof HTMLElement && input2 && (input2.contains(target) || input2.contains(document.activeElement));
  }
  function isPrefixOrSuffix(target) {
    return target instanceof Element && (prefixRef.current && prefixRef.current.contains(target) || suffixRef.current && suffixRef.current.contains(target));
  }
  function isSpinner(target) {
    return target instanceof Element && spinnerRef.current && spinnerRef.current.contains(target);
  }
  function isVerticalContent(target) {
    return target instanceof Element && verticalContentRef.current && (verticalContentRef.current.contains(target) || verticalContentRef.current.contains(document.activeElement));
  }
}
function getRows(multiline) {
  if (multiline)
    return typeof multiline == "number" ? multiline : 1;
}
function normalizeAriaMultiline(multiline) {
  if (multiline)
    return Boolean(multiline) || typeof multiline == "number" && multiline > 0 ? {
      "aria-multiline": true
    } : void 0;
}
var import_react110;
var init_TextField = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TextField/TextField.js"() {
    import_react110 = __toESM(require_react());
    init_dist3();
    init_css();
    init_use_is_after_initial_mount();
    init_types();
    init_use_event_listener();
    init_TextField_scss();
    init_Spinner2();
    init_Labelled();
    init_Connected();
    init_Resizer();
    init_Label();
    init_hooks2();
    init_Text();
    init_Icon();
  }
});
function ActionList({
  items,
  sections = [],
  actionRole,
  allowFiltering,
  onActionAnyItem
}) {
  let i18n = useI18n(), filterActions = (0, import_react111.useContext)(FilterActionsContext), finalSections = [], actionListRef = (0, import_react111.useRef)(null), [searchText, setSeachText] = (0, import_react111.useState)("");
  items ? finalSections = [{
    items
  }, ...sections] : sections && (finalSections = sections);
  let isFilterable = finalSections?.some((section) => section.items.some((item) => typeof item.content == "string")), hasMultipleSections = finalSections.length > 1, elementRole = hasMultipleSections && actionRole === "menuitem" ? "menu" : void 0, elementTabIndex = hasMultipleSections && actionRole === "menuitem" ? -1 : void 0, filteredSections = finalSections?.map((section) => ({
    ...section,
    items: section.items.filter(({
      content
    }) => typeof content == "string" ? content?.toLowerCase().includes(searchText.toLowerCase()) : content)
  })), sectionMarkup = filteredSections.map((section, index) => section.items.length > 0 ? /* @__PURE__ */ import_react111.default.createElement(Section, {
    key: typeof section.title == "string" ? section.title : index,
    section,
    hasMultipleSections,
    actionRole,
    onActionAnyItem,
    isFirst: index === 0
  }) : null), handleFocusPreviousItem = (evt) => {
    evt.preventDefault(), actionListRef.current && evt.target && actionListRef.current.contains(evt.target) && wrapFocusPreviousFocusableMenuItem(actionListRef.current, evt.target);
  }, handleFocusNextItem = (evt) => {
    evt.preventDefault(), actionListRef.current && evt.target && actionListRef.current.contains(evt.target) && wrapFocusNextFocusableMenuItem(actionListRef.current, evt.target);
  }, listeners = actionRole === "menuitem" ? /* @__PURE__ */ import_react111.default.createElement(import_react111.default.Fragment, null, /* @__PURE__ */ import_react111.default.createElement(KeypressListener, {
    keyEvent: "keydown",
    keyCode: Key.DownArrow,
    handler: handleFocusNextItem
  }), /* @__PURE__ */ import_react111.default.createElement(KeypressListener, {
    keyEvent: "keydown",
    keyCode: Key.UpArrow,
    handler: handleFocusPreviousItem
  })) : null, totalFilteredActions = (0, import_react111.useMemo)(() => filteredSections?.reduce((acc, section) => acc + section.items.length, 0) || 0, [filteredSections]), hasManyActions = (finalSections?.reduce((acc, section) => acc + section.items.length, 0) || 0) >= FILTER_ACTIONS_THRESHOLD;
  return /* @__PURE__ */ import_react111.default.createElement(import_react111.default.Fragment, null, (allowFiltering || filterActions) && hasManyActions && isFilterable && /* @__PURE__ */ import_react111.default.createElement(Box, {
    padding: "200",
    paddingBlockEnd: totalFilteredActions > 0 ? "0" : "200"
  }, /* @__PURE__ */ import_react111.default.createElement(TextField, {
    clearButton: true,
    labelHidden: true,
    label: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
    placeholder: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
    autoComplete: "off",
    value: searchText,
    onChange: (value) => setSeachText(value),
    prefix: /* @__PURE__ */ import_react111.default.createElement(Icon, {
      source: SvgSearchMinor
    }),
    onClearButtonClick: () => setSeachText("")
  })), /* @__PURE__ */ import_react111.default.createElement(Box, {
    as: hasMultipleSections ? "ul" : "div",
    ref: actionListRef,
    role: elementRole,
    tabIndex: elementTabIndex
  }, listeners, sectionMarkup));
}
var import_react111;
var FILTER_ACTIONS_THRESHOLD;
var init_ActionList = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionList/ActionList.js"() {
    import_react111 = __toESM(require_react());
    init_dist3();
    init_types();
    init_focus();
    init_FilterActionsProvider();
    init_Section();
    init_KeypressListener();
    init_TextField();
    init_hooks2();
    init_Box();
    init_Icon();
    init_Item();
    FILTER_ACTIONS_THRESHOLD = 8;
    ActionList.Item = Item;
  }
});
var styles23;
var init_ActionMenu_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/ActionMenu.scss.js"() {
    styles23 = {
      ActionMenu: "Polaris-ActionMenu"
    };
  }
});
var styles24;
var init_RollupActions_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/RollupActions/RollupActions.scss.js"() {
    styles24 = {
      RollupActivator: "Polaris-ActionMenu-RollupActions__RollupActivator"
    };
  }
});
function setActivatorAttributes(activator, {
  id,
  active = false,
  ariaHaspopup,
  activatorDisabled = false
}) {
  activatorDisabled || (activator.tabIndex = activator.tabIndex || 0), activator.setAttribute("aria-controls", id), activator.setAttribute("aria-owns", id), activator.setAttribute("aria-expanded", String(active)), ariaHaspopup != null && activator.setAttribute("aria-haspopup", String(ariaHaspopup));
}
var init_set_activator_attributes = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Popover/set-activator-attributes.js"() {
  }
});
function wrapWithComponent(element, Component9, props) {
  return element == null ? null : isElementOfType(element, Component9) ? element : /* @__PURE__ */ import_react112.default.createElement(Component9, props, element);
}
function isElementOfType(element, Component9) {
  if (element == null || !/* @__PURE__ */ (0, import_react112.isValidElement)(element) || typeof element.type == "string")
    return false;
  let {
    type: defaultType
  } = element, type = element.props?.__type__ || defaultType;
  return (Array.isArray(Component9) ? Component9 : [Component9]).some((AComponent) => typeof type != "string" && isComponent(AComponent, type));
}
function elementChildren(children, predicate = () => true) {
  return import_react112.Children.toArray(children).filter((child) => /* @__PURE__ */ (0, import_react112.isValidElement)(child) && predicate(child));
}
function ConditionalWrapper({
  condition,
  wrapper,
  children
}) {
  return condition ? wrapper(children) : children;
}
function ConditionalRender({
  condition,
  children
}) {
  return condition ? children : null;
}
function hotReloadComponentCheck(AComponent, AnotherComponent) {
  let componentName = AComponent.name, anotherComponentName = AnotherComponent.displayName;
  return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;
}
var import_react112;
var isComponent;
var init_components2 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/components.js"() {
    import_react112 = __toESM(require_react());
    isComponent = hotReloadComponentCheck;
  }
});
var styles25;
var init_Popover_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Popover/Popover.scss.js"() {
    styles25 = {
      Popover: "Polaris-Popover",
      PopoverOverlay: "Polaris-Popover__PopoverOverlay",
      "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
      "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
      measuring: "Polaris-Popover--measuring",
      "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
      fullWidth: "Polaris-Popover--fullWidth",
      Content: "Polaris-Popover__Content",
      positionedAbove: "Polaris-Popover--positionedAbove",
      ContentContainer: "Polaris-Popover__ContentContainer",
      "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
      "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
      Pane: "Polaris-Popover__Pane",
      "Pane-fixed": "Polaris-Popover__Pane--fixed",
      "Pane-subdued": "Polaris-Popover__Pane--subdued",
      "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
      Section: "Polaris-Popover__Section",
      FocusTracker: "Polaris-Popover__FocusTracker",
      "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
    };
  }
});
function Section2({
  children
}) {
  return /* @__PURE__ */ import_react113.default.createElement("div", {
    className: styles25.Section
  }, /* @__PURE__ */ import_react113.default.createElement(Box, {
    paddingInlineStart: "300",
    paddingInlineEnd: "300",
    paddingBlockStart: "200",
    paddingBlockEnd: "150"
  }, children));
}
var import_react113;
var init_Section2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Popover/components/Section/Section.js"() {
    import_react113 = __toESM(require_react());
    init_Popover_scss();
    init_Box();
  }
});
function Pane({
  captureOverscroll = false,
  fixed,
  sectioned,
  children,
  height: height2,
  subdued,
  onScrolledToBottom
}) {
  let className = classNames(styles25.Pane, fixed && styles25["Pane-fixed"], subdued && styles25["Pane-subdued"], captureOverscroll && styles25["Pane-captureOverscroll"]), content = sectioned ? wrapWithComponent(children, Section2, {}) : children, style = height2 ? {
    height: height2,
    maxHeight: height2,
    minHeight: height2
  } : void 0;
  return fixed ? /* @__PURE__ */ import_react114.default.createElement("div", {
    style,
    className
  }, content) : /* @__PURE__ */ import_react114.default.createElement(Scrollable, {
    shadow: true,
    className,
    style,
    onScrolledToBottom
  }, content);
}
var import_react114;
var init_Pane = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Popover/components/Pane/Pane.js"() {
    import_react114 = __toESM(require_react());
    init_css();
    init_components2();
    init_Popover_scss();
    init_Section2();
    init_Scrollable();
  }
});
function renderPopoverContent(children, props) {
  let childrenArray = import_react115.Children.toArray(children);
  return isElementOfType(childrenArray[0], Pane) ? childrenArray : wrapWithComponent(childrenArray, Pane, props);
}
function nodeContainsDescendant(rootNode, descendant) {
  if (rootNode === descendant)
    return true;
  let parent = descendant.parentNode;
  for (; parent != null; ) {
    if (parent === rootNode)
      return true;
    parent = parent.parentNode;
  }
  return false;
}
function wasContentNodeDescendant(composedPath, contentNode) {
  return contentNode.current != null && composedPath.includes(contentNode.current);
}
function wasPolarisPortalDescendant(composedPath, portalsContainerElement) {
  return composedPath.some((eventTarget) => eventTarget instanceof Node && portalsContainerElement?.contains(eventTarget));
}
var import_react115;
var PopoverCloseSource;
var TransitionStatus;
var PopoverOverlay;
var init_PopoverOverlay = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Popover/components/PopoverOverlay/PopoverOverlay.js"() {
    import_react115 = __toESM(require_react());
    init_build();
    init_focus();
    init_css();
    init_components2();
    init_types();
    init_shared();
    init_Popover_scss();
    init_Pane();
    init_context7();
    init_EventListener();
    init_KeypressListener();
    init_PositionedOverlay();
    (function(PopoverCloseSource2) {
      PopoverCloseSource2[PopoverCloseSource2.Click = 0] = "Click", PopoverCloseSource2[PopoverCloseSource2.EscapeKeypress = 1] = "EscapeKeypress", PopoverCloseSource2[PopoverCloseSource2.FocusOut = 2] = "FocusOut", PopoverCloseSource2[PopoverCloseSource2.ScrollOut = 3] = "ScrollOut";
    })(PopoverCloseSource || (PopoverCloseSource = {}));
    (function(TransitionStatus3) {
      TransitionStatus3.Entering = "entering", TransitionStatus3.Entered = "entered", TransitionStatus3.Exiting = "exiting", TransitionStatus3.Exited = "exited";
    })(TransitionStatus || (TransitionStatus = {}));
    PopoverOverlay = class extends import_react115.PureComponent {
      constructor(props) {
        super(props), this.state = {
          transitionStatus: this.props.active ? TransitionStatus.Entering : TransitionStatus.Exited
        }, this.contentNode = /* @__PURE__ */ (0, import_react115.createRef)(), this.renderPopover = (overlayDetails) => {
          let {
            measuring,
            desiredHeight,
            positioning
          } = overlayDetails, {
            id,
            children,
            sectioned,
            fullWidth,
            fullHeight,
            fluidContent,
            hideOnPrint,
            autofocusTarget,
            captureOverscroll
          } = this.props, className = classNames(styles25.Popover, positioning === "above" && styles25.positionedAbove, fullWidth && styles25.fullWidth, measuring && styles25.measuring, hideOnPrint && styles25["PopoverOverlay-hideOnPrint"]), contentStyles = measuring ? void 0 : {
            height: desiredHeight
          }, contentClassNames = classNames(styles25.Content, fullHeight && styles25["Content-fullHeight"], fluidContent && styles25["Content-fluidContent"]);
          return /* @__PURE__ */ import_react115.default.createElement("div", Object.assign({
            className
          }, overlay.props), /* @__PURE__ */ import_react115.default.createElement(EventListener, {
            event: "click",
            handler: this.handleClick
          }), /* @__PURE__ */ import_react115.default.createElement(EventListener, {
            event: "touchstart",
            handler: this.handleClick
          }), /* @__PURE__ */ import_react115.default.createElement(KeypressListener, {
            keyCode: Key.Escape,
            handler: this.handleEscape
          }), /* @__PURE__ */ import_react115.default.createElement("div", {
            className: styles25.FocusTracker,
            tabIndex: 0,
            onFocus: this.handleFocusFirstItem
          }), /* @__PURE__ */ import_react115.default.createElement("div", {
            className: styles25.ContentContainer
          }, /* @__PURE__ */ import_react115.default.createElement("div", {
            id,
            tabIndex: autofocusTarget === "none" ? void 0 : -1,
            className: contentClassNames,
            style: contentStyles,
            ref: this.contentNode
          }, renderPopoverContent(children, {
            captureOverscroll,
            sectioned
          }))), /* @__PURE__ */ import_react115.default.createElement("div", {
            className: styles25.FocusTracker,
            tabIndex: 0,
            onFocus: this.handleFocusLastItem
          }));
        }, this.handleClick = (event) => {
          let target = event.target, {
            contentNode,
            props: {
              activator,
              onClose,
              preventCloseOnChildOverlayClick
            }
          } = this, composedPath = event.composedPath(), wasDescendant = preventCloseOnChildOverlayClick ? wasPolarisPortalDescendant(composedPath, this.context.container) : wasContentNodeDescendant(composedPath, contentNode), isActivatorDescendant = nodeContainsDescendant(activator, target);
          wasDescendant || isActivatorDescendant || this.state.transitionStatus !== TransitionStatus.Entered || onClose(PopoverCloseSource.Click);
        }, this.handleScrollOut = () => {
          this.props.onClose(PopoverCloseSource.ScrollOut);
        }, this.handleEscape = (event) => {
          let target = event.target, {
            contentNode,
            props: {
              activator
            }
          } = this, composedPath = event.composedPath(), wasDescendant = wasContentNodeDescendant(composedPath, contentNode), isActivatorDescendant = nodeContainsDescendant(activator, target);
          (wasDescendant || isActivatorDescendant) && this.props.onClose(PopoverCloseSource.EscapeKeypress);
        }, this.handleFocusFirstItem = () => {
          this.props.onClose(PopoverCloseSource.FocusOut);
        }, this.handleFocusLastItem = () => {
          this.props.onClose(PopoverCloseSource.FocusOut);
        }, this.overlayRef = /* @__PURE__ */ (0, import_react115.createRef)();
      }
      forceUpdatePosition() {
        this.overlayRef.current?.forceUpdatePosition();
      }
      changeTransitionStatus(transitionStatus, cb) {
        this.setState({
          transitionStatus
        }, cb), this.contentNode.current && this.contentNode.current.getBoundingClientRect();
      }
      componentDidMount() {
        this.props.active && (this.focusContent(), this.changeTransitionStatus(TransitionStatus.Entered));
      }
      componentDidUpdate(oldProps) {
        this.props.active && !oldProps.active && (this.focusContent(), this.changeTransitionStatus(TransitionStatus.Entering, () => {
          this.clearTransitionTimeout(), this.enteringTimer = window.setTimeout(() => {
            this.setState({
              transitionStatus: TransitionStatus.Entered
            });
          }, parseInt(themeDefault.motion["motion-duration-100"], 10));
        })), !this.props.active && oldProps.active && (this.clearTransitionTimeout(), this.setState({
          transitionStatus: TransitionStatus.Exited
        }));
      }
      componentWillUnmount() {
        this.clearTransitionTimeout();
      }
      render() {
        let {
          active,
          activator,
          fullWidth,
          preferredPosition = "below",
          preferredAlignment = "center",
          preferInputActivator = true,
          fixed,
          zIndexOverride
        } = this.props, {
          transitionStatus
        } = this.state;
        if (transitionStatus === TransitionStatus.Exited && !active)
          return null;
        let className = classNames(styles25.PopoverOverlay, transitionStatus === TransitionStatus.Entering && styles25["PopoverOverlay-entering"], transitionStatus === TransitionStatus.Entered && styles25["PopoverOverlay-open"], transitionStatus === TransitionStatus.Exiting && styles25["PopoverOverlay-exiting"]);
        return /* @__PURE__ */ import_react115.default.createElement(PositionedOverlay, {
          ref: this.overlayRef,
          fullWidth,
          active,
          activator,
          preferInputActivator,
          preferredPosition,
          preferredAlignment,
          render: this.renderPopover.bind(this),
          fixed,
          onScrollOut: this.handleScrollOut,
          classNames: className,
          zIndexOverride
        });
      }
      clearTransitionTimeout() {
        this.enteringTimer && window.clearTimeout(this.enteringTimer);
      }
      focusContent() {
        let {
          autofocusTarget = "container"
        } = this.props;
        autofocusTarget === "none" || this.contentNode == null || requestAnimationFrame(() => {
          if (this.contentNode.current == null)
            return;
          let focusableChild = findFirstKeyboardFocusableNode(this.contentNode.current);
          focusableChild && autofocusTarget === "first-node" ? focusableChild.focus({
            preventScroll: true
          }) : this.contentNode.current.focus({
            preventScroll: true
          });
        });
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
    PopoverOverlay.contextType = PortalsManagerContext;
  }
});
function isInPortal(element) {
  let parentElement = element.parentElement;
  for (; parentElement; ) {
    if (parentElement.matches(portal.selector))
      return false;
    parentElement = parentElement.parentElement;
  }
  return true;
}
var import_react116;
var PopoverComponent;
var Popover2;
var init_Popover = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Popover/Popover.js"() {
    import_react116 = __toESM(require_react());
    init_focus();
    init_shared();
    init_set_activator_attributes();
    init_PopoverOverlay();
    init_Pane();
    init_Section2();
    init_Portal();
    PopoverComponent = /* @__PURE__ */ (0, import_react116.forwardRef)(function({
      activatorWrapper = "div",
      children,
      onClose,
      activator,
      preventFocusOnClose,
      active,
      fixed,
      ariaHaspopup,
      preferInputActivator = true,
      zIndexOverride,
      ...rest
    }, ref) {
      let [activatorNode, setActivatorNode] = (0, import_react116.useState)(), overlayRef = (0, import_react116.useRef)(null), activatorContainer = (0, import_react116.useRef)(null), WrapperComponent = activatorWrapper, id = (0, import_react116.useId)();
      function forceUpdatePosition() {
        overlayRef.current?.forceUpdatePosition();
      }
      (0, import_react116.useImperativeHandle)(ref, () => ({
        forceUpdatePosition
      }));
      let setAccessibilityAttributes = (0, import_react116.useCallback)(() => {
        if (activatorContainer.current == null)
          return;
        let focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current, activatorDisabled = "disabled" in focusableActivator && Boolean(focusableActivator.disabled);
        setActivatorAttributes(focusableActivator, {
          id,
          active,
          ariaHaspopup,
          activatorDisabled
        });
      }, [id, active, ariaHaspopup]), handleClose = (source) => {
        if (onClose(source), !(activatorContainer.current == null || preventFocusOnClose)) {
          if (source === PopoverCloseSource.FocusOut && activatorNode) {
            let focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode) || findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
            focusNextFocusableNode(focusableActivator, isInPortal) || focusableActivator.focus();
          } else if (source === PopoverCloseSource.EscapeKeypress && activatorNode) {
            let focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode) || findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
            focusableActivator ? focusableActivator.focus() : focusNextFocusableNode(focusableActivator, isInPortal);
          }
        }
      };
      (0, import_react116.useEffect)(() => {
        (!activatorNode && activatorContainer.current || activatorNode && activatorContainer.current && !activatorContainer.current.contains(activatorNode)) && setActivatorNode(activatorContainer.current.firstElementChild), setAccessibilityAttributes();
      }, [activatorNode, setAccessibilityAttributes]), (0, import_react116.useEffect)(() => {
        activatorNode && activatorContainer.current && setActivatorNode(activatorContainer.current.firstElementChild), setAccessibilityAttributes();
      }, [activatorNode, setAccessibilityAttributes]);
      let portal2 = activatorNode ? /* @__PURE__ */ import_react116.default.createElement(Portal, {
        idPrefix: "popover"
      }, /* @__PURE__ */ import_react116.default.createElement(PopoverOverlay, Object.assign({
        ref: overlayRef,
        id,
        activator: activatorNode,
        preferInputActivator,
        onClose: handleClose,
        active,
        fixed,
        zIndexOverride
      }, rest), children)) : null;
      return /* @__PURE__ */ import_react116.default.createElement(WrapperComponent, {
        ref: activatorContainer
      }, import_react116.Children.only(activator), portal2);
    });
    Popover2 = Object.assign(PopoverComponent, {
      Pane,
      Section: Section2
    });
  }
});
function RollupActions({
  accessibilityLabel,
  items = [],
  sections = []
}) {
  let i18n = useI18n(), {
    value: rollupOpen,
    toggle: toggleRollupOpen
  } = useToggle(false);
  if (items.length === 0 && sections.length === 0)
    return null;
  let activatorMarkup = /* @__PURE__ */ import_react117.default.createElement("div", {
    className: styles24.RollupActivator
  }, /* @__PURE__ */ import_react117.default.createElement(Button, {
    icon: SvgHorizontalDotsMinor,
    accessibilityLabel: accessibilityLabel || i18n.translate("Polaris.ActionMenu.RollupActions.rollupButton"),
    onClick: toggleRollupOpen
  }));
  return /* @__PURE__ */ import_react117.default.createElement(Popover2, {
    active: rollupOpen,
    activator: activatorMarkup,
    preferredAlignment: "right",
    onClose: toggleRollupOpen,
    hideOnPrint: true
  }, /* @__PURE__ */ import_react117.default.createElement(ActionList, {
    items,
    sections,
    onActionAnyItem: toggleRollupOpen
  }));
}
var import_react117;
var init_RollupActions = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/RollupActions/RollupActions.js"() {
    import_react117 = __toESM(require_react());
    init_dist3();
    init_use_toggle();
    init_RollupActions_scss();
    init_hooks2();
    init_Button();
    init_Popover();
    init_ActionList();
  }
});
var styles26;
var init_Actions_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/Actions/Actions.scss.js"() {
    styles26 = {
      ActionsLayout: "Polaris-ActionMenu-Actions__ActionsLayout"
    };
  }
});
var styles27;
var init_MenuGroup_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/MenuGroup/MenuGroup.scss.js"() {
    styles27 = {
      Details: "Polaris-ActionMenu-MenuGroup__Details"
    };
  }
});
var styles28;
var init_SecondaryAction_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/SecondaryAction/SecondaryAction.scss.js"() {
    styles28 = {
      SecondaryAction: "Polaris-ActionMenu-SecondaryAction",
      critical: "Polaris-ActionMenu-SecondaryAction--critical"
    };
  }
});
function SecondaryAction({
  children,
  tone,
  helpText,
  onAction,
  getOffsetWidth,
  destructive,
  ...rest
}) {
  let secondaryActionsRef = (0, import_react118.useRef)(null);
  (0, import_react118.useEffect)(() => {
    !getOffsetWidth || !secondaryActionsRef.current || getOffsetWidth(secondaryActionsRef.current?.offsetWidth);
  }, [getOffsetWidth]);
  let buttonMarkup = /* @__PURE__ */ import_react118.default.createElement(Button, Object.assign({
    onClick: onAction,
    tone: destructive ? "critical" : void 0
  }, rest), children), actionMarkup = helpText ? /* @__PURE__ */ import_react118.default.createElement(Tooltip, {
    preferredPosition: "below",
    content: helpText
  }, buttonMarkup) : buttonMarkup;
  return /* @__PURE__ */ import_react118.default.createElement("div", {
    className: classNames(styles28.SecondaryAction, tone === "critical" && styles28.critical),
    ref: secondaryActionsRef
  }, actionMarkup);
}
var import_react118;
var init_SecondaryAction = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/SecondaryAction/SecondaryAction.js"() {
    import_react118 = __toESM(require_react());
    init_css();
    init_SecondaryAction_scss();
    init_Button();
    init_Tooltip();
  }
});
function MenuGroup({
  accessibilityLabel,
  active,
  actions,
  details,
  title,
  icon,
  disabled,
  onClick,
  onClose,
  onOpen,
  getOffsetWidth,
  sections
}) {
  let handleClose = (0, import_react119.useCallback)(() => {
    onClose(title);
  }, [onClose, title]), handleOpen = (0, import_react119.useCallback)(() => {
    onOpen(title);
  }, [onOpen, title]), handleClick = (0, import_react119.useCallback)(() => {
    onClick ? onClick(handleOpen) : handleOpen();
  }, [onClick, handleOpen]), handleOffsetWidth = (0, import_react119.useCallback)((width2) => {
    getOffsetWidth && getOffsetWidth(width2);
  }, [getOffsetWidth]), popoverActivator = /* @__PURE__ */ import_react119.default.createElement(SecondaryAction, {
    disclosure: true,
    disabled,
    icon,
    accessibilityLabel,
    onClick: handleClick,
    getOffsetWidth: handleOffsetWidth
  }, title);
  return /* @__PURE__ */ import_react119.default.createElement(Popover2, {
    active: Boolean(active),
    activator: popoverActivator,
    preferredAlignment: "left",
    onClose: handleClose,
    hideOnPrint: true
  }, /* @__PURE__ */ import_react119.default.createElement(ActionList, {
    items: actions,
    sections,
    onActionAnyItem: handleClose
  }), details && /* @__PURE__ */ import_react119.default.createElement("div", {
    className: styles27.Details
  }, details));
}
var import_react119;
var init_MenuGroup = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/MenuGroup/MenuGroup.js"() {
    import_react119 = __toESM(require_react());
    init_MenuGroup_scss();
    init_Popover();
    init_ActionList();
    init_SecondaryAction();
  }
});
var styles29;
var init_ButtonGroup_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ButtonGroup/ButtonGroup.scss.js"() {
    styles29 = {
      ButtonGroup: "Polaris-ButtonGroup",
      Item: "Polaris-ButtonGroup__Item",
      "Item-plain": "Polaris-ButtonGroup__Item--plain",
      variantSegmented: "Polaris-ButtonGroup--variantSegmented",
      "Item-focused": "Polaris-ButtonGroup__Item--focused",
      fullWidth: "Polaris-ButtonGroup--fullWidth",
      extraTight: "Polaris-ButtonGroup--extraTight",
      tight: "Polaris-ButtonGroup--tight",
      loose: "Polaris-ButtonGroup--loose",
      noWrap: "Polaris-ButtonGroup--noWrap"
    };
  }
});
function Item3({
  button
}) {
  let {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle(false), className = classNames(styles29.Item, focused && styles29["Item-focused"], button.props.variant === "plain" && styles29["Item-plain"]);
  return /* @__PURE__ */ import_react120.default.createElement("div", {
    className,
    onFocus: forceTrueFocused,
    onBlur: forceFalseFocused
  }, button);
}
var import_react120;
var init_Item3 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ButtonGroup/components/Item/Item.js"() {
    import_react120 = __toESM(require_react());
    init_use_toggle();
    init_css();
    init_ButtonGroup_scss();
  }
});
function ButtonGroup({
  children,
  gap,
  variant,
  fullWidth,
  connectedTop,
  noWrap
}) {
  let className = classNames(styles29.ButtonGroup, gap && styles29[gap], variant && styles29[variationName("variant", variant)], fullWidth && styles29.fullWidth, noWrap && styles29.noWrap), contents = elementChildren(children).map((child, index) => /* @__PURE__ */ import_react121.default.createElement(Item3, {
    button: child,
    key: index
  }));
  return /* @__PURE__ */ import_react121.default.createElement("div", {
    className,
    "data-buttongroup-variant": variant,
    "data-buttongroup-connected-top": connectedTop,
    "data-buttongroup-full-width": fullWidth,
    "data-buttongroup-no-wrap": noWrap
  }, contents);
}
var import_react121;
var init_ButtonGroup = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ButtonGroup/ButtonGroup.js"() {
    import_react121 = __toESM(require_react());
    init_css();
    init_components2();
    init_ButtonGroup_scss();
    init_Item3();
  }
});
function Actions({
  actions = [],
  groups = [],
  onActionRollup
}) {
  let i18n = useI18n(), actionsLayoutRef = (0, import_react122.useRef)(null), menuGroupWidthRef = (0, import_react122.useRef)(0), availableWidthRef = (0, import_react122.useRef)(0), actionsAndGroupsLengthRef = (0, import_react122.useRef)(0), timesMeasured = (0, import_react122.useRef)(0), actionWidthsRef = (0, import_react122.useRef)([]), rollupActiveRef = (0, import_react122.useRef)(null), [activeMenuGroup, setActiveMenuGroup] = (0, import_react122.useState)(void 0), [measuredActions, setMeasuredActions] = (0, import_react122.useState)({
    showable: [],
    rolledUp: []
  }), defaultRollupGroup = {
    title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
    actions: []
  }, lastMenuGroup = [...groups].pop(), lastMenuGroupWidth = [...actionWidthsRef.current].pop() || 0, handleActionsOffsetWidth = (0, import_react122.useCallback)((width2) => {
    actionWidthsRef.current = [...actionWidthsRef.current, width2];
  }, []), handleMenuGroupToggle = (0, import_react122.useCallback)((group) => setActiveMenuGroup(activeMenuGroup ? void 0 : group), [activeMenuGroup]), handleMenuGroupClose = (0, import_react122.useCallback)(() => setActiveMenuGroup(void 0), []), updateActions = (0, import_react122.useCallback)(() => {
    let actionsAndGroups = [...actions, ...groups];
    groups.length > 0 && (actionsAndGroups = [...actionsAndGroups].slice(0, actionsAndGroups.length - 1)), setMeasuredActions((currentMeasuredActions) => {
      let showable = actionsAndGroups.slice(0, currentMeasuredActions.showable.length), rolledUp = actionsAndGroups.slice(currentMeasuredActions.showable.length, actionsAndGroups.length);
      return {
        showable,
        rolledUp
      };
    });
  }, [actions, groups]), measureActions = (0, import_react122.useCallback)(() => {
    if (actionWidthsRef.current.length === 0 || availableWidthRef.current === 0)
      return;
    let actionsAndGroups = [...actions, ...groups];
    if (actionsAndGroups.length === 1) {
      setMeasuredActions({
        showable: actionsAndGroups,
        rolledUp: []
      });
      return;
    }
    let currentAvailableWidth = availableWidthRef.current, newShowableActions = [], newRolledUpActions = [];
    if (actionsAndGroups.forEach((action4, index) => {
      if (actionWidthsRef.current[index] + menuGroupWidthRef.current + ACTION_SPACING + lastMenuGroupWidth <= currentAvailableWidth)
        currentAvailableWidth -= actionWidthsRef.current[index] + ACTION_SPACING * 2, newShowableActions = [...newShowableActions, action4];
      else {
        if (currentAvailableWidth = 0, action4 === lastMenuGroup)
          return;
        newRolledUpActions = [...newRolledUpActions, action4];
      }
    }), onActionRollup) {
      let isRollupActive = newShowableActions.length < actionsAndGroups.length - 1;
      rollupActiveRef.current !== isRollupActive && (onActionRollup(isRollupActive), rollupActiveRef.current = isRollupActive);
    }
    setMeasuredActions({
      showable: newShowableActions,
      rolledUp: newRolledUpActions
    }), timesMeasured.current += 1, actionsAndGroupsLengthRef.current = actionsAndGroups.length;
  }, [actions, groups, lastMenuGroup, lastMenuGroupWidth, onActionRollup]), handleResize = (0, import_react122.useMemo)(() => debounce(() => {
    actionsLayoutRef.current && (availableWidthRef.current = actionsLayoutRef.current.offsetWidth, timesMeasured.current = 0, measureActions());
  }, 50, {
    leading: false,
    trailing: true
  }), [measureActions]);
  useEventListener("resize", handleResize), useIsomorphicLayoutEffect2(() => {
    if (actionsLayoutRef.current) {
      if (availableWidthRef.current = actionsLayoutRef.current.offsetWidth, // Allow measuring twice
      // This accounts for the initial paint and re-flow
      timesMeasured.current >= 2 && [...actions, ...groups].length === actionsAndGroupsLengthRef.current) {
        updateActions();
        return;
      }
      measureActions();
    }
  }, [actions, groups, measureActions, updateActions]);
  let actionsMarkup = actions.map((action4) => {
    if (measuredActions.showable.length > 0 || measuredActions.rolledUp.includes(action4))
      return null;
    let {
      content,
      onAction,
      ...rest
    } = action4;
    return /* @__PURE__ */ import_react122.default.createElement(SecondaryAction, Object.assign({
      key: content,
      onClick: onAction
    }, rest, {
      getOffsetWidth: handleActionsOffsetWidth
    }), content);
  }), rollUppableActionsMarkup = measuredActions.showable.length > 0 ? measuredActions.showable.map((action4) => action4.content && /* @__PURE__ */ import_react122.default.createElement(SecondaryAction, Object.assign({
    key: action4.content
  }, action4, {
    getOffsetWidth: handleActionsOffsetWidth
  }), action4.content)) : null, groupsMarkup = [...groups, defaultRollupGroup].filter((group) => groups.length === 0 ? group : group === lastMenuGroup || !measuredActions.rolledUp.some((rolledUpGroup) => isMenuGroup(rolledUpGroup) && rolledUpGroup.title === group.title)).map((group) => {
    let {
      title,
      actions: groupActions,
      ...rest
    } = group, isDefaultGroup = group === defaultRollupGroup, isLastMenuGroup = group === lastMenuGroup, [finalRolledUpActions, finalRolledUpSectionGroups] = measuredActions.rolledUp.reduce(([actions2, sections], action4) => (isMenuGroup(action4) ? sections.push({
      title: action4.title,
      items: action4.actions.map((sectionAction) => ({
        ...sectionAction,
        disabled: action4.disabled || sectionAction.disabled
      }))
    }) : actions2.push(action4), [actions2, sections]), [[], []]);
    if (!isDefaultGroup && !isLastMenuGroup)
      return /* @__PURE__ */ import_react122.default.createElement(MenuGroup, Object.assign({
        key: title,
        title,
        active: title === activeMenuGroup,
        actions: groupActions
      }, rest, {
        onOpen: handleMenuGroupToggle,
        onClose: handleMenuGroupClose,
        getOffsetWidth: handleActionsOffsetWidth
      }));
    if (!isDefaultGroup && isLastMenuGroup)
      return /* @__PURE__ */ import_react122.default.createElement(MenuGroup, Object.assign({
        key: title,
        title,
        active: title === activeMenuGroup,
        actions: [...finalRolledUpActions, ...groupActions],
        sections: finalRolledUpSectionGroups
      }, rest, {
        onOpen: handleMenuGroupToggle,
        onClose: handleMenuGroupClose,
        getOffsetWidth: handleActionsOffsetWidth
      }));
    if (isDefaultGroup && groups.length === 0 && finalRolledUpActions.length)
      return /* @__PURE__ */ import_react122.default.createElement(MenuGroup, Object.assign({
        key: title,
        title,
        active: title === activeMenuGroup,
        actions: finalRolledUpActions,
        sections: finalRolledUpSectionGroups
      }, rest, {
        onOpen: handleMenuGroupToggle,
        onClose: handleMenuGroupClose,
        getOffsetWidth: handleActionsOffsetWidth
      }));
  }), groupedActionsMarkup = /* @__PURE__ */ import_react122.default.createElement(ButtonGroup, {
    gap: "tight"
  }, rollUppableActionsMarkup, actionsMarkup, groupsMarkup);
  return /* @__PURE__ */ import_react122.default.createElement("div", {
    className: styles26.ActionsLayout,
    ref: actionsLayoutRef
  }, groupedActionsMarkup);
}
function isMenuGroup(actionOrMenuGroup) {
  return "title" in actionOrMenuGroup;
}
var import_react122;
var ACTION_SPACING;
var init_Actions = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/components/Actions/Actions.js"() {
    import_react122 = __toESM(require_react());
    init_debounce();
    init_use_event_listener();
    init_use_isomorphic_layout_effect();
    init_Actions_scss();
    init_MenuGroup();
    init_ButtonGroup();
    init_hooks2();
    init_SecondaryAction();
    ACTION_SPACING = 8;
  }
});
function ActionMenu({
  actions = [],
  groups = [],
  rollup,
  rollupActionsLabel,
  onActionRollup
}) {
  if (actions.length === 0 && groups.length === 0)
    return null;
  let actionMenuClassNames = classNames(styles23.ActionMenu, rollup && styles23.rollup), rollupSections = groups.map((group) => convertGroupToSection(group));
  return /* @__PURE__ */ import_react123.default.createElement("div", {
    className: actionMenuClassNames
  }, rollup ? /* @__PURE__ */ import_react123.default.createElement(RollupActions, {
    accessibilityLabel: rollupActionsLabel,
    items: actions,
    sections: rollupSections
  }) : /* @__PURE__ */ import_react123.default.createElement(Actions, {
    actions,
    groups,
    onActionRollup
  }));
}
function hasGroupsWithActions(groups = []) {
  return groups.length === 0 ? false : groups.some((group) => group.actions.length > 0);
}
function convertGroupToSection({
  title,
  actions,
  disabled
}) {
  return {
    title,
    items: actions.map((action4) => ({
      ...action4,
      disabled: disabled || action4.disabled
    }))
  };
}
var import_react123;
var init_ActionMenu = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ActionMenu/ActionMenu.js"() {
    import_react123 = __toESM(require_react());
    init_css();
    init_ActionMenu_scss();
    init_RollupActions();
    init_Actions();
  }
});
function isSection(arr) {
  return typeof arr[0] == "object" && Object.prototype.hasOwnProperty.call(arr[0], "options");
}
var init_options = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/options.js"() {
  }
});
var styles30;
var init_Autocomplete_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Autocomplete/Autocomplete.scss.js"() {
    styles30 = {
      Loading: "Polaris-Autocomplete__Loading",
      SectionWrapper: "Polaris-Autocomplete__SectionWrapper"
    };
  }
});
var styles31;
var init_MappedOption_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Autocomplete/components/MappedOption/MappedOption.scss.js"() {
    styles31 = {
      Content: "Polaris-Autocomplete-MappedOption__Content",
      Media: "Polaris-Autocomplete-MappedOption__Media",
      singleSelectionMedia: "Polaris-Autocomplete-MappedOption--singleSelectionMedia",
      disabledMedia: "Polaris-Autocomplete-MappedOption--disabledMedia"
    };
  }
});
var styles32;
var init_Listbox_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/Listbox.scss.js"() {
    styles32 = {
      Listbox: "Polaris-Listbox"
    };
  }
});
var import_react124;
var ComboboxTextFieldContext;
var ComboboxListboxContext;
var ComboboxListboxOptionContext;
var init_context11 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/combobox/context.js"() {
    import_react124 = __toESM(require_react()), ComboboxTextFieldContext = /* @__PURE__ */ (0, import_react124.createContext)(void 0), ComboboxListboxContext = /* @__PURE__ */ (0, import_react124.createContext)({}), ComboboxListboxOptionContext = /* @__PURE__ */ (0, import_react124.createContext)({});
  }
});
function useComboboxTextField() {
  let context = (0, import_react125.useContext)(ComboboxTextFieldContext);
  if (!context)
    throw new Error("No Combobox was provided. Your component must be wrapped in a <Combobox> component.");
  return context;
}
function useComboboxListbox() {
  return (0, import_react125.useContext)(ComboboxListboxContext);
}
var import_react125;
var init_hooks5 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/combobox/hooks.js"() {
    import_react125 = __toESM(require_react());
    init_context11();
  }
});
function scrollOptionIntoView(option, scrollable2) {
  let listTop = scrollable2.scrollTop, listBottom = listTop + scrollable2.clientHeight, {
    offsetHeight: optionHeight
  } = option, {
    offsetTop: optionTop
  } = option, optionBottom = optionTop + optionHeight;
  if (!(optionTop > listTop && optionBottom < listBottom)) {
    let top = 0;
    optionBottom > listBottom ? top = optionBottom + optionHeight * 0.85 - listBottom : optionTop < listTop && (top = optionTop - optionHeight * 0.15 - listTop), requestAnimationFrame(() => {
      scrollable2.scrollBy({
        top,
        behavior: "auto"
      });
    });
  }
}
var init_utilities = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/listbox/utilities.js"() {
  }
});
var import_react126;
var ListboxContext;
var WithinListboxContext;
var ActionContext;
var init_context12 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/listbox/context.js"() {
    import_react126 = __toESM(require_react()), ListboxContext = /* @__PURE__ */ (0, import_react126.createContext)(void 0), WithinListboxContext = /* @__PURE__ */ (0, import_react126.createContext)(false), ActionContext = /* @__PURE__ */ (0, import_react126.createContext)(false);
  }
});
var styles33;
var init_TextOption_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/TextOption/TextOption.scss.js"() {
    styles33 = {
      TextOption: "Polaris-Listbox-TextOption",
      allowMultiple: "Polaris-Listbox-TextOption--allowMultiple",
      isAction: "Polaris-Listbox-TextOption--isAction",
      disabled: "Polaris-Listbox-TextOption--disabled",
      selected: "Polaris-Listbox-TextOption--selected",
      Content: "Polaris-Listbox-TextOption__Content",
      Checkbox: "Polaris-Listbox-TextOption__Checkbox"
    };
  }
});
var styles34;
var init_Checkbox_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Checkbox/Checkbox.scss.js"() {
    styles34 = {
      Checkbox: "Polaris-Checkbox",
      ChoiceLabel: "Polaris-Checkbox__ChoiceLabel",
      Backdrop: "Polaris-Checkbox__Backdrop",
      Input: "Polaris-Checkbox__Input",
      "Input-indeterminate": "Polaris-Checkbox__Input--indeterminate",
      Icon: "Polaris-Checkbox__Icon",
      animated: "Polaris-Checkbox--animated",
      toneMagic: "Polaris-Checkbox--toneMagic",
      hover: "Polaris-Checkbox--hover",
      error: "Polaris-Checkbox--error",
      checked: "Polaris-Checkbox--checked",
      pathAnimation: "Polaris-Checkbox--pathAnimation"
    };
  }
});
var styles35;
var init_Choice_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Choice/Choice.scss.js"() {
    styles35 = {
      Choice: "Polaris-Choice",
      labelHidden: "Polaris-Choice--labelHidden",
      Label: "Polaris-Choice__Label",
      Control: "Polaris-Choice__Control",
      disabled: "Polaris-Choice--disabled",
      toneMagic: "Polaris-Choice--toneMagic",
      Descriptions: "Polaris-Choice__Descriptions",
      HelpText: "Polaris-Choice__HelpText"
    };
  }
});
function Choice({
  id,
  label,
  disabled,
  error,
  children,
  labelHidden,
  helpText,
  onClick,
  labelClassName,
  fill,
  bleed,
  bleedBlockStart,
  bleedBlockEnd,
  bleedInlineStart,
  bleedInlineEnd,
  tone
}) {
  let className = classNames(styles35.Choice, labelHidden && styles35.labelHidden, disabled && styles35.disabled, tone && styles35[variationName("tone", tone)], labelClassName), labelStyle = {
    // Pass through overrides for bleed values if they're set by the prop
    ...getResponsiveProps("choice", "bleed-block-end", "space", bleedBlockEnd || bleed),
    ...getResponsiveProps("choice", "bleed-block-start", "space", bleedBlockStart || bleed),
    ...getResponsiveProps("choice", "bleed-inline-start", "space", bleedInlineStart || bleed),
    ...getResponsiveProps("choice", "bleed-inline-end", "space", bleedInlineEnd || bleed),
    ...Object.fromEntries(Object.entries(getResponsiveValue("choice", "fill", fill)).map(
      // Map "true" => "100%" and "false" => "auto" for use in
      // inline/block-size calc()
      ([key, value]) => [key, value ? "100%" : "auto"]
    ))
  }, labelMarkup = (
    // NOTE: Can't use a Box here for a few reasons:
    // - as="label" fails `Element` typecheck (even though the JS works)
    // - Can't pass hard coded values to padding (forced to tokens)
    // - Can't pass negative values to padding
    // - Can't pass margins at all
    /* @__PURE__ */ import_react127.default.createElement("label", {
      className,
      htmlFor: id,
      onClick,
      style: sanitizeCustomProperties(labelStyle)
    }, /* @__PURE__ */ import_react127.default.createElement("span", {
      className: styles35.Control
    }, children), /* @__PURE__ */ import_react127.default.createElement("span", {
      className: styles35.Label
    }, /* @__PURE__ */ import_react127.default.createElement("span", null, label)))
  ), helpTextMarkup = helpText ? /* @__PURE__ */ import_react127.default.createElement("div", {
    className: styles35.HelpText,
    id: helpTextID2(id)
  }, /* @__PURE__ */ import_react127.default.createElement(Text, {
    as: "span",
    tone: disabled ? void 0 : "subdued"
  }, helpText)) : null, errorMarkup = error && typeof error != "boolean" && /* @__PURE__ */ import_react127.default.createElement("div", {
    className: styles35.Error
  }, /* @__PURE__ */ import_react127.default.createElement(InlineError, {
    message: error,
    fieldID: id
  })), descriptionMarkup = helpTextMarkup || errorMarkup ? /* @__PURE__ */ import_react127.default.createElement("div", {
    className: styles35.Descriptions
  }, errorMarkup, helpTextMarkup) : null;
  return descriptionMarkup ? /* @__PURE__ */ import_react127.default.createElement("div", null, labelMarkup, descriptionMarkup) : labelMarkup;
}
function helpTextID2(id) {
  return `${id}HelpText`;
}
var import_react127;
var init_Choice = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Choice/Choice.js"() {
    import_react127 = __toESM(require_react());
    init_css();
    init_Choice_scss();
    init_Text();
    init_InlineError();
  }
});
function noop4() {
}
function stopPropagation(event) {
  event.stopPropagation();
}
var import_react128;
var Checkbox;
var init_Checkbox = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Checkbox/Checkbox.js"() {
    import_react128 = __toESM(require_react());
    init_dist3();
    init_css();
    init_context12();
    init_Checkbox_scss();
    init_Choice();
    init_InlineError();
    init_Icon();
    Checkbox = /* @__PURE__ */ (0, import_react128.forwardRef)(function({
      ariaControls,
      ariaDescribedBy: ariaDescribedByProp,
      label,
      labelHidden,
      checked = false,
      helpText,
      disabled,
      id: idProp,
      name,
      value,
      error,
      onChange,
      onFocus,
      onBlur,
      labelClassName,
      fill,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd,
      tone
    }, ref) {
      let inputNode = (0, import_react128.useRef)(null), uniqId = (0, import_react128.useId)(), id = idProp ?? uniqId, isWithinListbox = (0, import_react128.useContext)(WithinListboxContext);
      (0, import_react128.useImperativeHandle)(ref, () => ({
        focus: () => {
          inputNode.current && inputNode.current.focus();
        }
      }));
      let handleBlur = () => {
        onBlur && onBlur();
      }, handleOnClick = () => {
        onChange == null || inputNode.current == null || disabled || (onChange(inputNode.current.checked, id), inputNode.current.focus());
      }, describedBy = [];
      error && typeof error != "boolean" && describedBy.push(errorTextID(id)), helpText && describedBy.push(helpTextID2(id)), ariaDescribedByProp && describedBy.push(ariaDescribedByProp);
      let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, wrapperClassName = classNames(styles34.Checkbox, error && styles34.error), isIndeterminate = checked === "indeterminate", isChecked = !isIndeterminate && Boolean(checked), indeterminateAttributes = isIndeterminate ? {
        indeterminate: "true",
        "aria-checked": "mixed"
      } : {
        "aria-checked": isChecked
      }, iconSource = /* @__PURE__ */ import_react128.default.createElement("svg", {
        viewBox: "0 0 16 16",
        shapeRendering: "geometricPrecision",
        textRendering: "geometricPrecision"
      }, /* @__PURE__ */ import_react128.default.createElement("path", {
        className: classNames(checked && styles34.checked),
        d: "M1.5,5.5L3.44655,8.22517C3.72862,8.62007,4.30578,8.64717,4.62362,8.28044L10.5,1.5",
        transform: "translate(2 2.980376)",
        opacity: "0",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        pathLength: "1"
      })), inputClassName = classNames(styles34.Input, isIndeterminate && styles34["Input-indeterminate"], tone && styles34[variationName("tone", tone)]), extraChoiceProps = {
        helpText,
        error,
        bleed,
        bleedBlockStart,
        bleedBlockEnd,
        bleedInlineStart,
        bleedInlineEnd
      };
      return /* @__PURE__ */ import_react128.default.createElement(Choice, Object.assign({
        id,
        label,
        labelHidden,
        disabled,
        labelClassName: classNames(styles34.ChoiceLabel, labelClassName),
        fill,
        tone
      }, extraChoiceProps), /* @__PURE__ */ import_react128.default.createElement("span", {
        className: wrapperClassName
      }, /* @__PURE__ */ import_react128.default.createElement("input", Object.assign({
        ref: inputNode,
        id,
        name,
        value,
        type: "checkbox",
        checked: isChecked,
        disabled,
        className: inputClassName,
        onBlur: handleBlur,
        onChange: noop4,
        onClick: handleOnClick,
        onFocus,
        "aria-invalid": error != null,
        "aria-controls": ariaControls,
        "aria-describedby": ariaDescribedBy,
        role: isWithinListbox ? "presentation" : "checkbox"
      }, indeterminateAttributes)), /* @__PURE__ */ import_react128.default.createElement("span", {
        className: styles34.Backdrop,
        onClick: stopPropagation,
        onKeyUp: stopPropagation
      }), /* @__PURE__ */ import_react128.default.createElement("span", {
        className: classNames(styles34.Icon, !isIndeterminate && styles34.animated)
      }, isIndeterminate ? /* @__PURE__ */ import_react128.default.createElement(Icon, {
        source: SvgMinusMinor
      }) : iconSource)));
    });
  }
});
var import_react129;
var TextOption;
var init_TextOption = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/TextOption/TextOption.js"() {
    import_react129 = __toESM(require_react());
    init_dist3();
    init_css();
    init_context11();
    init_context12();
    init_TextOption_scss();
    init_Checkbox();
    init_Box();
    init_InlineStack();
    init_Icon();
    TextOption = /* @__PURE__ */ (0, import_react129.memo)(function({
      children,
      selected,
      disabled
    }) {
      let {
        allowMultiple
      } = (0, import_react129.useContext)(ComboboxListboxOptionContext), isAction = (0, import_react129.useContext)(ActionContext), textOptionClassName = classNames(styles33.TextOption, selected && !allowMultiple && styles33.selected, disabled && styles33.disabled, allowMultiple && styles33.allowMultiple, isAction && styles33.isAction), optionMarkup = selected ? /* @__PURE__ */ import_react129.default.createElement(Box, {
        width: "100%"
      }, /* @__PURE__ */ import_react129.default.createElement(InlineStack, {
        wrap: false,
        align: "space-between",
        gap: "200"
      }, children, /* @__PURE__ */ import_react129.default.createElement(InlineStack, {
        align: "end"
      }, /* @__PURE__ */ import_react129.default.createElement(Icon, {
        source: SvgTickMinor
      })))) : /* @__PURE__ */ import_react129.default.createElement(import_react129.default.Fragment, null, children);
      return /* @__PURE__ */ import_react129.default.createElement("div", {
        className: textOptionClassName
      }, /* @__PURE__ */ import_react129.default.createElement("div", {
        className: styles33.Content
      }, allowMultiple && !isAction ? /* @__PURE__ */ import_react129.default.createElement("div", {
        className: styles33.Checkbox
      }, /* @__PURE__ */ import_react129.default.createElement(Checkbox, {
        disabled,
        checked: selected,
        label: children
      })) : optionMarkup));
    });
  }
});
var styles36;
var init_Loading_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Loading/Loading.scss.js"() {
    styles36 = {
      ListItem: "Polaris-Listbox-Loading__ListItem",
      Loading: "Polaris-Listbox-Loading"
    };
  }
});
function useListbox() {
  let listbox = (0, import_react130.useContext)(ListboxContext);
  if (!listbox)
    throw new Error("No Listbox was provided. Listbox components must be wrapped in a Listbox");
  return listbox;
}
var import_react130;
var init_hooks6 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/listbox/hooks.js"() {
    import_react130 = __toESM(require_react());
    init_context12();
  }
});
var import_react131;
var Loading;
var init_Loading = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Loading/Loading.js"() {
    import_react131 = __toESM(require_react());
    init_Loading_scss();
    init_hooks6();
    init_Spinner();
    Loading = /* @__PURE__ */ (0, import_react131.memo)(function({
      children,
      accessibilityLabel: label
    }) {
      let {
        setLoading
      } = useListbox();
      return (0, import_react131.useEffect)(() => (setLoading(label), () => {
        setLoading(void 0);
      }), [label, setLoading]), /* @__PURE__ */ import_react131.default.createElement("li", {
        className: styles36.ListItem,
        role: "presentation"
      }, children || /* @__PURE__ */ import_react131.default.createElement("div", {
        className: styles36.Loading
      }, /* @__PURE__ */ import_react131.default.createElement(Spinner, {
        size: "small",
        accessibilityLabel: label
      })));
    });
  }
});
var listboxSectionDataSelector;
var listboxWithinSectionDataSelector;
var init_selectors = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Section/selectors.js"() {
    listboxSectionDataSelector = {
      props: {
        "data-polaris-listbox-section-item": true
      },
      selector: "[data-polaris-listbox-section-item]"
    }, listboxWithinSectionDataSelector = {
      attribute: "data-polaris-listbox-within-section-item"
    };
  }
});
var import_react132;
var SectionContext;
var init_context13 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Section/context.js"() {
    import_react132 = __toESM(require_react()), SectionContext = /* @__PURE__ */ (0, import_react132.createContext)(null);
  }
});
var styles37;
var init_Section_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Section/Section.scss.js"() {
    styles37 = {
      SectionGroup: "Polaris-Listbox-Section__SectionGroup",
      noDivider: "Polaris-Listbox-Section--noDivider"
    };
  }
});
function Section3({
  children,
  divider = true,
  title
}) {
  let id = (0, import_react133.useId)();
  return /* @__PURE__ */ import_react133.default.createElement(SectionContext.Provider, {
    value: id
  }, /* @__PURE__ */ import_react133.default.createElement("li", Object.assign({
    role: "presentation"
  }, listboxSectionDataSelector.props), title, /* @__PURE__ */ import_react133.default.createElement("ul", {
    role: "group",
    "aria-labelledby": id,
    className: classNames(styles37.SectionGroup, !divider && styles37.noDivider)
  }, children)));
}
var import_react133;
var init_Section3 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Section/Section.js"() {
    import_react133 = __toESM(require_react());
    init_css();
    init_selectors();
    init_context13();
    init_Section_scss();
  }
});
function useSection() {
  return (0, import_react134.useContext)(SectionContext);
}
var import_react134;
var init_hooks7 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Section/hooks.js"() {
    import_react134 = __toESM(require_react());
    init_context13();
  }
});
function Header({
  children
}) {
  let sectionId = useSection() || "", content = typeof children == "string" ? /* @__PURE__ */ import_react135.default.createElement(Box, {
    paddingBlockStart: "200",
    paddingInlineStart: "400",
    paddingBlockEnd: "200",
    paddingInlineEnd: "400"
  }, /* @__PURE__ */ import_react135.default.createElement(Text, {
    as: "span",
    variant: "headingSm",
    tone: "subdued"
  }, children)) : children;
  return /* @__PURE__ */ import_react135.default.createElement("div", {
    "aria-hidden": true,
    id: sectionId
  }, content);
}
var import_react135;
var init_Header = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Header/Header.js"() {
    import_react135 = __toESM(require_react());
    init_hooks7();
    init_Box();
    init_Text();
  }
});
var styles38;
var init_Action_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Action/Action.scss.js"() {
    styles38 = {
      Action: "Polaris-Listbox-Action",
      ActionDivider: "Polaris-Listbox-Action__ActionDivider",
      Icon: "Polaris-Listbox-Action__Icon"
    };
  }
});
var styles39;
var init_Option_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Option/Option.scss.js"() {
    styles39 = {
      Option: "Polaris-Listbox-Option",
      divider: "Polaris-Listbox-Option--divider"
    };
  }
});
var import_react136;
var MappedActionContext;
var init_context14 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/autocomplete/context.js"() {
    import_react136 = __toESM(require_react()), MappedActionContext = /* @__PURE__ */ (0, import_react136.createContext)({});
  }
});
var import_react137;
var Option;
var init_Option = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Option/Option.js"() {
    import_react137 = __toESM(require_react());
    init_css();
    init_context12();
    init_Option_scss();
    init_hooks6();
    init_context14();
    init_hooks7();
    init_selectors();
    init_TextOption();
    init_UnstyledLink();
    Option = /* @__PURE__ */ (0, import_react137.memo)(function({
      value,
      children,
      selected,
      disabled = false,
      accessibilityLabel,
      divider
    }) {
      let {
        onOptionSelect
      } = useListbox(), isAction = (0, import_react137.useContext)(ActionContext), {
        role,
        url,
        external,
        onAction,
        destructive
      } = (0, import_react137.useContext)(MappedActionContext), listItemRef = (0, import_react137.useRef)(null), domId = (0, import_react137.useId)(), sectionId = useSection(), isWithinSection = Boolean(sectionId), handleOptionSelect = (0, import_react137.useCallback)((event) => {
        event.preventDefault(), event.stopPropagation(), onAction && onAction(), listItemRef.current && !onAction && onOptionSelect({
          domId,
          value,
          element: listItemRef.current,
          disabled
        });
      }, [domId, onOptionSelect, value, disabled, onAction]), handleMouseDown = (event) => {
        event.preventDefault();
      }, content = typeof children == "string" ? /* @__PURE__ */ import_react137.default.createElement(TextOption, {
        selected,
        disabled
      }, children) : children, sectionAttributes = {
        [listboxWithinSectionDataSelector.attribute]: isWithinSection
      }, legacyRoleSupport = role || "option", contentMarkup = url ? /* @__PURE__ */ import_react137.default.createElement(UnstyledLink, {
        url,
        external
      }, content) : content;
      return /* @__PURE__ */ import_react137.default.createElement("li", Object.assign({}, sectionAttributes, {
        "data-listbox-option": true,
        "data-listbox-option-action": isAction,
        "data-listbox-option-value": value,
        "data-listbox-option-destructive": destructive,
        "data-within-section": isWithinSection,
        className: classNames(styles39.Option, divider && styles39.divider),
        id: domId,
        ref: listItemRef,
        tabIndex: -1,
        role: legacyRoleSupport,
        "aria-label": accessibilityLabel,
        "aria-selected": selected,
        "aria-disabled": disabled,
        onClick: disabled ? void 0 : handleOptionSelect,
        onKeyDown: disabled ? void 0 : handleOptionSelect,
        onMouseDown: handleMouseDown
      }), contentMarkup);
    });
  }
});
function Action2(props) {
  let {
    selected,
    disabled,
    children,
    icon,
    divider
  } = props, iconMarkup = icon && /* @__PURE__ */ import_react138.default.createElement("div", {
    className: styles38.Icon
  }, /* @__PURE__ */ import_react138.default.createElement(Icon, {
    tone: "subdued",
    source: icon
  })), className = classNames(styles38.Action, divider && styles38.ActionDivider);
  return /* @__PURE__ */ import_react138.default.createElement(ActionContext.Provider, {
    value: true
  }, /* @__PURE__ */ import_react138.default.createElement(Option, props, /* @__PURE__ */ import_react138.default.createElement("div", {
    className
  }, /* @__PURE__ */ import_react138.default.createElement(TextOption, {
    selected,
    disabled
  }, iconMarkup, children))));
}
var import_react138;
var init_Action = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/components/Action/Action.js"() {
    import_react138 = __toESM(require_react());
    init_css();
    init_context12();
    init_Action_scss();
    init_Option();
    init_TextOption();
    init_Icon();
  }
});
function Listbox({
  children,
  autoSelection = AutoSelection.FirstSelected,
  enableKeyboardControl,
  accessibilityLabel,
  customListId,
  onSelect,
  onActiveOptionChange
}) {
  let [loading, setLoading] = (0, import_react139.useState)(), [activeOption, setActiveOption] = (0, import_react139.useState)(), [lazyLoading, setLazyLoading] = (0, import_react139.useState)(false), [currentOptions, setCurrentOptions] = (0, import_react139.useState)([]), {
    value: keyboardEventsEnabled,
    setTrue: enableKeyboardEvents,
    setFalse: disableKeyboardEvents
  } = useToggle(Boolean(enableKeyboardControl)), uniqueId = (0, import_react139.useId)(), listId = customListId || uniqueId, scrollableRef = (0, import_react139.useRef)(null), listboxRef = (0, import_react139.useRef)(null), {
    listboxId,
    textFieldLabelId,
    textFieldFocused,
    willLoadMoreOptions,
    setActiveOptionId,
    setListboxId,
    onOptionSelected,
    onKeyToBottom
  } = useComboboxListbox(), inCombobox = Boolean(setActiveOptionId);
  (0, import_react139.useEffect)(() => {
    setListboxId && !listboxId && setListboxId(listId);
  }, [setListboxId, listboxId, listId]);
  let getNavigableOptions = (0, import_react139.useCallback)(() => listboxRef.current ? [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))] : [], []), getFirstNavigableOption = (0, import_react139.useCallback)((currentOptions2) => {
    let hasSelectedOptions = currentOptions2.some((option) => option.getAttribute("aria-selected") === "true"), elementIndex = 0, element = currentOptions2.find((option, index) => {
      let isInteractable = option.getAttribute("aria-disabled") !== "true", isFirstNavigableOption;
      return hasSelectedOptions && autoSelection === AutoSelection.FirstSelected ? isFirstNavigableOption = option.getAttribute("aria-selected") === "true" && isInteractable : isFirstNavigableOption = isInteractable, isFirstNavigableOption && (elementIndex = index), isFirstNavigableOption;
    });
    if (element)
      return {
        element,
        index: elementIndex
      };
  }, [autoSelection]), handleScrollIntoView = (0, import_react139.useCallback)((option) => {
    let {
      current: scrollable2
    } = scrollableRef;
    scrollable2 && scrollOptionIntoView(option.element, scrollable2);
  }, []), handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50), handleKeyToBottom = (0, import_react139.useCallback)(() => {
    if (onKeyToBottom)
      return setLazyLoading(true), Promise.resolve(onKeyToBottom());
  }, [onKeyToBottom]), handleChangeActiveOption = (0, import_react139.useCallback)((nextOption) => {
    if (!nextOption)
      return setActiveOption(void 0);
    activeOption?.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE), nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, "true"), handleScrollIntoViewDebounced(nextOption), setActiveOption(nextOption), setActiveOptionId?.(nextOption.domId), onActiveOptionChange?.(nextOption.value, nextOption.domId);
  }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]), getFormattedOption = (0, import_react139.useCallback)((element, index) => ({
    element,
    index,
    domId: element.id,
    value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || "",
    disabled: element.getAttribute("aria-disabled") === "true",
    isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === "true"
  }), []), resetActiveOption = (0, import_react139.useCallback)(() => {
    let nextOption, nextOptions = getNavigableOptions(), nextActiveOption = getFirstNavigableOption(nextOptions);
    if (nextOptions.length === 0 && currentOptions.length > 0) {
      setCurrentOptions(nextOptions), handleChangeActiveOption();
      return;
    }
    if (nextActiveOption) {
      let {
        element,
        index
      } = nextActiveOption;
      nextOption = getFormattedOption(element, index);
    }
    let optionIsAlreadyActive = activeOption !== void 0 && nextOption?.domId === activeOption?.domId, actionContentHasUpdated = activeOption?.isAction && nextOption?.isAction && nextOption?.value !== activeOption?.value, currentValues = currentOptions.map((option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)), nextValues = nextOptions.map((option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)), listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => currentValues[index] === value), listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => nextValues[index] === value);
    if (listIsUnchanged) {
      optionIsAlreadyActive && actionContentHasUpdated && (setCurrentOptions(nextOptions), handleChangeActiveOption(nextOption));
      return;
    }
    if (listIsAppended) {
      setCurrentOptions(nextOptions);
      return;
    }
    if (setCurrentOptions(nextOptions), lazyLoading) {
      setLazyLoading(false);
      return;
    }
    handleChangeActiveOption(nextOption);
  }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);
  (0, import_react139.useEffect)(() => {
    autoSelection !== AutoSelection.None && !loading && children && import_react139.Children.count(children) > 0 && resetActiveOption();
  }, [children, autoSelection, activeOption, loading, resetActiveOption]), (0, import_react139.useEffect)(() => {
    listboxRef.current && (scrollableRef.current = listboxRef.current.closest(scrollable.selector));
  }, []), (0, import_react139.useEffect)(() => {
    enableKeyboardControl && !keyboardEventsEnabled && enableKeyboardEvents();
  }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);
  let onOptionSelect = (0, import_react139.useCallback)((option) => {
    handleChangeActiveOption(option), onOptionSelected && onOptionSelected(), onSelect && onSelect(option.value);
  }, [handleChangeActiveOption, onSelect, onOptionSelected]), getNextIndex = (0, import_react139.useCallback)((currentIndex, lastIndex, direction) => {
    let nextIndex;
    return direction === "down" ? currentIndex === lastIndex ? nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0 : nextIndex = currentIndex + 1 : nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1, nextIndex;
  }, [willLoadMoreOptions]), getNextValidOption = (0, import_react139.useCallback)(async (key) => {
    let lastIndex = currentOptions.length - 1, currentIndex = activeOption?.index || 0, nextIndex = 0, element = activeOption?.element, totalOptions = -1;
    if (!activeOption && autoSelection === AutoSelection.None) {
      let nextOptions = getNavigableOptions(), nextActiveOption = getFirstNavigableOption(nextOptions);
      return setCurrentOptions(nextOptions), {
        element: nextActiveOption?.element,
        nextIndex: nextActiveOption?.index || 0
      };
    }
    for (; totalOptions++ < lastIndex; ) {
      nextIndex = getNextIndex(currentIndex, lastIndex, key), element = currentOptions[nextIndex];
      let triggerLazyLoad = nextIndex >= lastIndex, isDisabled = element?.getAttribute("aria-disabled") === "true";
      if (triggerLazyLoad && willLoadMoreOptions && await handleKeyToBottom(), isDisabled) {
        currentIndex = nextIndex, element = void 0;
        continue;
      }
      break;
    }
    return {
      element,
      nextIndex
    };
  }, [autoSelection, currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom, getFirstNavigableOption, getNavigableOptions]), handleArrow = (0, import_react139.useCallback)(async (type, event) => {
    event.preventDefault();
    let {
      element,
      nextIndex
    } = await getNextValidOption(type);
    if (!element)
      return;
    let nextOption = getFormattedOption(element, nextIndex);
    handleChangeActiveOption(nextOption);
  }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]), handleDownArrow = (0, import_react139.useCallback)((event) => {
    handleArrow("down", event);
  }, [handleArrow]), handleUpArrow = (0, import_react139.useCallback)((event) => {
    handleArrow("up", event);
  }, [handleArrow]), handleEnter = (0, import_react139.useCallback)((event) => {
    event.preventDefault(), event.stopPropagation(), activeOption && onOptionSelect(activeOption);
  }, [activeOption, onOptionSelect]), handleFocus = (0, import_react139.useCallback)(() => {
    enableKeyboardControl || enableKeyboardEvents();
  }, [enableKeyboardControl, enableKeyboardEvents]), handleBlur = (0, import_react139.useCallback)((event) => {
    if (event.stopPropagation(), keyboardEventsEnabled) {
      let nextActiveOption = getFirstNavigableOption(currentOptions);
      if (nextActiveOption) {
        let {
          element,
          index
        } = nextActiveOption, nextOption = getFormattedOption(element, index);
        handleChangeActiveOption(nextOption);
      }
    }
    enableKeyboardControl || disableKeyboardEvents();
  }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]), listeners = keyboardEventsEnabled || textFieldFocused ? /* @__PURE__ */ import_react139.default.createElement(import_react139.default.Fragment, null, /* @__PURE__ */ import_react139.default.createElement(KeypressListener, {
    keyEvent: "keydown",
    keyCode: Key.DownArrow,
    handler: handleDownArrow
  }), /* @__PURE__ */ import_react139.default.createElement(KeypressListener, {
    keyEvent: "keydown",
    keyCode: Key.UpArrow,
    handler: handleUpArrow
  }), /* @__PURE__ */ import_react139.default.createElement(KeypressListener, {
    keyEvent: "keydown",
    keyCode: Key.Enter,
    handler: handleEnter
  })) : null, listboxContext = (0, import_react139.useMemo)(() => ({
    onOptionSelect,
    setLoading
  }), [onOptionSelect]);
  return /* @__PURE__ */ import_react139.default.createElement(import_react139.default.Fragment, null, listeners, /* @__PURE__ */ import_react139.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, /* @__PURE__ */ import_react139.default.createElement("div", {
    "aria-live": "polite"
  }, loading || null)), /* @__PURE__ */ import_react139.default.createElement(ListboxContext.Provider, {
    value: listboxContext
  }, /* @__PURE__ */ import_react139.default.createElement(WithinListboxContext.Provider, {
    value: true
  }, children ? /* @__PURE__ */ import_react139.default.createElement("ul", {
    tabIndex: 0,
    role: "listbox",
    className: styles32.Listbox,
    "aria-label": inCombobox ? void 0 : accessibilityLabel,
    "aria-labelledby": textFieldLabelId,
    "aria-busy": Boolean(loading),
    "aria-activedescendant": activeOption && activeOption.domId,
    id: listId,
    onFocus: inCombobox ? void 0 : handleFocus,
    onBlur: inCombobox ? void 0 : handleBlur,
    ref: listboxRef
  }, children) : null)));
}
var import_react139;
var AutoSelection;
var OPTION_SELECTOR;
var OPTION_VALUE_ATTRIBUTE;
var OPTION_ACTION_ATTRIBUTE;
var OPTION_FOCUS_ATTRIBUTE;
var init_Listbox = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Listbox/Listbox.js"() {
    import_react139 = __toESM(require_react());
    init_debounce();
    init_use_toggle();
    init_types();
    init_shared();
    init_Listbox_scss();
    init_hooks5();
    init_utilities();
    init_context12();
    init_TextOption();
    init_Loading();
    init_Section3();
    init_Header();
    init_Action();
    init_KeypressListener();
    init_Text();
    init_Option();
    (function(AutoSelection2) {
      AutoSelection2.FirstSelected = "FIRST_SELECTED", AutoSelection2.First = "FIRST", AutoSelection2.None = "NONE";
    })(AutoSelection || (AutoSelection = {}));
    OPTION_SELECTOR = "[data-listbox-option]", OPTION_VALUE_ATTRIBUTE = "data-listbox-option-value", OPTION_ACTION_ATTRIBUTE = "data-listbox-option-action", OPTION_FOCUS_ATTRIBUTE = "data-focused";
    Listbox.Option = Option;
    Listbox.TextOption = TextOption;
    Listbox.Loading = Loading;
    Listbox.Section = Section3;
    Listbox.Header = Header;
    Listbox.Action = Action2;
  }
});
var import_react140;
var MappedOption;
var init_MappedOption = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Autocomplete/components/MappedOption/MappedOption.js"() {
    import_react140 = __toESM(require_react());
    init_css();
    init_MappedOption_scss();
    init_Listbox();
    MappedOption = /* @__PURE__ */ (0, import_react140.memo)(function({
      label,
      value,
      disabled,
      media,
      selected,
      singleSelection
    }) {
      let mediaClassNames = classNames(styles31.Media, disabled && styles31.disabledMedia, singleSelection && styles31.singleSelectionMedia), mediaMarkup = media ? /* @__PURE__ */ import_react140.default.createElement("div", {
        className: mediaClassNames
      }, media) : null, accessibilityLabel = typeof label == "string" ? label : void 0;
      return /* @__PURE__ */ import_react140.default.createElement(Listbox.Option, {
        accessibilityLabel,
        key: value,
        selected,
        value,
        disabled
      }, /* @__PURE__ */ import_react140.default.createElement(Listbox.TextOption, {
        selected,
        disabled
      }, /* @__PURE__ */ import_react140.default.createElement("div", {
        className: styles31.Content
      }, mediaMarkup, label)));
    });
  }
});
var styles40;
var init_Combobox_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Combobox/Combobox.scss.js"() {
    styles40 = {
      Listbox: "Polaris-Combobox__Listbox"
    };
  }
});
function TextField2({
  value,
  id: idProp,
  type = "text",
  ariaAutocomplete = "list",
  onFocus,
  onBlur,
  onChange,
  ...rest
}) {
  let comboboxTextFieldContext = useComboboxTextField(), {
    activeOptionId,
    listboxId,
    expanded,
    setTextFieldFocused,
    setTextFieldLabelId,
    onTextFieldFocus,
    onTextFieldChange,
    onTextFieldBlur
  } = comboboxTextFieldContext, uniqueId = (0, import_react141.useId)(), textFieldId = (0, import_react141.useMemo)(() => idProp || uniqueId, [uniqueId, idProp]), labelId = (0, import_react141.useMemo)(() => labelID(idProp || uniqueId), [uniqueId, idProp]);
  (0, import_react141.useEffect)(() => {
    setTextFieldLabelId && setTextFieldLabelId(labelId);
  }, [labelId, setTextFieldLabelId]);
  let handleFocus = (0, import_react141.useCallback)((event) => {
    onFocus && onFocus(event), onTextFieldFocus && onTextFieldFocus(), setTextFieldFocused && setTextFieldFocused(true);
  }, [onFocus, onTextFieldFocus, setTextFieldFocused]), handleBlur = (0, import_react141.useCallback)((event) => {
    onBlur && onBlur(event), onTextFieldBlur && onTextFieldBlur(), setTextFieldFocused && setTextFieldFocused(false);
  }, [onBlur, onTextFieldBlur, setTextFieldFocused]), handleChange = (0, import_react141.useCallback)((value2, id) => {
    onChange && onChange(value2, id), onTextFieldChange && onTextFieldChange(value2);
  }, [onChange, onTextFieldChange]);
  return /* @__PURE__ */ import_react141.default.createElement(TextField, Object.assign({}, rest, {
    value,
    id: textFieldId,
    type,
    ariaAutocomplete,
    "aria-haspopup": "listbox",
    ariaActiveDescendant: activeOptionId,
    ariaControls: listboxId,
    role: "combobox",
    ariaExpanded: expanded,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onChange: handleChange
  }));
}
var import_react141;
var init_TextField2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Combobox/components/TextField/TextField.js"() {
    import_react141 = __toESM(require_react());
    init_hooks5();
    init_Label();
    init_TextField();
  }
});
function Combobox({
  activator,
  allowMultiple,
  children,
  preferredPosition = "below",
  willLoadMoreOptions,
  height: height2,
  onScrolledToBottom,
  onClose
}) {
  let [popoverActive, setPopoverActive] = (0, import_react142.useState)(false), [activeOptionId, setActiveOptionId] = (0, import_react142.useState)(), [textFieldLabelId, setTextFieldLabelId] = (0, import_react142.useState)(), [listboxId, setListboxId] = (0, import_react142.useState)(), [textFieldFocused, setTextFieldFocused] = (0, import_react142.useState)(false), shouldOpen = Boolean(!popoverActive && import_react142.Children.count(children) > 0), ref = (0, import_react142.useRef)(null), handleClose = (0, import_react142.useCallback)(() => {
    setPopoverActive(false), onClose?.(), setActiveOptionId(void 0);
  }, [onClose]), handleOpen = (0, import_react142.useCallback)(() => {
    setPopoverActive(true), setActiveOptionId(void 0);
  }, []), onOptionSelected = (0, import_react142.useCallback)(() => {
    if (!allowMultiple) {
      handleClose(), setActiveOptionId(void 0);
      return;
    }
    ref.current?.forceUpdatePosition();
  }, [allowMultiple, handleClose]), handleFocus = (0, import_react142.useCallback)(() => {
    shouldOpen && handleOpen();
  }, [shouldOpen, handleOpen]), handleChange = (0, import_react142.useCallback)(() => {
    shouldOpen && handleOpen();
  }, [shouldOpen, handleOpen]), handleBlur = (0, import_react142.useCallback)(() => {
    popoverActive && handleClose();
  }, [popoverActive, handleClose]), textFieldContextValue = (0, import_react142.useMemo)(() => ({
    activeOptionId,
    expanded: popoverActive,
    listboxId,
    setTextFieldFocused,
    setTextFieldLabelId,
    onTextFieldFocus: handleFocus,
    onTextFieldChange: handleChange,
    onTextFieldBlur: handleBlur
  }), [activeOptionId, popoverActive, listboxId, setTextFieldFocused, setTextFieldLabelId, handleFocus, handleChange, handleBlur]), listboxOptionContextValue = (0, import_react142.useMemo)(() => ({
    allowMultiple
  }), [allowMultiple]), listboxContextValue = (0, import_react142.useMemo)(() => ({
    listboxId,
    textFieldLabelId,
    textFieldFocused,
    willLoadMoreOptions,
    onOptionSelected,
    setActiveOptionId,
    setListboxId,
    onKeyToBottom: onScrolledToBottom
  }), [listboxId, textFieldLabelId, textFieldFocused, willLoadMoreOptions, onOptionSelected, setActiveOptionId, setListboxId, onScrolledToBottom]);
  return /* @__PURE__ */ import_react142.default.createElement(Popover2, {
    ref,
    active: popoverActive,
    activator: /* @__PURE__ */ import_react142.default.createElement(ComboboxTextFieldContext.Provider, {
      value: textFieldContextValue
    }, activator),
    autofocusTarget: "none",
    preventFocusOnClose: true,
    fullWidth: true,
    preferInputActivator: false,
    preferredPosition,
    onClose: handleClose
  }, import_react142.Children.count(children) > 0 ? /* @__PURE__ */ import_react142.default.createElement(Popover2.Pane, {
    onScrolledToBottom,
    height: height2
  }, /* @__PURE__ */ import_react142.default.createElement(ComboboxListboxContext.Provider, {
    value: listboxContextValue
  }, /* @__PURE__ */ import_react142.default.createElement(ComboboxListboxOptionContext.Provider, {
    value: listboxOptionContextValue
  }, /* @__PURE__ */ import_react142.default.createElement("div", {
    className: styles40.Listbox
  }, children)))) : null);
}
var import_react142;
var init_Combobox = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Combobox/Combobox.js"() {
    import_react142 = __toESM(require_react());
    init_Combobox_scss();
    init_context11();
    init_TextField2();
    init_Popover();
    Combobox.TextField = TextField2;
  }
});
var styles41;
var init_MappedAction_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Autocomplete/components/MappedAction/MappedAction.scss.js"() {
    styles41 = {
      ActionContainer: "Polaris-Autocomplete-MappedAction__ActionContainer",
      Action: "Polaris-Autocomplete-MappedAction__Action",
      destructive: "Polaris-Autocomplete-MappedAction--destructive",
      selected: "Polaris-Autocomplete-MappedAction--selected",
      disabled: "Polaris-Autocomplete-MappedAction--disabled",
      Prefix: "Polaris-Autocomplete-MappedAction__Prefix",
      Suffix: "Polaris-Autocomplete-MappedAction__Suffix",
      Content: "Polaris-Autocomplete-MappedAction__Content",
      Text: "Polaris-Autocomplete-MappedAction__Text",
      ContentWrap: "Polaris-Autocomplete-MappedAction__ContentWrap"
    };
  }
});
function MappedAction({
  active,
  content,
  disabled,
  icon,
  image,
  prefix,
  suffix,
  ellipsis,
  role,
  url,
  external,
  onAction,
  destructive,
  badge,
  helpText,
  wrapOverflow = false
}) {
  let i18n = useI18n(), prefixMarkup = null, contentOverflowStyle = wrapOverflow ? styles41.ContentWrap : void 0;
  prefix ? prefixMarkup = /* @__PURE__ */ import_react143.default.createElement("div", {
    className: styles41.Prefix
  }, prefix) : icon ? prefixMarkup = /* @__PURE__ */ import_react143.default.createElement("div", {
    className: styles41.Prefix
  }, /* @__PURE__ */ import_react143.default.createElement(Icon, {
    source: icon
  })) : image && (prefixMarkup = /* @__PURE__ */ import_react143.default.createElement("div", {
    role: "presentation",
    className: styles41.Prefix,
    style: {
      backgroundImage: `url(${image}`
    }
  }));
  let badgeMarkup = badge && /* @__PURE__ */ import_react143.default.createElement("span", {
    className: styles41.Suffix
  }, /* @__PURE__ */ import_react143.default.createElement(Badge, {
    tone: badge.tone
  }, badge.content)), suffixMarkup = suffix && /* @__PURE__ */ import_react143.default.createElement("span", {
    className: styles41.Suffix
  }, suffix), contentText = ellipsis && content ? i18n.translate("Polaris.Autocomplete.ellipsis", {
    content
  }) : content, contentMarkup = /* @__PURE__ */ import_react143.default.createElement("div", {
    className: styles41.Text
  }, /* @__PURE__ */ import_react143.default.createElement("div", {
    className: contentOverflowStyle
  }, contentText), helpText ? /* @__PURE__ */ import_react143.default.createElement(Text, {
    tone: "subdued",
    as: "span"
  }, helpText) : null), context = (0, import_react143.useMemo)(() => ({
    role,
    url,
    external,
    onAction,
    destructive
  }), [role, url, external, onAction, destructive]), actionClassNames = classNames(styles41.Action, disabled && styles41.disabled, destructive && styles41.destructive, active && styles41.selected);
  return /* @__PURE__ */ import_react143.default.createElement(MappedActionContext.Provider, {
    value: context
  }, /* @__PURE__ */ import_react143.default.createElement("div", {
    className: styles41.ActionContainer
  }, /* @__PURE__ */ import_react143.default.createElement(Listbox.Action, {
    selected: active,
    disabled,
    value: content || ""
  }, /* @__PURE__ */ import_react143.default.createElement("div", {
    className: actionClassNames
  }, /* @__PURE__ */ import_react143.default.createElement("div", {
    className: styles41.Content
  }, prefixMarkup, contentMarkup, badgeMarkup, suffixMarkup)))));
}
var import_react143;
var init_MappedAction = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Autocomplete/components/MappedAction/MappedAction.js"() {
    import_react143 = __toESM(require_react());
    init_css();
    init_MappedAction_scss();
    init_hooks2();
    init_Icon();
    init_Badge();
    init_Text();
    init_context14();
    init_Listbox();
  }
});
var import_react144;
var Autocomplete;
var init_Autocomplete = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Autocomplete/Autocomplete.js"() {
    import_react144 = __toESM(require_react());
    init_options();
    init_Autocomplete_scss();
    init_MappedOption();
    init_Listbox();
    init_Combobox();
    init_MappedAction();
    init_hooks2();
    Autocomplete = function({
      options,
      selected,
      textField,
      preferredPosition,
      listTitle,
      allowMultiple,
      loading,
      actionBefore,
      willLoadMoreResults,
      emptyState,
      onSelect,
      onLoadMoreResults
    }) {
      let i18n = useI18n(), buildMappedOptionFromOption = (0, import_react144.useCallback)((options2) => options2.map((option) => /* @__PURE__ */ import_react144.default.createElement(MappedOption, Object.assign({
        key: option.id || option.value
      }, option, {
        selected: selected.includes(option.value),
        singleSelection: !allowMultiple
      }))), [selected, allowMultiple]), optionsMarkup = (0, import_react144.useMemo)(() => {
        let conditionalOptions = loading && !willLoadMoreResults ? [] : options;
        if (isSection(conditionalOptions)) {
          if (conditionalOptions.every(({
            options: options2
          }) => options2.length === 0))
            return null;
          let optionsMarkup2 = conditionalOptions.map(({
            options: options2,
            title
          }) => {
            if (options2.length === 0)
              return null;
            let optionMarkup = buildMappedOptionFromOption(options2);
            return /* @__PURE__ */ import_react144.default.createElement(Listbox.Section, {
              divider: false,
              title: /* @__PURE__ */ import_react144.default.createElement(Listbox.Header, null, title),
              key: title
            }, optionMarkup);
          });
          return /* @__PURE__ */ import_react144.default.createElement("div", {
            className: styles30.SectionWrapper
          }, optionsMarkup2);
        }
        let optionList = conditionalOptions.length > 0 ? buildMappedOptionFromOption(conditionalOptions) : null;
        return listTitle ? /* @__PURE__ */ import_react144.default.createElement(Listbox.Section, {
          divider: false,
          title: /* @__PURE__ */ import_react144.default.createElement(Listbox.Header, null, listTitle)
        }, optionList) : optionList;
      }, [listTitle, loading, options, willLoadMoreResults, buildMappedOptionFromOption]), loadingMarkup = loading ? /* @__PURE__ */ import_react144.default.createElement(Listbox.Loading, {
        accessibilityLabel: i18n.translate("Polaris.Autocomplete.spinnerAccessibilityLabel")
      }) : null, updateSelection = (0, import_react144.useCallback)((newSelection) => {
        if (actionBefore && newSelection === actionBefore.content) {
          actionBefore.onAction && actionBefore.onAction();
          return;
        }
        allowMultiple ? selected.includes(newSelection) ? onSelect(selected.filter((option) => option !== newSelection)) : onSelect([...selected, newSelection]) : onSelect([newSelection]);
      }, [allowMultiple, onSelect, selected, actionBefore]), actionMarkup = actionBefore && /* @__PURE__ */ import_react144.default.createElement(MappedAction, actionBefore), emptyStateMarkup = emptyState && options.length < 1 && !loading && /* @__PURE__ */ import_react144.default.createElement("div", {
        role: "status"
      }, emptyState), autoSelection = actionBefore ? AutoSelection.First : void 0;
      return /* @__PURE__ */ import_react144.default.createElement(Combobox, {
        activator: textField,
        allowMultiple,
        onScrolledToBottom: onLoadMoreResults,
        preferredPosition,
        willLoadMoreOptions: willLoadMoreResults
      }, actionMarkup || optionsMarkup || loadingMarkup || emptyStateMarkup ? /* @__PURE__ */ import_react144.default.createElement(Listbox, {
        autoSelection,
        onSelect: updateSelection
      }, actionMarkup, optionsMarkup && (!loading || willLoadMoreResults) ? optionsMarkup : null, loadingMarkup, emptyStateMarkup) : null);
    };
    Autocomplete.TextField = Combobox.TextField;
  }
});
var styles42;
var init_Backdrop_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Backdrop/Backdrop.scss.js"() {
    styles42 = {
      Backdrop: "Polaris-Backdrop",
      transparent: "Polaris-Backdrop--transparent",
      belowNavigation: "Polaris-Backdrop--belowNavigation"
    };
  }
});
function useScrollLockManager() {
  let scrollLockManager = (0, import_react145.useContext)(ScrollLockManagerContext);
  if (!scrollLockManager)
    throw new MissingAppProviderError("No ScrollLockManager was provided.");
  return scrollLockManager;
}
var import_react145;
var init_hooks8 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/scroll-lock-manager/hooks.js"() {
    import_react145 = __toESM(require_react());
    init_errors5();
    init_context3();
  }
});
function ScrollLock(_) {
  let scrollLockManager = useScrollLockManager();
  return (0, import_react146.useEffect)(() => (scrollLockManager.registerScrollLock(), () => {
    scrollLockManager.unregisterScrollLock();
  }), [scrollLockManager]), null;
}
var import_react146;
var init_ScrollLock = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ScrollLock/ScrollLock.js"() {
    import_react146 = __toESM(require_react());
    init_hooks8();
  }
});
function Backdrop(props) {
  let {
    onClick,
    onTouchStart,
    belowNavigation,
    transparent,
    setClosing
  } = props, className = classNames(styles42.Backdrop, belowNavigation && styles42.belowNavigation, transparent && styles42.transparent), handleMouseDown = () => {
    setClosing && setClosing(true);
  }, handleClick = () => {
    setClosing && setClosing(false), onClick && onClick();
  };
  return /* @__PURE__ */ import_react147.default.createElement(import_react147.default.Fragment, null, /* @__PURE__ */ import_react147.default.createElement(ScrollLock, null), /* @__PURE__ */ import_react147.default.createElement("div", {
    className,
    onClick: handleClick,
    onTouchStart,
    onMouseDown: handleMouseDown
  }));
}
var import_react147;
var init_Backdrop = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Backdrop/Backdrop.js"() {
    import_react147 = __toESM(require_react());
    init_css();
    init_Backdrop_scss();
    init_ScrollLock();
  }
});
var import_react148;
var BannerContext;
var init_banner_context = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/banner-context.js"() {
    import_react148 = __toESM(require_react()), BannerContext = /* @__PURE__ */ (0, import_react148.createContext)(false);
  }
});
var styles43;
var init_Banner_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Banner/Banner.scss.js"() {
    styles43 = {
      Banner: "Polaris-Banner",
      keyFocused: "Polaris-Banner--keyFocused",
      withinContentContainer: "Polaris-Banner--withinContentContainer",
      withinPage: "Polaris-Banner--withinPage",
      DismissIcon: "Polaris-Banner__DismissIcon",
      "text-success-on-bg-fill": "Polaris-Banner--textSuccessOnBgFill",
      "text-success": "Polaris-Banner__text--success",
      "text-warning-on-bg-fill": "Polaris-Banner--textWarningOnBgFill",
      "text-warning": "Polaris-Banner__text--warning",
      "text-critical-on-bg-fill": "Polaris-Banner--textCriticalOnBgFill",
      "text-critical": "Polaris-Banner__text--critical",
      "text-info-on-bg-fill": "Polaris-Banner--textInfoOnBgFill",
      "text-info": "Polaris-Banner__text--info",
      "icon-secondary": "Polaris-Banner__icon--secondary"
    };
  }
});
function useBannerFocus(bannerRef) {
  let wrapperRef = (0, import_react149.useRef)(null), [shouldShowFocus, setShouldShowFocus] = (0, import_react149.useState)(false);
  return (0, import_react149.useImperativeHandle)(bannerRef, () => ({
    focus: () => {
      wrapperRef.current?.focus(), setShouldShowFocus(true);
    }
  }), []), {
    wrapperRef,
    handleKeyUp: (event) => {
      event.target === wrapperRef.current && setShouldShowFocus(true);
    },
    handleBlur: () => setShouldShowFocus(false),
    handleMouseUp: (event) => {
      event.currentTarget.blur(), setShouldShowFocus(false);
    },
    shouldShowFocus
  };
}
var import_react149;
var bannerAttributes;
var init_utilities2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Banner/utilities.js"() {
    init_dist3();
    import_react149 = __toESM(require_react()), bannerAttributes = {
      success: {
        withinPage: {
          background: "bg-fill-success",
          text: "text-success-on-bg-fill",
          icon: "text-success-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-success",
          text: "text-success",
          icon: "text-success"
        },
        icon: SvgTickMinor
      },
      warning: {
        withinPage: {
          background: "bg-fill-warning",
          text: "text-warning-on-bg-fill",
          icon: "text-warning-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-warning",
          text: "text-warning",
          icon: "text-warning"
        },
        icon: SvgRiskMinor
      },
      critical: {
        withinPage: {
          background: "bg-fill-critical",
          text: "text-critical-on-bg-fill",
          icon: "text-critical-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-critical",
          text: "text-critical",
          icon: "text-critical"
        },
        icon: SvgDiamondAlertMinor
      },
      info: {
        withinPage: {
          background: "bg-fill-info",
          text: "text-info-on-bg-fill",
          icon: "text-info-on-bg-fill"
        },
        withinContentContainer: {
          background: "bg-surface-info",
          text: "text-info",
          icon: "text-info"
        },
        icon: SvgInfoMinor
      }
    };
  }
});
function BannerLayout({
  tone = "info",
  icon,
  hideIcon,
  onDismiss,
  action: action4,
  secondaryAction,
  title,
  children
}) {
  let i18n = useI18n(), withinContentContainer = (0, import_react150.useContext)(WithinContentContext), isInlineIconBanner = !title && !withinContentContainer, bannerTone = Object.keys(bannerAttributes).includes(tone) ? tone : "info", bannerColors = bannerAttributes[bannerTone][withinContentContainer ? "withinContentContainer" : "withinPage"], sharedBannerProps = {
    backgroundColor: bannerColors.background,
    textColor: bannerColors.text,
    bannerTitle: title ? /* @__PURE__ */ import_react150.default.createElement(Text, {
      as: "h2",
      variant: "headingSm",
      breakWord: true
    }, title) : null,
    bannerIcon: hideIcon ? null : /* @__PURE__ */ import_react150.default.createElement("span", {
      className: styles43[bannerColors.icon]
    }, /* @__PURE__ */ import_react150.default.createElement(Icon, {
      source: icon ?? bannerAttributes[bannerTone].icon
    })),
    actionButtons: action4 || secondaryAction ? /* @__PURE__ */ import_react150.default.createElement(ButtonGroup, null, action4 && /* @__PURE__ */ import_react150.default.createElement(Button, Object.assign({
      onClick: action4.onAction
    }, action4), action4.content), secondaryAction && /* @__PURE__ */ import_react150.default.createElement(Button, Object.assign({
      onClick: secondaryAction.onAction
    }, secondaryAction), secondaryAction.content)) : null,
    dismissButton: onDismiss ? /* @__PURE__ */ import_react150.default.createElement(Button, {
      variant: "tertiary",
      icon: /* @__PURE__ */ import_react150.default.createElement("span", {
        className: styles43[isInlineIconBanner ? "icon-secondary" : bannerColors.icon]
      }, /* @__PURE__ */ import_react150.default.createElement(Icon, {
        source: SvgCancelMinor
      })),
      onClick: onDismiss,
      accessibilityLabel: i18n.translate("Polaris.Banner.dismissButton")
    }) : null
  };
  return withinContentContainer ? /* @__PURE__ */ import_react150.default.createElement(WithinContentContainerBanner, sharedBannerProps, children) : isInlineIconBanner ? /* @__PURE__ */ import_react150.default.createElement(InlineIconBanner, sharedBannerProps, children) : /* @__PURE__ */ import_react150.default.createElement(DefaultBanner, sharedBannerProps, children);
}
function DefaultBanner({
  backgroundColor,
  textColor,
  bannerTitle,
  bannerIcon,
  actionButtons,
  dismissButton,
  children
}) {
  let {
    smUp
  } = useBreakpoints(), hasContent = children || actionButtons;
  return /* @__PURE__ */ import_react150.default.createElement(Box, {
    width: "100%"
  }, /* @__PURE__ */ import_react150.default.createElement(BlockStack, {
    align: "space-between"
  }, /* @__PURE__ */ import_react150.default.createElement(Box, {
    background: backgroundColor,
    color: textColor,
    borderStartStartRadius: smUp ? "300" : void 0,
    borderStartEndRadius: smUp ? "300" : void 0,
    borderEndStartRadius: !hasContent && smUp ? "300" : void 0,
    borderEndEndRadius: !hasContent && smUp ? "300" : void 0,
    padding: "300"
  }, /* @__PURE__ */ import_react150.default.createElement(InlineStack, {
    align: "space-between",
    blockAlign: "center",
    gap: "200",
    wrap: false
  }, /* @__PURE__ */ import_react150.default.createElement(InlineStack, {
    gap: "100",
    wrap: false
  }, bannerIcon, bannerTitle), dismissButton)), hasContent && /* @__PURE__ */ import_react150.default.createElement(Box, {
    padding: {
      xs: "300",
      md: "400"
    },
    paddingBlockStart: "300"
  }, /* @__PURE__ */ import_react150.default.createElement(BlockStack, {
    gap: "200"
  }, /* @__PURE__ */ import_react150.default.createElement("div", null, children), actionButtons))));
}
function InlineIconBanner({
  backgroundColor,
  bannerIcon,
  actionButtons,
  dismissButton,
  children
}) {
  let [blockAlign, setBlockAlign] = (0, import_react150.useState)("center"), contentNode = (0, import_react150.useRef)(null), iconNode = (0, import_react150.useRef)(null), dismissIconNode = (0, import_react150.useRef)(null), handleResize = (0, import_react150.useCallback)(() => {
    let contentHeight = contentNode.current?.offsetHeight, iconBoxHeight = iconNode.current?.offsetHeight || dismissIconNode.current?.offsetHeight;
    !contentHeight || !iconBoxHeight || (contentHeight > iconBoxHeight ? setBlockAlign("start") : setBlockAlign("center"));
  }, []);
  return (0, import_react150.useEffect)(() => handleResize(), [handleResize]), useEventListener("resize", handleResize), /* @__PURE__ */ import_react150.default.createElement(Box, {
    width: "100%",
    padding: "300",
    borderRadius: "300"
  }, /* @__PURE__ */ import_react150.default.createElement(InlineStack, {
    align: "space-between",
    blockAlign,
    wrap: false
  }, /* @__PURE__ */ import_react150.default.createElement(Box, {
    width: "100%"
  }, /* @__PURE__ */ import_react150.default.createElement(InlineStack, {
    gap: "200",
    wrap: false,
    blockAlign
  }, bannerIcon ? /* @__PURE__ */ import_react150.default.createElement("div", {
    ref: iconNode
  }, /* @__PURE__ */ import_react150.default.createElement(Box, {
    background: backgroundColor,
    borderRadius: "200",
    padding: "100"
  }, bannerIcon)) : null, /* @__PURE__ */ import_react150.default.createElement(Box, {
    ref: contentNode,
    width: "100%"
  }, /* @__PURE__ */ import_react150.default.createElement(BlockStack, {
    gap: "200"
  }, /* @__PURE__ */ import_react150.default.createElement("div", null, children), actionButtons)))), /* @__PURE__ */ import_react150.default.createElement("div", {
    ref: dismissIconNode,
    className: styles43.DismissIcon
  }, dismissButton)));
}
function WithinContentContainerBanner({
  backgroundColor,
  textColor,
  bannerTitle,
  bannerIcon,
  actionButtons,
  dismissButton,
  children
}) {
  return /* @__PURE__ */ import_react150.default.createElement(Box, {
    width: "100%",
    background: backgroundColor,
    padding: "200",
    borderRadius: "200",
    color: textColor
  }, /* @__PURE__ */ import_react150.default.createElement(InlineStack, {
    align: "space-between",
    blockAlign: "start",
    wrap: false,
    gap: "200"
  }, /* @__PURE__ */ import_react150.default.createElement(InlineStack, {
    gap: "150",
    wrap: false
  }, bannerIcon, /* @__PURE__ */ import_react150.default.createElement(Box, {
    width: "100%"
  }, /* @__PURE__ */ import_react150.default.createElement(BlockStack, {
    gap: "200"
  }, /* @__PURE__ */ import_react150.default.createElement(BlockStack, {
    gap: "050"
  }, bannerTitle, /* @__PURE__ */ import_react150.default.createElement("div", null, children)), actionButtons))), dismissButton));
}
var import_react150;
var Banner;
var init_Banner = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Banner/Banner.js"() {
    import_react150 = __toESM(require_react());
    init_dist3();
    init_banner_context();
    init_within_content_context();
    init_css();
    init_breakpoints2();
    init_use_event_listener();
    init_Banner_scss();
    init_utilities2();
    init_hooks2();
    init_Text();
    init_Icon();
    init_ButtonGroup();
    init_Button();
    init_Box();
    init_BlockStack();
    init_InlineStack();
    Banner = /* @__PURE__ */ (0, import_react150.forwardRef)(function(props, bannerRef) {
      let {
        tone,
        stopAnnouncements
      } = props, withinContentContainer = (0, import_react150.useContext)(WithinContentContext), {
        wrapperRef,
        handleKeyUp,
        handleBlur,
        handleMouseUp,
        shouldShowFocus
      } = useBannerFocus(bannerRef), className = classNames(styles43.Banner, shouldShowFocus && styles43.keyFocused, withinContentContainer ? styles43.withinContentContainer : styles43.withinPage);
      return /* @__PURE__ */ import_react150.default.createElement(BannerContext.Provider, {
        value: true
      }, /* @__PURE__ */ import_react150.default.createElement("div", {
        className,
        tabIndex: 0,
        ref: wrapperRef,
        role: tone === "warning" || tone === "critical" ? "alert" : "status",
        "aria-live": stopAnnouncements ? "off" : "polite",
        onMouseUp: handleMouseUp,
        onKeyUp: handleKeyUp,
        onBlur: handleBlur
      }, /* @__PURE__ */ import_react150.default.createElement(BannerLayout, props)));
    });
  }
});
var styles44;
var init_Bleed_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Bleed/Bleed.scss.js"() {
    styles44 = {
      Bleed: "Polaris-Bleed"
    };
  }
});
var import_react151;
var Bleed;
var init_Bleed = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Bleed/Bleed.js"() {
    import_react151 = __toESM(require_react());
    init_css();
    init_Bleed_scss();
    Bleed = ({
      marginInline,
      marginBlock,
      marginBlockStart,
      marginBlockEnd,
      marginInlineStart,
      marginInlineEnd,
      children
    }) => {
      let getNegativeMargins = (direction) => {
        let xAxis = ["marginInlineStart", "marginInlineEnd"], yAxis = ["marginBlockStart", "marginBlockEnd"], directionValues = {
          marginBlockStart,
          marginBlockEnd,
          marginInlineStart,
          marginInlineEnd,
          marginInline,
          marginBlock
        };
        if (directionValues[direction])
          return directionValues[direction];
        if (xAxis.includes(direction) && marginInline)
          return directionValues.marginInline;
        if (yAxis.includes(direction) && marginBlock)
          return directionValues.marginBlock;
      }, negativeMarginBlockStart = getNegativeMargins("marginBlockStart"), negativeMarginBlockEnd = getNegativeMargins("marginBlockEnd"), negativeMarginInlineStart = getNegativeMargins("marginInlineStart"), negativeMarginInlineEnd = getNegativeMargins("marginInlineEnd"), style = {
        ...getResponsiveProps("bleed", "margin-block-start", "space", negativeMarginBlockStart),
        ...getResponsiveProps("bleed", "margin-block-end", "space", negativeMarginBlockEnd),
        ...getResponsiveProps("bleed", "margin-inline-start", "space", negativeMarginInlineStart),
        ...getResponsiveProps("bleed", "margin-inline-end", "space", negativeMarginInlineEnd)
      };
      return /* @__PURE__ */ import_react151.default.createElement("div", {
        className: styles44.Bleed,
        style: sanitizeCustomProperties(style)
      }, children);
    };
  }
});
function Breadcrumbs({
  backAction
}) {
  let {
    content
  } = backAction, breadcrumbMarkup = /* @__PURE__ */ import_react152.default.createElement(Button, {
    key: content,
    url: "url" in backAction ? backAction.url : void 0,
    onClick: "onAction" in backAction ? backAction.onAction : void 0,
    onPointerDown: handleMouseUpByBlurring,
    icon: SvgArrowLeftMinor,
    accessibilityLabel: backAction.accessibilityLabel ?? content
  });
  return /* @__PURE__ */ import_react152.default.createElement("nav", {
    role: "navigation"
  }, breadcrumbMarkup);
}
var import_react152;
var init_Breadcrumbs = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Breadcrumbs/Breadcrumbs.js"() {
    import_react152 = __toESM(require_react());
    init_dist3();
    init_focus();
    init_Button();
  }
});
function _extends5() {
  return _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends5.apply(this, arguments);
}
var init_extends = __esm({
  "node_modules/@babel/runtime/helpers/esm/extends.js"() {
  }
});
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
var init_objectWithoutPropertiesLoose = __esm({
  "node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"() {
  }
});
function _setPrototypeOf(o, p) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o2, p2) {
    return o2.__proto__ = p2, o2;
  }, _setPrototypeOf(o, p);
}
var init_setPrototypeOf = __esm({
  "node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"() {
  }
});
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype), subClass.prototype.constructor = subClass, _setPrototypeOf(subClass, superClass);
}
var init_inheritsLoose = __esm({
  "node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"() {
    init_setPrototypeOf();
  }
});
var require_react_is_development = __commonJS({
  "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var hasSymbol = typeof Symbol == "function" && Symbol.for, REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103, REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106, REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107, REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108, REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114, REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109, REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110, REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111, REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111, REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112, REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113, REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120, REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115, REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116, REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121, REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117, REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118, REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type) {
        return typeof type == "string" || typeof type == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object == "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE, ConcurrentMode = REACT_CONCURRENT_MODE_TYPE, ContextConsumer = REACT_CONTEXT_TYPE, ContextProvider = REACT_PROVIDER_TYPE, Element2 = REACT_ELEMENT_TYPE, ForwardRef = REACT_FORWARD_REF_TYPE, Fragment7 = REACT_FRAGMENT_TYPE, Lazy = REACT_LAZY_TYPE, Memo = REACT_MEMO_TYPE, Portal2 = REACT_PORTAL_TYPE, Profiler = REACT_PROFILER_TYPE, StrictMode2 = REACT_STRICT_MODE_TYPE, Suspense2 = REACT_SUSPENSE_TYPE, hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        return hasWarnedAboutDeprecatedIsAsyncMode || (hasWarnedAboutDeprecatedIsAsyncMode = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode, exports.ConcurrentMode = ConcurrentMode, exports.ContextConsumer = ContextConsumer, exports.ContextProvider = ContextProvider, exports.Element = Element2, exports.ForwardRef = ForwardRef, exports.Fragment = Fragment7, exports.Lazy = Lazy, exports.Memo = Memo, exports.Portal = Portal2, exports.Profiler = Profiler, exports.StrictMode = StrictMode2, exports.Suspense = Suspense2, exports.isAsyncMode = isAsyncMode, exports.isConcurrentMode = isConcurrentMode, exports.isContextConsumer = isContextConsumer, exports.isContextProvider = isContextProvider, exports.isElement = isElement, exports.isForwardRef = isForwardRef, exports.isFragment = isFragment, exports.isLazy = isLazy, exports.isMemo = isMemo, exports.isPortal = isPortal, exports.isProfiler = isProfiler, exports.isStrictMode = isStrictMode, exports.isSuspense = isSuspense, exports.isValidElementType = isValidElementType, exports.typeOf = typeOf;
    })();
  }
});
var require_react_is = __commonJS({
  "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    module.exports = require_react_is_development();
  }
});
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols, hasOwnProperty = Object.prototype.hasOwnProperty, propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val == null)
        throw new TypeError("Object.assign cannot be called with null or undefined");
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign)
          return false;
        var test1 = new String("abc");
        if (test1[5] = "de", Object.getOwnPropertyNames(test1)[0] === "5")
          return false;
        for (var test2 = {}, i = 0; i < 10; i++)
          test2["_" + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789")
          return false;
        var test3 = {};
        return "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        }), Object.keys(Object.assign({}, test3)).join("") === "abcdefghijklmnopqrst";
      } catch {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      for (var from, to = toObject(target), symbols, s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from)
          hasOwnProperty.call(from, key) && (to[key] = from[key]);
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++)
            propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
        }
      }
      return to;
    };
  }
});
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    ReactPropTypesSecret = require_ReactPropTypesSecret(), loggedTypeFailures = {}, has = require_has(), printWarning = function(text2) {
      var message2 = "Warning: " + text2;
      typeof console < "u" && console.error(message2);
      try {
        throw new Error(message2);
      } catch {
      }
    };
    var ReactPropTypesSecret, loggedTypeFailures, has;
    function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
      for (var typeSpecName in typeSpecs)
        if (has(typeSpecs, typeSpecName)) {
          var error;
          try {
            if (typeof typeSpecs[typeSpecName] != "function") {
              var err = Error(
                (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              throw err.name = "Invariant Violation", err;
            }
            error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error) && printWarning(
            (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
          ), error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning(
              "Failed " + location + " type: " + error.message + (stack ?? "")
            );
          }
        }
    }
    checkPropTypes.resetWarningCache = function() {
      loggedTypeFailures = {};
    };
    module.exports = checkPropTypes;
  }
});
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is(), assign = require_object_assign(), ReactPropTypesSecret = require_ReactPropTypesSecret(), has = require_has(), checkPropTypes = require_checkPropTypes(), printWarning = function() {
    };
    printWarning = function(text2) {
      var message2 = "Warning: " + text2;
      typeof console < "u" && console.error(message2);
      try {
        throw new Error(message2);
      } catch {
      }
    };
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement7, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol == "function" && Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn == "function")
          return iteratorFn;
      }
      var ANONYMOUS = "<<anonymous>>", ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        return x === y ? x !== 0 || 1 / x === 1 / y : x !== x && y !== y;
      }
      function PropTypeError(message2, data) {
        this.message = message2, this.data = data && typeof data == "object" ? data : {}, this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate2) {
        var manualPropTypeCallCache = {}, manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          if (componentName = componentName || ANONYMOUS, propFullName = propFullName || propName, secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              throw err.name = "Invariant Violation", err;
            } else if (typeof console < "u") {
              var cacheKey = componentName + ":" + propName;
              !manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3 && (printWarning(
                "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
              ), manualPropTypeCallCache[cacheKey] = true, manualPropTypeWarningCount++);
            }
          }
          return props[propName] == null ? isRequired ? props[propName] === null ? new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`.")) : new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`.")) : null : validate2(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        return chainedCheckType.isRequired = checkType.bind(null, true), chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate2(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName], propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker != "function")
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error)
              return error;
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createElementTypeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement7(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createElementTypeTypeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS, actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues))
          return arguments.length > 1 ? printWarning(
            "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
          ) : printWarning("Invalid argument supplied to oneOf, expected an array."), emptyFunctionThatReturnsNull;
        function validate2(props, propName, componentName, location, propFullName) {
          for (var propValue = props[propName], i = 0; i < expectedValues.length; i++)
            if (is(propValue, expectedValues[i]))
              return null;
          var valuesString = JSON.stringify(expectedValues, function(key, value) {
            var type = getPreciseType(value);
            return type === "symbol" ? String(value) : value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate2);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker != "function")
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          var propValue = props[propName], propType = getPropType(propValue);
          if (propType !== "object")
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          for (var key in propValue)
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error)
                return error;
            }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers))
          return printWarning("Invalid argument supplied to oneOfType, expected an instance of array."), emptyFunctionThatReturnsNull;
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker != "function")
            return printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            ), emptyFunctionThatReturnsNull;
        }
        function validate2(props, propName, componentName, location, propFullName) {
          for (var expectedTypes = [], i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2], checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null)
              return null;
            checkerResult.data && has(checkerResult.data, "expectedType") && expectedTypes.push(checkerResult.data.expectedType);
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate2);
      }
      function createNodeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          return isNode(props[propName]) ? null : new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
        }
        return createChainableTypeChecker(validate2);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName], propType = getPropType(propValue);
          if (propType !== "object")
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker != "function")
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error)
              return error;
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName], propType = getPropType(propValue);
          if (propType !== "object")
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker != "function")
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            if (!checker)
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error)
              return error;
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue))
              return propValue.every(isNode);
            if (propValue === null || isValidElement7(propValue))
              return true;
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue), step;
              if (iteratorFn !== propValue.entries) {
                for (; !(step = iterator.next()).done; )
                  if (!isNode(step.value))
                    return false;
              } else
                for (; !(step = iterator.next()).done; ) {
                  var entry2 = step.value;
                  if (entry2 && !isNode(entry2[1]))
                    return false;
                }
            } else
              return false;
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        return propType === "symbol" ? true : propValue ? propValue["@@toStringTag"] === "Symbol" || typeof Symbol == "function" && propValue instanceof Symbol : false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        return Array.isArray(propValue) ? "array" : propValue instanceof RegExp ? "object" : isSymbol(propType, propValue) ? "symbol" : propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue > "u" || propValue === null)
          return "" + propValue;
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date)
            return "date";
          if (propValue instanceof RegExp)
            return "regexp";
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        return !propValue.constructor || !propValue.constructor.name ? ANONYMOUS : propValue.constructor.name;
      }
      return ReactPropTypes.checkPropTypes = checkPropTypes, ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache, ReactPropTypes.PropTypes = ReactPropTypes, ReactPropTypes;
    };
  }
});
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    ReactIs = require_react_is(), throwOnDirectAccess = true, module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    var ReactIs, throwOnDirectAccess;
  }
});
function hasClass(element, className) {
  return element.classList ? !!className && element.classList.contains(className) : (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
var init_hasClass = __esm({
  "node_modules/dom-helpers/esm/hasClass.js"() {
  }
});
function addClass(element, className) {
  element.classList ? element.classList.add(className) : hasClass(element, className) || (typeof element.className == "string" ? element.className = element.className + " " + className : element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className));
}
var init_addClass = __esm({
  "node_modules/dom-helpers/esm/addClass.js"() {
    init_hasClass();
  }
});
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  element.classList ? element.classList.remove(className) : typeof element.className == "string" ? element.className = replaceClassName(element.className, className) : element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
}
var init_removeClass = __esm({
  "node_modules/dom-helpers/esm/removeClass.js"() {
  }
});
var config_default;
var init_config = __esm({
  "node_modules/react-transition-group/esm/config.js"() {
    config_default = {
      disabled: false
    };
  }
});
var import_prop_types;
var timeoutsShape;
var classNamesShape;
var init_PropTypes = __esm({
  "node_modules/react-transition-group/esm/utils/PropTypes.js"() {
    import_prop_types = __toESM(require_prop_types()), timeoutsShape = import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
      enter: import_prop_types.default.number,
      exit: import_prop_types.default.number,
      appear: import_prop_types.default.number
    }).isRequired]), classNamesShape = import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
      enter: import_prop_types.default.string,
      exit: import_prop_types.default.string,
      active: import_prop_types.default.string
    }), import_prop_types.default.shape({
      enter: import_prop_types.default.string,
      enterDone: import_prop_types.default.string,
      enterActive: import_prop_types.default.string,
      exit: import_prop_types.default.string,
      exitDone: import_prop_types.default.string,
      exitActive: import_prop_types.default.string
    })]);
  }
});
var import_react153;
var TransitionGroupContext_default;
var init_TransitionGroupContext = __esm({
  "node_modules/react-transition-group/esm/TransitionGroupContext.js"() {
    import_react153 = __toESM(require_react()), TransitionGroupContext_default = import_react153.default.createContext(null);
  }
});
var forceReflow;
var init_reflow = __esm({
  "node_modules/react-transition-group/esm/utils/reflow.js"() {
    forceReflow = function(node) {
      return node.scrollTop;
    };
  }
});
function noop5() {
}
var import_prop_types2;
var import_react154;
var import_react_dom2;
var UNMOUNTED;
var EXITED;
var ENTERING;
var ENTERED;
var EXITING;
var Transition;
var Transition_default;
var init_Transition = __esm({
  "node_modules/react-transition-group/esm/Transition.js"() {
    init_objectWithoutPropertiesLoose();
    init_inheritsLoose();
    import_prop_types2 = __toESM(require_prop_types()), import_react154 = __toESM(require_react()), import_react_dom2 = __toESM(require_react_dom());
    init_config();
    init_PropTypes();
    init_TransitionGroupContext();
    init_reflow();
    UNMOUNTED = "unmounted", EXITED = "exited", ENTERING = "entering", ENTERED = "entered", EXITING = "exiting", Transition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(Transition2, _React$Component);
      function Transition2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context, appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear, initialStatus;
        return _this.appearStatus = null, props.in ? appear ? (initialStatus = EXITED, _this.appearStatus = ENTERING) : initialStatus = ENTERED : props.unmountOnExit || props.mountOnEnter ? initialStatus = UNMOUNTED : initialStatus = EXITED, _this.state = {
          status: initialStatus
        }, _this.nextCallback = null, _this;
      }
      Transition2.getDerivedStateFromProps = function(_ref, prevState) {
        var nextIn = _ref.in;
        return nextIn && prevState.status === UNMOUNTED ? {
          status: EXITED
        } : null;
      };
      var _proto = Transition2.prototype;
      return _proto.componentDidMount = function() {
        this.updateStatus(true, this.appearStatus);
      }, _proto.componentDidUpdate = function(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
          var status = this.state.status;
          this.props.in ? status !== ENTERING && status !== ENTERED && (nextStatus = ENTERING) : (status === ENTERING || status === ENTERED) && (nextStatus = EXITING);
        }
        this.updateStatus(false, nextStatus);
      }, _proto.componentWillUnmount = function() {
        this.cancelNextCallback();
      }, _proto.getTimeouts = function() {
        var timeout2 = this.props.timeout, exit, enter, appear;
        return exit = enter = appear = timeout2, timeout2 != null && typeof timeout2 != "number" && (exit = timeout2.exit, enter = timeout2.enter, appear = timeout2.appear !== void 0 ? timeout2.appear : enter), {
          exit,
          enter,
          appear
        };
      }, _proto.updateStatus = function(mounting, nextStatus) {
        if (mounting === void 0 && (mounting = false), nextStatus !== null)
          if (this.cancelNextCallback(), nextStatus === ENTERING) {
            if (this.props.unmountOnExit || this.props.mountOnEnter) {
              var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom2.default.findDOMNode(this);
              node && forceReflow(node);
            }
            this.performEnter(mounting);
          } else
            this.performExit();
        else
          this.props.unmountOnExit && this.state.status === EXITED && this.setState({
            status: UNMOUNTED
          });
      }, _proto.performEnter = function(mounting) {
        var _this2 = this, enter = this.props.enter, appearing = this.context ? this.context.isMounting : mounting, _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom2.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1], timeouts = this.getTimeouts(), enterTimeout = appearing ? timeouts.appear : timeouts.enter;
        if (!mounting && !enter || config_default.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }
        this.props.onEnter(maybeNode, maybeAppearing), this.safeSetState({
          status: ENTERING
        }, function() {
          _this2.props.onEntering(maybeNode, maybeAppearing), _this2.onTransitionEnd(enterTimeout, function() {
            _this2.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      }, _proto.performExit = function() {
        var _this3 = this, exit = this.props.exit, timeouts = this.getTimeouts(), maybeNode = this.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);
        if (!exit || config_default.disabled) {
          this.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
          return;
        }
        this.props.onExit(maybeNode), this.safeSetState({
          status: EXITING
        }, function() {
          _this3.props.onExiting(maybeNode), _this3.onTransitionEnd(timeouts.exit, function() {
            _this3.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      }, _proto.cancelNextCallback = function() {
        this.nextCallback !== null && (this.nextCallback.cancel(), this.nextCallback = null);
      }, _proto.safeSetState = function(nextState, callback) {
        callback = this.setNextCallback(callback), this.setState(nextState, callback);
      }, _proto.setNextCallback = function(callback) {
        var _this4 = this, active = true;
        return this.nextCallback = function(event) {
          active && (active = false, _this4.nextCallback = null, callback(event));
        }, this.nextCallback.cancel = function() {
          active = false;
        }, this.nextCallback;
      }, _proto.onTransitionEnd = function(timeout2, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom2.default.findDOMNode(this), doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
        if (!node || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }
        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
          this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        timeout2 != null && setTimeout(this.nextCallback, timeout2);
      }, _proto.render = function() {
        var status = this.state.status;
        if (status === UNMOUNTED)
          return null;
        var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
        return (
          // allows for nested Transitions
          /* @__PURE__ */ import_react154.default.createElement(TransitionGroupContext_default.Provider, {
            value: null
          }, typeof children == "function" ? children(status, childProps) : import_react154.default.cloneElement(import_react154.default.Children.only(children), childProps))
        );
      }, Transition2;
    }(import_react154.default.Component);
    Transition.contextType = TransitionGroupContext_default;
    Transition.propTypes = {
      /**
       * A React reference to DOM element that need to transition:
       * https://stackoverflow.com/a/51127130/4671932
       *
       *   - When `nodeRef` prop is used, `node` is not passed to callback functions
       *      (e.g. `onEnter`) because user already has direct access to the node.
       *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
       *     `nodeRef` need to be provided to `Transition` with changed `key` prop
       *     (see
       *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
       */
      nodeRef: import_prop_types2.default.shape({
        current: typeof Element > "u" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
          var value = propValue[key];
          return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
      }),
      /**
       * A `function` child can be used instead of a React element. This function is
       * called with the current transition status (`'entering'`, `'entered'`,
       * `'exiting'`, `'exited'`), which can be used to apply context
       * specific props to a component.
       *
       * ```jsx
       * <Transition in={this.state.in} timeout={150}>
       *   {state => (
       *     <MyComponent className={`fade fade-${state}`} />
       *   )}
       * </Transition>
       * ```
       */
      children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
      /**
       * Show the component; triggers the enter or exit states
       */
      in: import_prop_types2.default.bool,
      /**
       * By default the child component is mounted immediately along with
       * the parent `Transition` component. If you want to "lazy mount" the component on the
       * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
       * mounted, even on "exited", unless you also specify `unmountOnExit`.
       */
      mountOnEnter: import_prop_types2.default.bool,
      /**
       * By default the child component stays mounted after it reaches the `'exited'` state.
       * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
       */
      unmountOnExit: import_prop_types2.default.bool,
      /**
       * By default the child component does not perform the enter transition when
       * it first mounts, regardless of the value of `in`. If you want this
       * behavior, set both `appear` and `in` to `true`.
       *
       * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
       * > only adds an additional enter transition. However, in the
       * > `<CSSTransition>` component that first enter transition does result in
       * > additional `.appear-*` classes, that way you can choose to style it
       * > differently.
       */
      appear: import_prop_types2.default.bool,
      /**
       * Enable or disable enter transitions.
       */
      enter: import_prop_types2.default.bool,
      /**
       * Enable or disable exit transitions.
       */
      exit: import_prop_types2.default.bool,
      /**
       * The duration of the transition, in milliseconds.
       * Required unless `addEndListener` is provided.
       *
       * You may specify a single timeout for all transitions:
       *
       * ```jsx
       * timeout={500}
       * ```
       *
       * or individually:
       *
       * ```jsx
       * timeout={{
       *  appear: 500,
       *  enter: 300,
       *  exit: 500,
       * }}
       * ```
       *
       * - `appear` defaults to the value of `enter`
       * - `enter` defaults to `0`
       * - `exit` defaults to `0`
       *
       * @type {number | { enter?: number, exit?: number, appear?: number }}
       */
      timeout: function(props) {
        var pt = timeoutsShape;
        props.addEndListener || (pt = pt.isRequired);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
          args[_key - 1] = arguments[_key];
        return pt.apply(void 0, [props].concat(args));
      },
      /**
       * Add a custom transition end trigger. Called with the transitioning
       * DOM node and a `done` callback. Allows for more fine grained transition end
       * logic. Timeouts are still used as a fallback if provided.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * ```jsx
       * addEndListener={(node, done) => {
       *   // use the css transitionend event to mark the finish of a transition
       *   node.addEventListener('transitionend', done, false);
       * }}
       * ```
       */
      addEndListener: import_prop_types2.default.func,
      /**
       * Callback fired before the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEnter: import_prop_types2.default.func,
      /**
       * Callback fired after the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: import_prop_types2.default.func,
      /**
       * Callback fired after the "entered" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEntered: import_prop_types2.default.func,
      /**
       * Callback fired before the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExit: import_prop_types2.default.func,
      /**
       * Callback fired after the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExiting: import_prop_types2.default.func,
      /**
       * Callback fired after the "exited" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExited: import_prop_types2.default.func
    };
    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop5,
      onEntering: noop5,
      onEntered: noop5,
      onExit: noop5,
      onExiting: noop5,
      onExited: noop5
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;
    Transition_default = Transition;
  }
});
var import_prop_types3;
var import_react155;
var _addClass;
var removeClass2;
var CSSTransition;
var CSSTransition_default;
var init_CSSTransition = __esm({
  "node_modules/react-transition-group/esm/CSSTransition.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_inheritsLoose();
    import_prop_types3 = __toESM(require_prop_types());
    init_addClass();
    init_removeClass();
    import_react155 = __toESM(require_react());
    init_Transition();
    init_PropTypes();
    init_reflow();
    _addClass = function(node, classes) {
      return node && classes && classes.split(" ").forEach(function(c) {
        return addClass(node, c);
      });
    }, removeClass2 = function(node, classes) {
      return node && classes && classes.split(" ").forEach(function(c) {
        return removeClass(node, c);
      });
    }, CSSTransition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(CSSTransition2, _React$Component);
      function CSSTransition2() {
        for (var _this, _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
          args[_key] = arguments[_key];
        return _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this, _this.appliedClasses = {
          appear: {},
          enter: {},
          exit: {}
        }, _this.onEnter = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
          _this.removeClasses(node, "exit"), _this.addClass(node, appearing ? "appear" : "enter", "base"), _this.props.onEnter && _this.props.onEnter(maybeNode, maybeAppearing);
        }, _this.onEntering = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1], type = appearing ? "appear" : "enter";
          _this.addClass(node, type, "active"), _this.props.onEntering && _this.props.onEntering(maybeNode, maybeAppearing);
        }, _this.onEntered = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1], type = appearing ? "appear" : "enter";
          _this.removeClasses(node, type), _this.addClass(node, type, "done"), _this.props.onEntered && _this.props.onEntered(maybeNode, maybeAppearing);
        }, _this.onExit = function(maybeNode) {
          var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
          _this.removeClasses(node, "appear"), _this.removeClasses(node, "enter"), _this.addClass(node, "exit", "base"), _this.props.onExit && _this.props.onExit(maybeNode);
        }, _this.onExiting = function(maybeNode) {
          var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
          _this.addClass(node, "exit", "active"), _this.props.onExiting && _this.props.onExiting(maybeNode);
        }, _this.onExited = function(maybeNode) {
          var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
          _this.removeClasses(node, "exit"), _this.addClass(node, "exit", "done"), _this.props.onExited && _this.props.onExited(maybeNode);
        }, _this.resolveArguments = function(maybeNode, maybeAppearing) {
          return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
        }, _this.getClassNames = function(type) {
          var classNames2 = _this.props.classNames, isStringClassNames = typeof classNames2 == "string", prefix = isStringClassNames && classNames2 ? classNames2 + "-" : "", baseClassName = isStringClassNames ? "" + prefix + type : classNames2[type], activeClassName = isStringClassNames ? baseClassName + "-active" : classNames2[type + "Active"], doneClassName = isStringClassNames ? baseClassName + "-done" : classNames2[type + "Done"];
          return {
            baseClassName,
            activeClassName,
            doneClassName
          };
        }, _this;
      }
      var _proto = CSSTransition2.prototype;
      return _proto.addClass = function(node, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"], _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
        type === "appear" && phase === "done" && doneClassName && (className += " " + doneClassName), phase === "active" && node && forceReflow(node), className && (this.appliedClasses[type][phase] = className, _addClass(node, className));
      }, _proto.removeClasses = function(node, type) {
        var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {}, baseClassName && removeClass2(node, baseClassName), activeClassName && removeClass2(node, activeClassName), doneClassName && removeClass2(node, doneClassName);
      }, _proto.render = function() {
        var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose2(_this$props, ["classNames"]);
        return /* @__PURE__ */ import_react155.default.createElement(Transition_default, _extends5({}, props, {
          onEnter: this.onEnter,
          onEntered: this.onEntered,
          onEntering: this.onEntering,
          onExit: this.onExit,
          onExiting: this.onExiting,
          onExited: this.onExited
        }));
      }, CSSTransition2;
    }(import_react155.default.Component);
    CSSTransition.defaultProps = {
      classNames: ""
    };
    CSSTransition.propTypes = _extends5({}, Transition_default.propTypes, {
      /**
       * The animation classNames applied to the component as it appears, enters,
       * exits or has finished the transition. A single name can be provided, which
       * will be suffixed for each stage, e.g. `classNames="fade"` applies:
       *
       * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
       * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
       * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
       *
       * A few details to note about how these classes are applied:
       *
       * 1. They are _joined_ with the ones that are already defined on the child
       *    component, so if you want to add some base styles, you can use
       *    `className` without worrying that it will be overridden.
       *
       * 2. If the transition component mounts with `in={false}`, no classes are
       *    applied yet. You might be expecting `*-exit-done`, but if you think
       *    about it, a component cannot finish exiting if it hasn't entered yet.
       *
       * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
       *    allows you to define different behavior for when appearing is done and
       *    when regular entering is done, using selectors like
       *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
       *    an epic entrance animation when element first appears in the DOM using
       *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
       *    simply use `fade-enter-done` for defining both cases.
       *
       * Each individual classNames can also be specified independently like:
       *
       * ```js
       * classNames={{
       *  appear: 'my-appear',
       *  appearActive: 'my-active-appear',
       *  appearDone: 'my-done-appear',
       *  enter: 'my-enter',
       *  enterActive: 'my-active-enter',
       *  enterDone: 'my-done-enter',
       *  exit: 'my-exit',
       *  exitActive: 'my-active-exit',
       *  exitDone: 'my-done-exit',
       * }}
       * ```
       *
       * If you want to set these classes using CSS Modules:
       *
       * ```js
       * import styles from './styles.css';
       * ```
       *
       * you might want to use camelCase in your CSS file, that way could simply
       * spread them instead of listing them one by one:
       *
       * ```js
       * classNames={{ ...styles }}
       * ```
       *
       * @type {string | {
       *  appear?: string,
       *  appearActive?: string,
       *  appearDone?: string,
       *  enter?: string,
       *  enterActive?: string,
       *  enterDone?: string,
       *  exit?: string,
       *  exitActive?: string,
       *  exitDone?: string,
       * }}
       */
      classNames: classNamesShape,
      /**
       * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEnter: import_prop_types3.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'enter-active' or
       * 'appear-active' class is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: import_prop_types3.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'enter' or
       * 'appear' classes are **removed** and the `done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntered: import_prop_types3.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExit: import_prop_types3.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExiting: import_prop_types3.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit' classes
       * are **removed** and the `exit-done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExited: import_prop_types3.default.func
    });
    CSSTransition_default = CSSTransition;
  }
});
function _assertThisInitialized(self2) {
  if (self2 === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return self2;
}
var init_assertThisInitialized = __esm({
  "node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"() {
  }
});
function getChildMapping(children, mapFn) {
  var mapper = function(child) {
    return mapFn && (0, import_react156.isValidElement)(child) ? mapFn(child) : child;
  }, result = /* @__PURE__ */ Object.create(null);
  return children && import_react156.Children.map(children, function(c) {
    return c;
  }).forEach(function(child) {
    result[child.key] = mapper(child);
  }), result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {}, next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }
  var nextKeysPending = /* @__PURE__ */ Object.create(null), pendingKeys = [];
  for (var prevKey in prev)
    prevKey in next ? pendingKeys.length && (nextKeysPending[prevKey] = pendingKeys, pendingKeys = []) : pendingKeys.push(prevKey);
  var i, childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey])
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i = 0; i < pendingKeys.length; i++)
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function(child) {
    return (0, import_react156.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children), children = mergeChildMappings(prevChildMapping, nextChildMapping);
  return Object.keys(children).forEach(function(key) {
    var child = children[key];
    if ((0, import_react156.isValidElement)(child)) {
      var hasPrev = key in prevChildMapping, hasNext = key in nextChildMapping, prevChild = prevChildMapping[key], isLeaving = (0, import_react156.isValidElement)(prevChild) && !prevChild.props.in;
      hasNext && (!hasPrev || isLeaving) ? children[key] = (0, import_react156.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      }) : !hasNext && hasPrev && !isLeaving ? children[key] = (0, import_react156.cloneElement)(child, {
        in: false
      }) : hasNext && hasPrev && (0, import_react156.isValidElement)(prevChild) && (children[key] = (0, import_react156.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      }));
    }
  }), children;
}
var import_react156;
var init_ChildMapping = __esm({
  "node_modules/react-transition-group/esm/utils/ChildMapping.js"() {
    import_react156 = __toESM(require_react());
  }
});
var import_prop_types4;
var import_react157;
var values;
var defaultProps;
var TransitionGroup;
var TransitionGroup_default;
var init_TransitionGroup = __esm({
  "node_modules/react-transition-group/esm/TransitionGroup.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_assertThisInitialized();
    init_inheritsLoose();
    import_prop_types4 = __toESM(require_prop_types()), import_react157 = __toESM(require_react());
    init_TransitionGroupContext();
    init_ChildMapping();
    values = Object.values || function(obj) {
      return Object.keys(obj).map(function(k) {
        return obj[k];
      });
    }, defaultProps = {
      component: "div",
      childFactory: function(child) {
        return child;
      }
    }, TransitionGroup = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(TransitionGroup2, _React$Component);
      function TransitionGroup2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
        return _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited,
          firstRender: true
        }, _this;
      }
      var _proto = TransitionGroup2.prototype;
      return _proto.componentDidMount = function() {
        this.mounted = true, this.setState({
          contextValue: {
            isMounting: false
          }
        });
      }, _proto.componentWillUnmount = function() {
        this.mounted = false;
      }, TransitionGroup2.getDerivedStateFromProps = function(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      }, _proto.handleExited = function(child, node) {
        var currentChildMapping = getChildMapping(this.props.children);
        child.key in currentChildMapping || (child.props.onExited && child.props.onExited(node), this.mounted && this.setState(function(state) {
          var children = _extends5({}, state.children);
          return delete children[child.key], {
            children
          };
        }));
      }, _proto.render = function() {
        var _this$props = this.props, Component9 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose2(_this$props, ["component", "childFactory"]), contextValue = this.state.contextValue, children = values(this.state.children).map(childFactory2);
        return delete props.appear, delete props.enter, delete props.exit, Component9 === null ? /* @__PURE__ */ import_react157.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children) : /* @__PURE__ */ import_react157.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, /* @__PURE__ */ import_react157.default.createElement(Component9, props, children));
      }, TransitionGroup2;
    }(import_react157.default.Component);
    TransitionGroup.propTypes = {
      /**
       * `<TransitionGroup>` renders a `<div>` by default. You can change this
       * behavior by providing a `component` prop.
       * If you use React v16+ and would like to avoid a wrapping `<div>` element
       * you can pass in `component={null}`. This is useful if the wrapping div
       * borks your css styles.
       */
      component: import_prop_types4.default.any,
      /**
       * A set of `<Transition>` components, that are toggled `in` and out as they
       * leave. the `<TransitionGroup>` will inject specific transition props, so
       * remember to spread them through if you are wrapping the `<Transition>` as
       * with our `<Fade>` example.
       *
       * While this component is meant for multiple `Transition` or `CSSTransition`
       * children, sometimes you may want to have a single transition child with
       * content that you want to be transitioned out and in when you change it
       * (e.g. routes, images etc.) In that case you can change the `key` prop of
       * the transition child as you change its content, this will cause
       * `TransitionGroup` to transition the child out and back in.
       */
      children: import_prop_types4.default.node,
      /**
       * A convenience prop that enables or disables appear animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      appear: import_prop_types4.default.bool,
      /**
       * A convenience prop that enables or disables enter animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      enter: import_prop_types4.default.bool,
      /**
       * A convenience prop that enables or disables exit animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      exit: import_prop_types4.default.bool,
      /**
       * You may need to apply reactive updates to a child as it is exiting.
       * This is generally done by using `cloneElement` however in the case of an exiting
       * child the element has already been removed and not accessible to the consumer.
       *
       * If you do need to update a child as it leaves you can provide a `childFactory`
       * to wrap every child, even the ones that are leaving.
       *
       * @type Function(child: ReactElement) -> ReactElement
       */
      childFactory: import_prop_types4.default.func
    };
    TransitionGroup.defaultProps = defaultProps;
    TransitionGroup_default = TransitionGroup;
  }
});
var init_esm4 = __esm({
  "node_modules/react-transition-group/esm/index.js"() {
    init_CSSTransition();
    init_TransitionGroup();
    init_Transition();
  }
});
var styles45;
var init_BulkActions_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/BulkActions/BulkActions.scss.js"() {
    styles45 = {
      Group: "Polaris-BulkActions__Group",
      "Group-not-sticky": "Polaris-BulkActions--groupNotSticky",
      "Group-entering": "Polaris-BulkActions__Group--entering",
      "Group-exiting": "Polaris-BulkActions__Group--exiting",
      "Group-entered": "Polaris-BulkActions__Group--entered",
      "Group-exited": "Polaris-BulkActions__Group--exited",
      "Group-measuring": "Polaris-BulkActions__Group--measuring",
      ButtonGroupWrapper: "Polaris-BulkActions__ButtonGroupWrapper",
      BulkActionButton: "Polaris-BulkActions__BulkActionButton",
      disabled: "Polaris-BulkActions--disabled"
    };
  }
});
var styles46;
var init_Indicator_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Indicator/Indicator.scss.js"() {
    styles46 = {
      Indicator: "Polaris-Indicator",
      pulseIndicator: "Polaris-Indicator--pulseIndicator"
    };
  }
});
function Indicator({
  pulse = true
}) {
  let className = classNames(styles46.Indicator, pulse && styles46.pulseIndicator);
  return /* @__PURE__ */ import_react158.default.createElement("span", {
    className
  });
}
var import_react158;
var init_Indicator = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Indicator/Indicator.js"() {
    import_react158 = __toESM(require_react());
    init_css();
    init_Indicator_scss();
  }
});
function BulkActionButton({
  handleMeasurement,
  url,
  external,
  onAction,
  content,
  disclosure,
  accessibilityLabel,
  disabled,
  indicator,
  showContentInButton
}) {
  let bulkActionButton = (0, import_react159.useRef)(null);
  useComponentDidMount(() => {
    if (handleMeasurement && bulkActionButton.current) {
      let width2 = bulkActionButton.current.getBoundingClientRect().width;
      handleMeasurement(width2);
    }
  });
  let isActivatorForMoreActionsPopover = disclosure && !showContentInButton, buttonContent = isActivatorForMoreActionsPopover ? void 0 : content, buttonMarkup = /* @__PURE__ */ import_react159.default.createElement(Button, {
    external,
    url,
    accessibilityLabel: isActivatorForMoreActionsPopover ? content : accessibilityLabel,
    disclosure: disclosure && showContentInButton,
    onClick: onAction,
    disabled,
    size: "slim",
    icon: isActivatorForMoreActionsPopover ? /* @__PURE__ */ import_react159.default.createElement(Icon, {
      source: SvgHorizontalDotsMinor,
      tone: "base"
    }) : void 0
  }, buttonContent);
  return /* @__PURE__ */ import_react159.default.createElement("div", {
    className: styles45.BulkActionButton,
    ref: bulkActionButton
  }, isActivatorForMoreActionsPopover ? /* @__PURE__ */ import_react159.default.createElement(Tooltip, {
    content,
    preferredPosition: "above"
  }, buttonMarkup) : buttonMarkup, indicator && /* @__PURE__ */ import_react159.default.createElement(Indicator, null));
}
var import_react159;
var init_BulkActionButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/BulkActions/components/BulkActionButton/BulkActionButton.js"() {
    import_react159 = __toESM(require_react());
    init_dist3();
    init_use_component_did_mount();
    init_BulkActions_scss();
    init_Indicator();
    init_Tooltip();
    init_Button();
    init_Icon();
  }
});
function BulkActionMenu({
  title,
  actions,
  isNewBadgeInBadgeActions
}) {
  let {
    value: isVisible,
    toggle: toggleMenuVisibility
  } = useToggle(false);
  return /* @__PURE__ */ import_react160.default.createElement(import_react160.default.Fragment, null, /* @__PURE__ */ import_react160.default.createElement(Popover2, {
    active: isVisible,
    activator: /* @__PURE__ */ import_react160.default.createElement(BulkActionButton, {
      disclosure: true,
      showContentInButton: true,
      onAction: toggleMenuVisibility,
      content: title,
      indicator: isNewBadgeInBadgeActions
    }),
    onClose: toggleMenuVisibility,
    preferInputActivator: true
  }, /* @__PURE__ */ import_react160.default.createElement(ActionList, {
    items: actions,
    onActionAnyItem: toggleMenuVisibility
  })));
}
var import_react160;
var init_BulkActionMenu = __esm({
  "node_modules/@shopify/polaris/build/esm/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js"() {
    import_react160 = __toESM(require_react());
    init_use_toggle();
    init_BulkActionButton();
    init_Popover();
    init_ActionList();
  }
});
function instanceOfBulkActionListSectionArray(actions) {
  let validList = actions.filter((action4) => action4.items);
  return actions.length === validList.length;
}
function instanceOfBulkActionArray(actions) {
  let validList = actions.filter((action4) => !action4.items);
  return actions.length === validList.length;
}
function instanceOfMenuGroupDescriptor(action4) {
  return "title" in action4;
}
function BulkActions(props) {
  let i18n = useI18n();
  return /* @__PURE__ */ import_react161.default.createElement(BulkActionsInner, Object.assign({}, props, {
    i18n
  }));
}
var import_react161;
var BUTTONS_NODE_ADDITIONAL_WIDTH;
var BulkActionsInner;
var init_BulkActions = __esm({
  "node_modules/@shopify/polaris/build/esm/components/BulkActions/BulkActions.js"() {
    import_react161 = __toESM(require_react());
    init_esm4();
    init_debounce();
    init_css();
    init_clamp();
    init_BulkActions_scss();
    init_BulkActionMenu();
    init_hooks2();
    init_BulkActionButton();
    init_Popover();
    init_ActionList();
    init_EventListener();
    init_InlineStack();
    BUTTONS_NODE_ADDITIONAL_WIDTH = 64, BulkActionsInner = class extends import_react161.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          popoverVisible: false,
          containerWidth: 0,
          measuring: true
        }, this.containerNode = null, this.buttonsNode = null, this.moreActionsNode = null, this.groupNode = /* @__PURE__ */ (0, import_react161.createRef)(), this.promotedActionsWidths = [], this.bulkActionsWidth = 0, this.addedMoreActionsWidthForMeasuring = 0, this.handleResize = debounce(() => {
          let {
            popoverVisible
          } = this.state;
          if (this.containerNode) {
            let containerWidth = this.containerNode.getBoundingClientRect().width;
            containerWidth > 0 && this.setState({
              containerWidth
            });
          }
          popoverVisible && this.setState({
            popoverVisible: false
          });
        }, 50, {
          trailing: true
        }), this.setButtonsNode = (node) => {
          this.buttonsNode = node;
        }, this.setContainerNode = (node) => {
          this.containerNode = node;
        }, this.setMoreActionsNode = (node) => {
          this.moreActionsNode = node;
        }, this.togglePopover = () => {
          this.props.onMoreActionPopoverToggle && this.props.onMoreActionPopoverToggle(this.state.popoverVisible), this.setState(({
            popoverVisible
          }) => ({
            popoverVisible: !popoverVisible
          }));
        }, this.handleMeasurement = (width2) => {
          let {
            measuring
          } = this.state;
          measuring && this.promotedActionsWidths.push(width2);
        };
      }
      numberOfPromotedActionsToRender() {
        let {
          promotedActions
        } = this.props, {
          containerWidth,
          measuring
        } = this.state;
        if (!promotedActions)
          return 0;
        let containerWidthMinusAdditionalWidth = Math.max(0, containerWidth - BUTTONS_NODE_ADDITIONAL_WIDTH);
        if (containerWidthMinusAdditionalWidth >= this.bulkActionsWidth || measuring)
          return promotedActions.length;
        let sufficientSpace = false, counter = promotedActions.length - 1, totalWidth = 0;
        for (; !sufficientSpace && counter >= 0; ) {
          totalWidth += this.promotedActionsWidths[counter];
          let widthWithRemovedAction = this.bulkActionsWidth - totalWidth + this.addedMoreActionsWidthForMeasuring;
          containerWidthMinusAdditionalWidth >= widthWithRemovedAction ? sufficientSpace = true : counter--;
        }
        return clamp(counter, 0, promotedActions.length);
      }
      actionSections() {
        let {
          actions
        } = this.props;
        if (!(!actions || actions.length === 0)) {
          if (instanceOfBulkActionListSectionArray(actions))
            return actions;
          if (instanceOfBulkActionArray(actions))
            return [{
              items: actions
            }];
        }
      }
      rolledInPromotedActions() {
        let {
          promotedActions
        } = this.props, numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();
        return !promotedActions || promotedActions.length === 0 || numberOfPromotedActionsToRender >= promotedActions.length ? [] : promotedActions.map((action4) => instanceOfMenuGroupDescriptor(action4) ? {
          items: [...action4.actions]
        } : {
          items: [action4]
        }).slice(numberOfPromotedActionsToRender);
      }
      // eslint-disable-next-line @typescript-eslint/member-ordering
      componentDidMount() {
        let {
          actions,
          promotedActions
        } = this.props;
        promotedActions && !actions && this.moreActionsNode && (this.addedMoreActionsWidthForMeasuring = this.moreActionsNode.getBoundingClientRect().width), this.bulkActionsWidth = this.buttonsNode ? this.buttonsNode.getBoundingClientRect().width - this.addedMoreActionsWidthForMeasuring : 0, this.containerNode && this.setState({
          containerWidth: this.containerNode.getBoundingClientRect().width,
          measuring: false
        });
      }
      // eslint-disable-next-line @typescript-eslint/member-ordering
      render() {
        let {
          selectMode,
          disabled,
          promotedActions,
          i18n,
          isSticky,
          width: width2
        } = this.props, actionSections = this.actionSections(), {
          popoverVisible,
          measuring
        } = this.state, numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender(), promotedActionsMarkup = promotedActions && numberOfPromotedActionsToRender > 0 ? [...promotedActions].slice(0, numberOfPromotedActionsToRender).map((action4, index) => instanceOfMenuGroupDescriptor(action4) ? /* @__PURE__ */ import_react161.default.createElement(BulkActionMenu, Object.assign({
          key: index
        }, action4, {
          isNewBadgeInBadgeActions: this.isNewBadgeInBadgeActions()
        })) : /* @__PURE__ */ import_react161.default.createElement(BulkActionButton, Object.assign({
          key: index,
          disabled
        }, action4, {
          handleMeasurement: this.handleMeasurement
        }))) : null, rolledInPromotedActions = this.rolledInPromotedActions(), activatorLabel = !promotedActions || promotedActions && numberOfPromotedActionsToRender === 0 && !measuring ? i18n.translate("Polaris.ResourceList.BulkActions.actionsActivatorLabel") : i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"), combinedActions = [];
        actionSections && rolledInPromotedActions.length > 0 ? combinedActions = [...rolledInPromotedActions, ...actionSections] : actionSections ? combinedActions = actionSections : rolledInPromotedActions.length > 0 && (combinedActions = [...rolledInPromotedActions]);
        let actionsPopover = actionSections || rolledInPromotedActions.length > 0 || measuring ? /* @__PURE__ */ import_react161.default.createElement("div", {
          className: styles45.Popover,
          ref: this.setMoreActionsNode
        }, /* @__PURE__ */ import_react161.default.createElement(Popover2, {
          active: popoverVisible,
          activator: /* @__PURE__ */ import_react161.default.createElement(BulkActionButton, {
            disclosure: true,
            showContentInButton: !promotedActionsMarkup,
            onAction: this.togglePopover,
            content: activatorLabel,
            disabled,
            indicator: this.isNewBadgeInBadgeActions()
          }),
          preferredAlignment: "right",
          onClose: this.togglePopover
        }, /* @__PURE__ */ import_react161.default.createElement(ActionList, {
          sections: combinedActions,
          onActionAnyItem: this.togglePopover
        }))) : null, groupContent = promotedActionsMarkup || actionsPopover ? /* @__PURE__ */ import_react161.default.createElement(InlineStack, {
          gap: "300"
        }, promotedActionsMarkup, actionsPopover) : null;
        if (!groupContent)
          return null;
        let group = /* @__PURE__ */ import_react161.default.createElement(Transition_default, {
          timeout: 100,
          in: selectMode,
          key: "group",
          nodeRef: this.groupNode
        }, (status) => {
          let groupClassName = classNames(styles45.Group, !isSticky && styles45["Group-not-sticky"], !measuring && isSticky && styles45[`Group-${status}`], measuring && styles45["Group-measuring"]);
          return /* @__PURE__ */ import_react161.default.createElement("div", {
            className: groupClassName,
            ref: this.groupNode,
            style: {
              width: width2
            }
          }, /* @__PURE__ */ import_react161.default.createElement(EventListener, {
            event: "resize",
            handler: this.handleResize
          }), /* @__PURE__ */ import_react161.default.createElement("div", {
            className: styles45.ButtonGroupWrapper,
            ref: this.setButtonsNode
          }, /* @__PURE__ */ import_react161.default.createElement("div", {
            className: styles45.ButtonGroupInner
          }, groupContent)));
        });
        return /* @__PURE__ */ import_react161.default.createElement("div", {
          ref: this.setContainerNode
        }, group);
      }
      isNewBadgeInBadgeActions() {
        let actions = this.actionSections();
        if (!actions)
          return false;
        for (let action4 of actions)
          for (let item of action4.items)
            if (item.badge?.tone === "new")
              return true;
        return false;
      }
    };
  }
});
var styles47;
var init_CalloutCard_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/CalloutCard/CalloutCard.scss.js"() {
    styles47 = {
      CalloutCard: "Polaris-CalloutCard",
      Image: "Polaris-CalloutCard__Image",
      DismissImage: "Polaris-CalloutCard__DismissImage",
      Content: "Polaris-CalloutCard__Content",
      Title: "Polaris-CalloutCard__Title",
      Buttons: "Polaris-CalloutCard__Buttons",
      Container: "Polaris-CalloutCard__Container",
      Dismiss: "Polaris-CalloutCard__Dismiss",
      hasDismiss: "Polaris-CalloutCard--hasDismiss"
    };
  }
});
var styles48;
var init_LegacyCard_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyCard/LegacyCard.scss.js"() {
    styles48 = {
      LegacyCard: "Polaris-LegacyCard",
      Section: "Polaris-LegacyCard__Section",
      subdued: "Polaris-LegacyCard--subdued",
      "Section-hideOnPrint": "Polaris-LegacyCard__Section--hideOnPrint",
      hideOnPrint: "Polaris-LegacyCard--hideOnPrint",
      Header: "Polaris-LegacyCard__Header",
      "Section-fullWidth": "Polaris-LegacyCard__Section--fullWidth",
      "Section-flush": "Polaris-LegacyCard__Section--flush",
      "Section-subdued": "Polaris-LegacyCard__Section--subdued",
      SectionHeader: "Polaris-LegacyCard__SectionHeader",
      Subsection: "Polaris-LegacyCard__Subsection",
      Footer: "Polaris-LegacyCard__Footer",
      LeftJustified: "Polaris-LegacyCard__LeftJustified",
      FirstSectionPadding: "Polaris-LegacyCard__FirstSectionPadding",
      LastSectionPadding: "Polaris-LegacyCard__LastSectionPadding"
    };
  }
});
function Header2({
  children,
  title,
  actions
}) {
  let actionMarkup = actions ? /* @__PURE__ */ import_react162.default.createElement(ButtonGroup, null, buttonsFrom(actions, {
    variant: "plain"
  })) : null, titleMarkup = /* @__PURE__ */ (0, import_react162.isValidElement)(title) ? title : /* @__PURE__ */ import_react162.default.createElement(Text, {
    variant: "headingSm",
    as: "h2"
  }, title), headingMarkup = actionMarkup || children ? /* @__PURE__ */ import_react162.default.createElement(InlineStack, {
    wrap: false,
    gap: "200",
    align: "space-between",
    blockAlign: "center"
  }, titleMarkup, /* @__PURE__ */ import_react162.default.createElement(InlineStack, {
    wrap: false,
    gap: "400",
    blockAlign: "center"
  }, actionMarkup, children)) : titleMarkup;
  return /* @__PURE__ */ import_react162.default.createElement("div", {
    className: styles48.Header
  }, headingMarkup);
}
var import_react162;
var init_Header2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyCard/components/Header/Header.js"() {
    import_react162 = __toESM(require_react());
    init_LegacyCard_scss();
    init_utils4();
    init_ButtonGroup();
    init_InlineStack();
    init_Text();
  }
});
var styles49;
var init_LegacyStack_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyStack/LegacyStack.scss.js"() {
    styles49 = {
      LegacyStack: "Polaris-LegacyStack",
      Item: "Polaris-LegacyStack__Item",
      noWrap: "Polaris-LegacyStack--noWrap",
      spacingNone: "Polaris-LegacyStack--spacingNone",
      spacingExtraTight: "Polaris-LegacyStack--spacingExtraTight",
      spacingTight: "Polaris-LegacyStack--spacingTight",
      spacingBaseTight: "Polaris-LegacyStack--spacingBaseTight",
      spacingLoose: "Polaris-LegacyStack--spacingLoose",
      spacingExtraLoose: "Polaris-LegacyStack--spacingExtraLoose",
      distributionLeading: "Polaris-LegacyStack--distributionLeading",
      distributionTrailing: "Polaris-LegacyStack--distributionTrailing",
      distributionCenter: "Polaris-LegacyStack--distributionCenter",
      distributionEqualSpacing: "Polaris-LegacyStack--distributionEqualSpacing",
      distributionFill: "Polaris-LegacyStack--distributionFill",
      distributionFillEvenly: "Polaris-LegacyStack--distributionFillEvenly",
      alignmentLeading: "Polaris-LegacyStack--alignmentLeading",
      alignmentTrailing: "Polaris-LegacyStack--alignmentTrailing",
      alignmentCenter: "Polaris-LegacyStack--alignmentCenter",
      alignmentFill: "Polaris-LegacyStack--alignmentFill",
      alignmentBaseline: "Polaris-LegacyStack--alignmentBaseline",
      vertical: "Polaris-LegacyStack--vertical",
      "Item-fill": "Polaris-LegacyStack__Item--fill"
    };
  }
});
function Item4({
  children,
  fill
}) {
  let className = classNames(styles49.Item, fill && styles49["Item-fill"]);
  return /* @__PURE__ */ import_react163.default.createElement("div", {
    className
  }, children);
}
var import_react163;
var init_Item4 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyStack/components/Item/Item.js"() {
    import_react163 = __toESM(require_react());
    init_css();
    init_LegacyStack_scss();
  }
});
var import_react164;
var LegacyStack;
var init_LegacyStack = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyStack/LegacyStack.js"() {
    import_react164 = __toESM(require_react());
    init_css();
    init_components2();
    init_LegacyStack_scss();
    init_Item4();
    LegacyStack = /* @__PURE__ */ (0, import_react164.memo)(function({
      children,
      vertical,
      spacing,
      distribution,
      alignment,
      wrap: wrap32
    }) {
      let className = classNames(styles49.LegacyStack, vertical && styles49.vertical, spacing && styles49[variationName("spacing", spacing)], distribution && styles49[variationName("distribution", distribution)], alignment && styles49[variationName("alignment", alignment)], wrap32 === false && styles49.noWrap), itemMarkup = elementChildren(children).map((child, index) => wrapWithComponent(child, Item4, {
        key: index
      }));
      return /* @__PURE__ */ import_react164.default.createElement("div", {
        className
      }, itemMarkup);
    });
    LegacyStack.Item = Item4;
  }
});
function Section4({
  children,
  title,
  subdued,
  flush,
  fullWidth,
  actions,
  hideOnPrint
}) {
  let className = classNames(styles48.Section, flush && styles48["Section-flush"], subdued && styles48["Section-subdued"], fullWidth && styles48["Section-fullWidth"], hideOnPrint && styles48["Section-hideOnPrint"]), actionMarkup = actions ? /* @__PURE__ */ import_react165.default.createElement(ButtonGroup, null, buttonsFrom(actions, {
    variant: "plain"
  })) : null, titleMarkup = typeof title == "string" ? /* @__PURE__ */ import_react165.default.createElement(Text, {
    variant: "headingSm",
    as: "h3",
    fontWeight: "medium"
  }, title) : title, titleAreaMarkup = titleMarkup || actionMarkup ? /* @__PURE__ */ import_react165.default.createElement("div", {
    className: styles48.SectionHeader
  }, actionMarkup ? /* @__PURE__ */ import_react165.default.createElement(LegacyStack, {
    alignment: "baseline"
  }, /* @__PURE__ */ import_react165.default.createElement(LegacyStack.Item, {
    fill: true
  }, titleMarkup), actionMarkup) : titleMarkup) : null;
  return /* @__PURE__ */ import_react165.default.createElement("div", {
    className
  }, titleAreaMarkup, children);
}
var import_react165;
var init_Section4 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyCard/components/Section/Section.js"() {
    import_react165 = __toESM(require_react());
    init_css();
    init_LegacyCard_scss();
    init_LegacyStack();
    init_ButtonGroup();
    init_utils4();
    init_Text();
  }
});
function Subsection({
  children
}) {
  return /* @__PURE__ */ import_react166.default.createElement("div", {
    className: styles48.Subsection
  }, children);
}
var import_react166;
var init_Subsection = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyCard/components/Subsection/Subsection.js"() {
    import_react166 = __toESM(require_react());
    init_LegacyCard_scss();
  }
});
function useLegacyCardPaddingObserverRef() {
  let legacyCard = (0, import_react167.useRef)(null);
  return (0, import_react167.useEffect)(() => {
    let legacyCardNode = legacyCard.current, firstSection, lastSection;
    if (legacyCardNode) {
      let updateFirstAndLastSectionPadding = () => {
        updatePadding(firstSection, "top", false), updatePadding(lastSection, "bottom", false);
        let currentElements = legacyCardNode.querySelectorAll(`.${styles48.Section}, .${styles48.Header}, .${styles48.Footer}`);
        if (!currentElements?.length)
          return;
        let firstElement = currentElements[0], lastElement = getMostSeniorLastElement(currentElements);
        legacyCardNode.firstChild?.contains(firstElement) && (firstSection = firstElement, updatePadding(firstSection, "top", true)), legacyCardNode.lastChild?.contains(lastElement) && (lastSection = lastElement, updatePadding(lastSection, "bottom", true));
      };
      updateFirstAndLastSectionPadding();
      let observer = new MutationObserver(updateFirstAndLastSectionPadding);
      return observer.observe(legacyCardNode, {
        childList: true,
        subtree: true
      }), () => {
        updatePadding(firstSection, "top", false), updatePadding(lastSection, "bottom", false), observer.disconnect();
      };
    }
  }, []), legacyCard;
}
function updatePadding(element, area, add) {
  if (!(!element || element.className.includes(styles48["Section-flush"])))
    switch (area) {
      case "top":
        element.classList.toggle(styles48.FirstSectionPadding, add);
        return;
      case "bottom":
        element.classList.toggle(styles48.LastSectionPadding, add);
    }
}
function getMostSeniorLastElement(elements) {
  let lastElement = elements[0];
  return elements.forEach((element) => {
    lastElement.contains(element) || (lastElement = element);
  }), lastElement;
}
var import_react167;
var LegacyCard;
var init_LegacyCard = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyCard/LegacyCard.js"() {
    import_react167 = __toESM(require_react());
    init_css();
    init_use_toggle();
    init_within_content_context();
    init_LegacyCard_scss();
    init_Header2();
    init_Section4();
    init_Subsection();
    init_hooks2();
    init_utils4();
    init_Popover();
    init_Button();
    init_ActionList();
    init_ButtonGroup();
    LegacyCard = function({
      children,
      hideOnPrint,
      title,
      subdued,
      sectioned,
      actions,
      primaryFooterAction,
      secondaryFooterActions,
      secondaryFooterActionsDisclosureText,
      footerActionAlignment = "right"
    }) {
      let i18n = useI18n(), {
        value: secondaryActionsPopoverOpen,
        toggle: toggleSecondaryActionsPopoverOpen
      } = useToggle(false), legacyCard = useLegacyCardPaddingObserverRef(), className = classNames(styles48.LegacyCard, subdued && styles48.subdued, hideOnPrint && styles48.hideOnPrint), headerMarkup = title || actions ? /* @__PURE__ */ import_react167.default.createElement(Header2, {
        actions,
        title
      }) : null, content = sectioned ? /* @__PURE__ */ import_react167.default.createElement(Section4, null, children) : children, primaryFooterActionMarkup = primaryFooterAction ? buttonFrom(primaryFooterAction, {
        variant: "primary"
      }) : null, secondaryFooterActionsMarkup = null;
      secondaryFooterActions && secondaryFooterActions.length && (secondaryFooterActions.length === 1 ? secondaryFooterActionsMarkup = buttonFrom(secondaryFooterActions[0]) : secondaryFooterActionsMarkup = /* @__PURE__ */ import_react167.default.createElement(import_react167.default.Fragment, null, /* @__PURE__ */ import_react167.default.createElement(Popover2, {
        active: secondaryActionsPopoverOpen,
        activator: /* @__PURE__ */ import_react167.default.createElement(Button, {
          disclosure: true,
          onClick: toggleSecondaryActionsPopoverOpen
        }, secondaryFooterActionsDisclosureText || i18n.translate("Polaris.Common.more")),
        onClose: toggleSecondaryActionsPopoverOpen
      }, /* @__PURE__ */ import_react167.default.createElement(ActionList, {
        items: secondaryFooterActions
      }))));
      let footerMarkup = primaryFooterActionMarkup || secondaryFooterActionsMarkup ? /* @__PURE__ */ import_react167.default.createElement("div", {
        className: classNames(styles48.Footer, footerActionAlignment === "left" && styles48.LeftJustified)
      }, footerActionAlignment === "right" ? /* @__PURE__ */ import_react167.default.createElement(ButtonGroup, null, secondaryFooterActionsMarkup, primaryFooterActionMarkup) : /* @__PURE__ */ import_react167.default.createElement(ButtonGroup, null, primaryFooterActionMarkup, secondaryFooterActionsMarkup)) : null;
      return /* @__PURE__ */ import_react167.default.createElement(WithinContentContext.Provider, {
        value: true
      }, /* @__PURE__ */ import_react167.default.createElement("div", {
        className,
        ref: legacyCard
      }, headerMarkup, content, footerMarkup));
    };
    LegacyCard.Header = Header2;
    LegacyCard.Section = Section4;
    LegacyCard.Subsection = Subsection;
  }
});
var styles50;
var init_TextContainer_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TextContainer/TextContainer.scss.js"() {
    styles50 = {
      TextContainer: "Polaris-TextContainer",
      spacingTight: "Polaris-TextContainer--spacingTight",
      spacingLoose: "Polaris-TextContainer--spacingLoose"
    };
  }
});
function TextContainer({
  spacing,
  children
}) {
  let className = classNames(styles50.TextContainer, spacing && styles50[variationName("spacing", spacing)]);
  return /* @__PURE__ */ import_react168.default.createElement("div", {
    className
  }, children);
}
var import_react168;
var init_TextContainer = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TextContainer/TextContainer.js"() {
    import_react168 = __toESM(require_react());
    init_css();
    init_TextContainer_scss();
  }
});
function CalloutCard({
  title,
  children,
  illustration,
  primaryAction,
  secondaryAction,
  onDismiss
}) {
  let primaryActionMarkup = buttonFrom(primaryAction), secondaryActionMarkup = secondaryAction ? buttonFrom(secondaryAction, {
    variant: "tertiary"
  }) : null, buttonMarkup = secondaryActionMarkup ? /* @__PURE__ */ import_react169.default.createElement(ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup) : primaryActionMarkup, dismissButton = onDismiss ? /* @__PURE__ */ import_react169.default.createElement("div", {
    className: styles47.Dismiss
  }, /* @__PURE__ */ import_react169.default.createElement(Button, {
    variant: "plain",
    icon: SvgCancelSmallMinor,
    onClick: onDismiss,
    accessibilityLabel: "Dismiss card"
  })) : null, imageClassName = classNames(styles47.Image, onDismiss && styles47.DismissImage), containerClassName = classNames(styles47.Container, onDismiss && styles47.hasDismiss);
  return /* @__PURE__ */ import_react169.default.createElement(LegacyCard, null, /* @__PURE__ */ import_react169.default.createElement("div", {
    className: containerClassName
  }, dismissButton, /* @__PURE__ */ import_react169.default.createElement(LegacyCard.Section, null, /* @__PURE__ */ import_react169.default.createElement("div", {
    className: styles47.CalloutCard
  }, /* @__PURE__ */ import_react169.default.createElement("div", {
    className: styles47.Content
  }, /* @__PURE__ */ import_react169.default.createElement("div", {
    className: styles47.Title
  }, /* @__PURE__ */ import_react169.default.createElement(Text, {
    variant: "headingMd",
    as: "h2"
  }, title)), /* @__PURE__ */ import_react169.default.createElement(TextContainer, null, children), /* @__PURE__ */ import_react169.default.createElement("div", {
    className: styles47.Buttons
  }, buttonMarkup)), /* @__PURE__ */ import_react169.default.createElement(Image, {
    alt: "",
    className: imageClassName,
    source: illustration
  })))));
}
var import_react169;
var init_CalloutCard = __esm({
  "node_modules/@shopify/polaris/build/esm/components/CalloutCard/CalloutCard.js"() {
    import_react169 = __toESM(require_react());
    init_dist3();
    init_css();
    init_CalloutCard_scss();
    init_LegacyCard();
    init_TextContainer();
    init_utils4();
    init_Button();
    init_Text();
    init_Image();
    init_ButtonGroup();
  }
});
var styles51;
var init_ChoiceList_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ChoiceList/ChoiceList.scss.js"() {
    styles51 = {
      ChoiceChildren: "Polaris-ChoiceList__ChoiceChildren"
    };
  }
});
var styles52;
var init_RadioButton_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RadioButton/RadioButton.scss.js"() {
    styles52 = {
      RadioButton: "Polaris-RadioButton",
      Input: "Polaris-RadioButton__Input",
      Backdrop: "Polaris-RadioButton__Backdrop",
      ChoiceLabel: "Polaris-RadioButton__ChoiceLabel",
      toneMagic: "Polaris-RadioButton--toneMagic"
    };
  }
});
function RadioButton({
  ariaDescribedBy: ariaDescribedByProp,
  label,
  labelHidden,
  helpText,
  checked,
  disabled,
  onChange,
  onFocus,
  onBlur,
  id: idProp,
  name: nameProp,
  value,
  fill,
  bleed,
  bleedBlockStart,
  bleedBlockEnd,
  bleedInlineStart,
  bleedInlineEnd,
  tone
}) {
  let uniqId = (0, import_react170.useId)(), id = idProp ?? uniqId, name = nameProp || id, inputNode = (0, import_react170.useRef)(null), handleBlur = () => {
    onBlur && onBlur();
  };
  function handleChange({
    currentTarget
  }) {
    onChange && onChange(currentTarget.checked, id);
  }
  let describedBy = [];
  helpText && describedBy.push(helpTextID2(id)), ariaDescribedByProp && describedBy.push(ariaDescribedByProp);
  let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, inputClassName = classNames(styles52.Input, tone && styles52[variationName("tone", tone)]), extraChoiceProps = {
    helpText,
    bleed,
    bleedBlockStart,
    bleedBlockEnd,
    bleedInlineStart,
    bleedInlineEnd
  };
  return /* @__PURE__ */ import_react170.default.createElement(Choice, Object.assign({
    label,
    labelHidden,
    disabled,
    id,
    labelClassName: styles52.ChoiceLabel,
    fill
  }, extraChoiceProps, checked ? {
    tone
  } : {}), /* @__PURE__ */ import_react170.default.createElement("span", {
    className: styles52.RadioButton
  }, /* @__PURE__ */ import_react170.default.createElement("input", {
    id,
    name,
    value,
    type: "radio",
    checked,
    disabled,
    className: inputClassName,
    onChange: handleChange,
    onFocus,
    onBlur: handleBlur,
    "aria-describedby": ariaDescribedBy,
    ref: inputNode
  }), /* @__PURE__ */ import_react170.default.createElement("span", {
    className: styles52.Backdrop
  })));
}
var import_react170;
var init_RadioButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RadioButton/RadioButton.js"() {
    import_react170 = __toESM(require_react());
    init_css();
    init_RadioButton_scss();
    init_Choice();
  }
});
function ChoiceList({
  title,
  titleHidden,
  allowMultiple,
  choices,
  selected,
  onChange = noop6,
  error,
  disabled = false,
  name: nameProp,
  tone
}) {
  let ControlComponent = allowMultiple ? Checkbox : RadioButton, uniqName = (0, import_react171.useId)(), name = nameProp ?? uniqName, finalName = allowMultiple ? `${name}[]` : name, titleMarkup = title ? /* @__PURE__ */ import_react171.default.createElement(Box, {
    as: "legend",
    paddingBlockEnd: {
      xs: "500",
      md: "100"
    },
    visuallyHidden: titleHidden
  }, title) : null, choicesMarkup = choices.map((choice) => {
    let {
      value,
      id,
      label,
      helpText,
      disabled: choiceDisabled,
      describedByError
    } = choice;
    function handleChange(checked) {
      onChange(updateSelectedChoices(choice, checked, selected, allowMultiple), name);
    }
    let isSelected2 = choiceIsSelected(choice, selected), renderedChildren = choice.renderChildren ? choice.renderChildren(isSelected2) : null, children = renderedChildren ? /* @__PURE__ */ import_react171.default.createElement("div", {
      className: styles51.ChoiceChildren
    }, /* @__PURE__ */ import_react171.default.createElement(Box, {
      paddingBlockStart: {
        xs: "400",
        md: "0"
      }
    }, renderedChildren)) : null;
    return /* @__PURE__ */ import_react171.default.createElement("li", {
      key: value
    }, /* @__PURE__ */ import_react171.default.createElement(Bleed, {
      marginBlockEnd: helpText ? {
        xs: "100",
        md: "0"
      } : {
        xs: "0"
      }
    }, /* @__PURE__ */ import_react171.default.createElement(ControlComponent, {
      name: finalName,
      value,
      id,
      label,
      disabled: choiceDisabled || disabled,
      fill: {
        xs: true,
        sm: false
      },
      checked: choiceIsSelected(choice, selected),
      helpText,
      onChange: handleChange,
      ariaDescribedBy: error && describedByError ? errorTextID(finalName) : null,
      tone
    }), children));
  }), errorMarkup = error && /* @__PURE__ */ import_react171.default.createElement(Box, {
    paddingBlockStart: {
      xs: "0",
      md: "100"
    },
    paddingBlockEnd: "200"
  }, /* @__PURE__ */ import_react171.default.createElement(InlineError, {
    message: error,
    fieldID: finalName
  }));
  return /* @__PURE__ */ import_react171.default.createElement(BlockStack, {
    as: "fieldset",
    gap: {
      xs: "400",
      md: "0"
    },
    "aria-invalid": error != null,
    id: finalName
  }, titleMarkup, /* @__PURE__ */ import_react171.default.createElement(BlockStack, {
    as: "ul",
    gap: {
      xs: "400",
      md: "0"
    }
  }, choicesMarkup), errorMarkup);
}
function noop6() {
}
function choiceIsSelected({
  value
}, selected) {
  return selected.includes(value);
}
function updateSelectedChoices({
  value
}, checked, selected, allowMultiple = false) {
  return checked ? allowMultiple ? [...selected, value] : [value] : selected.filter((selectedChoice) => selectedChoice !== value);
}
var import_react171;
var init_ChoiceList = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ChoiceList/ChoiceList.js"() {
    import_react171 = __toESM(require_react());
    init_ChoiceList_scss();
    init_Bleed();
    init_RadioButton();
    init_Box();
    init_InlineError();
    init_BlockStack();
    init_Checkbox();
  }
});
var styles53;
var init_Collapsible_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Collapsible/Collapsible.scss.js"() {
    styles53 = {
      Collapsible: "Polaris-Collapsible",
      isFullyClosed: "Polaris-Collapsible--isFullyClosed",
      expandOnPrint: "Polaris-Collapsible--expandOnPrint"
    };
  }
});
function Collapsible({
  id,
  expandOnPrint,
  open,
  transition = true,
  children,
  onAnimationEnd
}) {
  let [height2, setHeight] = (0, import_react172.useState)(0), [isOpen, setIsOpen] = (0, import_react172.useState)(open), [animationState, setAnimationState] = (0, import_react172.useState)("idle"), collapsibleContainer = (0, import_react172.useRef)(null), isFullyOpen = animationState === "idle" && open && isOpen, isFullyClosed = animationState === "idle" && !open && !isOpen, content = expandOnPrint || !isFullyClosed ? children : null, wrapperClassName = classNames(styles53.Collapsible, isFullyClosed && styles53.isFullyClosed, expandOnPrint && styles53.expandOnPrint), transitionDisabled = isTransitionDisabled(transition), collapsibleStyles = {
    ...typeof transition == "object" && {
      transitionDuration: transition.duration,
      transitionTimingFunction: transition.timingFunction
    },
    maxHeight: isFullyOpen ? "none" : `${height2}px`,
    overflow: isFullyOpen ? "visible" : "hidden"
  }, handleCompleteAnimation = (0, import_react172.useCallback)(({
    target
  }) => {
    target === collapsibleContainer.current && (setAnimationState("idle"), setIsOpen(open), onAnimationEnd && onAnimationEnd());
  }, [onAnimationEnd, open]), startAnimation = (0, import_react172.useCallback)(() => {
    transitionDisabled ? (setIsOpen(open), setAnimationState("idle"), open && collapsibleContainer.current ? setHeight(collapsibleContainer.current.scrollHeight) : setHeight(0)) : setAnimationState("measuring");
  }, [open, transitionDisabled]);
  return (0, import_react172.useEffect)(() => {
    open !== isOpen && startAnimation();
  }, [open, isOpen]), (0, import_react172.useEffect)(() => {
    !open || !collapsibleContainer.current || setHeight(collapsibleContainer.current.scrollHeight);
  }, []), (0, import_react172.useEffect)(() => {
    if (collapsibleContainer.current)
      switch (animationState) {
        case "idle":
          break;
        case "measuring":
          setHeight(collapsibleContainer.current.scrollHeight), setAnimationState("animating");
          break;
        case "animating":
          setHeight(open ? collapsibleContainer.current.scrollHeight : 0);
      }
  }, [animationState, open, isOpen]), /* @__PURE__ */ import_react172.default.createElement("div", {
    id,
    style: collapsibleStyles,
    ref: collapsibleContainer,
    className: wrapperClassName,
    onTransitionEnd: handleCompleteAnimation,
    "aria-hidden": !open
  }, content);
}
function isTransitionDisabled(transitionProp) {
  if (typeof transitionProp == "boolean")
    return !transitionProp;
  let {
    duration
  } = transitionProp;
  return !!(duration && zeroDurationRegex.test(duration.trim()));
}
var import_react172;
var zeroDurationRegex;
var init_Collapsible = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Collapsible/Collapsible.js"() {
    import_react172 = __toESM(require_react());
    init_css();
    init_Collapsible_scss();
    zeroDurationRegex = /^0(ms|s)$/;
  }
});
var styles54;
var init_ColorPicker_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ColorPicker/ColorPicker.scss.js"() {
    styles54 = {
      ColorPicker: "Polaris-ColorPicker",
      MainColor: "Polaris-ColorPicker__MainColor",
      fullWidth: "Polaris-ColorPicker--fullWidth",
      Dragger: "Polaris-ColorPicker__Dragger",
      ColorLayer: "Polaris-ColorPicker__ColorLayer",
      HuePicker: "Polaris-ColorPicker__HuePicker",
      AlphaPicker: "Polaris-ColorPicker__AlphaPicker",
      Slidable: "Polaris-ColorPicker__Slidable"
    };
  }
});
function calculateDraggerY(alpha, sliderHeight, draggerHeight) {
  let offset = offsetForAlpha(alpha, sliderHeight, draggerHeight);
  return clamp(offset, 0, sliderHeight);
}
function alphaForDraggerY(y, sliderHeight) {
  let offsetY = clamp(y, 0, sliderHeight);
  return alphaForOffset(offsetY, sliderHeight);
}
function alphaForOffset(offset, sliderHeight) {
  let selectionHeight = offset - VERTICAL_PADDING, slidableArea = sliderHeight - VERTICAL_PADDING * 2;
  return clamp(1 - selectionHeight / slidableArea, 0, 1);
}
function offsetForAlpha(alpha, sliderHeight, draggerHeight) {
  let slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
  return clamp((1 - alpha) * slidableArea + VERTICAL_PADDING, 0, sliderHeight - draggerHeight);
}
var VERTICAL_PADDING;
var init_utilities3 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ColorPicker/components/AlphaPicker/utilities.js"() {
    init_clamp();
    VERTICAL_PADDING = 13;
  }
});
function isMouseMoveEvent(event) {
  return event.type === "mousemove";
}
function isMouseDownEvent(event) {
  return event.type === "mousedown";
}
var import_react173;
var isDragging;
var Slidable;
var init_Slidable = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ColorPicker/components/Slidable/Slidable.js"() {
    import_react173 = __toESM(require_react());
    init_target();
    init_ColorPicker_scss();
    init_EventListener();
    isDragging = false;
    isServer || window.addEventListener("touchmove", (event) => {
      isDragging && event.preventDefault();
    }, {
      passive: false
    });
    Slidable = class extends import_react173.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          dragging: false
        }, this.node = null, this.draggerNode = null, this.setDraggerNode = (node) => {
          this.draggerNode = node;
        }, this.setNode = (node) => {
          this.node = node;
        }, this.startDrag = (event) => {
          isMouseDownEvent(event) && this.handleDraggerMove(event.clientX, event.clientY), isDragging = true, this.setState({
            dragging: true
          });
        }, this.handleDragEnd = () => {
          isDragging = false, this.setState({
            dragging: false
          });
        }, this.handleMove = (event) => {
          if (event.stopImmediatePropagation(), event.stopPropagation(), event.cancelable && event.preventDefault(), isMouseMoveEvent(event)) {
            this.handleDraggerMove(event.clientX, event.clientY);
            return;
          }
          this.handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);
        }, this.handleDraggerMove = (x, y) => {
          if (this.node == null)
            return;
          let {
            onChange
          } = this.props, rect = this.node.getBoundingClientRect(), offsetX = x - rect.left, offsetY = y - rect.top;
          onChange({
            x: offsetX,
            y: offsetY
          });
        };
      }
      componentDidMount() {
        let {
          onDraggerHeight
        } = this.props;
        if (onDraggerHeight == null)
          return;
        let {
          draggerNode
        } = this;
        draggerNode != null && (onDraggerHeight(draggerNode.clientWidth), setTimeout(() => {
          onDraggerHeight(draggerNode.clientWidth);
        }, 0));
      }
      render() {
        let {
          dragging
        } = this.state, {
          draggerX = 0,
          draggerY = 0
        } = this.props, draggerPositioning = {
          transform: `translate3d(${draggerX}px, ${draggerY}px, 0)`
        }, moveListener = dragging ? /* @__PURE__ */ import_react173.default.createElement(EventListener, {
          event: "mousemove",
          handler: this.handleMove,
          passive: false
        }) : null, touchMoveListener = dragging ? /* @__PURE__ */ import_react173.default.createElement(EventListener, {
          event: "touchmove",
          handler: this.handleMove,
          passive: false
        }) : null, endDragListener = dragging ? /* @__PURE__ */ import_react173.default.createElement(EventListener, {
          event: "mouseup",
          handler: this.handleDragEnd
        }) : null, touchEndListener = dragging ? /* @__PURE__ */ import_react173.default.createElement(EventListener, {
          event: "touchend",
          handler: this.handleDragEnd
        }) : null, touchCancelListener = dragging ? /* @__PURE__ */ import_react173.default.createElement(EventListener, {
          event: "touchcancel",
          handler: this.handleDragEnd
        }) : null;
        return /* @__PURE__ */ import_react173.default.createElement("div", {
          ref: this.setNode,
          className: styles54.Slidable,
          onMouseDown: this.startDrag,
          onTouchStart: this.startDrag
        }, endDragListener, moveListener, touchMoveListener, touchEndListener, touchCancelListener, /* @__PURE__ */ import_react173.default.createElement("div", {
          style: draggerPositioning,
          className: styles54.Dragger,
          ref: this.setDraggerNode
        }));
      }
    };
  }
});
function alphaGradientForColor(color2) {
  let {
    red: red2,
    green: green2,
    blue: blue2
  } = hsbToRgb(color2), rgb = `${red2}, ${green2}, ${blue2}`;
  return `linear-gradient(to top, rgba(${rgb}, 0) 18px, rgba(${rgb}, 1) calc(100% - 18px))`;
}
var import_react174;
var AlphaPicker;
var init_AlphaPicker = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ColorPicker/components/AlphaPicker/AlphaPicker.js"() {
    import_react174 = __toESM(require_react());
    init_color_transformers();
    init_ColorPicker_scss();
    init_utilities3();
    init_Slidable();
    AlphaPicker = class extends import_react174.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          sliderHeight: 0,
          draggerHeight: 0
        }, this.setSliderHeight = (node) => {
          node != null && (this.setState({
            sliderHeight: node.clientHeight
          }), setTimeout(() => {
            this.setState({
              sliderHeight: node.clientHeight
            });
          }, 0));
        }, this.setDraggerHeight = (height2) => {
          this.setState({
            draggerHeight: height2
          });
        }, this.handleChange = ({
          y
        }) => {
          let {
            onChange
          } = this.props, {
            sliderHeight
          } = this.state, alpha = alphaForDraggerY(y, sliderHeight);
          onChange(alpha);
        };
      }
      render() {
        let {
          color: color2,
          alpha
        } = this.props, {
          sliderHeight,
          draggerHeight
        } = this.state, draggerY = calculateDraggerY(alpha, sliderHeight, draggerHeight), background = alphaGradientForColor(color2);
        return /* @__PURE__ */ import_react174.default.createElement("div", {
          className: styles54.AlphaPicker,
          ref: this.setSliderHeight
        }, /* @__PURE__ */ import_react174.default.createElement("div", {
          className: styles54.ColorLayer,
          style: {
            background
          }
        }), /* @__PURE__ */ import_react174.default.createElement(Slidable, {
          draggerY,
          draggerX: 0,
          onChange: this.handleChange,
          onDraggerHeight: this.setDraggerHeight
        }));
      }
    };
  }
});
function calculateDraggerY2(hue, sliderHeight, draggerHeight) {
  let offset = offsetForHue(hue, sliderHeight, draggerHeight);
  return clamp(offset, 0, sliderHeight);
}
function hueForDraggerY(y, sliderHeight) {
  let offsetY = clamp(y, 0, sliderHeight);
  return hueForOffset(offsetY, sliderHeight);
}
function hueForOffset(offset, sliderHeight) {
  let selectionHeight = offset - VERTICAL_PADDING2, slidableArea = sliderHeight - VERTICAL_PADDING2 * 2;
  return clamp(selectionHeight / slidableArea * 360, 0, 360);
}
function offsetForHue(hue, sliderHeight, draggerHeight) {
  let slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING2);
  return clamp(hue / 360 * slidableArea + VERTICAL_PADDING2, 0, sliderHeight - draggerHeight);
}
var VERTICAL_PADDING2;
var init_utilities4 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ColorPicker/components/HuePicker/utilities.js"() {
    init_clamp();
    VERTICAL_PADDING2 = 13;
  }
});
var import_react175;
var HuePicker;
var init_HuePicker = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ColorPicker/components/HuePicker/HuePicker.js"() {
    import_react175 = __toESM(require_react());
    init_ColorPicker_scss();
    init_utilities4();
    init_Slidable();
    HuePicker = class extends import_react175.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          sliderHeight: 0,
          draggerHeight: 0
        }, this.setSliderHeight = (node) => {
          node != null && (this.setState({
            sliderHeight: node.clientHeight
          }), setTimeout(() => {
            this.setState({
              sliderHeight: node.clientHeight
            });
          }, 0));
        }, this.setDraggerHeight = (height2) => {
          this.setState({
            draggerHeight: height2
          });
        }, this.handleChange = ({
          y
        }) => {
          let {
            onChange
          } = this.props, {
            sliderHeight
          } = this.state, hue = hueForDraggerY(y, sliderHeight);
          onChange(hue);
        };
      }
      render() {
        let {
          hue
        } = this.props, {
          sliderHeight,
          draggerHeight
        } = this.state, draggerY = calculateDraggerY2(hue, sliderHeight, draggerHeight);
        return /* @__PURE__ */ import_react175.default.createElement("div", {
          className: styles54.HuePicker,
          ref: this.setSliderHeight
        }, /* @__PURE__ */ import_react175.default.createElement(Slidable, {
          draggerY,
          draggerX: 0,
          onChange: this.handleChange,
          onDraggerHeight: this.setDraggerHeight
        }));
      }
    };
  }
});
var import_react176;
var RESIZE_DEBOUNCE_TIME_MS;
var ColorPicker;
var init_ColorPicker = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ColorPicker/ColorPicker.js"() {
    import_react176 = __toESM(require_react());
    init_debounce();
    init_clamp();
    init_css();
    init_color_transformers();
    init_ColorPicker_scss();
    init_AlphaPicker();
    init_HuePicker();
    init_Slidable();
    init_EventListener();
    RESIZE_DEBOUNCE_TIME_MS = 200, ColorPicker = class extends import_react176.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          pickerSize: {
            width: 0,
            height: 0
          }
        }, this.colorNode = null, this.handleResize = debounce(() => {
          let {
            colorNode
          } = this;
          colorNode != null && this.setState({
            pickerSize: {
              width: colorNode.clientWidth,
              height: colorNode.clientHeight
            }
          });
        }, RESIZE_DEBOUNCE_TIME_MS, {
          leading: true,
          trailing: true,
          maxWait: RESIZE_DEBOUNCE_TIME_MS
        }), this.setColorNode = (node) => {
          this.colorNode = node;
        }, this.handleHueChange = (hue) => {
          let {
            color: {
              brightness,
              saturation,
              alpha = 1
            },
            onChange
          } = this.props;
          onChange({
            hue,
            brightness,
            saturation,
            alpha
          });
        }, this.handleAlphaChange = (alpha) => {
          let {
            color: {
              hue,
              brightness,
              saturation
            },
            onChange
          } = this.props;
          onChange({
            hue,
            brightness,
            saturation,
            alpha
          });
        }, this.handleDraggerMove = ({
          x,
          y
        }) => {
          let {
            pickerSize
          } = this.state, {
            color: {
              hue,
              alpha = 1
            },
            onChange
          } = this.props, saturation = clamp(x / pickerSize.width, 0, 1), brightness = clamp(1 - y / pickerSize.height, 0, 1);
          onChange({
            hue,
            saturation,
            brightness,
            alpha
          });
        }, this.handlePickerDrag = (event) => {
          event.preventDefault();
        };
      }
      componentDidMount() {
        let {
          colorNode
        } = this;
        colorNode != null && (this.setState({
          pickerSize: {
            width: colorNode.clientWidth,
            height: colorNode.clientHeight
          }
        }), setTimeout(() => {
          this.setState({
            pickerSize: {
              width: colorNode.clientWidth,
              height: colorNode.clientHeight
            }
          });
        }, 0));
      }
      render() {
        let {
          id,
          color: color2,
          allowAlpha,
          fullWidth
        } = this.props, {
          hue,
          saturation,
          brightness,
          alpha: providedAlpha
        } = color2, {
          pickerSize
        } = this.state, alpha = providedAlpha != null && allowAlpha ? providedAlpha : 1, {
          red: red2,
          green: green2,
          blue: blue2
        } = hsbToRgb({
          hue,
          saturation: 1,
          brightness: 1
        }), colorString = `rgba(${red2}, ${green2}, ${blue2}, ${alpha})`, draggerX = clamp(saturation * pickerSize.width, 0, pickerSize.width), draggerY = clamp(pickerSize.height - brightness * pickerSize.height, 0, pickerSize.height), alphaSliderMarkup = allowAlpha ? /* @__PURE__ */ import_react176.default.createElement(AlphaPicker, {
          alpha,
          color: color2,
          onChange: this.handleAlphaChange
        }) : null, className = classNames(styles54.ColorPicker, fullWidth && styles54.fullWidth);
        return /* @__PURE__ */ import_react176.default.createElement("div", {
          className,
          id,
          onMouseDown: this.handlePickerDrag
        }, /* @__PURE__ */ import_react176.default.createElement("div", {
          ref: this.setColorNode,
          className: styles54.MainColor
        }, /* @__PURE__ */ import_react176.default.createElement("div", {
          className: styles54.ColorLayer,
          style: {
            backgroundColor: colorString
          }
        }), /* @__PURE__ */ import_react176.default.createElement(Slidable, {
          onChange: this.handleDraggerMove,
          draggerX,
          draggerY
        })), /* @__PURE__ */ import_react176.default.createElement(HuePicker, {
          hue,
          onChange: this.handleHueChange
        }), alphaSliderMarkup, /* @__PURE__ */ import_react176.default.createElement(EventListener, {
          event: "resize",
          handler: this.handleResize
        }));
      }
    };
  }
});
var styles55;
var init_InlineGrid_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/InlineGrid/InlineGrid.scss.js"() {
    styles55 = {
      InlineGrid: "Polaris-InlineGrid"
    };
  }
});
function InlineGrid({
  children,
  columns,
  gap,
  alignItems
}) {
  let style = {
    ...getResponsiveValue("inline-grid", "grid-template-columns", formatInlineGrid(columns)),
    ...getResponsiveProps("inline-grid", "gap", "space", gap),
    "--pc-inline-grid-align-items": alignItems
  };
  return /* @__PURE__ */ import_react177.default.createElement("div", {
    className: styles55.InlineGrid,
    style: sanitizeCustomProperties(style)
  }, children);
}
function formatInlineGrid(columns) {
  return typeof columns == "object" && columns !== null && !Array.isArray(columns) ? Object.fromEntries(Object.entries(columns).map(([breakpointAlias, breakpointInlineGrid]) => [breakpointAlias, getColumnValue(breakpointInlineGrid)])) : getColumnValue(columns);
}
function getColumnValue(columns) {
  if (columns)
    return typeof columns == "number" || !isNaN(Number(columns)) ? `repeat(${Number(columns)}, minmax(0, 1fr))` : typeof columns == "string" ? columns : columns.map((column) => {
      switch (column) {
        case "oneThird":
          return "minmax(0, 1fr)";
        case "oneHalf":
          return "minmax(0, 1fr)";
        case "twoThirds":
          return "minmax(0, 2fr)";
      }
    }).join(" ");
}
var import_react177;
var init_InlineGrid = __esm({
  "node_modules/@shopify/polaris/build/esm/components/InlineGrid/InlineGrid.js"() {
    import_react177 = __toESM(require_react());
    init_css();
    init_InlineGrid_scss();
  }
});
var import_react178;
var FrameContext;
var init_context15 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/frame/context.js"() {
    import_react178 = __toESM(require_react()), FrameContext = /* @__PURE__ */ (0, import_react178.createContext)(void 0);
  }
});
function useFrame() {
  let frame = (0, import_react179.useContext)(FrameContext);
  if (!frame)
    throw new Error("No Frame context was provided. Your component must be wrapped in a <Frame> component. See https://polaris.shopify.com/components/frame for implementation instructions.");
  return frame;
}
var import_react179;
var init_hooks9 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/frame/hooks.js"() {
    import_react179 = __toESM(require_react());
    init_context15();
  }
});
var import_react180;
var ContextualSaveBar;
var init_ContextualSaveBar = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ContextualSaveBar/ContextualSaveBar.js"() {
    import_react180 = __toESM(require_react());
    init_hooks9();
    ContextualSaveBar = /* @__PURE__ */ (0, import_react180.memo)(function({
      message: message2,
      saveAction,
      discardAction,
      alignContentFlush,
      fullWidth,
      contextControl,
      secondaryMenu
    }) {
      let {
        setContextualSaveBar,
        removeContextualSaveBar
      } = useFrame();
      return (0, import_react180.useEffect)(() => {
        setContextualSaveBar({
          message: message2,
          saveAction,
          discardAction,
          alignContentFlush,
          fullWidth,
          contextControl,
          secondaryMenu
        });
      }, [message2, saveAction, discardAction, alignContentFlush, setContextualSaveBar, fullWidth, contextControl, secondaryMenu]), (0, import_react180.useEffect)(() => removeContextualSaveBar, [removeContextualSaveBar]), null;
    });
  }
});
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element < "u", hasMap = typeof Map == "function", hasSet = typeof Set == "function", hasArrayBuffer = typeof ArrayBuffer == "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          if (length = a.length, length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          for (it = a.entries(); !(i = it.next()).done; )
            if (!b.has(i.value[0]))
              return false;
          for (it = a.entries(); !(i = it.next()).done; )
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          for (it = a.entries(); !(i = it.next()).done; )
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          if (length = a.length, length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf == "function" && typeof b.valueOf == "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString == "function" && typeof b.toString == "function")
          return a.toString() === b.toString();
        if (keys = Object.keys(a), length = keys.length, length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; )
          if (!((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) && !equal(a[keys[i]], b[keys[i]]))
            return false;
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i))
          return console.warn("react-fast-compare cannot handle circular refs"), false;
        throw error;
      }
    };
  }
});
function measureColumn(tableData) {
  return function(column, index) {
    let {
      firstVisibleColumnIndex,
      tableLeftVisibleEdge: tableStart,
      tableRightVisibleEdge: tableEnd
    } = tableData, leftEdge = column.offsetLeft, rightEdge = leftEdge + column.offsetWidth, isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd, "left"), isVisibleRight = isEdgeVisible(rightEdge, tableStart, tableEnd, "right"), isVisible = isVisibleLeft || isVisibleRight, width2 = column.offsetWidth;
    return isVisible && (tableData.firstVisibleColumnIndex = Math.min(firstVisibleColumnIndex, index)), {
      leftEdge,
      rightEdge,
      isVisible,
      width: width2,
      index
    };
  };
}
function isEdgeVisible(position, start, end, edgeType) {
  return position >= start + (edgeType === "left" ? 0 : 30) && position <= end - 30;
}
function getPrevAndCurrentColumns(tableData, columnData) {
  let {
    firstVisibleColumnIndex
  } = tableData, previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0), previousColumn = columnData[previousColumnIndex], currentColumn = columnData[firstVisibleColumnIndex];
  return {
    previousColumn,
    currentColumn
  };
}
var init_utilities5 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DataTable/utilities.js"() {
  }
});
var styles56;
var init_DataTable_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DataTable/DataTable.scss.js"() {
    styles56 = {
      DataTable: "Polaris-DataTable",
      condensed: "Polaris-DataTable--condensed",
      Navigation: "Polaris-DataTable__Navigation",
      Pip: "Polaris-DataTable__Pip",
      "Pip-visible": "Polaris-DataTable__Pip--visible",
      ScrollContainer: "Polaris-DataTable__ScrollContainer",
      Table: "Polaris-DataTable__Table",
      TableRow: "Polaris-DataTable__TableRow",
      Cell: "Polaris-DataTable__Cell",
      IncreasedTableDensity: "Polaris-DataTable__IncreasedTableDensity",
      ZebraStripingOnData: "Polaris-DataTable__ZebraStripingOnData",
      RowCountIsEven: "Polaris-DataTable__RowCountIsEven",
      ShowTotalsInFooter: "Polaris-DataTable__ShowTotalsInFooter",
      "Cell-separate": "Polaris-DataTable__Cell--separate",
      "Cell-firstColumn": "Polaris-DataTable__Cell--firstColumn",
      "Cell-numeric": "Polaris-DataTable__Cell--numeric",
      "Cell-truncated": "Polaris-DataTable__Cell--truncated",
      "Cell-header": "Polaris-DataTable__Cell--header",
      "Cell-sortable": "Polaris-DataTable__Cell--sortable",
      "Heading-left": "Polaris-DataTable__Heading--left",
      "Cell-verticalAlignTop": "Polaris-DataTable__Cell--verticalAlignTop",
      "Cell-verticalAlignBottom": "Polaris-DataTable__Cell--verticalAlignBottom",
      "Cell-verticalAlignMiddle": "Polaris-DataTable__Cell--verticalAlignMiddle",
      "Cell-verticalAlignBaseline": "Polaris-DataTable__Cell--verticalAlignBaseline",
      hoverable: "Polaris-DataTable--hoverable",
      "Cell-hovered": "Polaris-DataTable__Cell--hovered",
      Icon: "Polaris-DataTable__Icon",
      Heading: "Polaris-DataTable__Heading",
      StickyHeaderEnabled: "Polaris-DataTable__StickyHeaderEnabled",
      StickyHeaderWrapper: "Polaris-DataTable__StickyHeaderWrapper",
      "Cell-sorted": "Polaris-DataTable__Cell--sorted",
      "Cell-total": "Polaris-DataTable__Cell--total",
      ShowTotals: "Polaris-DataTable__ShowTotals",
      "Cell-total-footer": "Polaris-DataTable--cellTotalFooter",
      Footer: "Polaris-DataTable__Footer",
      StickyHeaderInner: "Polaris-DataTable__StickyHeaderInner",
      "StickyHeaderInner-isSticky": "Polaris-DataTable__StickyHeaderInner--isSticky",
      StickyHeaderTable: "Polaris-DataTable__StickyHeaderTable",
      FixedFirstColumn: "Polaris-DataTable__FixedFirstColumn",
      StickyTableHeadingsRow: "Polaris-DataTable__StickyTableHeadingsRow",
      TooltipContent: "Polaris-DataTable__TooltipContent"
    };
  }
});
function Cell({
  content,
  contentType,
  nthColumn,
  firstColumn,
  truncate,
  header,
  total,
  totalInFooter,
  sorted,
  sortable,
  sortDirection,
  inFixedNthColumn,
  verticalAlign = "top",
  defaultSortDirection = "ascending",
  onSort,
  colSpan,
  setRef = () => {
  },
  stickyHeadingCell = false,
  stickyCellWidth,
  hovered = false,
  handleFocus = () => {
  },
  hasFixedNthColumn = false,
  fixedCellVisible = false,
  firstColumnMinWidth,
  style,
  lastFixedFirstColumn
}) {
  let i18n = useI18n(), numeric = contentType === "numeric", className = classNames(styles56.Cell, styles56[`Cell-${variationName("verticalAlign", verticalAlign)}`], firstColumn && styles56["Cell-firstColumn"], truncate && styles56["Cell-truncated"], header && styles56["Cell-header"], total && styles56["Cell-total"], totalInFooter && styles56["Cell-total-footer"], numeric && styles56["Cell-numeric"], sortable && styles56["Cell-sortable"], sorted && styles56["Cell-sorted"], stickyHeadingCell && styles56.StickyHeaderCell, hovered && styles56["Cell-hovered"], lastFixedFirstColumn && inFixedNthColumn && fixedCellVisible && styles56["Cell-separate"], nthColumn && inFixedNthColumn && stickyHeadingCell && styles56.FixedFirstColumn), headerClassName = classNames(header && styles56.Heading, header && contentType === "text" && styles56["Heading-left"]), iconClassName = classNames(sortable && styles56.Icon), direction = sorted && sortDirection ? sortDirection : defaultSortDirection, source = direction === "descending" ? SvgSortDescendingMajor : SvgSortAscendingMajor, oppositeDirection = sortDirection === "ascending" ? "descending" : "ascending", sortAccessibilityLabel = i18n.translate("Polaris.DataTable.sortAccessibilityLabel", {
    direction: sorted ? oppositeDirection : direction
  }), iconMarkup = /* @__PURE__ */ import_react181.default.createElement("span", {
    className: iconClassName
  }, /* @__PURE__ */ import_react181.default.createElement(Icon, {
    source,
    accessibilityLabel: sortAccessibilityLabel
  })), focusable = !(stickyHeadingCell && hasFixedNthColumn && nthColumn && !inFixedNthColumn), columnHeadingContent = sortable ? /* @__PURE__ */ import_react181.default.createElement("button", {
    className: headerClassName,
    onClick: onSort,
    onFocus: handleFocus,
    tabIndex: focusable ? 0 : -1
  }, iconMarkup, content) : content, colSpanProp = colSpan && colSpan > 1 ? {
    colSpan
  } : {}, minWidthStyles = nthColumn && firstColumnMinWidth ? {
    minWidth: firstColumnMinWidth
  } : {
    minWidth: stickyCellWidth
  }, stickyHeading = /* @__PURE__ */ import_react181.default.createElement("th", Object.assign({
    ref: setRef
  }, headerCell.props, colSpanProp, {
    className,
    "aria-sort": sortDirection,
    style: {
      ...style,
      ...minWidthStyles
    },
    "data-index-table-sticky-heading": true
  }), columnHeadingContent), headingMarkup = header ? /* @__PURE__ */ import_react181.default.createElement("th", Object.assign({}, headerCell.props, {
    "aria-sort": sortDirection
  }, colSpanProp, {
    ref: setRef,
    className,
    scope: "col",
    style: {
      ...minWidthStyles
    }
  }), columnHeadingContent) : /* @__PURE__ */ import_react181.default.createElement("th", Object.assign({}, colSpanProp, {
    ref: setRef,
    className,
    scope: "row",
    style: {
      ...minWidthStyles
    }
  }), truncate ? /* @__PURE__ */ import_react181.default.createElement(TruncatedText, {
    className: styles56.TooltipContent
  }, content) : content), cellMarkup = header || firstColumn || nthColumn ? headingMarkup : /* @__PURE__ */ import_react181.default.createElement("td", Object.assign({
    className
  }, colSpanProp), content);
  return stickyHeadingCell ? stickyHeading : cellMarkup;
}
var import_react181;
var TruncatedText;
var init_Cell = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DataTable/components/Cell/Cell.js"() {
    import_react181 = __toESM(require_react());
    init_dist3();
    init_css();
    init_shared();
    init_DataTable_scss();
    init_hooks2();
    init_Tooltip();
    init_Icon();
    TruncatedText = ({
      children,
      className = ""
    }) => {
      let textRef = (0, import_react181.useRef)(null), {
        current
      } = textRef, text2 = /* @__PURE__ */ import_react181.default.createElement("span", {
        ref: textRef,
        className
      }, children);
      return current?.scrollWidth > current?.offsetWidth ? /* @__PURE__ */ import_react181.default.createElement(Tooltip, {
        content: textRef.current.innerText
      }, text2) : text2;
    };
  }
});
function isInputFocused() {
  if (document == null || document.activeElement == null)
    return false;
  let {
    tagName
  } = document.activeElement;
  return tagName === EditableTarget.Input || tagName === EditableTarget.Textarea || tagName === EditableTarget.Select || document.activeElement.hasAttribute(EditableTarget.ContentEditable);
}
var EditableTarget;
var init_is_input_focused = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/is-input-focused.js"() {
    (function(EditableTarget2) {
      EditableTarget2.Input = "INPUT", EditableTarget2.Textarea = "TEXTAREA", EditableTarget2.Select = "SELECT", EditableTarget2.ContentEditable = "contenteditable";
    })(EditableTarget || (EditableTarget = {}));
  }
});
var styles57;
var init_Pagination_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Pagination/Pagination.scss.js"() {
    styles57 = {
      Pagination: "Polaris-Pagination",
      table: "Polaris-Pagination--table"
    };
  }
});
function Pagination({
  hasNext,
  hasPrevious,
  nextURL,
  previousURL,
  onNext,
  onPrevious,
  nextTooltip,
  previousTooltip,
  nextKeys,
  previousKeys,
  accessibilityLabel,
  accessibilityLabels,
  label,
  type = "page"
}) {
  let i18n = useI18n(), node = /* @__PURE__ */ (0, import_react182.createRef)(), navLabel = accessibilityLabel || i18n.translate("Polaris.Pagination.pagination"), previousLabel = accessibilityLabels?.previous || i18n.translate("Polaris.Pagination.previous"), nextLabel = accessibilityLabels?.next || i18n.translate("Polaris.Pagination.next"), prev = /* @__PURE__ */ import_react182.default.createElement(Button, {
    icon: SvgChevronLeftMinor,
    accessibilityLabel: previousLabel,
    url: previousURL,
    onClick: onPrevious,
    disabled: !hasPrevious,
    id: "previousURL"
  }), constructedPrevious = previousTooltip && hasPrevious ? /* @__PURE__ */ import_react182.default.createElement(Tooltip, {
    activatorWrapper: "span",
    content: previousTooltip,
    preferredPosition: "below"
  }, prev) : prev, next = /* @__PURE__ */ import_react182.default.createElement(Button, {
    icon: SvgChevronRightMinor,
    accessibilityLabel: nextLabel,
    url: nextURL,
    onClick: onNext,
    disabled: !hasNext,
    id: "nextURL"
  }), constructedNext = nextTooltip && hasNext ? /* @__PURE__ */ import_react182.default.createElement(Tooltip, {
    activatorWrapper: "span",
    content: nextTooltip,
    preferredPosition: "below"
  }, next) : next, previousHandler = onPrevious || noop7, previousButtonEvents = previousKeys && (previousURL || onPrevious) && hasPrevious && previousKeys.map((key) => /* @__PURE__ */ import_react182.default.createElement(KeypressListener, {
    key,
    keyCode: key,
    handler: handleCallback(previousURL ? clickPaginationLink("previousURL", node) : previousHandler)
  })), nextHandler = onNext || noop7, nextButtonEvents = nextKeys && (nextURL || onNext) && hasNext && nextKeys.map((key) => /* @__PURE__ */ import_react182.default.createElement(KeypressListener, {
    key,
    keyCode: key,
    handler: handleCallback(nextURL ? clickPaginationLink("nextURL", node) : nextHandler)
  }));
  if (type === "table") {
    let labelMarkup2 = label ? /* @__PURE__ */ import_react182.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      fontWeight: "medium"
    }, label) : null;
    return /* @__PURE__ */ import_react182.default.createElement("nav", {
      "aria-label": navLabel,
      ref: node,
      className: classNames(styles57.Pagination, styles57.table)
    }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ import_react182.default.createElement(Box, {
      background: "bg-surface-secondary",
      paddingBlockStart: "150",
      paddingBlockEnd: "150",
      paddingInlineStart: "300",
      paddingInlineEnd: "200"
    }, /* @__PURE__ */ import_react182.default.createElement(InlineStack, {
      align: labelMarkup2 ? "space-between" : "end",
      blockAlign: "center"
    }, labelMarkup2, /* @__PURE__ */ import_react182.default.createElement(ButtonGroup, {
      variant: "segmented"
    }, constructedPrevious, constructedNext))));
  }
  let labelTextMarkup = hasNext && hasPrevious ? /* @__PURE__ */ import_react182.default.createElement("span", null, label) : /* @__PURE__ */ import_react182.default.createElement(Text, {
    tone: "subdued",
    as: "span"
  }, label), labelMarkup = label ? /* @__PURE__ */ import_react182.default.createElement(Box, {
    padding: "300",
    paddingBlockStart: "0",
    paddingBlockEnd: "0"
  }, /* @__PURE__ */ import_react182.default.createElement("div", {
    "aria-live": "polite"
  }, labelTextMarkup)) : null;
  return /* @__PURE__ */ import_react182.default.createElement("nav", {
    "aria-label": navLabel,
    ref: node,
    className: styles57.Pagination
  }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ import_react182.default.createElement(ButtonGroup, {
    variant: "segmented"
  }, constructedPrevious, labelMarkup, constructedNext));
}
function clickPaginationLink(id, node) {
  return () => {
    if (node.current == null)
      return;
    let link = node.current.querySelector(`#${id}`);
    link && link.click();
  };
}
function handleCallback(fn) {
  return () => {
    isInputFocused() || fn();
  };
}
function noop7() {
}
var import_react182;
var init_Pagination = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Pagination/Pagination.js"() {
    init_dist3();
    import_react182 = __toESM(require_react());
    init_is_input_focused();
    init_css();
    init_Pagination_scss();
    init_hooks2();
    init_KeypressListener();
    init_Box();
    init_InlineStack();
    init_ButtonGroup();
    init_Tooltip();
    init_Text();
    init_Button();
  }
});
function AfterInitialMount({
  children,
  onMount,
  fallback = null
}) {
  let isMounted = useIsAfterInitialMount(), content = isMounted ? children : fallback;
  return (0, import_react183.useEffect)(() => {
    isMounted && onMount && onMount();
  }, [isMounted, onMount]), /* @__PURE__ */ import_react183.default.createElement(import_react183.default.Fragment, null, content);
}
var import_react183;
var init_AfterInitialMount = __esm({
  "node_modules/@shopify/polaris/build/esm/components/AfterInitialMount/AfterInitialMount.js"() {
    import_react183 = __toESM(require_react());
    init_use_is_after_initial_mount();
  }
});
function useStickyManager() {
  let stickyManager = (0, import_react184.useContext)(StickyManagerContext);
  if (!stickyManager)
    throw new MissingAppProviderError("No StickyManager was provided.");
  return stickyManager;
}
var import_react184;
var init_hooks10 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/sticky-manager/hooks.js"() {
    import_react184 = __toESM(require_react());
    init_errors5();
    init_context4();
  }
});
function isFunction(arg) {
  return typeof arg == "function";
}
function Sticky(props) {
  let stickyManager = useStickyManager();
  return /* @__PURE__ */ import_react185.default.createElement(StickyInner, Object.assign({}, props, {
    stickyManager
  }));
}
var import_react185;
var StickyInner;
var init_Sticky = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Sticky/Sticky.js"() {
    import_react185 = __toESM(require_react());
    init_geometry();
    init_hooks10();
    StickyInner = class extends import_react185.Component {
      constructor(...args) {
        super(...args), this.state = {
          isSticky: false,
          style: {}
        }, this.placeHolderNode = null, this.stickyNode = null, this.setPlaceHolderNode = (node) => {
          this.placeHolderNode = node;
        }, this.setStickyNode = (node) => {
          this.stickyNode = node;
        }, this.handlePositioning = (stick, top = 0, left = 0, width2 = 0) => {
          let {
            isSticky
          } = this.state;
          (stick && !isSticky || !stick && isSticky) && (this.adjustPlaceHolderNode(stick), this.setState({
            isSticky: !isSticky
          }, () => {
            if (this.props.onStickyChange == null || (this.props.onStickyChange(!isSticky), this.props.boundingElement == null))
              return null;
            this.props.boundingElement.toggleAttribute("data-sticky-active");
          }));
          let style = stick ? {
            position: "fixed",
            top,
            left,
            width: width2
          } : {};
          this.setState({
            style
          });
        }, this.adjustPlaceHolderNode = (add) => {
          this.placeHolderNode && this.stickyNode && (this.placeHolderNode.style.paddingBottom = add ? `${getRectForNode(this.stickyNode).height}px` : "0px");
        };
      }
      componentDidMount() {
        let {
          boundingElement,
          offset = false,
          disableWhenStacked = false,
          stickyManager
        } = this.props;
        !this.stickyNode || !this.placeHolderNode || stickyManager.registerStickyItem({
          stickyNode: this.stickyNode,
          placeHolderNode: this.placeHolderNode,
          handlePositioning: this.handlePositioning,
          offset,
          boundingElement,
          disableWhenStacked
        });
      }
      componentWillUnmount() {
        let {
          stickyManager
        } = this.props;
        this.stickyNode && stickyManager.unregisterStickyItem(this.stickyNode);
      }
      render() {
        let {
          style,
          isSticky
        } = this.state, {
          children
        } = this.props, childrenContent = isFunction(children) ? children(isSticky) : children;
        return /* @__PURE__ */ import_react185.default.createElement("div", null, /* @__PURE__ */ import_react185.default.createElement("div", {
          ref: this.setPlaceHolderNode
        }), /* @__PURE__ */ import_react185.default.createElement("div", {
          ref: this.setStickyNode,
          style
        }, childrenContent));
      }
    };
  }
});
function Navigation({
  columnVisibilityData,
  isScrolledFarthestLeft,
  isScrolledFarthestRight,
  navigateTableLeft,
  navigateTableRight,
  fixedFirstColumns,
  setRef = () => {
  }
}) {
  let i18n = useI18n(), pipMarkup = columnVisibilityData.map((column, index) => {
    if (index < fixedFirstColumns)
      return;
    let className = classNames(styles56.Pip, column.isVisible && styles56["Pip-visible"]);
    return /* @__PURE__ */ import_react186.default.createElement("div", {
      className,
      key: `pip-${index}`
    });
  }), leftA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
    direction: "left"
  }), rightA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
    direction: "right"
  });
  return /* @__PURE__ */ import_react186.default.createElement("div", {
    className: styles56.Navigation,
    ref: setRef
  }, /* @__PURE__ */ import_react186.default.createElement(Button, {
    variant: "tertiary",
    icon: SvgChevronLeftMinor,
    disabled: isScrolledFarthestLeft,
    accessibilityLabel: leftA11yLabel,
    onClick: navigateTableLeft
  }), pipMarkup, /* @__PURE__ */ import_react186.default.createElement(Button, {
    variant: "tertiary",
    icon: SvgChevronRightMinor,
    disabled: isScrolledFarthestRight,
    accessibilityLabel: rightA11yLabel,
    onClick: navigateTableRight
  }));
}
var import_react186;
var init_Navigation = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DataTable/components/Navigation/Navigation.js"() {
    import_react186 = __toESM(require_react());
    init_dist3();
    init_css();
    init_DataTable_scss();
    init_hooks2();
    init_Button();
  }
});
function DataTable(props) {
  let i18n = useI18n();
  return /* @__PURE__ */ import_react187.default.createElement(DataTableInner, Object.assign({}, props, {
    i18n
  }));
}
var import_react187;
var import_react_fast_compare;
var getRowClientHeights;
var DataTableInner;
var init_DataTable = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DataTable/DataTable.js"() {
    import_react187 = __toESM(require_react()), import_react_fast_compare = __toESM(require_react_fast_compare());
    init_debounce();
    init_css();
    init_shared();
    init_utilities5();
    init_DataTable_scss();
    init_Cell();
    init_Pagination();
    init_AfterInitialMount();
    init_Sticky();
    init_Navigation();
    init_hooks2();
    init_EventListener();
    getRowClientHeights = (rows) => {
      let heights = [];
      return rows && rows.forEach((row) => {
        heights.push(row.clientHeight);
      }), heights;
    }, DataTableInner = class extends import_react187.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          condensed: false,
          columnVisibilityData: [],
          isScrolledFarthestLeft: true,
          isScrolledFarthestRight: false,
          rowHovered: void 0
        }, this.dataTable = /* @__PURE__ */ (0, import_react187.createRef)(), this.scrollContainer = /* @__PURE__ */ (0, import_react187.createRef)(), this.table = /* @__PURE__ */ (0, import_react187.createRef)(), this.stickyTable = /* @__PURE__ */ (0, import_react187.createRef)(), this.stickyNav = null, this.headerNav = null, this.tableHeadings = [], this.stickyHeadings = [], this.tableHeadingWidths = [], this.stickyHeaderActive = false, this.scrollStopTimer = null, this.handleResize = debounce(() => {
          let {
            table: {
              current: table
            },
            scrollContainer: {
              current: scrollContainer
            }
          } = this, condensed = false;
          table && scrollContainer && (condensed = table.scrollWidth > scrollContainer.clientWidth + 1), this.setState({
            condensed,
            ...this.calculateColumnVisibilityData(condensed)
          });
        }), this.setCellRef = ({
          ref,
          index,
          inStickyHeader
        }) => {
          if (ref != null)
            if (inStickyHeader) {
              this.stickyHeadings[index] = ref;
              let button = ref.querySelector("button");
              if (button == null)
                return;
              button.addEventListener("focus", this.handleHeaderButtonFocus);
            } else
              this.tableHeadings[index] = ref, this.tableHeadingWidths[index] = ref.clientWidth;
        }, this.changeHeadingFocus = () => {
          let {
            tableHeadings,
            stickyHeadings,
            stickyNav,
            headerNav
          } = this, stickyFocusedItemIndex = stickyHeadings.findIndex((item) => item === document.activeElement?.parentElement), tableFocusedItemIndex = tableHeadings.findIndex((item) => item === document.activeElement?.parentElement), arrowsInStickyNav = stickyNav?.querySelectorAll("button"), arrowsInHeaderNav = headerNav?.querySelectorAll("button"), stickyFocusedNavIndex = -1;
          arrowsInStickyNav?.forEach((item, index) => {
            item === document.activeElement && (stickyFocusedNavIndex = index);
          });
          let headerFocusedNavIndex = -1;
          if (arrowsInHeaderNav?.forEach((item, index) => {
            item === document.activeElement && (headerFocusedNavIndex = index);
          }), stickyFocusedItemIndex < 0 && tableFocusedItemIndex < 0 && stickyFocusedNavIndex < 0 && headerFocusedNavIndex < 0)
            return null;
          let button;
          if (stickyFocusedItemIndex >= 0 ? button = tableHeadings[stickyFocusedItemIndex].querySelector("button") : tableFocusedItemIndex >= 0 && (button = stickyHeadings[tableFocusedItemIndex].querySelector("button")), stickyFocusedNavIndex >= 0 ? button = arrowsInHeaderNav?.[stickyFocusedNavIndex] : headerFocusedNavIndex >= 0 && (button = arrowsInStickyNav?.[headerFocusedNavIndex]), button == null)
            return null;
          button.style.visibility = "visible", button.focus(), button.style.removeProperty("visibility");
        }, this.calculateColumnVisibilityData = (condensed) => {
          let fixedFirstColumns = this.fixedFirstColumns(), {
            table: {
              current: table
            },
            scrollContainer: {
              current: scrollContainer
            },
            dataTable: {
              current: dataTable
            }
          } = this, {
            stickyHeader
          } = this.props;
          if ((stickyHeader || condensed) && table && scrollContainer && dataTable) {
            let headerCells = table.querySelectorAll(headerCell.selector), rightMostHeader = headerCells[fixedFirstColumns - 1], nthColumnWidth = fixedFirstColumns ? rightMostHeader.offsetLeft + rightMostHeader.offsetWidth : 0;
            if (headerCells.length > 0) {
              let firstVisibleColumnIndex = headerCells.length - 1, tableLeftVisibleEdge = scrollContainer.scrollLeft + nthColumnWidth, tableRightVisibleEdge = scrollContainer.scrollLeft + dataTable.offsetWidth, tableData = {
                firstVisibleColumnIndex,
                tableLeftVisibleEdge,
                tableRightVisibleEdge
              }, columnVisibilityData = [...headerCells].map(measureColumn(tableData)), lastColumn = columnVisibilityData[columnVisibilityData.length - 1], isScrolledFarthestLeft = fixedFirstColumns ? tableLeftVisibleEdge === nthColumnWidth : tableLeftVisibleEdge === 0;
              return {
                columnVisibilityData,
                ...getPrevAndCurrentColumns(tableData, columnVisibilityData),
                isScrolledFarthestLeft,
                isScrolledFarthestRight: lastColumn.rightEdge <= tableRightVisibleEdge
              };
            }
          }
          return {
            columnVisibilityData: [],
            previousColumn: void 0,
            currentColumn: void 0
          };
        }, this.handleHeaderButtonFocus = (event) => {
          let fixedFirstColumns = this.fixedFirstColumns();
          if (this.scrollContainer.current == null || event.target == null || this.state.columnVisibilityData.length === 0)
            return;
          let currentCell = event.target.parentNode, tableScrollLeft = this.scrollContainer.current.scrollLeft, tableViewableWidth = this.scrollContainer.current.offsetWidth, tableRightEdge = tableScrollLeft + tableViewableWidth, nthColumnWidth = this.state.columnVisibilityData.length > 0 ? this.state.columnVisibilityData[fixedFirstColumns]?.rightEdge : 0, currentColumnLeftEdge = currentCell.offsetLeft, currentColumnRightEdge = currentCell.offsetLeft + currentCell.offsetWidth;
          tableScrollLeft > currentColumnLeftEdge - nthColumnWidth && (this.scrollContainer.current.scrollLeft = currentColumnLeftEdge - nthColumnWidth), currentColumnRightEdge > tableRightEdge && (this.scrollContainer.current.scrollLeft = currentColumnRightEdge - tableViewableWidth);
        }, this.stickyHeaderScrolling = () => {
          let {
            current: stickyTable
          } = this.stickyTable, {
            current: scrollContainer
          } = this.scrollContainer;
          stickyTable == null || scrollContainer == null || (stickyTable.scrollLeft = scrollContainer.scrollLeft);
        }, this.scrollListener = () => {
          this.scrollStopTimer && clearTimeout(this.scrollStopTimer), this.scrollStopTimer = setTimeout(() => {
            this.setState((prevState) => ({
              ...this.calculateColumnVisibilityData(prevState.condensed)
            }));
          }, 100), this.setState({
            isScrolledFarthestLeft: this.scrollContainer.current?.scrollLeft === 0
          }), this.props.stickyHeader && this.stickyHeaderActive && this.stickyHeaderScrolling();
        }, this.handleHover = (row) => () => {
          this.setState({
            rowHovered: row
          });
        }, this.handleFocus = (event) => {
          let fixedFirstColumns = this.fixedFirstColumns();
          if (this.scrollContainer.current == null || event.target == null)
            return;
          let currentCell = event.target.parentNode, nthColumnWidth = this.props ? this.state.columnVisibilityData[fixedFirstColumns]?.rightEdge : 0, desiredScrollLeft = currentCell.offsetLeft - nthColumnWidth;
          this.scrollContainer.current.scrollLeft > desiredScrollLeft && (this.scrollContainer.current.scrollLeft = desiredScrollLeft);
        }, this.navigateTable = (direction) => {
          let fixedFirstColumns = this.fixedFirstColumns(), {
            currentColumn,
            previousColumn
          } = this.state, nthColumnWidth = this.state.columnVisibilityData[fixedFirstColumns - 1]?.rightEdge;
          if (!currentColumn || !previousColumn)
            return;
          let prevWidths = 0;
          for (let index = 0; index < currentColumn.index; index++)
            prevWidths += this.state.columnVisibilityData[index].width;
          let {
            current: scrollContainer
          } = this.scrollContainer;
          return () => {
            let newScrollLeft = 0;
            fixedFirstColumns ? newScrollLeft = direction === "right" ? prevWidths - nthColumnWidth + currentColumn.width : prevWidths - previousColumn.width - nthColumnWidth : newScrollLeft = direction === "right" ? currentColumn.rightEdge : previousColumn.leftEdge, scrollContainer && (scrollContainer.scrollLeft = newScrollLeft, requestAnimationFrame(() => {
              this.setState((prevState) => ({
                ...this.calculateColumnVisibilityData(prevState.condensed)
              }));
            }));
          };
        }, this.renderHeading = ({
          heading,
          headingIndex,
          inFixedNthColumn,
          inStickyHeader
        }) => {
          let {
            sortable,
            truncate = false,
            columnContentTypes,
            defaultSortDirection,
            initialSortColumnIndex = 0,
            verticalAlign,
            firstColumnMinWidth
          } = this.props, fixedFirstColumns = this.fixedFirstColumns(), {
            sortDirection = defaultSortDirection,
            sortedColumnIndex = initialSortColumnIndex,
            isScrolledFarthestLeft
          } = this.state, sortableHeadingProps, headingCellId = `heading-cell-${headingIndex}`, stickyHeaderId = `stickyheader-${headingIndex}`, id = inStickyHeader ? stickyHeaderId : headingCellId;
          if (sortable) {
            let isSortable = sortable[headingIndex], isSorted = isSortable && sortedColumnIndex === headingIndex;
            sortableHeadingProps = {
              defaultSortDirection,
              sorted: isSorted,
              sortable: isSortable,
              sortDirection: isSorted ? sortDirection : "none",
              onSort: this.defaultOnSort(headingIndex),
              fixedNthColumn: fixedFirstColumns,
              inFixedNthColumn: fixedFirstColumns
            };
          }
          let stickyCellWidth = inStickyHeader ? this.tableHeadingWidths[headingIndex] : void 0, fixedCellVisible = !isScrolledFarthestLeft, cellProps = {
            header: true,
            stickyHeadingCell: inStickyHeader,
            content: heading,
            contentType: columnContentTypes[headingIndex],
            nthColumn: headingIndex < fixedFirstColumns,
            fixedFirstColumns,
            truncate,
            headingIndex,
            ...sortableHeadingProps,
            verticalAlign,
            handleFocus: this.handleFocus,
            stickyCellWidth,
            fixedCellVisible,
            firstColumnMinWidth
          };
          return inFixedNthColumn && inStickyHeader ? [/* @__PURE__ */ import_react187.default.createElement(Cell, Object.assign({
            key: id
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            inFixedNthColumn: false
          })), /* @__PURE__ */ import_react187.default.createElement(Cell, Object.assign({
            key: `${id}-sticky`
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            inFixedNthColumn: Boolean(fixedFirstColumns),
            lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
            style: {
              left: this.state.columnVisibilityData[headingIndex]?.leftEdge
            }
          }))] : /* @__PURE__ */ import_react187.default.createElement(Cell, Object.assign({
            key: id
          }, cellProps, {
            setRef: (ref) => {
              this.setCellRef({
                ref,
                index: headingIndex,
                inStickyHeader
              });
            },
            lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
            inFixedNthColumn
          }));
        }, this.totalsRowHeading = () => {
          let {
            i18n,
            totals,
            totalsName
          } = this.props, totalsLabel = totalsName || {
            singular: i18n.translate("Polaris.DataTable.totalRowHeading"),
            plural: i18n.translate("Polaris.DataTable.totalsRowHeading")
          };
          return totals && totals.filter((total) => total !== "").length > 1 ? totalsLabel.plural : totalsLabel.singular;
        }, this.renderTotals = ({
          total,
          index
        }) => {
          let fixedFirstColumns = this.fixedFirstColumns(), id = `totals-cell-${index}`, {
            truncate = false,
            verticalAlign,
            columnContentTypes
          } = this.props, content, contentType;
          index === 0 && (content = this.totalsRowHeading()), total !== "" && index > 0 && (contentType = columnContentTypes[index], content = total);
          let totalInFooter = this.props.showTotalsInFooter;
          return /* @__PURE__ */ import_react187.default.createElement(Cell, {
            total: true,
            totalInFooter,
            nthColumn: index <= fixedFirstColumns - 1,
            firstColumn: index === 0,
            key: id,
            content,
            contentType,
            truncate,
            verticalAlign
          });
        }, this.getColSpan = (rowLength, headingsLength, contentTypesLength, cellIndex) => {
          if (this.fixedFirstColumns())
            return 1;
          let rowLen = rowLength || 1, colLen = headingsLength || contentTypesLength, colSpan = Math.floor(colLen / rowLen), remainder = colLen % rowLen;
          return cellIndex === 0 ? colSpan + remainder : colSpan;
        }, this.defaultRenderRow = ({
          row,
          index,
          inFixedNthColumn,
          rowHeights
        }) => {
          let {
            columnContentTypes,
            truncate = false,
            verticalAlign,
            hoverable = true,
            headings
          } = this.props, {
            condensed
          } = this.state, fixedFirstColumns = this.fixedFirstColumns(), className = classNames(styles56.TableRow, hoverable && styles56.hoverable);
          return /* @__PURE__ */ import_react187.default.createElement("tr", {
            key: `row-${index}`,
            className,
            onMouseEnter: this.handleHover(index),
            onMouseLeave: this.handleHover()
          }, row.map((content, cellIndex) => {
            let hovered = index === this.state.rowHovered, id = `cell-${cellIndex}-row-${index}`, colSpan = this.getColSpan(row.length, headings.length, columnContentTypes.length, cellIndex);
            return /* @__PURE__ */ import_react187.default.createElement(Cell, {
              key: id,
              content,
              contentType: columnContentTypes[cellIndex],
              nthColumn: cellIndex <= fixedFirstColumns - 1,
              firstColumn: cellIndex === 0,
              truncate,
              verticalAlign,
              colSpan,
              hovered,
              style: rowHeights ? {
                height: `${rowHeights[index]}px`
              } : {},
              inFixedNthColumn: condensed && inFixedNthColumn
            });
          }));
        }, this.defaultOnSort = (headingIndex) => {
          let {
            onSort,
            defaultSortDirection = "ascending",
            initialSortColumnIndex
          } = this.props, {
            sortDirection = defaultSortDirection,
            sortedColumnIndex = initialSortColumnIndex
          } = this.state, newSortDirection = defaultSortDirection;
          return sortedColumnIndex === headingIndex && (newSortDirection = sortDirection === "ascending" ? "descending" : "ascending"), () => {
            this.setState({
              sortDirection: newSortDirection,
              sortedColumnIndex: headingIndex
            }, () => {
              onSort && onSort(headingIndex, newSortDirection);
            });
          };
        };
      }
      componentDidMount() {
        setTimeout(() => {
          this.handleResize();
        }, 10);
      }
      componentDidUpdate(prevProps) {
        (0, import_react_fast_compare.default)(prevProps, this.props) || this.handleResize();
      }
      componentWillUnmount() {
        this.handleResize.cancel();
      }
      render() {
        let {
          headings,
          totals,
          showTotalsInFooter,
          rows,
          footerContent,
          hideScrollIndicator = false,
          increasedTableDensity = false,
          hasZebraStripingOnData = false,
          stickyHeader = false,
          hasFixedFirstColumn: fixedFirstColumn = false,
          pagination
        } = this.props, {
          condensed,
          columnVisibilityData,
          isScrolledFarthestLeft,
          isScrolledFarthestRight
        } = this.state;
        fixedFirstColumn && console.warn("Deprecation: The `hasFixedFirstColumn` prop on the `DataTable` has been deprecated. Use fixedFirstColumns={n} instead.");
        let fixedFirstColumns = this.fixedFirstColumns(), rowCountIsEven = rows.length % 2 === 0, className = classNames(styles56.DataTable, condensed && styles56.condensed, totals && styles56.ShowTotals, showTotalsInFooter && styles56.ShowTotalsInFooter, hasZebraStripingOnData && styles56.ZebraStripingOnData, hasZebraStripingOnData && rowCountIsEven && styles56.RowCountIsEven), wrapperClassName = classNames(styles56.TableWrapper, condensed && styles56.condensed, increasedTableDensity && styles56.IncreasedTableDensity, stickyHeader && styles56.StickyHeaderEnabled), headingMarkup = /* @__PURE__ */ import_react187.default.createElement("tr", null, headings.map((heading, index) => this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: false,
          inStickyHeader: false
        }))), totalsMarkup = totals ? /* @__PURE__ */ import_react187.default.createElement("tr", null, totals.map((total, index) => this.renderTotals({
          total,
          index
        }))) : null, nthColumns = rows.map((row) => row.slice(0, fixedFirstColumns)), nthHeadings = headings.slice(0, fixedFirstColumns), nthTotals = totals?.slice(0, fixedFirstColumns), tableHeaderRows = this.table.current?.children[0].childNodes, tableBodyRows = this.table.current?.children[1].childNodes, headerRowHeights = getRowClientHeights(tableHeaderRows), bodyRowHeights = getRowClientHeights(tableBodyRows), fixedNthColumnMarkup = condensed && fixedFirstColumns !== 0 && /* @__PURE__ */ import_react187.default.createElement("table", {
          className: classNames(styles56.FixedFirstColumn, !isScrolledFarthestLeft && styles56.separate),
          style: {
            width: `${columnVisibilityData[fixedFirstColumns - 1]?.rightEdge}px`
          }
        }, /* @__PURE__ */ import_react187.default.createElement("thead", null, /* @__PURE__ */ import_react187.default.createElement("tr", {
          style: {
            height: `${headerRowHeights[0]}px`
          }
        }, nthHeadings.map((heading, index) => this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: true,
          inStickyHeader: false
        }))), totals && !showTotalsInFooter && /* @__PURE__ */ import_react187.default.createElement("tr", {
          style: {
            height: `${headerRowHeights[1]}px`
          }
        }, nthTotals?.map((total, index) => this.renderTotals({
          total,
          index
        })))), /* @__PURE__ */ import_react187.default.createElement("tbody", null, nthColumns.map((row, index) => this.defaultRenderRow({
          row,
          index,
          inFixedNthColumn: true,
          rowHeights: bodyRowHeights
        }))), totals && showTotalsInFooter && /* @__PURE__ */ import_react187.default.createElement("tfoot", null, /* @__PURE__ */ import_react187.default.createElement("tr", null, nthTotals?.map((total, index) => this.renderTotals({
          total,
          index
        }))))), bodyMarkup = rows.map((row, index) => this.defaultRenderRow({
          row,
          index,
          inFixedNthColumn: false
        })), footerMarkup = footerContent ? /* @__PURE__ */ import_react187.default.createElement("div", {
          className: styles56.Footer
        }, footerContent) : null, paginationMarkup = pagination ? /* @__PURE__ */ import_react187.default.createElement(Pagination, Object.assign({
          type: "table"
        }, pagination)) : null, headerTotalsMarkup = showTotalsInFooter ? null : totalsMarkup, footerTotalsMarkup = showTotalsInFooter ? /* @__PURE__ */ import_react187.default.createElement("tfoot", null, totalsMarkup) : null, navigationMarkup = (location) => hideScrollIndicator ? null : /* @__PURE__ */ import_react187.default.createElement(Navigation, {
          columnVisibilityData,
          isScrolledFarthestLeft,
          isScrolledFarthestRight,
          navigateTableLeft: this.navigateTable("left"),
          navigateTableRight: this.navigateTable("right"),
          fixedFirstColumns,
          setRef: (ref) => {
            location === "header" ? this.headerNav = ref : location === "sticky" && (this.stickyNav = ref);
          }
        }), stickyHeaderMarkup = stickyHeader ? /* @__PURE__ */ import_react187.default.createElement(AfterInitialMount, null, /* @__PURE__ */ import_react187.default.createElement("div", {
          className: styles56.StickyHeaderWrapper,
          role: "presentation"
        }, /* @__PURE__ */ import_react187.default.createElement(Sticky, {
          boundingElement: this.dataTable.current,
          onStickyChange: (isSticky) => {
            this.changeHeadingFocus(), this.stickyHeaderActive = isSticky;
          }
        }, (isSticky) => {
          let stickyHeaderInnerClassNames = classNames(styles56.StickyHeaderInner, isSticky && styles56["StickyHeaderInner-isSticky"]), stickyHeaderTableClassNames = classNames(styles56.StickyHeaderTable, !isScrolledFarthestLeft && styles56.separate);
          return /* @__PURE__ */ import_react187.default.createElement("div", {
            className: stickyHeaderInnerClassNames
          }, /* @__PURE__ */ import_react187.default.createElement("div", null, navigationMarkup("sticky")), /* @__PURE__ */ import_react187.default.createElement("table", {
            className: stickyHeaderTableClassNames,
            ref: this.stickyTable
          }, /* @__PURE__ */ import_react187.default.createElement("thead", null, /* @__PURE__ */ import_react187.default.createElement("tr", {
            className: styles56.StickyTableHeadingsRow
          }, headings.map((heading, index) => this.renderHeading({
            heading,
            headingIndex: index,
            inFixedNthColumn: Boolean(index <= fixedFirstColumns - 1 && fixedFirstColumns),
            inStickyHeader: true
          }))))));
        }))) : null;
        return /* @__PURE__ */ import_react187.default.createElement("div", {
          className: wrapperClassName,
          ref: this.dataTable
        }, stickyHeaderMarkup, navigationMarkup("header"), /* @__PURE__ */ import_react187.default.createElement("div", {
          className
        }, /* @__PURE__ */ import_react187.default.createElement("div", {
          className: styles56.ScrollContainer,
          ref: this.scrollContainer
        }, /* @__PURE__ */ import_react187.default.createElement(EventListener, {
          event: "resize",
          handler: this.handleResize
        }), /* @__PURE__ */ import_react187.default.createElement(EventListener, {
          capture: true,
          passive: true,
          event: "scroll",
          handler: this.scrollListener
        }), fixedNthColumnMarkup, /* @__PURE__ */ import_react187.default.createElement("table", {
          className: styles56.Table,
          ref: this.table
        }, /* @__PURE__ */ import_react187.default.createElement("thead", null, headingMarkup, headerTotalsMarkup), /* @__PURE__ */ import_react187.default.createElement("tbody", null, bodyMarkup), footerTotalsMarkup)), paginationMarkup, footerMarkup));
      }
      fixedFirstColumns() {
        let {
          hasFixedFirstColumn,
          fixedFirstColumns = 0,
          headings
        } = this.props, numberOfFixedFirstColumns = hasFixedFirstColumn && !fixedFirstColumns ? 1 : fixedFirstColumns;
        return numberOfFixedFirstColumns >= headings.length ? 0 : numberOfFixedFirstColumns;
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
  }
});
function getWeeksForMonth(month, year, weekStartsOn = 0) {
  let firstOfMonth = new Date(year, month, 1), firstDayOfWeek = firstOfMonth.getDay(), weeks = [[]], currentWeek = weeks[0], currentDate = firstOfMonth, orderedWeekday = getOrderedWeekdays(weekStartsOn);
  for (let i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++)
    currentWeek.push(null);
  for (; currentDate.getMonth() === month; )
    currentWeek.length === 7 && (currentWeek = [], weeks.push(currentWeek)), currentWeek.push(currentDate), currentDate = new Date(year, month, currentDate.getDate() + 1);
  for (; currentWeek.length < 7; )
    currentWeek.push(null);
  return weeks;
}
function dateIsInRange(day, range) {
  if (day == null)
    return false;
  let {
    start,
    end
  } = range;
  return Boolean(start && day > start && end && day < end);
}
function dateIsSelected(day, range) {
  if (day == null)
    return false;
  let {
    start,
    end
  } = range;
  return Boolean(start && isSameDay(start, day) || end && isSameDay(end, day));
}
function isSameDay(day1, day2) {
  return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();
}
function getNewRange(range, selected) {
  if (range == null)
    return {
      start: selected,
      end: selected
    };
  let {
    start,
    end
  } = range;
  return end && (isDateAfter(start, end) || isDateBefore(start, end)) ? {
    start: selected,
    end: selected
  } : start ? isDateBefore(selected, start) ? {
    start: selected,
    end: selected
  } : {
    start,
    end: selected
  } : end ? isDateBefore(selected, end) ? {
    start: selected,
    end
  } : {
    start: start || end,
    end: selected
  } : {
    start: selected,
    end: selected
  };
}
function getNextDisplayMonth(month) {
  return month === 11 ? 0 : month + 1;
}
function getNextDisplayYear(month, year) {
  return month === 11 ? year + 1 : year;
}
function getPreviousDisplayMonth(month) {
  return month === 0 ? 11 : month - 1;
}
function getPreviousDisplayYear(month, year) {
  return month === 0 ? year - 1 : year;
}
function isDateAfter(date, dateToCompare) {
  return date.getTime() > dateToCompare.getTime();
}
function isDateBefore(date, dateToCompare) {
  return date.getTime() < dateToCompare.getTime();
}
function isDateDisabled(date, datesToCompare) {
  return datesToCompare.some((dateToCompare) => date.getTime() === dateToCompare.getTime());
}
function getOrderedWeekdays(weekStartsOn) {
  let weekDays = [...WEEKDAYS];
  return [...weekDays.splice(weekStartsOn), ...weekDays];
}
var WEEKDAYS;
var init_dates = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/dates.js"() {
    WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];
  }
});
function monthName(month) {
  switch (month) {
    case 0:
      return "january";
    case 1:
      return "february";
    case 2:
      return "march";
    case 3:
      return "april";
    case 4:
      return "may";
    case 5:
      return "june";
    case 6:
      return "july";
    case 7:
      return "august";
    case 8:
      return "september";
    case 9:
      return "october";
    case 10:
      return "november";
    case 11:
      return "december";
  }
}
function weekdayName(weekday) {
  switch (weekday) {
    case 0:
      return "sunday";
    case 1:
      return "monday";
    case 2:
      return "tuesday";
    case 3:
      return "wednesday";
    case 4:
      return "thursday";
    case 5:
      return "friday";
    case 6:
      return "saturday";
  }
}
var init_utilities6 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DatePicker/utilities.js"() {
  }
});
var styles58;
var init_DatePicker_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DatePicker/DatePicker.scss.js"() {
    styles58 = {
      DatePicker: "Polaris-DatePicker",
      MonthLayout: "Polaris-DatePicker__MonthLayout",
      MonthContainer: "Polaris-DatePicker__MonthContainer",
      Month: "Polaris-DatePicker__Month",
      "Month-current": "Polaris-DatePicker__Month--current",
      DayCell: "Polaris-DatePicker__DayCell",
      "DayCell-inRange": "Polaris-DatePicker__DayCell--inRange",
      Day: "Polaris-DatePicker__Day",
      "Day-today": "Polaris-DatePicker__Day--today",
      "Day-inRange": "Polaris-DatePicker__Day--inRange",
      "Day-selected": "Polaris-DatePicker__Day--selected",
      "Day-disabled": "Polaris-DatePicker__Day--disabled",
      EmptyDayCell: "Polaris-DatePicker__EmptyDayCell",
      Weekday: "Polaris-DatePicker__Weekday",
      "Weekday-current": "Polaris-DatePicker__Weekday--current",
      Header: "Polaris-DatePicker__Header",
      Title: "Polaris-DatePicker__Title",
      "Day-firstInRange": "Polaris-DatePicker__Day--firstInRange",
      "Day-hasRange": "Polaris-DatePicker__Day--hasRange",
      "Day-hoverRight": "Polaris-DatePicker__Day--hoverRight",
      "Day-lastInRange": "Polaris-DatePicker__Day--lastInRange",
      Week: "Polaris-DatePicker__Week"
    };
  }
});
var import_react188;
var Weekday;
var init_Weekday = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DatePicker/components/Weekday/Weekday.js"() {
    import_react188 = __toESM(require_react());
    init_css();
    init_DatePicker_scss();
    Weekday = /* @__PURE__ */ (0, import_react188.memo)(function({
      label,
      title,
      current
    }) {
      let className = classNames(styles58.Weekday, current && styles58["Weekday-current"]);
      return /* @__PURE__ */ import_react188.default.createElement("th", {
        "aria-label": label,
        scope: "col",
        className
      }, title);
    });
  }
});
function noop8() {
}
var import_react189;
var Day;
var init_Day = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DatePicker/components/Day/Day.js"() {
    import_react189 = __toESM(require_react());
    init_css();
    init_dates();
    init_utilities6();
    init_DatePicker_scss();
    init_hooks2();
    Day = /* @__PURE__ */ (0, import_react189.memo)(function({
      day,
      focused,
      onClick,
      onHover = noop8,
      onFocus = noop8,
      selected,
      inRange,
      inHoveringRange,
      disabled,
      lastDayOfMonth,
      isLastSelectedDay,
      isFirstSelectedDay,
      isHoveringRight,
      rangeIsDifferent,
      weekday,
      selectedAccessibilityLabelPrefix
    }) {
      let i18n = useI18n(), dayNode = (0, import_react189.useRef)(null), hoverValue = lastDayOfMonth || day;
      if ((0, import_react189.useEffect)(() => {
        focused && dayNode.current && dayNode.current.focus();
      }, [focused]), !day)
        return /* @__PURE__ */ import_react189.default.createElement("td", {
          className: styles58.EmptyDayCell,
          onMouseOver: () => onHover(hoverValue)
        });
      let handleClick = onClick && !disabled ? onClick.bind(null, day) : noop8, today = isSameDay(/* @__PURE__ */ new Date(), day), dayCellClassName = classNames(styles58.DayCell, selected && styles58["DayCell-selected"], (inRange || inHoveringRange) && !disabled && styles58["DayCell-inRange"], isLastSelectedDay && styles58["DayCell-lastInRange"], isFirstSelectedDay && styles58["DayCell-firstInRange"], isHoveringRight && styles58["DayCell-hoverRight"], rangeIsDifferent && styles58["DayCell-hasRange"]), dayClassName = classNames(styles58.Day, selected && styles58["Day-selected"], disabled && styles58["Day-disabled"], today && styles58["Day-today"], (inRange || inHoveringRange) && !disabled && styles58["Day-inRange"], isLastSelectedDay && styles58["Day-lastInRange"], isFirstSelectedDay && styles58["Day-firstInRange"], isHoveringRight && styles58["Day-hoverRight"], rangeIsDifferent && styles58["Day-hasRange"]), date = day.getDate(), tabIndex = (focused || selected || today || date === 1) && !disabled ? 0 : -1, ariaLabel = [selected && selectedAccessibilityLabelPrefix ? `${selectedAccessibilityLabelPrefix} ` : "", `${today ? i18n.translate("Polaris.DatePicker.today") : ""}`, `${weekday || ""} `, `${i18n.translate(`Polaris.DatePicker.months.${monthName(day.getMonth())}`)} `, `${date} `, `${day.getFullYear()}`].join("");
      return /* @__PURE__ */ import_react189.default.createElement("td", {
        className: dayCellClassName
      }, /* @__PURE__ */ import_react189.default.createElement("button", {
        onFocus: () => onFocus(day),
        type: "button",
        ref: dayNode,
        tabIndex,
        className: dayClassName,
        onMouseOver: () => onHover(hoverValue),
        onClick: handleClick,
        "aria-label": ariaLabel,
        "aria-disabled": disabled,
        "aria-pressed": selected
      }, date));
    });
  }
});
function Month({
  focusedDate,
  selected,
  hoverDate,
  disableDatesBefore,
  disableDatesAfter,
  disableSpecificDates,
  allowRange,
  onChange = noop9,
  onHover = noop9,
  onFocus = noop9,
  month,
  year,
  weekStartsOn,
  accessibilityLabelPrefixes
}) {
  let i18n = useI18n(), isInHoveringRange = allowRange ? hoveringDateIsInRange : () => false, now = /* @__PURE__ */ new Date(), current = now.getMonth() === month && now.getFullYear() === year, className = classNames(styles58.Title, current && styles58["Month-current"]), weeks = (0, import_react190.useMemo)(() => getWeeksForMonth(month, year, weekStartsOn), [month, weekStartsOn, year]), weekdays = getOrderedWeekdays(weekStartsOn).map((weekday) => /* @__PURE__ */ import_react190.default.createElement(Weekday, {
    key: weekday,
    title: i18n.translate(`Polaris.DatePicker.daysAbbreviated.${weekdayName(weekday)}`),
    label: weekdayLabel(weekday),
    current: current && (/* @__PURE__ */ new Date()).getDay() === weekday
  })), handleDateClick = (0, import_react190.useCallback)((selectedDate) => {
    onChange(getNewRange(allowRange ? selected : void 0, selectedDate));
  }, [allowRange, onChange, selected]), lastDayOfMonth = (0, import_react190.useMemo)(() => new Date(year, month + 1, 0), [month, year]);
  function renderWeek(day, dayIndex) {
    if (day == null)
      return /* @__PURE__ */ import_react190.default.createElement(Day, {
        key: dayIndex,
        onHover,
        lastDayOfMonth
      });
    let disabled = disableDatesBefore && isDateBefore(day, disableDatesBefore) || disableDatesAfter && isDateAfter(day, disableDatesAfter) || disableSpecificDates && isDateDisabled(day, disableSpecificDates), isFirstSelectedDay = allowRange && selected && isDateStart(day, selected), isLastSelectedDay = allowRange && selected && (!isSameDay(selected.start, selected.end) && isDateEnd(day, selected) || hoverDate && isSameDay(selected.start, selected.end) && isDateAfter(hoverDate, selected.start) && isSameDay(day, hoverDate) && !isFirstSelectedDay), rangeIsDifferent = !(selected && isSameDay(selected.start, selected.end)), isHoveringRight = hoverDate && isDateBefore(day, hoverDate), [firstAccessibilityLabelPrefix, lastAccessibilityLabelPrefix] = accessibilityLabelPrefixes, accessibilityLabelPrefix;
    return allowRange && isFirstSelectedDay || !allowRange && firstAccessibilityLabelPrefix ? accessibilityLabelPrefix = firstAccessibilityLabelPrefix : allowRange && isLastSelectedDay && (accessibilityLabelPrefix = lastAccessibilityLabelPrefix), /* @__PURE__ */ import_react190.default.createElement(Day, {
      selectedAccessibilityLabelPrefix: accessibilityLabelPrefix,
      weekday: weekdayLabel(dayIndex),
      focused: focusedDate != null && isSameDay(day, focusedDate),
      day,
      key: dayIndex,
      onFocus,
      onClick: handleDateClick,
      onHover,
      selected: selected != null && dateIsSelected(day, selected),
      inRange: selected != null && dateIsInRange(day, selected),
      disabled,
      inHoveringRange: selected != null && hoverDate != null && isInHoveringRange(day, selected, hoverDate),
      isLastSelectedDay,
      isFirstSelectedDay,
      isHoveringRight,
      rangeIsDifferent
    });
  }
  let weeksMarkup = weeks.map((week, index) => /* @__PURE__ */ import_react190.default.createElement("tr", {
    className: styles58.Week,
    key: index
  }, week.map(renderWeek)));
  return /* @__PURE__ */ import_react190.default.createElement("div", {
    className: styles58.MonthContainer
  }, /* @__PURE__ */ import_react190.default.createElement("table", {
    role: "grid",
    className: styles58.Month
  }, /* @__PURE__ */ import_react190.default.createElement("caption", {
    className
  }, i18n.translate(`Polaris.DatePicker.months.${monthName(month)}`), " ", year), /* @__PURE__ */ import_react190.default.createElement("thead", null, /* @__PURE__ */ import_react190.default.createElement("tr", {
    className: styles58.WeekHeadings
  }, weekdays)), /* @__PURE__ */ import_react190.default.createElement("tbody", null, weeksMarkup)));
  function weekdayLabel(weekday) {
    return i18n.translate(`Polaris.DatePicker.days.${weekdayName(weekday)}`);
  }
}
function noop9() {
}
function hoveringDateIsInRange(day, range, hoverEndDate) {
  if (day == null)
    return false;
  let {
    start,
    end
  } = range;
  return Boolean(isSameDay(start, end) && day > start && day <= hoverEndDate);
}
function isDateEnd(day, range) {
  if (day == null)
    return false;
  let {
    end
  } = range;
  return Boolean(end && isSameDay(end, day));
}
function isDateStart(day, range) {
  if (day == null)
    return false;
  let {
    start
  } = range;
  return Boolean(start && isSameDay(start, day));
}
var import_react190;
var init_Month = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DatePicker/components/Month/Month.js"() {
    import_react190 = __toESM(require_react());
    init_css();
    init_dates();
    init_DatePicker_scss();
    init_utilities6();
    init_Weekday();
    init_Day();
    init_hooks2();
  }
});
function DatePicker({
  id,
  selected,
  month,
  year,
  allowRange,
  multiMonth,
  disableDatesBefore,
  disableDatesAfter,
  disableSpecificDates,
  weekStartsOn = 0,
  dayAccessibilityLabelPrefix,
  onMonthChange,
  onChange = noop10
}) {
  let i18n = useI18n(), [hoverDate, setHoverDate] = (0, import_react191.useState)(void 0), [focusDate, setFocusDate] = (0, import_react191.useState)(void 0);
  (0, import_react191.useEffect)(() => {
    setFocusDate(void 0);
  }, [selected]);
  let handleFocus = (0, import_react191.useCallback)((date) => {
    setFocusDate(date);
  }, []), setFocusDateAndHandleMonthChange = (0, import_react191.useCallback)((date) => {
    onMonthChange && onMonthChange(date.getMonth(), date.getFullYear()), setHoverDate(date), setFocusDate(date);
  }, [onMonthChange]), handleDateSelection = (0, import_react191.useCallback)((range) => {
    let {
      end
    } = range;
    setHoverDate(end), setFocusDate(new Date(end)), onChange(range);
  }, [onChange]), handleMonthChangeClick = (0, import_react191.useCallback)((month2, year2) => {
    onMonthChange && (setFocusDate(void 0), onMonthChange(month2, year2));
  }, [onMonthChange]), handleHover = (0, import_react191.useCallback)((date) => {
    setHoverDate(date);
  }, []), handleKeyUp = (0, import_react191.useCallback)((event) => {
    let {
      key
    } = event, range = deriveRange(selected), focusedDate = focusDate || range && range.start;
    if (focusedDate != null) {
      if (key === "ArrowUp") {
        let previousWeek = new Date(focusedDate);
        previousWeek.setDate(focusedDate.getDate() - 7), disableDatesBefore && isDateBefore(previousWeek, disableDatesBefore) || disableSpecificDates && isDateDisabled(previousWeek, disableSpecificDates) || setFocusDateAndHandleMonthChange(previousWeek);
      }
      if (key === "ArrowDown") {
        let nextWeek = new Date(focusedDate);
        nextWeek.setDate(focusedDate.getDate() + 7), disableDatesAfter && isDateAfter(nextWeek, disableDatesAfter) || disableSpecificDates && isDateDisabled(nextWeek, disableSpecificDates) || setFocusDateAndHandleMonthChange(nextWeek);
      }
      if (key === "ArrowRight") {
        let tomorrow = new Date(focusedDate);
        tomorrow.setDate(focusedDate.getDate() + 1), disableDatesAfter && isDateAfter(tomorrow, disableDatesAfter) || disableSpecificDates && isDateDisabled(tomorrow, disableSpecificDates) || setFocusDateAndHandleMonthChange(tomorrow);
      }
      if (key === "ArrowLeft") {
        let yesterday = new Date(focusedDate);
        yesterday.setDate(focusedDate.getDate() - 1), disableDatesBefore && isDateBefore(yesterday, disableDatesBefore) || disableSpecificDates && isDateDisabled(yesterday, disableSpecificDates) || setFocusDateAndHandleMonthChange(yesterday);
      }
    }
  }, [disableDatesAfter, disableDatesBefore, disableSpecificDates, focusDate, selected, setFocusDateAndHandleMonthChange]), showNextYear = getNextDisplayYear(month, year), showNextMonth = getNextDisplayMonth(month), showNextToNextYear = getNextDisplayYear(showNextMonth, showNextYear), showNextToNextMonth = getNextDisplayMonth(showNextMonth), showPreviousYear = getPreviousDisplayYear(month, year), showPreviousMonth = getPreviousDisplayMonth(month), previousMonthName = i18n.translate(`Polaris.DatePicker.months.${monthName(showPreviousMonth)}`), nextMonth = multiMonth ? i18n.translate(`Polaris.DatePicker.months.${monthName(showNextToNextMonth)}`) : i18n.translate(`Polaris.DatePicker.months.${monthName(showNextMonth)}`), nextYear = multiMonth ? showNextToNextYear : showNextYear, monthIsSelected = (0, import_react191.useMemo)(() => deriveRange(selected), [selected]), firstDatePickerAccessibilityLabelPrefix = allowRange ? i18n.translate("Polaris.DatePicker.start") : dayAccessibilityLabelPrefix, secondDatePickerAccessibilityLabelPrefix = i18n.translate("Polaris.DatePicker.end"), accessibilityLabelPrefixes = [firstDatePickerAccessibilityLabelPrefix, secondDatePickerAccessibilityLabelPrefix], secondDatePicker = multiMonth ? /* @__PURE__ */ import_react191.default.createElement(Month, {
    onFocus: handleFocus,
    focusedDate: focusDate,
    month: showNextMonth,
    year: showNextYear,
    selected: monthIsSelected,
    hoverDate,
    onChange: handleDateSelection,
    onHover: handleHover,
    disableDatesBefore,
    disableDatesAfter,
    disableSpecificDates,
    allowRange,
    weekStartsOn,
    accessibilityLabelPrefixes
  }) : null, datePickerClassName = classNames(styles58.DatePicker);
  return /* @__PURE__ */ import_react191.default.createElement("div", {
    id,
    className: datePickerClassName,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp
  }, /* @__PURE__ */ import_react191.default.createElement("div", {
    className: styles58.Header
  }, /* @__PURE__ */ import_react191.default.createElement(Button, {
    variant: "tertiary",
    icon: SvgArrowLeftMinor,
    accessibilityLabel: i18n.translate("Polaris.DatePicker.previousMonth", {
      previousMonthName,
      showPreviousYear
    }),
    onClick: () => handleMonthChangeClick(showPreviousMonth, showPreviousYear)
  }), /* @__PURE__ */ import_react191.default.createElement(Button, {
    variant: "tertiary",
    icon: SvgArrowRightMinor,
    accessibilityLabel: i18n.translate("Polaris.DatePicker.nextMonth", {
      nextMonth,
      nextYear
    }),
    onClick: () => handleMonthChangeClick(showNextMonth, showNextYear)
  })), /* @__PURE__ */ import_react191.default.createElement("div", {
    className: styles58.MonthLayout
  }, /* @__PURE__ */ import_react191.default.createElement(Month, {
    onFocus: handleFocus,
    focusedDate: focusDate,
    month,
    year,
    selected: deriveRange(selected),
    hoverDate,
    onChange: handleDateSelection,
    onHover: handleHover,
    disableDatesBefore,
    disableDatesAfter,
    disableSpecificDates,
    allowRange,
    weekStartsOn,
    accessibilityLabelPrefixes
  }), secondDatePicker));
}
function noop10() {
}
function handleKeyDown(event) {
  let {
    key
  } = event;
  (key === "ArrowUp" || key === "ArrowDown" || key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
}
function deriveRange(selected) {
  return selected instanceof Date ? {
    start: selected,
    end: selected
  } : selected;
}
var import_react191;
var init_DatePicker = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DatePicker/DatePicker.js"() {
    import_react191 = __toESM(require_react());
    init_dist3();
    init_css();
    init_dates();
    init_utilities6();
    init_DatePicker_scss();
    init_Month();
    init_hooks2();
    init_Button();
  }
});
var styles59;
var init_DescriptionList_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DescriptionList/DescriptionList.scss.js"() {
    styles59 = {
      DescriptionList: "Polaris-DescriptionList",
      Term: "Polaris-DescriptionList__Term",
      spacingTight: "Polaris-DescriptionList--spacingTight",
      Description: "Polaris-DescriptionList__Description"
    };
  }
});
function DescriptionList({
  items,
  gap = "loose"
}) {
  let terms = items.reduce((allTerms, {
    term,
    description
  }, index) => [...allTerms, /* @__PURE__ */ import_react192.default.createElement("dt", {
    key: `dt${index}`,
    className: styles59.Term
  }, /* @__PURE__ */ import_react192.default.createElement(Text, {
    as: "span",
    variant: "headingSm"
  }, term)), /* @__PURE__ */ import_react192.default.createElement("dd", {
    key: `dd${index}`,
    className: styles59.Description
  }, description)], []), className = classNames(styles59.DescriptionList, gap === "tight" && styles59.spacingTight);
  return /* @__PURE__ */ import_react192.default.createElement("dl", {
    className
  }, terms);
}
var import_react192;
var init_DescriptionList = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DescriptionList/DescriptionList.js"() {
    import_react192 = __toESM(require_react());
    init_css();
    init_DescriptionList_scss();
    init_Text();
  }
});
var styles60;
var init_Divider_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Divider/Divider.scss.js"() {
    styles60 = {
      Divider: "Polaris-Divider"
    };
  }
});
var import_react193;
var Divider;
var init_Divider = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Divider/Divider.js"() {
    import_react193 = __toESM(require_react());
    init_Divider_scss();
    Divider = ({
      borderColor = "border-secondary",
      borderWidth = "025"
    }) => {
      let borderColorValue = borderColor === "transparent" ? borderColor : `var(--p-color-${borderColor})`;
      return /* @__PURE__ */ import_react193.default.createElement("hr", {
        className: styles60.Divider,
        style: {
          borderBlockStart: `var(--p-border-width-${borderWidth}) solid ${borderColorValue}`
        }
      });
    };
  }
});
function capitalize2(word = "") {
  let wordLower = word.toLowerCase();
  return wordLower.charAt(0).toUpperCase() + wordLower.slice(1);
}
var init_capitalize = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/capitalize.js"() {
  }
});
function fileAccepted(file, accept) {
  return file.type === "application/x-moz-file" || accepts(file, accept);
}
function getDataTransferFiles(event) {
  if (isDragEvent(event) && event.dataTransfer) {
    let dt = event.dataTransfer;
    if (dt.files && dt.files.length)
      return Array.from(dt.files);
    if (dt.items && dt.items.length)
      return Array.from(dt.items);
  } else if (isChangeEvent(event) && event.target.files)
    return Array.from(event.target.files);
  return [];
}
function accepts(file, acceptedFiles) {
  if (file && acceptedFiles) {
    let fileName = file.name || "", mimeType = file.type || "", baseMimeType = mimeType.replace(/\/.*$/, "");
    return (Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",")).some((type) => {
      let validType = type.trim();
      return validType.startsWith(".") ? fileName.toLowerCase().endsWith(validType.toLowerCase()) : validType.endsWith("/*") ? baseMimeType === validType.replace(/\/.*$/, "") : mimeType === validType;
    });
  }
  return true;
}
function isDragEvent(event) {
  return dragEvents.indexOf(event.type) > 0;
}
function isChangeEvent(event) {
  return Object.prototype.hasOwnProperty.call(event, "target");
}
function createAllowMultipleKey(allowMultiple) {
  return allowMultiple ? "allowMultiple" : "single";
}
var dragEvents;
var defaultAllowMultiple;
var init_utils6 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DropZone/utils/index.js"() {
    dragEvents = ["dragover", "dragenter", "drop"];
    defaultAllowMultiple = true;
  }
});
var import_react194;
var DropZoneContext;
var init_context16 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DropZone/context.js"() {
    import_react194 = __toESM(require_react());
    init_utils6();
    DropZoneContext = /* @__PURE__ */ (0, import_react194.createContext)({
      disabled: false,
      focused: false,
      size: "extraLarge",
      type: "file",
      measuring: false,
      allowMultiple: defaultAllowMultiple
    });
  }
});
var styles61;
var init_DropZone_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DropZone/DropZone.scss.js"() {
    styles61 = {
      DropZone: "Polaris-DropZone",
      focused: "Polaris-DropZone--focused",
      hasOutline: "Polaris-DropZone--hasOutline",
      isDisabled: "Polaris-DropZone--isDisabled",
      isDragging: "Polaris-DropZone--isDragging",
      sizeLarge: "Polaris-DropZone--sizeLarge",
      sizeMedium: "Polaris-DropZone--sizeMedium",
      sizeSmall: "Polaris-DropZone--sizeSmall",
      measuring: "Polaris-DropZone--measuring",
      Container: "Polaris-DropZone__Container",
      Overlay: "Polaris-DropZone__Overlay",
      hasError: "Polaris-DropZone--hasError"
    };
  }
});
var styles62;
var init_FileUpload_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DropZone/components/FileUpload/FileUpload.scss.js"() {
    styles62 = {
      FileUpload: "Polaris-DropZone-FileUpload",
      large: "Polaris-DropZone-FileUpload--large",
      small: "Polaris-DropZone-FileUpload--small",
      Action: "Polaris-DropZone-FileUpload__Action",
      disabled: "Polaris-DropZone-FileUpload--disabled",
      ActionTitle: "Polaris-DropZone-FileUpload__ActionTitle",
      "ActionTitle-disabled": "Polaris-DropZone-FileUpload__ActionTitle--disabled",
      "ActionTitle-focused": "Polaris-DropZone-FileUpload__ActionTitle--focused",
      UploadIcon: "Polaris-DropZone-FileUpload__UploadIcon"
    };
  }
});
function FileUpload(props) {
  let i18n = useI18n(), {
    size: size2,
    measuring,
    type,
    disabled,
    allowMultiple
  } = (0, import_react195.useContext)(DropZoneContext), typeSuffix = capitalize2(type), allowMultipleKey = createAllowMultipleKey(allowMultiple), {
    actionTitle = i18n.translate(`Polaris.DropZone.${allowMultipleKey}.actionTitle${typeSuffix}`),
    actionHint
  } = props, actionClassNames = classNames(styles62.Action, disabled && styles62.disabled), actionMarkup = /* @__PURE__ */ import_react195.default.createElement("div", {
    className: actionClassNames
  }, actionTitle), fileUploadClassName = classNames(styles62.FileUpload, measuring && styles62.measuring, size2 === "large" && styles62.large, size2 === "small" && styles62.small), actionHintMarkup = actionHint && /* @__PURE__ */ import_react195.default.createElement(Text, {
    variant: "bodySm",
    as: "p",
    tone: "subdued"
  }, actionHint), viewMarkup;
  switch (size2) {
    case "large":
      viewMarkup = /* @__PURE__ */ import_react195.default.createElement(BlockStack, {
        inlineAlign: "center",
        gap: "200"
      }, actionMarkup, actionHintMarkup);
      break;
    case "medium":
      viewMarkup = /* @__PURE__ */ import_react195.default.createElement(BlockStack, {
        inlineAlign: "center",
        gap: "200"
      }, actionMarkup, actionHintMarkup);
      break;
    case "small":
      viewMarkup = /* @__PURE__ */ import_react195.default.createElement("div", {
        className: classNames(styles62.UploadIcon, disabled && styles62.disabled)
      }, /* @__PURE__ */ import_react195.default.createElement(Icon, {
        source: SvgUploadMajor
      }));
      break;
  }
  return /* @__PURE__ */ import_react195.default.createElement("div", {
    className: fileUploadClassName
  }, viewMarkup);
}
var import_react195;
var init_FileUpload = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DropZone/components/FileUpload/FileUpload.js"() {
    import_react195 = __toESM(require_react());
    init_dist3();
    init_css();
    init_capitalize();
    init_context16();
    init_utils6();
    init_FileUpload_scss();
    init_hooks2();
    init_Icon();
    init_BlockStack();
    init_Text();
  }
});
function stopEvent(event) {
  event.preventDefault(), event.stopPropagation();
}
var import_react196;
var DropZone;
var init_DropZone = __esm({
  "node_modules/@shopify/polaris/build/esm/components/DropZone/DropZone.js"() {
    import_react196 = __toESM(require_react());
    init_dist3();
    init_debounce();
    init_css();
    init_capitalize();
    init_target();
    init_use_component_did_mount();
    init_use_toggle();
    init_use_event_listener();
    init_context16();
    init_utils6();
    init_DropZone_scss();
    init_FileUpload();
    init_hooks2();
    init_BlockStack();
    init_Icon();
    init_Text();
    init_Labelled();
    DropZone = function({
      dropOnPage,
      label,
      labelAction,
      labelHidden,
      children,
      disabled = false,
      outline = true,
      accept,
      active,
      overlay: overlay2 = true,
      allowMultiple = defaultAllowMultiple,
      overlayText,
      errorOverlayText,
      id: idProp,
      type = "file",
      onClick,
      error,
      openFileDialog,
      variableHeight,
      onFileDialogClose,
      customValidator,
      onDrop,
      onDropAccepted,
      onDropRejected,
      onDragEnter,
      onDragOver,
      onDragLeave
    }) {
      let node = (0, import_react196.useRef)(null), inputRef = (0, import_react196.useRef)(null), dragTargets = (0, import_react196.useRef)([]), adjustSize = (0, import_react196.useCallback)(debounce(() => {
        if (!node.current)
          return;
        if (variableHeight) {
          setMeasuring(false);
          return;
        }
        let size3 = "large", width2 = node.current.getBoundingClientRect().width;
        width2 < 100 ? size3 = "small" : width2 < 160 && (size3 = "medium"), setSize(size3), measuring && setMeasuring(false);
      }, 50, {
        trailing: true
      }), []), [dragging, setDragging] = (0, import_react196.useState)(false), [internalError, setInternalError] = (0, import_react196.useState)(false), {
        value: focused,
        setTrue: handleFocus,
        setFalse: handleBlur
      } = useToggle(false), [size2, setSize] = (0, import_react196.useState)("large"), [measuring, setMeasuring] = (0, import_react196.useState)(true), i18n = useI18n(), getValidatedFiles = (0, import_react196.useCallback)((files) => {
        let acceptedFiles = [], rejectedFiles = [];
        return Array.from(files).forEach((file) => {
          !fileAccepted(file, accept) || customValidator && !customValidator(file) ? rejectedFiles.push(file) : acceptedFiles.push(file);
        }), allowMultiple || (acceptedFiles.splice(1, acceptedFiles.length), rejectedFiles.push(...acceptedFiles.slice(1))), {
          files,
          acceptedFiles,
          rejectedFiles
        };
      }, [accept, allowMultiple, customValidator]), handleDrop = (0, import_react196.useCallback)((event) => {
        if (stopEvent(event), disabled)
          return;
        let fileList = getDataTransferFiles(event), {
          files,
          acceptedFiles,
          rejectedFiles
        } = getValidatedFiles(fileList);
        dragTargets.current = [], setDragging(false), setInternalError(rejectedFiles.length > 0), onDrop && onDrop(files, acceptedFiles, rejectedFiles), onDropAccepted && acceptedFiles.length && onDropAccepted(acceptedFiles), onDropRejected && rejectedFiles.length && onDropRejected(rejectedFiles), event.target && "value" in event.target && (event.target.value = "");
      }, [disabled, getValidatedFiles, onDrop, onDropAccepted, onDropRejected]), handleDragEnter = (0, import_react196.useCallback)((event) => {
        if (stopEvent(event), disabled)
          return;
        let fileList = getDataTransferFiles(event);
        if (event.target && !dragTargets.current.includes(event.target) && dragTargets.current.push(event.target), dragging)
          return;
        let {
          rejectedFiles
        } = getValidatedFiles(fileList);
        setDragging(true), setInternalError(rejectedFiles.length > 0), onDragEnter && onDragEnter();
      }, [disabled, dragging, getValidatedFiles, onDragEnter]), handleDragOver = (0, import_react196.useCallback)((event) => {
        stopEvent(event), !disabled && onDragOver && onDragOver();
      }, [disabled, onDragOver]), handleDragLeave = (0, import_react196.useCallback)((event) => {
        event.preventDefault(), !disabled && (dragTargets.current = dragTargets.current.filter((el) => {
          let compareNode = dropOnPage && !isServer ? document : node.current;
          return el !== event.target && compareNode && compareNode.contains(el);
        }), !(dragTargets.current.length > 0) && (setDragging(false), setInternalError(false), onDragLeave && onDragLeave()));
      }, [dropOnPage, disabled, onDragLeave]), dropNode = dropOnPage && !isServer ? document : node.current;
      useEventListener("drop", handleDrop, dropNode), useEventListener("dragover", handleDragOver, dropNode), useEventListener("dragenter", handleDragEnter, dropNode), useEventListener("dragleave", handleDragLeave, dropNode), useEventListener("resize", adjustSize, isServer ? null : window), useComponentDidMount(() => {
        adjustSize();
      });
      let uniqId = (0, import_react196.useId)(), id = idProp ?? uniqId, typeSuffix = capitalize2(type), allowMultipleKey = createAllowMultipleKey(allowMultiple), overlayTextWithDefault = overlayText === void 0 ? i18n.translate(`Polaris.DropZone.${allowMultipleKey}.overlayText${typeSuffix}`) : overlayText, errorOverlayTextWithDefault = errorOverlayText === void 0 ? i18n.translate(`Polaris.DropZone.errorOverlayText${typeSuffix}`) : errorOverlayText, labelValue = label || i18n.translate(`Polaris.DropZone.${allowMultipleKey}.label${typeSuffix}`), labelHiddenValue = label ? labelHidden : true, classes = classNames(styles61.DropZone, outline && styles61.hasOutline, focused && styles61.focused, (active || dragging) && styles61.isDragging, disabled && styles61.isDisabled, (internalError || error) && styles61.hasError, !variableHeight && styles61[variationName("size", size2)], measuring && styles61.measuring), dragOverlay = (active || dragging) && !internalError && !error && overlay2 && overlayMarkup(SvgUploadMajor, overlayTextWithDefault), dragErrorOverlay = dragging && (internalError || error) && overlayMarkup(SvgCircleAlertMajor, errorOverlayTextWithDefault, "critical"), context = (0, import_react196.useMemo)(() => ({
        disabled,
        focused,
        size: size2,
        type: type || "file",
        measuring,
        allowMultiple
      }), [disabled, focused, measuring, size2, type, allowMultiple]), open = (0, import_react196.useCallback)(() => {
        inputRef.current && inputRef.current.click();
      }, [inputRef]), triggerFileDialog = (0, import_react196.useCallback)(() => {
        open(), onFileDialogClose?.();
      }, [open, onFileDialogClose]);
      function overlayMarkup(icon, text2, color2) {
        return /* @__PURE__ */ import_react196.default.createElement("div", {
          className: styles61.Overlay
        }, /* @__PURE__ */ import_react196.default.createElement(BlockStack, {
          gap: "200",
          inlineAlign: "center"
        }, size2 === "small" && /* @__PURE__ */ import_react196.default.createElement(Icon, {
          source: icon,
          tone: color2
        }), (size2 === "medium" || size2 === "large") && /* @__PURE__ */ import_react196.default.createElement(Text, {
          variant: "bodySm",
          as: "p",
          fontWeight: "bold"
        }, text2)));
      }
      function handleClick(event) {
        if (!disabled)
          return onClick ? onClick(event) : open();
      }
      return (0, import_react196.useEffect)(() => {
        openFileDialog && triggerFileDialog();
      }, [openFileDialog, triggerFileDialog]), /* @__PURE__ */ import_react196.default.createElement(DropZoneContext.Provider, {
        value: context
      }, /* @__PURE__ */ import_react196.default.createElement(Labelled, {
        id,
        label: labelValue,
        action: labelAction,
        labelHidden: labelHiddenValue
      }, /* @__PURE__ */ import_react196.default.createElement("div", {
        ref: node,
        className: classes,
        "aria-disabled": disabled,
        onClick: handleClick,
        onDragStart: stopEvent
      }, dragOverlay, dragErrorOverlay, /* @__PURE__ */ import_react196.default.createElement(Text, {
        variant: "bodySm",
        as: "span",
        visuallyHidden: true
      }, /* @__PURE__ */ import_react196.default.createElement("input", {
        id,
        accept,
        disabled,
        multiple: allowMultiple,
        onChange: handleDrop,
        onFocus: handleFocus,
        onBlur: handleBlur,
        type: "file",
        ref: inputRef,
        autoComplete: "off"
      })), /* @__PURE__ */ import_react196.default.createElement("div", {
        className: styles61.Container
      }, children))));
    };
    DropZone.FileUpload = FileUpload;
  }
});
var img;
var emptySearch;
var init_empty_search_svg = __esm({
  "node_modules/@shopify/polaris/build/esm/components/EmptySearchResult/illustrations/empty-search.svg.js"() {
    img = "data:image/svg+xml,%3csvg width='60' height='60' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' d='M41.87 24a17.87 17.87 0 11-35.74 0 17.87 17.87 0 0135.74 0zm-3.15 18.96a24 24 0 114.24-4.24L59.04 54.8a3 3 0 11-4.24 4.24L38.72 42.96z' fill='%238C9196'/%3e%3c/svg%3e", emptySearch = img;
  }
});
function EmptySearchResult({
  title,
  description,
  withIllustration
}) {
  let altText = useI18n().translate("Polaris.EmptySearchResult.altText"), descriptionMarkup = description ? /* @__PURE__ */ import_react197.default.createElement("p", null, description) : null, illustrationMarkup = withIllustration ? /* @__PURE__ */ import_react197.default.createElement(Image, {
    alt: altText,
    source: emptySearch,
    draggable: false
  }) : null;
  return /* @__PURE__ */ import_react197.default.createElement(LegacyStack, {
    alignment: "center",
    vertical: true
  }, illustrationMarkup, /* @__PURE__ */ import_react197.default.createElement(Text, {
    variant: "headingLg",
    as: "p"
  }, title), /* @__PURE__ */ import_react197.default.createElement(Text, {
    tone: "subdued",
    as: "span"
  }, descriptionMarkup));
}
var import_react197;
var init_EmptySearchResult = __esm({
  "node_modules/@shopify/polaris/build/esm/components/EmptySearchResult/EmptySearchResult.js"() {
    import_react197 = __toESM(require_react());
    init_empty_search_svg();
    init_hooks2();
    init_LegacyStack();
    init_Text();
    init_Image();
  }
});
var styles63;
var init_EmptyState_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/EmptyState/EmptyState.scss.js"() {
    styles63 = {
      imageContained: "Polaris-EmptyState--imageContained"
    };
  }
});
function EmptyState({
  children,
  heading,
  image,
  largeImage,
  imageContained,
  fullWidth = false,
  action: action4,
  secondaryAction,
  footerContent
}) {
  let imageContainedClass = classNames(imageContained && styles63.imageContained), imageMarkup = largeImage ? /* @__PURE__ */ import_react198.default.createElement(Image, {
    alt: "",
    role: "presentation",
    source: largeImage,
    className: imageContainedClass,
    sourceSet: [{
      source: image,
      descriptor: "568w"
    }, {
      source: largeImage,
      descriptor: "1136w"
    }],
    sizes: "(max-width: 568px) 60vw"
  }) : /* @__PURE__ */ import_react198.default.createElement(Image, {
    className: imageContainedClass,
    role: "presentation",
    alt: "",
    source: image
  }), secondaryActionMarkup = secondaryAction ? buttonFrom(secondaryAction, {}) : null, footerContentMarkup = footerContent ? /* @__PURE__ */ import_react198.default.createElement(Box, {
    paddingBlockStart: "400"
  }, /* @__PURE__ */ import_react198.default.createElement(Text, {
    as: "span",
    alignment: "center",
    variant: "bodySm"
  }, footerContent)) : null, primaryActionMarkup = action4 ? buttonFrom(action4, {
    variant: "primary",
    size: "medium"
  }) : null, headingMarkup = heading ? /* @__PURE__ */ import_react198.default.createElement(Box, {
    paddingBlockEnd: "150"
  }, /* @__PURE__ */ import_react198.default.createElement(Text, {
    variant: "headingMd",
    as: "p",
    alignment: "center"
  }, heading)) : null, childrenMarkup = children ? /* @__PURE__ */ import_react198.default.createElement(Text, {
    as: "span",
    alignment: "center",
    variant: "bodySm"
  }, children) : null, textContentMarkup = headingMarkup || children ? /* @__PURE__ */ import_react198.default.createElement(Box, {
    paddingBlockEnd: "400"
  }, headingMarkup, childrenMarkup) : null, actionsMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ import_react198.default.createElement(InlineStack, {
    align: "center",
    gap: "200"
  }, secondaryActionMarkup, primaryActionMarkup) : null, detailsMarkup = textContentMarkup || actionsMarkup || footerContentMarkup ? /* @__PURE__ */ import_react198.default.createElement(Box, {
    maxWidth: fullWidth ? "100%" : "400px"
  }, /* @__PURE__ */ import_react198.default.createElement(BlockStack, {
    inlineAlign: "center"
  }, textContentMarkup, actionsMarkup, footerContentMarkup)) : null;
  return /* @__PURE__ */ import_react198.default.createElement(Box, {
    paddingInlineStart: "0",
    paddingInlineEnd: "0",
    paddingBlockStart: "500",
    paddingBlockEnd: "1600"
  }, /* @__PURE__ */ import_react198.default.createElement(BlockStack, {
    inlineAlign: "center"
  }, imageMarkup, detailsMarkup));
}
var import_react198;
var init_EmptyState = __esm({
  "node_modules/@shopify/polaris/build/esm/components/EmptyState/EmptyState.js"() {
    import_react198 = __toESM(require_react());
    init_css();
    init_EmptyState_scss();
    init_utils4();
    init_Box();
    init_BlockStack();
    init_Image();
    init_Text();
    init_InlineStack();
  }
});
var styles64;
var init_ExceptionList_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ExceptionList/ExceptionList.scss.js"() {
    styles64 = {
      ExceptionList: "Polaris-ExceptionList",
      Item: "Polaris-ExceptionList__Item",
      Icon: "Polaris-ExceptionList__Icon",
      statusWarning: "Polaris-ExceptionList--statusWarning",
      statusCritical: "Polaris-ExceptionList--statusCritical",
      Bullet: "Polaris-ExceptionList__Bullet",
      Title: "Polaris-ExceptionList__Title",
      Description: "Polaris-ExceptionList__Description"
    };
  }
});
var styles65;
var init_Truncate_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Truncate/Truncate.scss.js"() {
    styles65 = {
      Truncate: "Polaris-Truncate"
    };
  }
});
function Truncate({
  children
}) {
  return /* @__PURE__ */ import_react199.default.createElement("span", {
    className: styles65.Truncate
  }, children);
}
var import_react199;
var init_Truncate = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Truncate/Truncate.js"() {
    import_react199 = __toESM(require_react());
    init_Truncate_scss();
  }
});
function ExceptionList({
  items: itemsList
}) {
  let items = itemsList.map((item, index) => {
    let {
      status,
      icon,
      title,
      description,
      truncate = false
    } = item, itemClasses = classNames(styles64.Item, status && styles64[variationName("status", status)]), iconMarkup = icon ? /* @__PURE__ */ import_react200.default.createElement(Icon, {
      source: icon
    }) : /* @__PURE__ */ import_react200.default.createElement("span", {
      className: styles64.Bullet
    }), titleMarkup = title && /* @__PURE__ */ import_react200.default.createElement("span", {
      className: styles64.Title
    }, title), descriptionMarkup = description && /* @__PURE__ */ import_react200.default.createElement("span", {
      className: styles64.Description
    }, description), Element2 = truncate ? Truncate : import_react200.Fragment;
    return /* @__PURE__ */ import_react200.default.createElement("li", {
      className: itemClasses,
      key: index
    }, /* @__PURE__ */ import_react200.default.createElement("span", {
      className: styles64.Icon
    }, iconMarkup), /* @__PURE__ */ import_react200.default.createElement(Element2, null, titleMarkup, descriptionMarkup));
  });
  return /* @__PURE__ */ import_react200.default.createElement("ul", {
    className: styles64.ExceptionList
  }, items);
}
var import_react200;
var init_ExceptionList = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ExceptionList/ExceptionList.js"() {
    import_react200 = __toESM(require_react());
    init_css();
    init_ExceptionList_scss();
    init_Truncate();
    init_Icon();
  }
});
var styles66;
var init_Filters_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Filters/Filters.scss.js"() {
    styles66 = {
      Container: "Polaris-Filters__Container",
      SearchField: "Polaris-Filters__SearchField",
      FiltersWrapper: "Polaris-Filters__FiltersWrapper",
      hideQueryField: "Polaris-Filters--hideQueryField",
      FiltersInner: "Polaris-Filters__FiltersInner",
      AddFilter: "Polaris-Filters__AddFilter",
      FiltersWrapperWithAddButton: "Polaris-Filters__FiltersWrapperWithAddButton",
      AddFilterActivatorMultiple: "Polaris-Filters__AddFilterActivatorMultiple",
      FiltersStickyArea: "Polaris-Filters__FiltersStickyArea",
      ClearAll: "Polaris-Filters__ClearAll",
      MultiplePinnedFilterClearAll: "Polaris-Filters__MultiplePinnedFilterClearAll"
    };
  }
});
var styles67;
var init_SearchField_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Filters/components/SearchField/SearchField.scss.js"() {
    styles67 = {
      Spinner: "Polaris-Filters-SearchField__Spinner"
    };
  }
});
function SearchField({
  onChange,
  onClear,
  onFocus,
  onBlur,
  focused,
  value,
  placeholder,
  disabled,
  borderlessQueryField,
  loading
}) {
  let id = (0, import_react201.useId)(), {
    mdUp
  } = useBreakpoints();
  function handleChange(value2) {
    onChange(value2);
  }
  function handleClear() {
    onClear ? onClear() : onChange("");
  }
  return /* @__PURE__ */ import_react201.default.createElement(TextField, {
    id,
    value,
    onChange: (eventValue) => handleChange(eventValue ?? value),
    onFocus,
    onBlur,
    onClearButtonClick: handleClear,
    autoComplete: "off",
    placeholder,
    disabled,
    variant: borderlessQueryField ? "borderless" : "inherit",
    size: "slim",
    prefix: mdUp ? /* @__PURE__ */ import_react201.default.createElement(Icon, {
      source: SvgSearchMinor
    }) : void 0,
    suffix: loading ? /* @__PURE__ */ import_react201.default.createElement("div", {
      className: styles67.Spinner
    }, /* @__PURE__ */ import_react201.default.createElement(Spinner, {
      size: "small"
    })) : null,
    focused,
    label: placeholder,
    labelHidden: true,
    clearButton: true
  });
}
var import_react201;
var init_SearchField = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Filters/components/SearchField/SearchField.js"() {
    import_react201 = __toESM(require_react());
    init_dist3();
    init_breakpoints2();
    init_SearchField_scss();
    init_TextField();
    init_Icon();
    init_Spinner();
  }
});
function useOnValueChange(value, onChange) {
  let tracked = import_react202.default.useRef(value);
  (0, import_react202.useEffect)(() => {
    let oldValue = tracked.current;
    value !== tracked.current && (tracked.current = value, onChange(value, oldValue));
  }, [value, onChange]);
}
var import_react202;
var init_use_on_value_change = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-on-value-change.js"() {
    import_react202 = __toESM(require_react());
  }
});
var styles68;
var init_FilterPill_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Filters/components/FilterPill/FilterPill.scss.js"() {
    styles68 = {
      FilterButton: "Polaris-Filters-FilterPill__FilterButton",
      focusedFilterButton: "Polaris-Filters-FilterPill--focusedFilterButton",
      ActiveFilterButton: "Polaris-Filters-FilterPill__ActiveFilterButton",
      PlainButton: "Polaris-Filters-FilterPill__PlainButton",
      ToggleButton: "Polaris-Filters-FilterPill__ToggleButton",
      Label: "Polaris-Filters-FilterPill__Label",
      clearButton: "Polaris-Filters-FilterPill--clearButton",
      IconWrapper: "Polaris-Filters-FilterPill__IconWrapper",
      PopoverWrapper: "Polaris-Filters-FilterPill__PopoverWrapper",
      ClearButtonWrapper: "Polaris-Filters-FilterPill__ClearButtonWrapper"
    };
  }
});
function FilterPill({
  filterKey,
  label,
  filter,
  disabled,
  hideClearButton,
  selected,
  initialActive,
  closeOnChildOverlayClick,
  onRemove,
  onClick
}) {
  let i18n = useI18n(), {
    mdDown
  } = useBreakpoints(), elementRef = (0, import_react203.useRef)(null), {
    value: focused,
    setTrue: setFocusedTrue,
    setFalse: setFocusedFalse
  } = useToggle(false), [popoverActive, setPopoverActive] = (0, import_react203.useState)(initialActive);
  (0, import_react203.useEffect)(() => {
    let node = elementRef.current;
    if (!node || !popoverActive)
      return;
    let parent = node.parentElement?.parentElement;
    parent && parent.scroll?.({
      left: node.offsetLeft
    });
  }, [elementRef, popoverActive]);
  let togglePopoverActive = (0, import_react203.useCallback)(() => {
    filter && setPopoverActive((popoverActive2) => !popoverActive2), onClick && onClick(filterKey);
  }, [filter, filterKey, onClick]), handlePopoverClose = (0, import_react203.useCallback)(() => {
    togglePopoverActive(), selected || onRemove?.(filterKey);
  }, [onRemove, selected, filterKey, togglePopoverActive]), handleClear = () => {
    onRemove && onRemove(filterKey), setPopoverActive(false);
  }, buttonClasses = classNames(styles68.FilterButton, selected && styles68.ActiveFilterButton, popoverActive && styles68.FocusFilterButton, focused && styles68.focusedFilterButton), clearButtonClassNames = classNames(styles68.PlainButton, styles68.clearButton), toggleButtonClassNames = classNames(styles68.PlainButton, styles68.ToggleButton), labelVariant = mdDown ? "bodyLg" : "bodySm", wrappedLabel = /* @__PURE__ */ import_react203.default.createElement("div", {
    className: styles68.Label
  }, /* @__PURE__ */ import_react203.default.createElement(Text, {
    variant: labelVariant,
    as: "span"
  }, label)), activator = /* @__PURE__ */ import_react203.default.createElement("div", {
    className: buttonClasses
  }, /* @__PURE__ */ import_react203.default.createElement(InlineStack, {
    gap: "0",
    wrap: false
  }, /* @__PURE__ */ import_react203.default.createElement(UnstyledButton, {
    onFocus: setFocusedTrue,
    onBlur: setFocusedFalse,
    onClick: togglePopoverActive,
    className: toggleButtonClassNames,
    type: "button"
  }, /* @__PURE__ */ import_react203.default.createElement(InlineStack, {
    wrap: false,
    align: "center",
    blockAlign: "center",
    gap: "0"
  }, selected ? /* @__PURE__ */ import_react203.default.createElement(import_react203.default.Fragment, null, wrappedLabel) : /* @__PURE__ */ import_react203.default.createElement(import_react203.default.Fragment, null, wrappedLabel, /* @__PURE__ */ import_react203.default.createElement("div", {
    className: styles68.IconWrapper
  }, /* @__PURE__ */ import_react203.default.createElement(Icon, {
    source: SvgChevronDownMinor,
    tone: "base"
  }))))), selected ? /* @__PURE__ */ import_react203.default.createElement(UnstyledButton, {
    onClick: handleClear,
    className: clearButtonClassNames,
    type: "button",
    "aria-label": i18n.translate("Polaris.FilterPill.clear")
  }, /* @__PURE__ */ import_react203.default.createElement("div", {
    className: styles68.IconWrapper
  }, /* @__PURE__ */ import_react203.default.createElement(Icon, {
    source: SvgCancelSmallMinor,
    tone: "base"
  }))) : null)), clearButtonMarkup = !hideClearButton && /* @__PURE__ */ import_react203.default.createElement("div", {
    className: styles68.ClearButtonWrapper
  }, /* @__PURE__ */ import_react203.default.createElement(Button, {
    onClick: handleClear,
    variant: "plain",
    disabled: !selected,
    textAlign: "left"
  }, i18n.translate("Polaris.FilterPill.clear")));
  return disabled ? null : /* @__PURE__ */ import_react203.default.createElement("div", {
    ref: elementRef
  }, /* @__PURE__ */ import_react203.default.createElement(Popover2, {
    active: popoverActive,
    activator,
    key: filterKey,
    onClose: handlePopoverClose,
    preferredAlignment: "left",
    preventCloseOnChildOverlayClick: !closeOnChildOverlayClick
  }, /* @__PURE__ */ import_react203.default.createElement("div", {
    className: styles68.PopoverWrapper
  }, /* @__PURE__ */ import_react203.default.createElement(Popover2.Section, null, /* @__PURE__ */ import_react203.default.createElement(BlockStack, {
    gap: "100"
  }, filter, clearButtonMarkup)))));
}
var import_react203;
var init_FilterPill = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Filters/components/FilterPill/FilterPill.js"() {
    import_react203 = __toESM(require_react());
    init_dist3();
    init_use_toggle();
    init_breakpoints2();
    init_css();
    init_FilterPill_scss();
    init_hooks2();
    init_Text();
    init_InlineStack();
    init_UnstyledButton();
    init_Icon();
    init_Button();
    init_Popover();
    init_BlockStack();
  }
});
function FiltersBar({
  filters,
  appliedFilters,
  onClearAll,
  disabled,
  hideQueryField,
  disableFilters,
  mountedStateStyles,
  onAddFilterClick,
  closeOnChildOverlayClick,
  children
}) {
  let i18n = useI18n(), {
    mdDown
  } = useBreakpoints(), [popoverActive, setPopoverActive] = (0, import_react204.useState)(false), hasMounted = (0, import_react204.useRef)(false);
  (0, import_react204.useEffect)(() => {
    hasMounted.current = true;
  });
  let togglePopoverActive = () => setPopoverActive((popoverActive2) => !popoverActive2), handleAddFilterClick = () => {
    onAddFilterClick?.(), togglePopoverActive();
  }, appliedFilterKeys = appliedFilters?.map(({
    key
  }) => key), pinnedFiltersFromPropsAndAppliedFilters = filters.filter(({
    pinned,
    key
  }) => Boolean(pinned) || appliedFilterKeys?.includes(key)), [localPinnedFilters, setLocalPinnedFilters] = (0, import_react204.useState)(pinnedFiltersFromPropsAndAppliedFilters.map(({
    key
  }) => key));
  useOnValueChange(filters.length, () => {
    setLocalPinnedFilters(pinnedFiltersFromPropsAndAppliedFilters.map(({
      key
    }) => key));
  });
  let pinnedFilters = localPinnedFilters.map((key) => filters.find((filter) => filter.key === key)).reduce((acc, filter) => filter ? [...acc, filter] : acc, []), onFilterClick = ({
    key,
    onAction
  }) => () => {
    setTimeout(() => {
      setLocalPinnedFilters((currentLocalPinnedFilters) => [.../* @__PURE__ */ new Set([...currentLocalPinnedFilters, key])]), onAction?.(), togglePopoverActive();
    }, 0);
  }, filterToActionItem = (filter) => ({
    ...filter,
    content: filter.label,
    onAction: onFilterClick(filter)
  }), unpinnedFilters = filters.filter((filter) => !pinnedFilters.some(({
    key
  }) => key === filter.key)), unsectionedFilters = unpinnedFilters.filter((filter) => !filter.section && !filter.hidden).map(filterToActionItem), sectionedFilters = unpinnedFilters.filter((filter) => filter.section).reduce((acc, filter) => {
    let filterActionItem = filterToActionItem(filter), sectionIndex = acc.findIndex((section) => section.title === filter.section);
    return sectionIndex === -1 ? acc.push({
      title: filter.section,
      items: [filterActionItem]
    }) : acc[sectionIndex].items.push(filterActionItem), acc;
  }, []), hasOneOrMorePinnedFilters = pinnedFilters.length >= 1, labelVariant = mdDown ? "bodyMd" : "bodySm", addFilterActivator = /* @__PURE__ */ import_react204.default.createElement("div", null, /* @__PURE__ */ import_react204.default.createElement(UnstyledButton, {
    type: "button",
    className: styles66.AddFilter,
    onClick: handleAddFilterClick,
    "aria-label": i18n.translate("Polaris.Filters.addFilter"),
    disabled: disabled || unsectionedFilters.length === 0 && sectionedFilters.length === 0 || disableFilters
  }, /* @__PURE__ */ import_react204.default.createElement(Text, {
    variant: labelVariant,
    as: "span"
  }, i18n.translate("Polaris.Filters.addFilter"), " "), /* @__PURE__ */ import_react204.default.createElement(SvgPlusMinor, null))), handleClearAllFilters = () => {
    setLocalPinnedFilters([]), onClearAll?.();
  }, shouldShowAddButton = filters.some((filter) => !filter.pinned), pinnedFiltersMarkup = pinnedFilters.map(({
    key: filterKey,
    ...pinnedFilter
  }) => {
    let appliedFilter = appliedFilters?.find(({
      key
    }) => key === filterKey), handleFilterPillRemove = () => {
      setLocalPinnedFilters((currentLocalPinnedFilters) => currentLocalPinnedFilters.filter((key) => key !== filterKey)), appliedFilter?.onRemove(filterKey);
    };
    return /* @__PURE__ */ import_react204.default.createElement(FilterPill, Object.assign({
      key: filterKey
    }, pinnedFilter, {
      initialActive: hasMounted.current && !pinnedFilter.pinned && !appliedFilter,
      label: appliedFilter?.label || pinnedFilter.label,
      filterKey,
      selected: appliedFilterKeys?.includes(filterKey),
      onRemove: handleFilterPillRemove,
      disabled: pinnedFilter.disabled || disableFilters,
      closeOnChildOverlayClick
    }));
  }), addButton = shouldShowAddButton ? /* @__PURE__ */ import_react204.default.createElement("div", {
    className: classNames(styles66.AddFilterActivator, hasOneOrMorePinnedFilters && styles66.AddFilterActivatorMultiple)
  }, /* @__PURE__ */ import_react204.default.createElement(Popover2, {
    active: popoverActive && !disabled,
    activator: addFilterActivator,
    onClose: togglePopoverActive
  }, /* @__PURE__ */ import_react204.default.createElement(ActionList, {
    actionRole: "menuitem",
    items: unsectionedFilters,
    sections: sectionedFilters
  }))) : null, clearAllMarkup = appliedFilters?.length || localPinnedFilters.length ? /* @__PURE__ */ import_react204.default.createElement("div", {
    className: classNames(styles66.ClearAll, hasOneOrMorePinnedFilters && shouldShowAddButton && styles66.MultiplePinnedFilterClearAll)
  }, /* @__PURE__ */ import_react204.default.createElement(Button, {
    size: "micro",
    onClick: handleClearAllFilters,
    removeUnderline: true,
    variant: "monochromePlain"
  }, i18n.translate("Polaris.Filters.clearFilters"))) : null;
  return /* @__PURE__ */ import_react204.default.createElement("div", {
    className: classNames(styles66.FiltersWrapper, shouldShowAddButton && hasOneOrMorePinnedFilters && styles66.FiltersWrapperWithAddButton),
    "aria-live": "polite",
    style: mountedStateStyles
  }, /* @__PURE__ */ import_react204.default.createElement("div", {
    className: classNames(styles66.FiltersInner)
  }, /* @__PURE__ */ import_react204.default.createElement("div", {
    className: classNames(styles66.FiltersStickyArea)
  }, pinnedFiltersMarkup, addButton, clearAllMarkup)), hideQueryField ? /* @__PURE__ */ import_react204.default.createElement(Box, {
    paddingInlineEnd: "300",
    paddingBlockStart: "200",
    paddingBlockEnd: "200"
  }, /* @__PURE__ */ import_react204.default.createElement(InlineStack, {
    align: "start",
    blockAlign: "center",
    gap: {
      xs: "400",
      md: "300"
    }
  }, children)) : null);
}
var import_react204;
var init_FiltersBar = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Filters/components/FiltersBar/FiltersBar.js"() {
    import_react204 = __toESM(require_react());
    init_dist3();
    init_use_on_value_change();
    init_css();
    init_breakpoints2();
    init_Filters_scss();
    init_FilterPill();
    init_hooks2();
    init_UnstyledButton();
    init_Text();
    init_Popover();
    init_ActionList();
    init_Button();
    init_Box();
    init_InlineStack();
  }
});
function Filters({
  queryValue,
  queryPlaceholder,
  focused,
  filters,
  appliedFilters,
  onQueryChange,
  onQueryClear,
  onQueryBlur,
  onQueryFocus,
  onClearAll,
  children,
  disabled,
  hideFilters,
  hideQueryField,
  disableQueryField,
  borderlessQueryField,
  loading,
  disableFilters,
  mountedState,
  onAddFilterClick,
  closeOnChildOverlayClick
}) {
  let hideFilterBar = hideFilters || filters.length === 0, queryFieldMarkup = hideQueryField ? null : /* @__PURE__ */ import_react205.default.createElement("div", {
    className: styles66.Container
  }, /* @__PURE__ */ import_react205.default.createElement(Box, {
    padding: hideFilterBar ? "300" : "200"
  }, /* @__PURE__ */ import_react205.default.createElement(InlineStack, {
    align: "start",
    blockAlign: "center",
    gap: {
      xs: "400",
      md: "300"
    }
  }, /* @__PURE__ */ import_react205.default.createElement("div", {
    className: styles66.SearchField,
    style: mountedState ? {
      ...defaultStyle,
      ...transitionStyles[mountedState]
    } : void 0
  }, /* @__PURE__ */ import_react205.default.createElement(SearchField, {
    onChange: onQueryChange,
    onFocus: onQueryFocus,
    onBlur: onQueryBlur,
    onClear: onQueryClear,
    value: queryValue,
    placeholder: queryPlaceholder,
    focused,
    disabled: disabled || disableQueryField,
    borderlessQueryField,
    loading
  })), children))), mountedStateStyles = mountedState && !hideQueryField ? {
    ...defaultFilterStyles,
    ...transitionFilterStyles[mountedState]
  } : void 0, filtersMarkup = hideFilterBar ? null : /* @__PURE__ */ import_react205.default.createElement(FiltersBar, {
    filters,
    appliedFilters,
    onClearAll,
    disabled,
    hideQueryField,
    disableFilters,
    onAddFilterClick,
    closeOnChildOverlayClick,
    mountedStateStyles
  }, children);
  return /* @__PURE__ */ import_react205.default.createElement("div", {
    className: classNames(styles66.Filters, hideQueryField && styles66.hideQueryField)
  }, queryFieldMarkup, filtersMarkup);
}
var import_react205;
var TRANSITION_DURATION;
var TRANSITION_MARGIN;
var defaultStyle;
var transitionStyles;
var defaultFilterStyles;
var transitionFilterStyles;
var init_Filters = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Filters/Filters.js"() {
    import_react205 = __toESM(require_react());
    init_css();
    init_Filters_scss();
    init_SearchField();
    init_FiltersBar();
    init_Box();
    init_InlineStack();
    TRANSITION_DURATION = "var(--p-motion-duration-150)", TRANSITION_MARGIN = "-36px", defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0
    }, transitionStyles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      },
      unmounted: {
        opacity: 0
      }
    }, defaultFilterStyles = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease), margin ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    }, transitionFilterStyles = {
      entering: {
        opacity: 1,
        marginTop: 0
      },
      entered: {
        opacity: 1,
        marginTop: 0
      },
      exiting: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      exited: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      unmounted: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      }
    };
  }
});
function isRef(ref) {
  return ref.current !== void 0;
}
var import_react206;
var Focus;
var init_Focus = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Focus/Focus.js"() {
    import_react206 = __toESM(require_react());
    init_focus();
    Focus = /* @__PURE__ */ (0, import_react206.memo)(function({
      children,
      disabled,
      root
    }) {
      return (0, import_react206.useEffect)(() => {
        if (disabled || !root)
          return;
        let node = isRef(root) ? root.current : root;
        !node || node.querySelector("[autofocus]") || focusFirstFocusableNode(node, false);
      }, [disabled, root]), /* @__PURE__ */ import_react206.default.createElement(import_react206.default.Fragment, null, children);
    });
  }
});
var styles69;
var init_FooterHelp_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FooterHelp/FooterHelp.scss.js"() {
    styles69 = {
      FooterHelp: "Polaris-FooterHelp",
      Text: "Polaris-FooterHelp__Text"
    };
  }
});
function FooterHelp({
  children
}) {
  return /* @__PURE__ */ import_react207.default.createElement("div", {
    className: styles69.FooterHelp
  }, /* @__PURE__ */ import_react207.default.createElement("div", {
    className: styles69.Text
  }, children));
}
var import_react207;
var init_FooterHelp = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FooterHelp/FooterHelp.js"() {
    import_react207 = __toESM(require_react());
    init_FooterHelp_scss();
  }
});
function Form2({
  acceptCharset,
  action: action4,
  autoComplete,
  children,
  encType,
  implicitSubmit = true,
  method = "post",
  name,
  noValidate,
  preventDefault: preventDefault2 = true,
  target,
  onSubmit
}) {
  let i18n = useI18n(), handleSubmit = (0, import_react208.useCallback)((event) => {
    preventDefault2 && (event.preventDefault(), onSubmit(event));
  }, [onSubmit, preventDefault2]), autoCompleteInputs = normalizeAutoComplete(autoComplete), submitMarkup = implicitSubmit ? /* @__PURE__ */ import_react208.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, /* @__PURE__ */ import_react208.default.createElement("button", {
    type: "submit",
    "aria-hidden": "true",
    tabIndex: -1
  }, i18n.translate("Polaris.Common.submit"))) : null;
  return /* @__PURE__ */ import_react208.default.createElement("form", {
    acceptCharset,
    action: action4,
    autoComplete: autoCompleteInputs,
    encType,
    method,
    name,
    noValidate,
    target,
    onSubmit: handleSubmit
  }, submitMarkup, children);
}
function normalizeAutoComplete(autoComplete) {
  return autoComplete == null ? autoComplete : autoComplete ? "on" : "off";
}
var import_react208;
var init_Form = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Form/Form.js"() {
    import_react208 = __toESM(require_react());
    init_hooks2();
    init_Text();
  }
});
var styles70;
var init_FormLayout_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FormLayout/FormLayout.scss.js"() {
    styles70 = {
      Item: "Polaris-FormLayout__Item",
      grouped: "Polaris-FormLayout--grouped",
      condensed: "Polaris-FormLayout--condensed"
    };
  }
});
function Item5({
  children,
  condensed = false
}) {
  let className = classNames(styles70.Item, condensed ? styles70.condensed : styles70.grouped);
  return children ? /* @__PURE__ */ import_react209.default.createElement("div", {
    className
  }, children) : null;
}
var import_react209;
var init_Item5 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FormLayout/components/Item/Item.js"() {
    import_react209 = __toESM(require_react());
    init_css();
    init_FormLayout_scss();
  }
});
function Group({
  children,
  condensed,
  title,
  helpText
}) {
  let id = (0, import_react210.useId)(), helpTextElement = null, helpTextId, titleElement = null, titleId;
  helpText && (helpTextId = `${id}HelpText`, helpTextElement = /* @__PURE__ */ import_react210.default.createElement(Box, {
    id: helpTextId,
    color: "text-secondary"
  }, helpText)), title && (titleId = `${id}Title`, titleElement = /* @__PURE__ */ import_react210.default.createElement(Text, {
    id: titleId,
    as: "p"
  }, title));
  let itemsMarkup = import_react210.Children.map(children, (child) => wrapWithComponent(child, Item5, {
    condensed
  }));
  return /* @__PURE__ */ import_react210.default.createElement(BlockStack, {
    role: "group",
    gap: "200",
    "aria-labelledby": titleId,
    "aria-describedby": helpTextId
  }, titleElement, /* @__PURE__ */ import_react210.default.createElement(InlineStack, {
    gap: "300"
  }, itemsMarkup), helpTextElement);
}
var import_react210;
var init_Group = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FormLayout/components/Group/Group.js"() {
    import_react210 = __toESM(require_react());
    init_components2();
    init_Item5();
    init_BlockStack();
    init_InlineStack();
    init_Box();
    init_Text();
  }
});
function wrapChildren(child, index) {
  return isElementOfType(child, Group) ? child : wrapWithComponent(child, Item5, {
    key: index
  });
}
var import_react211;
var FormLayout;
var init_FormLayout = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FormLayout/FormLayout.js"() {
    import_react211 = __toESM(require_react());
    init_components2();
    init_Group();
    init_BlockStack();
    init_Item5();
    FormLayout = /* @__PURE__ */ (0, import_react211.memo)(function({
      children
    }) {
      return /* @__PURE__ */ import_react211.default.createElement(BlockStack, {
        gap: "400"
      }, import_react211.Children.map(children, wrapChildren));
    });
    FormLayout.Group = Group;
  }
});
function setRootProperty(name, value, node) {
  if (!document)
    return;
  (node || document.documentElement).style.setProperty(name, value);
}
var init_set_root_property = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/set-root-property.js"() {
  }
});
var styles71;
var init_Frame_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/Frame.scss.js"() {
    styles71 = {
      Frame: "Polaris-Frame",
      Navigation: "Polaris-Frame__Navigation",
      hasTopBar: "Polaris-Frame--hasTopBar",
      "Navigation-enter": "Polaris-Frame__Navigation--enter",
      "Navigation-enterActive": "Polaris-Frame__Navigation--enterActive",
      "Navigation-exit": "Polaris-Frame__Navigation--exit",
      "Navigation-exitActive": "Polaris-Frame__Navigation--exitActive",
      NavigationDismiss: "Polaris-Frame__NavigationDismiss",
      "Navigation-visible": "Polaris-Frame__Navigation--visible",
      TopBar: "Polaris-Frame__TopBar",
      ContextualSaveBar: "Polaris-Frame__ContextualSaveBar",
      Main: "Polaris-Frame__Main",
      hasNav: "Polaris-Frame--hasNav",
      Content: "Polaris-Frame__Content",
      hasSidebar: "Polaris-Frame--hasSidebar",
      GlobalRibbonContainer: "Polaris-Frame__GlobalRibbonContainer",
      LoadingBar: "Polaris-Frame__LoadingBar",
      Skip: "Polaris-Frame__Skip",
      focused: "Polaris-Frame--focused",
      pressed: "Polaris-Frame--pressed"
    };
  }
});
function useMediaQuery() {
  let mediaQuery = (0, import_react212.useContext)(MediaQueryContext);
  if (!mediaQuery)
    throw new Error("No mediaQuery was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  return mediaQuery;
}
var import_react212;
var init_hooks11 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/media-query/hooks.js"() {
    import_react212 = __toESM(require_react());
    init_context6();
  }
});
function useIsMountedRef() {
  let isMounted = (0, import_react213.useRef)(false);
  return (0, import_react213.useEffect)(() => (isMounted.current = true, () => {
    isMounted.current = false;
  }), []), isMounted;
}
var import_react213;
var init_use_is_mounted_ref = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-is-mounted-ref.js"() {
    import_react213 = __toESM(require_react());
  }
});
var styles72;
var init_Loading_scss2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/Loading/Loading.scss.js"() {
    styles72 = {
      Loading: "Polaris-Frame-Loading",
      Level: "Polaris-Frame-Loading__Level"
    };
  }
});
function Loading2() {
  let i18n = useI18n(), isMountedRef = useIsMountedRef(), [progress, setProgress] = (0, import_react214.useState)(0), [animating, setAnimating] = (0, import_react214.useState)(false);
  (0, import_react214.useEffect)(() => {
    progress >= STUCK_THRESHOLD || animating || requestAnimationFrame(() => {
      if (!isMountedRef.current)
        return;
      let step = Math.max((STUCK_THRESHOLD - progress) / 10, 1);
      setAnimating(true), setProgress(progress + step);
    });
  }, [progress, animating, isMountedRef]);
  let customStyles = {
    transform: `scaleX(${Math.floor(progress) / 100})`
  };
  return /* @__PURE__ */ import_react214.default.createElement("div", {
    className: styles72.Loading,
    "aria-valuenow": progress,
    "aria-valuemin": 0,
    "aria-valuemax": 100,
    role: "progressbar",
    "aria-label": i18n.translate("Polaris.Loading.label")
  }, /* @__PURE__ */ import_react214.default.createElement("div", {
    className: styles72.Level,
    style: customStyles,
    onTransitionEnd: () => setAnimating(false)
  }));
}
var import_react214;
var STUCK_THRESHOLD;
var init_Loading2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/Loading/Loading.js"() {
    import_react214 = __toESM(require_react());
    init_use_is_mounted_ref();
    init_Loading_scss2();
    init_hooks2();
    STUCK_THRESHOLD = 99;
  }
});
var styles73;
var init_CSSAnimation_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/CSSAnimation/CSSAnimation.scss.js"() {
    styles73 = {
      startFade: "Polaris-Frame-CSSAnimation--startFade",
      endFade: "Polaris-Frame-CSSAnimation--endFade"
    };
  }
});
function CSSAnimation({
  in: inProp,
  className,
  type,
  children
}) {
  let [transitionStatus, setTransitionStatus] = (0, import_react215.useState)(inProp ? TransitionStatus2.Entering : TransitionStatus2.Exited), isMounted = (0, import_react215.useRef)(false), node = (0, import_react215.useRef)(null);
  (0, import_react215.useEffect)(() => {
    isMounted.current && transitionStatus === TransitionStatus2.Entering && changeTransitionStatus(TransitionStatus2.Entered);
  }, [transitionStatus]), (0, import_react215.useEffect)(() => {
    isMounted.current && (inProp && changeTransitionStatus(TransitionStatus2.Entering), !inProp && changeTransitionStatus(TransitionStatus2.Exiting));
  }, [inProp]), (0, import_react215.useEffect)(() => {
    isMounted.current = true;
  }, []);
  let wrapperClassName = classNames(className, styles73[variationName("start", type)], inProp && styles73[variationName("end", type)]), content = transitionStatus === TransitionStatus2.Exited && !inProp ? null : children;
  return /* @__PURE__ */ import_react215.default.createElement("div", {
    className: wrapperClassName,
    ref: node,
    onTransitionEnd: handleTransitionEnd
  }, content);
  function handleTransitionEnd() {
    transitionStatus === TransitionStatus2.Exiting && changeTransitionStatus(TransitionStatus2.Exited);
  }
  function changeTransitionStatus(transitionStatus2) {
    setTransitionStatus(transitionStatus2), transitionStatus2 === TransitionStatus2.Entering && node.current && node.current.getBoundingClientRect();
  }
}
var import_react215;
var TransitionStatus2;
var init_CSSAnimation = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/CSSAnimation/CSSAnimation.js"() {
    import_react215 = __toESM(require_react());
    init_css();
    init_CSSAnimation_scss();
    (function(TransitionStatus3) {
      TransitionStatus3.Entering = "entering", TransitionStatus3.Entered = "entered", TransitionStatus3.Exiting = "exiting", TransitionStatus3.Exited = "exited";
    })(TransitionStatus2 || (TransitionStatus2 = {}));
  }
});
function pluckDeep(obj, key) {
  if (!obj)
    return null;
  let keys = Object.keys(obj);
  for (let currKey of keys) {
    if (currKey === key)
      return obj[key];
    if (isObject2(obj[currKey])) {
      let plucked = pluckDeep(obj[currKey], key);
      if (plucked)
        return plucked;
    }
  }
  return null;
}
var init_pluck_deep = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/pluck-deep.js"() {
    init_is_object2();
  }
});
function getWidth(value = {}, defaultWidth = 0, key = "width") {
  let width2 = typeof value == "number" ? value : pluckDeep(value, key);
  return width2 ? `${width2}px` : `${defaultWidth}px`;
}
var init_get_width = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/get-width.js"() {
    init_pluck_deep();
  }
});
var styles74;
var init_ContextualSaveBar_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/ContextualSaveBar/ContextualSaveBar.scss.js"() {
    styles74 = {
      ContextualSaveBar: "Polaris-Frame-ContextualSaveBar",
      LogoContainer: "Polaris-Frame-ContextualSaveBar__LogoContainer",
      ContextControl: "Polaris-Frame-ContextualSaveBar__ContextControl",
      Contents: "Polaris-Frame-ContextualSaveBar__Contents",
      fullWidth: "Polaris-Frame-ContextualSaveBar--fullWidth",
      MessageContainer: "Polaris-Frame-ContextualSaveBar__MessageContainer",
      ActionContainer: "Polaris-Frame-ContextualSaveBar__ActionContainer",
      Action: "Polaris-Frame-ContextualSaveBar__Action"
    };
  }
});
var styles75;
var init_Modal_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/Modal.scss.js"() {
    styles75 = {
      Body: "Polaris-Modal__Body",
      IFrame: "Polaris-Modal__IFrame"
    };
  }
});
var styles76;
var init_Section_scss2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/components/Section/Section.scss.js"() {
    styles76 = {
      Section: "Polaris-Modal-Section",
      titleHidden: "Polaris-Modal-Section--titleHidden"
    };
  }
});
function Section5({
  children,
  flush = false,
  subdued = false,
  titleHidden = false
}) {
  let className = classNames(styles76.Section, titleHidden && styles76.titleHidden);
  return /* @__PURE__ */ import_react216.default.createElement("div", {
    className
  }, /* @__PURE__ */ import_react216.default.createElement(Box, Object.assign({
    as: "section",
    padding: flush ? "0" : "400"
  }, titleHidden && {
    paddingInlineEnd: "0"
  }, subdued && {
    background: "bg-surface-tertiary"
  }), children));
}
var import_react216;
var init_Section5 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/components/Section/Section.js"() {
    import_react216 = __toESM(require_react());
    init_css();
    init_Section_scss2();
    init_Box();
  }
});
var styles77;
var init_Dialog_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/components/Dialog/Dialog.scss.js"() {
    styles77 = {
      Container: "Polaris-Modal-Dialog__Container",
      Dialog: "Polaris-Modal-Dialog",
      Modal: "Polaris-Modal-Dialog__Modal",
      limitHeight: "Polaris-Modal-Dialog--limitHeight",
      sizeSmall: "Polaris-Modal-Dialog--sizeSmall",
      sizeLarge: "Polaris-Modal-Dialog--sizeLarge",
      sizeFullScreen: "Polaris-Modal-Dialog--sizeFullScreen",
      animateFadeUp: "Polaris-Modal-Dialog--animateFadeUp",
      entering: "Polaris-Modal-Dialog--entering",
      exiting: "Polaris-Modal-Dialog--exiting",
      exited: "Polaris-Modal-Dialog--exited",
      entered: "Polaris-Modal-Dialog--entered"
    };
  }
});
function useFocusManager({
  trapping
}) {
  let focusManager = (0, import_react217.useContext)(FocusManagerContext), id = (0, import_react217.useId)();
  if (!focusManager)
    throw new MissingAppProviderError("No FocusManager was provided.");
  let {
    trapFocusList,
    add: addFocusItem,
    remove: removeFocusItem
  } = focusManager, canSafelyFocus = trapFocusList[0] === id, value = (0, import_react217.useMemo)(() => ({
    canSafelyFocus
  }), [canSafelyFocus]);
  return (0, import_react217.useEffect)(() => {
    if (trapping)
      return addFocusItem(id), () => {
        removeFocusItem(id);
      };
  }, [addFocusItem, id, removeFocusItem, trapping]), value;
}
var import_react217;
var init_hooks12 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/focus-manager/hooks.js"() {
    import_react217 = __toESM(require_react());
    init_errors5();
    init_context8();
  }
});
function TrapFocus({
  trapping = true,
  children
}) {
  let {
    canSafelyFocus
  } = useFocusManager({
    trapping
  }), focusTrapWrapper = (0, import_react218.useRef)(null), [disableFocus, setDisableFocus] = (0, import_react218.useState)(true);
  (0, import_react218.useEffect)(() => {
    let disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : true;
    setDisableFocus(disable);
  }, [canSafelyFocus, trapping]);
  let handleFocusIn = (event) => {
    let containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);
    trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus || event.target instanceof Element && event.target.matches(`${portal.selector} *`) || canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target) && focusFirstFocusableNode(focusTrapWrapper.current);
  }, handleTab = (event) => {
    if (trapping === false || !focusTrapWrapper.current)
      return;
    let firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current), lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);
    event.target === lastFocusableNode && !event.shiftKey && (event.preventDefault(), focusFirstKeyboardFocusableNode(focusTrapWrapper.current)), event.target === firstFocusableNode && event.shiftKey && (event.preventDefault(), focusLastKeyboardFocusableNode(focusTrapWrapper.current));
  };
  return /* @__PURE__ */ import_react218.default.createElement(Focus, {
    disabled: disableFocus,
    root: focusTrapWrapper.current
  }, /* @__PURE__ */ import_react218.default.createElement("div", {
    ref: focusTrapWrapper
  }, /* @__PURE__ */ import_react218.default.createElement(EventListener, {
    event: "focusin",
    handler: handleFocusIn
  }), /* @__PURE__ */ import_react218.default.createElement(KeypressListener, {
    keyCode: Key.Tab,
    keyEvent: "keydown",
    handler: handleTab
  }), children));
}
var import_react218;
var init_TrapFocus = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TrapFocus/TrapFocus.js"() {
    import_react218 = __toESM(require_react());
    init_types();
    init_focus();
    init_shared();
    init_hooks12();
    init_Focus();
    init_EventListener();
    init_KeypressListener();
  }
});
function Dialog({
  instant,
  labelledBy,
  children,
  limitHeight,
  size: size2,
  onClose,
  onExited,
  onEntered,
  setClosing,
  hasToasts,
  ...props
}) {
  let theme = useTheme(), containerNode = (0, import_react219.useRef)(null), frameContext = (0, import_react219.useContext)(FrameContext), toastMessages;
  frameContext && (toastMessages = frameContext.toastMessages);
  let classes = classNames(styles77.Modal, size2 && styles77[variationName("size", size2)], limitHeight && styles77.limitHeight), TransitionChild = instant ? Transition_default : FadeUp;
  (0, import_react219.useEffect)(() => {
    containerNode.current && !containerNode.current.contains(document.activeElement) && focusFirstFocusableNode(containerNode.current);
  }, []);
  let handleKeyDown5 = () => {
    setClosing && setClosing(true);
  }, handleKeyUp = () => {
    setClosing && setClosing(false), onClose();
  }, ariaLiveAnnouncements = /* @__PURE__ */ import_react219.default.createElement("div", {
    "aria-live": "assertive"
  }, toastMessages ? toastMessages.map((toastMessage) => /* @__PURE__ */ import_react219.default.createElement(Text, {
    visuallyHidden: true,
    as: "p",
    key: toastMessage.id
  }, toastMessage.content)) : null);
  return /* @__PURE__ */ import_react219.default.createElement(TransitionChild, Object.assign({}, props, {
    nodeRef: containerNode,
    mountOnEnter: true,
    unmountOnExit: true,
    timeout: parseInt(theme.motion["motion-duration-200"], 10),
    onEntered,
    onExited
  }), /* @__PURE__ */ import_react219.default.createElement("div", {
    className: styles77.Container,
    "data-polaris-layer": true,
    "data-polaris-overlay": true,
    ref: containerNode
  }, /* @__PURE__ */ import_react219.default.createElement(TrapFocus, null, /* @__PURE__ */ import_react219.default.createElement("div", {
    role: "dialog",
    "aria-modal": true,
    "aria-label": labelledBy,
    "aria-labelledby": labelledBy,
    tabIndex: -1,
    className: styles77.Dialog
  }, /* @__PURE__ */ import_react219.default.createElement("div", {
    className: classes
  }, /* @__PURE__ */ import_react219.default.createElement(KeypressListener, {
    keyCode: Key.Escape,
    keyEvent: "keydown",
    handler: handleKeyDown5
  }), /* @__PURE__ */ import_react219.default.createElement(KeypressListener, {
    keyCode: Key.Escape,
    handler: handleKeyUp
  }), children), ariaLiveAnnouncements))));
}
function FadeUp({
  children,
  ...props
}) {
  return /* @__PURE__ */ import_react219.default.createElement(CSSTransition_default, Object.assign({}, props, {
    classNames: fadeUpClasses
  }), children);
}
var import_react219;
var fadeUpClasses;
var init_Dialog = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/components/Dialog/Dialog.js"() {
    import_react219 = __toESM(require_react());
    init_esm4();
    init_css();
    init_focus();
    init_types();
    init_use_theme();
    init_Dialog_scss();
    init_context15();
    init_TrapFocus();
    init_Text();
    init_KeypressListener();
    fadeUpClasses = {
      appear: classNames(styles77.animateFadeUp, styles77.entering),
      appearActive: classNames(styles77.animateFadeUp, styles77.entered),
      enter: classNames(styles77.animateFadeUp, styles77.entering),
      enterActive: classNames(styles77.animateFadeUp, styles77.entered),
      exit: classNames(styles77.animateFadeUp, styles77.exiting),
      exitActive: classNames(styles77.animateFadeUp, styles77.exited)
    };
  }
});
function CloseButton({
  pressed,
  onClick
}) {
  let i18n = useI18n();
  return /* @__PURE__ */ import_react220.default.createElement(Button, {
    variant: "tertiary",
    pressed,
    icon: SvgCancelMajor,
    onClick,
    accessibilityLabel: i18n.translate("Polaris.Common.close")
  });
}
var import_react220;
var init_CloseButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/components/CloseButton/CloseButton.js"() {
    import_react220 = __toESM(require_react());
    init_dist3();
    init_hooks2();
    init_Button();
  }
});
function Header3({
  id,
  children,
  closing,
  titleHidden,
  onClose
}) {
  let headerPaddingInline = "400", headerPaddingBlock = "400";
  return titleHidden || !children ? /* @__PURE__ */ import_react221.default.createElement(Box, {
    position: "absolute",
    insetInlineEnd: headerPaddingInline,
    insetBlockStart: headerPaddingBlock,
    zIndex: "1"
  }, /* @__PURE__ */ import_react221.default.createElement(CloseButton, {
    onClick: onClose
  })) : /* @__PURE__ */ import_react221.default.createElement(Box, {
    paddingBlockStart: "400",
    paddingBlockEnd: "400",
    paddingInlineStart: headerPaddingInline,
    paddingInlineEnd: headerPaddingInline,
    borderBlockEndWidth: "025",
    borderColor: "border",
    background: "bg-surface-tertiary"
  }, /* @__PURE__ */ import_react221.default.createElement(InlineGrid, {
    columns: {
      xs: "1fr auto"
    },
    gap: "400"
  }, /* @__PURE__ */ import_react221.default.createElement(InlineStack, {
    gap: "400",
    blockAlign: "center"
  }, /* @__PURE__ */ import_react221.default.createElement(Text, {
    id,
    as: "h2",
    variant: "headingMd",
    breakWord: true
  }, children)), /* @__PURE__ */ import_react221.default.createElement(CloseButton, {
    pressed: closing,
    onClick: onClose
  })));
}
var import_react221;
var init_Header3 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/components/Header/Header.js"() {
    import_react221 = __toESM(require_react());
    init_CloseButton();
    init_InlineGrid();
    init_Box();
    init_InlineStack();
    init_Text();
  }
});
function Footer({
  primaryAction,
  secondaryActions,
  children
}) {
  let primaryActionButton = primaryAction && buttonsFrom(primaryAction, {
    variant: "primary"
  }) || null, secondaryActionButtons = secondaryActions && buttonsFrom(secondaryActions) || null, actions = primaryActionButton || secondaryActionButtons ? /* @__PURE__ */ import_react222.default.createElement(InlineStack, {
    gap: "200"
  }, secondaryActionButtons, primaryActionButton) : null;
  return /* @__PURE__ */ import_react222.default.createElement(InlineStack, {
    gap: "400",
    blockAlign: "center"
  }, /* @__PURE__ */ import_react222.default.createElement(Box, {
    borderColor: "border",
    borderBlockStartWidth: "025",
    padding: "400",
    width: "100%"
  }, /* @__PURE__ */ import_react222.default.createElement(InlineStack, {
    gap: "400",
    blockAlign: "center",
    align: "space-between"
  }, /* @__PURE__ */ import_react222.default.createElement(Box, null, children), actions)));
}
var import_react222;
var init_Footer = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/components/Footer/Footer.js"() {
    import_react222 = __toESM(require_react());
    init_utils4();
    init_InlineStack();
    init_Box();
  }
});
function isRef2(ref) {
  return Object.prototype.hasOwnProperty.call(ref, "current");
}
var import_react223;
var IFRAME_LOADING_HEIGHT;
var DEFAULT_IFRAME_CONTENT_HEIGHT;
var Modal;
var init_Modal = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Modal/Modal.js"() {
    import_react223 = __toESM(require_react());
    init_esm4();
    init_focus();
    init_within_content_context();
    init_components2();
    init_Modal_scss();
    init_Section5();
    init_Dialog();
    init_Header3();
    init_Backdrop();
    init_Footer();
    init_hooks2();
    init_Box();
    init_Scrollable();
    init_Portal();
    init_InlineStack();
    init_Spinner();
    IFRAME_LOADING_HEIGHT = 200, DEFAULT_IFRAME_CONTENT_HEIGHT = 400, Modal = function({
      children,
      title,
      titleHidden = false,
      src,
      iFrameName,
      open,
      instant,
      sectioned,
      loading,
      size: size2,
      limitHeight,
      footer,
      primaryAction,
      secondaryActions,
      onScrolledToBottom,
      activator,
      activatorWrapper = "div",
      onClose,
      onIFrameLoad,
      onTransitionEnd,
      noScroll
    }) {
      let [iframeHeight, setIframeHeight] = (0, import_react223.useState)(IFRAME_LOADING_HEIGHT), [closing, setClosing] = (0, import_react223.useState)(false), headerId = (0, import_react223.useId)(), activatorRef = (0, import_react223.useRef)(null), iframeTitle = useI18n().translate("Polaris.Modal.iFrameTitle"), dialog, backdrop, handleEntered = (0, import_react223.useCallback)(() => {
        onTransitionEnd && onTransitionEnd();
      }, [onTransitionEnd]), handleExited = (0, import_react223.useCallback)(() => {
        setIframeHeight(IFRAME_LOADING_HEIGHT);
        let activatorElement = activator && isRef2(activator) ? activator && activator.current : activatorRef.current;
        activatorElement && requestAnimationFrame(() => focusFirstFocusableNode(activatorElement));
      }, [activator]), handleIFrameLoad = (0, import_react223.useCallback)((evt) => {
        let iframe = evt.target;
        if (iframe && iframe.contentWindow)
          try {
            setIframeHeight(iframe.contentWindow.document.body.scrollHeight);
          } catch {
            setIframeHeight(DEFAULT_IFRAME_CONTENT_HEIGHT);
          }
        onIFrameLoad?.(evt);
      }, [onIFrameLoad]);
      if (open) {
        let footerMarkup = !footer && !primaryAction && !secondaryActions ? null : /* @__PURE__ */ import_react223.default.createElement(Footer, {
          primaryAction,
          secondaryActions
        }, footer), content = sectioned ? wrapWithComponent(children, Section5, {
          titleHidden
        }) : children, body = loading ? /* @__PURE__ */ import_react223.default.createElement(Box, {
          padding: "400"
        }, /* @__PURE__ */ import_react223.default.createElement(InlineStack, {
          gap: "400",
          align: "center",
          blockAlign: "center"
        }, /* @__PURE__ */ import_react223.default.createElement(Spinner, null))) : content, scrollContainerMarkup = noScroll ? /* @__PURE__ */ import_react223.default.createElement(Box, {
          width: "100%",
          overflowX: "hidden",
          overflowY: "hidden"
        }, body) : /* @__PURE__ */ import_react223.default.createElement(Scrollable, {
          shadow: true,
          className: styles75.Body,
          onScrolledToBottom
        }, body), bodyMarkup = src ? /* @__PURE__ */ import_react223.default.createElement("iframe", {
          name: iFrameName,
          title: iframeTitle,
          src,
          className: styles75.IFrame,
          onLoad: handleIFrameLoad,
          style: {
            height: `${iframeHeight}px`
          }
        }) : scrollContainerMarkup;
        dialog = /* @__PURE__ */ import_react223.default.createElement(Dialog, {
          instant,
          labelledBy: headerId,
          onClose,
          onEntered: handleEntered,
          onExited: handleExited,
          size: size2,
          limitHeight,
          setClosing
        }, /* @__PURE__ */ import_react223.default.createElement(Header3, {
          titleHidden,
          id: headerId,
          closing,
          onClose
        }, title), bodyMarkup, footerMarkup), backdrop = /* @__PURE__ */ import_react223.default.createElement(Backdrop, {
          setClosing,
          onClick: onClose
        });
      }
      let animated = !instant, activatorMarkup = activator && !isRef2(activator) ? /* @__PURE__ */ import_react223.default.createElement(Box, {
        ref: activatorRef,
        as: activatorWrapper
      }, activator) : null;
      return /* @__PURE__ */ import_react223.default.createElement(WithinContentContext.Provider, {
        value: true
      }, activatorMarkup, /* @__PURE__ */ import_react223.default.createElement(Portal, {
        idPrefix: "modal"
      }, /* @__PURE__ */ import_react223.default.createElement(TransitionGroup_default, {
        appear: animated,
        enter: animated,
        exit: animated
      }, dialog), backdrop));
    };
    Modal.Section = Section5;
  }
});
function DiscardConfirmationModal({
  open,
  onDiscard,
  onCancel
}) {
  let i18n = useI18n();
  return /* @__PURE__ */ import_react224.default.createElement(Modal, {
    title: i18n.translate("Polaris.DiscardConfirmationModal.title"),
    open,
    onClose: onCancel,
    primaryAction: {
      content: i18n.translate("Polaris.DiscardConfirmationModal.primaryAction"),
      destructive: true,
      onAction: onDiscard
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.DiscardConfirmationModal.secondaryAction"),
      onAction: onCancel
    }],
    sectioned: true
  }, i18n.translate("Polaris.DiscardConfirmationModal.message"));
}
var import_react224;
var init_DiscardConfirmationModal = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/ContextualSaveBar/components/DiscardConfirmationModal/DiscardConfirmationModal.js"() {
    import_react224 = __toESM(require_react());
    init_Modal();
    init_hooks2();
  }
});
function ContextualSaveBar3({
  alignContentFlush,
  message: message2,
  saveAction,
  discardAction,
  fullWidth,
  contextControl,
  secondaryMenu
}) {
  let i18n = useI18n(), {
    logo
  } = useFrame(), {
    value: discardConfirmationModalVisible,
    toggle: toggleDiscardConfirmationModal,
    setFalse: closeDiscardConfirmationModal
  } = useToggle(false), handleDiscardAction = (0, import_react225.useCallback)(() => {
    discardAction && discardAction.onAction && discardAction.onAction(), closeDiscardConfirmationModal();
  }, [closeDiscardConfirmationModal, discardAction]), discardActionContent = discardAction && discardAction.content ? discardAction.content : i18n.translate("Polaris.ContextualSaveBar.discard"), discardActionHandler;
  discardAction && discardAction.discardConfirmationModal ? discardActionHandler = toggleDiscardConfirmationModal : discardAction && (discardActionHandler = discardAction.onAction);
  let discardConfirmationModalMarkup = discardAction && discardAction.onAction && discardAction.discardConfirmationModal && /* @__PURE__ */ import_react225.default.createElement(DiscardConfirmationModal, {
    open: discardConfirmationModalVisible,
    onCancel: toggleDiscardConfirmationModal,
    onDiscard: handleDiscardAction
  }), discardActionMarkup = discardAction && /* @__PURE__ */ import_react225.default.createElement(Button, {
    variant: "tertiary",
    size: "large",
    url: discardAction.url,
    onClick: discardActionHandler,
    loading: discardAction.loading,
    disabled: discardAction.disabled,
    accessibilityLabel: discardAction.content
  }, discardActionContent), saveActionContent = saveAction && saveAction.content ? saveAction.content : i18n.translate("Polaris.ContextualSaveBar.save"), saveActionMarkup = saveAction && /* @__PURE__ */ import_react225.default.createElement(Button, {
    variant: "primary",
    tone: "success",
    size: "large",
    url: saveAction.url,
    onClick: saveAction.onAction,
    loading: saveAction.loading,
    disabled: saveAction.disabled,
    accessibilityLabel: saveAction.content
  }, saveActionContent), width2 = getWidth(logo, 104), imageMarkup = logo && /* @__PURE__ */ import_react225.default.createElement(Image, {
    style: {
      width: width2
    },
    source: logo.contextualSaveBarSource || "",
    alt: ""
  }), logoMarkup = alignContentFlush || contextControl ? null : /* @__PURE__ */ import_react225.default.createElement("div", {
    className: styles74.LogoContainer,
    style: {
      width: width2
    }
  }, imageMarkup), contextControlMarkup = contextControl ? /* @__PURE__ */ import_react225.default.createElement("div", {
    className: styles74.ContextControl
  }, contextControl) : null, contentsClassName = classNames(styles74.Contents, fullWidth && styles74.fullWidth);
  return /* @__PURE__ */ import_react225.default.createElement(import_react225.default.Fragment, null, /* @__PURE__ */ import_react225.default.createElement("div", {
    className: styles74.ContextualSaveBar
  }, contextControlMarkup, logoMarkup, /* @__PURE__ */ import_react225.default.createElement("div", {
    className: contentsClassName
  }, /* @__PURE__ */ import_react225.default.createElement("div", {
    className: styles74.MessageContainer
  }, /* @__PURE__ */ import_react225.default.createElement(Icon, {
    source: SvgRiskMajor
  }), message2 && /* @__PURE__ */ import_react225.default.createElement(Text, {
    as: "h2",
    variant: "headingMd",
    tone: "text-inverse",
    truncate: true
  }, message2)), /* @__PURE__ */ import_react225.default.createElement("div", {
    className: styles74.ActionContainer
  }, /* @__PURE__ */ import_react225.default.createElement(LegacyStack, {
    spacing: "tight",
    wrap: false
  }, secondaryMenu, discardActionMarkup, saveActionMarkup)))), discardConfirmationModalMarkup);
}
var import_react225;
var init_ContextualSaveBar2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/ContextualSaveBar/ContextualSaveBar.js"() {
    import_react225 = __toESM(require_react());
    init_dist3();
    init_css();
    init_get_width();
    init_use_toggle();
    init_ContextualSaveBar_scss();
    init_DiscardConfirmationModal();
    init_hooks2();
    init_hooks9();
    init_Button();
    init_Image();
    init_Icon();
    init_Text();
    init_LegacyStack();
  }
});
function useDeepCompareRef(dependencies, comparator = import_react_fast_compare2.default) {
  let dependencyList = (0, import_react226.useRef)(dependencies);
  return comparator(dependencyList.current, dependencies) || (dependencyList.current = dependencies), dependencyList.current;
}
var import_react226;
var import_react_fast_compare2;
var init_use_deep_compare_ref = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-deep-compare-ref.js"() {
    import_react226 = __toESM(require_react()), import_react_fast_compare2 = __toESM(require_react_fast_compare());
  }
});
function useDeepEffect(callback, dependencies, customCompare) {
  (0, import_react227.useEffect)(callback, useDeepCompareRef(dependencies, customCompare));
}
var import_react227;
var init_use_deep_effect = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-deep-effect.js"() {
    import_react227 = __toESM(require_react());
    init_use_deep_compare_ref();
  }
});
function useDeepCallback(callback, dependencies, customCompare) {
  return (0, import_react228.useCallback)(callback, useDeepCompareRef(dependencies, customCompare));
}
var import_react228;
var init_use_deep_callback = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-deep-callback.js"() {
    import_react228 = __toESM(require_react());
    init_use_deep_compare_ref();
  }
});
var styles78;
var init_ToastManager_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/ToastManager/ToastManager.scss.js"() {
    styles78 = {
      ToastManager: "Polaris-Frame-ToastManager",
      ToastWrapper: "Polaris-Frame-ToastManager__ToastWrapper",
      "ToastWrapper-enter": "Polaris-Frame-ToastManager__ToastWrapper--enter",
      "ToastWrapper-exit": "Polaris-Frame-ToastManager__ToastWrapper--exit",
      "ToastWrapper-enter-done": "Polaris-Frame-ToastManager--toastWrapperEnterDone"
    };
  }
});
var styles79;
var init_Toast_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/Toast/Toast.scss.js"() {
    styles79 = {
      Toast: "Polaris-Frame-Toast",
      Action: "Polaris-Frame-Toast__Action",
      error: "Polaris-Frame-Toast--error",
      CloseButton: "Polaris-Frame-Toast__CloseButton",
      LeadingIcon: "Polaris-Frame-Toast__LeadingIcon"
    };
  }
});
function Toast({
  content,
  onDismiss,
  duration,
  error,
  action: action4
}) {
  (0, import_react229.useEffect)(() => {
    let timeoutDuration = duration || DEFAULT_TOAST_DURATION;
    action4 && !duration ? timeoutDuration = DEFAULT_TOAST_DURATION_WITH_ACTION : action4 && duration && duration < DEFAULT_TOAST_DURATION_WITH_ACTION && console.log("Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.");
    let timer = setTimeout(onDismiss, timeoutDuration);
    return () => {
      clearTimeout(timer);
    };
  }, [action4, duration, onDismiss]);
  let dismissMarkup = /* @__PURE__ */ import_react229.default.createElement("button", {
    type: "button",
    className: styles79.CloseButton,
    onClick: onDismiss
  }, /* @__PURE__ */ import_react229.default.createElement(Icon, {
    source: SvgCancelSmallMinor,
    tone: "inherit"
  })), actionMarkup = action4 ? /* @__PURE__ */ import_react229.default.createElement("div", {
    className: styles79.Action
  }, /* @__PURE__ */ import_react229.default.createElement(Button, {
    variant: "monochromePlain",
    removeUnderline: true,
    size: "slim",
    onClick: action4.onAction
  }, action4.content)) : null, leadingIconMarkup = error ? /* @__PURE__ */ import_react229.default.createElement("div", {
    className: styles79.LeadingIcon
  }, /* @__PURE__ */ import_react229.default.createElement(Icon, {
    source: SvgAlertMinor,
    tone: "inherit"
  })) : null, className = classNames(styles79.Toast, error && styles79.error);
  return /* @__PURE__ */ import_react229.default.createElement("div", {
    className,
    "aria-live": "assertive"
  }, /* @__PURE__ */ import_react229.default.createElement(KeypressListener, {
    keyCode: Key.Escape,
    handler: onDismiss
  }), leadingIconMarkup, /* @__PURE__ */ import_react229.default.createElement(InlineStack, {
    gap: "400",
    blockAlign: "center"
  }, /* @__PURE__ */ import_react229.default.createElement(Text, {
    as: "span",
    fontWeight: "medium"
  }, content)), actionMarkup, dismissMarkup);
}
var import_react229;
var DEFAULT_TOAST_DURATION;
var DEFAULT_TOAST_DURATION_WITH_ACTION;
var init_Toast = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/Toast/Toast.js"() {
    import_react229 = __toESM(require_react());
    init_dist3();
    init_css();
    init_types();
    init_Toast_scss();
    init_Icon();
    init_Button();
    init_KeypressListener();
    init_InlineStack();
    init_Text();
    DEFAULT_TOAST_DURATION = 5e3, DEFAULT_TOAST_DURATION_WITH_ACTION = 1e4;
  }
});
var import_react230;
var ToastManager;
var toastClasses;
var init_ToastManager = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/components/ToastManager/ToastManager.js"() {
    import_react230 = __toESM(require_react());
    init_esm4();
    init_css();
    init_use_deep_effect();
    init_use_deep_callback();
    init_ToastManager_scss();
    init_Toast();
    init_Portal();
    init_EventListener();
    ToastManager = /* @__PURE__ */ (0, import_react230.memo)(function({
      toastMessages
    }) {
      let toastNodes = [], updateToasts = useDeepCallback(() => {
        let targetInPos = 0;
        toastMessages.forEach((_, index) => {
          let currentToast = toastNodes[index];
          currentToast.current && (targetInPos += currentToast.current.clientHeight, currentToast.current.style.setProperty("--pc-toast-manager-translate-y-in", `-${targetInPos}px`), currentToast.current.style.setProperty("--pc-toast-manager-translate-y-out", `${-targetInPos + 150}px`));
        });
      }, [toastMessages, toastNodes]);
      useDeepEffect(() => {
        updateToasts();
      }, [toastMessages]);
      let toastsMarkup = toastMessages.map((toast, index) => {
        let toastNode = /* @__PURE__ */ (0, import_react230.createRef)();
        return toastNodes[index] = toastNode, /* @__PURE__ */ import_react230.default.createElement(CSSTransition_default, {
          nodeRef: toastNodes[index],
          key: toast.id,
          timeout: {
            enter: 0,
            exit: 400
          },
          classNames: toastClasses
        }, /* @__PURE__ */ import_react230.default.createElement("div", {
          ref: toastNode
        }, /* @__PURE__ */ import_react230.default.createElement(Toast, toast)));
      });
      return /* @__PURE__ */ import_react230.default.createElement(Portal, {
        idPrefix: "toast"
      }, /* @__PURE__ */ import_react230.default.createElement(EventListener, {
        event: "resize",
        handler: updateToasts
      }), /* @__PURE__ */ import_react230.default.createElement("div", {
        className: styles78.ToastManager,
        "aria-live": "assertive"
      }, /* @__PURE__ */ import_react230.default.createElement(TransitionGroup_default, {
        component: null
      }, toastsMarkup)));
    }), toastClasses = {
      enter: classNames(styles78.ToastWrapper, styles78["ToastWrapper-enter"]),
      enterDone: classNames(styles78.ToastWrapper, styles78["ToastWrapper-enter-done"]),
      exit: classNames(styles78.ToastWrapper, styles78["ToastWrapper-exit"])
    };
  }
});
function Frame(props) {
  let i18n = useI18n(), mediaQuery = useMediaQuery();
  return /* @__PURE__ */ import_react231.default.createElement(FrameInner, Object.assign({}, props, {
    i18n,
    mediaQuery
  }));
}
var import_react231;
var APP_FRAME_MAIN;
var APP_FRAME_NAV;
var APP_FRAME_TOP_BAR;
var APP_FRAME_LOADING_BAR;
var FrameInner;
var navTransitionClasses;
var init_Frame = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Frame/Frame.js"() {
    import_react231 = __toESM(require_react());
    init_dist3();
    init_esm4();
    init_css();
    init_shared();
    init_set_root_property();
    init_use_theme();
    init_Frame_scss();
    init_hooks11();
    init_Loading2();
    init_CSSAnimation();
    init_ContextualSaveBar2();
    init_ToastManager();
    init_hooks2();
    init_Backdrop();
    init_context15();
    init_EventListener();
    init_TrapFocus();
    init_Icon();
    APP_FRAME_MAIN = "AppFrameMain", APP_FRAME_NAV = "AppFrameNav", APP_FRAME_TOP_BAR = "AppFrameTopBar", APP_FRAME_LOADING_BAR = "AppFrameLoadingBar", FrameInner = class extends import_react231.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          skipFocused: false,
          globalRibbonHeight: 0,
          loadingStack: 0,
          toastMessages: [],
          showContextualSaveBar: false
        }, this.contextualSaveBar = null, this.globalRibbonContainer = null, this.navigationNode = /* @__PURE__ */ (0, import_react231.createRef)(), this.setGlobalRibbonHeight = () => {
          let {
            globalRibbonContainer
          } = this;
          globalRibbonContainer && this.setState({
            globalRibbonHeight: globalRibbonContainer.offsetHeight
          }, this.setGlobalRibbonRootProperty);
        }, this.setOffset = () => {
          let {
            offset = "0px"
          } = this.props;
          setRootProperty("--pc-frame-offset", offset);
        }, this.setGlobalRibbonRootProperty = () => {
          let {
            globalRibbonHeight
          } = this.state;
          setRootProperty("--pc-frame-global-ribbon-height", `${globalRibbonHeight}px`);
        }, this.showToast = (toast) => {
          this.setState(({
            toastMessages
          }) => ({
            toastMessages: toastMessages.find(({
              id
            }) => id === toast.id) != null ? toastMessages : [...toastMessages, toast]
          }));
        }, this.hideToast = ({
          id
        }) => {
          this.setState(({
            toastMessages
          }) => ({
            toastMessages: toastMessages.filter(({
              id: toastId
            }) => id !== toastId)
          }));
        }, this.setContextualSaveBar = (props) => {
          let {
            showContextualSaveBar
          } = this.state;
          this.contextualSaveBar = {
            ...props
          }, showContextualSaveBar === true ? this.forceUpdate() : this.setState({
            showContextualSaveBar: true
          });
        }, this.removeContextualSaveBar = () => {
          this.contextualSaveBar = null, this.setState({
            showContextualSaveBar: false
          });
        }, this.startLoading = () => {
          this.setState(({
            loadingStack
          }) => ({
            loadingStack: loadingStack + 1
          }));
        }, this.stopLoading = () => {
          this.setState(({
            loadingStack
          }) => ({
            loadingStack: Math.max(0, loadingStack - 1)
          }));
        }, this.handleResize = () => {
          this.props.globalRibbon && this.setGlobalRibbonHeight();
        }, this.handleFocus = () => {
          this.setState({
            skipFocused: true
          });
        }, this.handleBlur = () => {
          this.setState({
            skipFocused: false
          });
        }, this.handleClick = (event) => {
          let {
            skipToContentTarget
          } = this.props;
          skipToContentTarget && skipToContentTarget.current && (skipToContentTarget.current.focus(), event?.preventDefault());
        }, this.handleNavigationDismiss = () => {
          let {
            onNavigationDismiss
          } = this.props;
          onNavigationDismiss?.();
        }, this.setGlobalRibbonContainer = (node) => {
          this.globalRibbonContainer = node;
        }, this.handleNavKeydown = (event) => {
          let {
            key
          } = event, {
            mediaQuery: {
              isNavigationCollapsed
            },
            showMobileNavigation
          } = this.props;
          isNavigationCollapsed && showMobileNavigation && key === "Escape" && this.handleNavigationDismiss();
        };
      }
      componentDidMount() {
        this.handleResize(), !this.props.globalRibbon && (this.setGlobalRibbonRootProperty(), this.setOffset());
      }
      componentDidUpdate(prevProps) {
        this.props.globalRibbon !== prevProps.globalRibbon && this.setGlobalRibbonHeight(), this.setOffset();
      }
      render() {
        let {
          skipFocused,
          loadingStack,
          toastMessages,
          showContextualSaveBar
        } = this.state, {
          logo,
          children,
          navigation,
          topBar,
          globalRibbon,
          showMobileNavigation = false,
          skipToContentTarget,
          i18n,
          sidebar,
          mediaQuery: {
            isNavigationCollapsed
          }
        } = this.props, navClassName = classNames(styles71.Navigation, showMobileNavigation && styles71["Navigation-visible"]), mobileNavHidden = isNavigationCollapsed && !showMobileNavigation, mobileNavShowing = isNavigationCollapsed && showMobileNavigation, tabIndex = mobileNavShowing ? 0 : -1, mobileNavAttributes = {
          ...mobileNavShowing && {
            "aria-modal": true,
            role: "dialog"
          }
        }, navigationMarkup = navigation ? /* @__PURE__ */ import_react231.default.createElement(UseTheme, null, (theme) => /* @__PURE__ */ import_react231.default.createElement(TrapFocus, {
          trapping: mobileNavShowing
        }, /* @__PURE__ */ import_react231.default.createElement(CSSTransition_default, {
          nodeRef: this.navigationNode,
          appear: isNavigationCollapsed,
          exit: isNavigationCollapsed,
          in: showMobileNavigation,
          timeout: parseInt(theme.motion["motion-duration-300"], 10),
          classNames: navTransitionClasses
        }, /* @__PURE__ */ import_react231.default.createElement("div", Object.assign({
          key: "NavContent"
        }, mobileNavAttributes, {
          "aria-label": i18n.translate("Polaris.Frame.navigationLabel"),
          ref: this.navigationNode,
          className: navClassName,
          onKeyDown: this.handleNavKeydown,
          id: APP_FRAME_NAV,
          hidden: mobileNavHidden
        }), navigation, /* @__PURE__ */ import_react231.default.createElement("button", {
          type: "button",
          className: styles71.NavigationDismiss,
          onClick: this.handleNavigationDismiss,
          "aria-hidden": mobileNavHidden || !isNavigationCollapsed && !showMobileNavigation,
          "aria-label": i18n.translate("Polaris.Frame.Navigation.closeMobileNavigationLabel"),
          tabIndex
        }, /* @__PURE__ */ import_react231.default.createElement(Icon, {
          source: SvgMobileCancelMajor
        })))))) : null, loadingMarkup = loadingStack > 0 ? /* @__PURE__ */ import_react231.default.createElement("div", {
          className: styles71.LoadingBar,
          id: APP_FRAME_LOADING_BAR
        }, /* @__PURE__ */ import_react231.default.createElement(Loading2, null)) : null, topBarMarkup = topBar ? /* @__PURE__ */ import_react231.default.createElement("div", Object.assign({
          className: styles71.TopBar
        }, layer.props, dataPolarisTopBar.props, {
          id: APP_FRAME_TOP_BAR
        }), topBar) : null, globalRibbonMarkup = globalRibbon ? /* @__PURE__ */ import_react231.default.createElement("div", {
          className: styles71.GlobalRibbonContainer,
          ref: this.setGlobalRibbonContainer
        }, globalRibbon) : null, skipClassName = classNames(styles71.Skip, skipFocused && styles71.focused), skipTarget = skipToContentTarget?.current ? skipToContentTarget.current.id : APP_FRAME_MAIN, skipMarkup = /* @__PURE__ */ import_react231.default.createElement("div", {
          className: skipClassName
        }, /* @__PURE__ */ import_react231.default.createElement("a", {
          href: `#${skipTarget}`,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onClick: this.handleClick
        }, i18n.translate("Polaris.Frame.skipToContent"))), navigationAttributes = navigation ? {
          "data-has-navigation": true
        } : {}, frameClassName = classNames(styles71.Frame, navigation && styles71.hasNav, topBar && styles71.hasTopBar, sidebar && styles71.hasSidebar), contextualSaveBarMarkup = /* @__PURE__ */ import_react231.default.createElement(CSSAnimation, {
          in: showContextualSaveBar,
          className: styles71.ContextualSaveBar,
          type: "fade"
        }, /* @__PURE__ */ import_react231.default.createElement(ContextualSaveBar3, this.contextualSaveBar)), navigationOverlayMarkup = showMobileNavigation && isNavigationCollapsed ? /* @__PURE__ */ import_react231.default.createElement(Backdrop, {
          belowNavigation: true,
          onClick: this.handleNavigationDismiss,
          onTouchStart: this.handleNavigationDismiss
        }) : null, context = {
          logo,
          showToast: this.showToast,
          hideToast: this.hideToast,
          toastMessages,
          startLoading: this.startLoading,
          stopLoading: this.stopLoading,
          setContextualSaveBar: this.setContextualSaveBar,
          removeContextualSaveBar: this.removeContextualSaveBar
        };
        return /* @__PURE__ */ import_react231.default.createElement(FrameContext.Provider, {
          value: context
        }, /* @__PURE__ */ import_react231.default.createElement("div", Object.assign({
          className: frameClassName
        }, layer.props, navigationAttributes), skipMarkup, topBarMarkup, navigationMarkup, contextualSaveBarMarkup, loadingMarkup, navigationOverlayMarkup, /* @__PURE__ */ import_react231.default.createElement("main", {
          className: styles71.Main,
          id: APP_FRAME_MAIN,
          "data-has-global-ribbon": Boolean(globalRibbon)
        }, /* @__PURE__ */ import_react231.default.createElement("div", {
          className: styles71.Content
        }, children)), /* @__PURE__ */ import_react231.default.createElement(ToastManager, {
          toastMessages
        }), globalRibbonMarkup, /* @__PURE__ */ import_react231.default.createElement(EventListener, {
          event: "resize",
          handler: this.handleResize
        })));
      }
    }, navTransitionClasses = {
      enter: classNames(styles71["Navigation-enter"]),
      enterActive: classNames(styles71["Navigation-enterActive"]),
      enterDone: classNames(styles71["Navigation-enterActive"]),
      exit: classNames(styles71["Navigation-exit"]),
      exitActive: classNames(styles71["Navigation-exitActive"])
    };
  }
});
var styles80;
var init_FullscreenBar_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FullscreenBar/FullscreenBar.scss.js"() {
    styles80 = {
      FullscreenBar: "Polaris-FullscreenBar",
      BackAction: "Polaris-FullscreenBar__BackAction"
    };
  }
});
function FullscreenBar({
  onAction,
  children
}) {
  let i18n = useI18n(), backButtonMarkup = /* @__PURE__ */ import_react232.default.createElement(Text, {
    as: "span",
    variant: "bodyLg"
  }, i18n.translate("Polaris.FullscreenBar.back"));
  return /* @__PURE__ */ import_react232.default.createElement("div", {
    className: styles80.FullscreenBar
  }, /* @__PURE__ */ import_react232.default.createElement("button", {
    className: styles80.BackAction,
    onClick: onAction,
    "aria-label": i18n.translate("Polaris.FullscreenBar.accessibilityLabel")
  }, /* @__PURE__ */ import_react232.default.createElement(Icon, {
    source: SvgExitMajor
  }), backButtonMarkup), children);
}
var import_react232;
var init_FullscreenBar = __esm({
  "node_modules/@shopify/polaris/build/esm/components/FullscreenBar/FullscreenBar.js"() {
    import_react232 = __toESM(require_react());
    init_dist3();
    init_FullscreenBar_scss();
    init_hooks2();
    init_Text();
    init_Icon();
  }
});
var styles81;
var init_Grid_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Grid/Grid.scss.js"() {
    styles81 = {
      Grid: "Polaris-Grid"
    };
  }
});
var styles82;
var init_Cell_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Grid/components/Cell/Cell.scss.js"() {
    styles82 = {
      Cell: "Polaris-Grid-Cell",
      "Cell-1-column-xs": "Polaris-Grid-Cell--cell_1ColumnXs",
      "Cell-2-column-xs": "Polaris-Grid-Cell--cell_2ColumnXs",
      "Cell-3-column-xs": "Polaris-Grid-Cell--cell_3ColumnXs",
      "Cell-4-column-xs": "Polaris-Grid-Cell--cell_4ColumnXs",
      "Cell-5-column-xs": "Polaris-Grid-Cell--cell_5ColumnXs",
      "Cell-6-column-xs": "Polaris-Grid-Cell--cell_6ColumnXs",
      "Cell-1-column-sm": "Polaris-Grid-Cell--cell_1ColumnSm",
      "Cell-2-column-sm": "Polaris-Grid-Cell--cell_2ColumnSm",
      "Cell-3-column-sm": "Polaris-Grid-Cell--cell_3ColumnSm",
      "Cell-4-column-sm": "Polaris-Grid-Cell--cell_4ColumnSm",
      "Cell-5-column-sm": "Polaris-Grid-Cell--cell_5ColumnSm",
      "Cell-6-column-sm": "Polaris-Grid-Cell--cell_6ColumnSm",
      "Cell-1-column-md": "Polaris-Grid-Cell--cell_1ColumnMd",
      "Cell-2-column-md": "Polaris-Grid-Cell--cell_2ColumnMd",
      "Cell-3-column-md": "Polaris-Grid-Cell--cell_3ColumnMd",
      "Cell-4-column-md": "Polaris-Grid-Cell--cell_4ColumnMd",
      "Cell-5-column-md": "Polaris-Grid-Cell--cell_5ColumnMd",
      "Cell-6-column-md": "Polaris-Grid-Cell--cell_6ColumnMd",
      "Cell-1-column-lg": "Polaris-Grid-Cell--cell_1ColumnLg",
      "Cell-2-column-lg": "Polaris-Grid-Cell--cell_2ColumnLg",
      "Cell-3-column-lg": "Polaris-Grid-Cell--cell_3ColumnLg",
      "Cell-4-column-lg": "Polaris-Grid-Cell--cell_4ColumnLg",
      "Cell-5-column-lg": "Polaris-Grid-Cell--cell_5ColumnLg",
      "Cell-6-column-lg": "Polaris-Grid-Cell--cell_6ColumnLg",
      "Cell-7-column-lg": "Polaris-Grid-Cell--cell_7ColumnLg",
      "Cell-8-column-lg": "Polaris-Grid-Cell--cell_8ColumnLg",
      "Cell-9-column-lg": "Polaris-Grid-Cell--cell_9ColumnLg",
      "Cell-10-column-lg": "Polaris-Grid-Cell--cell_10ColumnLg",
      "Cell-11-column-lg": "Polaris-Grid-Cell--cell_11ColumnLg",
      "Cell-12-column-lg": "Polaris-Grid-Cell--cell_12ColumnLg",
      "Cell-1-column-xl": "Polaris-Grid-Cell--cell_1ColumnXl",
      "Cell-2-column-xl": "Polaris-Grid-Cell--cell_2ColumnXl",
      "Cell-3-column-xl": "Polaris-Grid-Cell--cell_3ColumnXl",
      "Cell-4-column-xl": "Polaris-Grid-Cell--cell_4ColumnXl",
      "Cell-5-column-xl": "Polaris-Grid-Cell--cell_5ColumnXl",
      "Cell-6-column-xl": "Polaris-Grid-Cell--cell_6ColumnXl",
      "Cell-7-column-xl": "Polaris-Grid-Cell--cell_7ColumnXl",
      "Cell-8-column-xl": "Polaris-Grid-Cell--cell_8ColumnXl",
      "Cell-9-column-xl": "Polaris-Grid-Cell--cell_9ColumnXl",
      "Cell-10-column-xl": "Polaris-Grid-Cell--cell_10ColumnXl",
      "Cell-11-column-xl": "Polaris-Grid-Cell--cell_11ColumnXl",
      "Cell-12-column-xl": "Polaris-Grid-Cell--cell_12ColumnXl"
    };
  }
});
function Cell2({
  area: gridArea,
  column,
  columnSpan,
  row,
  children
}) {
  let className = classNames(styles82.Cell, columnSpan?.xs && styles82[`Cell-${columnSpan.xs}-column-xs`], columnSpan?.sm && styles82[`Cell-${columnSpan.sm}-column-sm`], columnSpan?.md && styles82[`Cell-${columnSpan.md}-column-md`], columnSpan?.lg && styles82[`Cell-${columnSpan.lg}-column-lg`], columnSpan?.xl && styles82[`Cell-${columnSpan.xl}-column-xl`]), style = {
    gridArea,
    "--pc-column-xs": column?.xs,
    "--pc-column-sm": column?.sm,
    "--pc-column-md": column?.md,
    "--pc-column-lg": column?.lg,
    "--pc-column-xl": column?.xl,
    "--pc-row-xs": row?.xs,
    "--pc-row-sm": row?.sm,
    "--pc-row-md": row?.md,
    "--pc-row-lg": row?.lg,
    "--pc-row-xl": row?.xl
  };
  return /* @__PURE__ */ import_react233.default.createElement("div", {
    className,
    style
  }, children);
}
var import_react233;
var init_Cell2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Grid/components/Cell/Cell.js"() {
    import_react233 = __toESM(require_react());
    init_css();
    init_Cell_scss();
  }
});
function formatAreas(areas) {
  if (areas)
    return `'${areas?.join("' '")}'`;
}
var import_react234;
var Grid;
var init_Grid = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Grid/Grid.js"() {
    import_react234 = __toESM(require_react());
    init_Grid_scss();
    init_Cell2();
    Grid = function({
      gap,
      areas,
      children,
      columns
    }) {
      let style = {
        "--pc-grid-gap-xs": gap?.xs,
        "--pc-grid-gap-sm": gap?.sm,
        "--pc-grid-gap-md": gap?.md,
        "--pc-grid-gap-lg": gap?.lg,
        "--pc-grid-gap-xl": gap?.xl,
        "--pc-grid-columns-xs": columns?.xs,
        "--pc-grid-columns-sm": columns?.sm,
        "--pc-grid-columns-md": columns?.md,
        "--pc-grid-columns-lg": columns?.lg,
        "--pc-grid-columns-xl": columns?.xl,
        "--pc-grid-areas-xs": formatAreas(areas?.xs),
        "--pc-grid-areas-sm": formatAreas(areas?.sm),
        "--pc-grid-areas-md": formatAreas(areas?.md),
        "--pc-grid-areas-lg": formatAreas(areas?.lg),
        "--pc-grid-areas-xl": formatAreas(areas?.xl)
      };
      return /* @__PURE__ */ import_react234.default.createElement("div", {
        className: styles81.Grid,
        style
      }, children);
    };
    Grid.Cell = Cell2;
  }
});
var IndexFiltersMode;
var init_types3 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/types.js"() {
    (function(IndexFiltersMode2) {
      IndexFiltersMode2.Default = "DEFAULT", IndexFiltersMode2.Filtering = "FILTERING", IndexFiltersMode2.EditingColumns = "EDITING_COLUMNS";
    })(IndexFiltersMode || (IndexFiltersMode = {}));
  }
});
var styles83;
var init_IndexFilters_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/IndexFilters.scss.js"() {
    styles83 = {
      IndexFiltersWrapper: "Polaris-IndexFilters__IndexFiltersWrapper",
      IndexFilters: "Polaris-IndexFilters",
      IndexFiltersSticky: "Polaris-IndexFilters__IndexFiltersSticky",
      IndexFiltersStickyFlush: "Polaris-IndexFilters__IndexFiltersStickyFlush",
      TabsWrapper: "Polaris-IndexFilters__TabsWrapper",
      SmallScreenTabsWrapper: "Polaris-IndexFilters__SmallScreenTabsWrapper",
      TabsWrapperLoading: "Polaris-IndexFilters__TabsWrapperLoading",
      TabsLoading: "Polaris-IndexFilters__TabsLoading",
      ActionWrap: "Polaris-IndexFilters__ActionWrap",
      Spinner: "Polaris-IndexFilters__Spinner",
      ButtonWrap: "Polaris-IndexFilters__ButtonWrap"
    };
  }
});
function useIsSticky(mode2, disabled, isFlushWhenSticky) {
  let hasIOSupport = typeof window < "u" && Boolean(window.IntersectionObserver), options = {
    root: null,
    rootMargin: `${isFlushWhenSticky ? "0px" : "-56px"} 0px 0px 0px`,
    threshold: 0
  }, [indexFilteringHeight, setIndexFiltersHeight] = (0, import_react235.useState)(0), [isSticky, setIsSticky] = (0, import_react235.useState)(false), measurerRef = (0, import_react235.useRef)(null), intersectionRef = (0, import_react235.useRef)(null), handleIntersect = (entries) => {
    entries.forEach((entry2) => {
      setIsSticky(!entry2.isIntersecting);
    });
  }, observerRef = (0, import_react235.useRef)(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null);
  return (0, import_react235.useEffect)(() => {
    function computeDimensions() {
      let node = measurerRef.current;
      if (!node)
        return {
          height: 0
        };
      let height2 = node.getBoundingClientRect().height;
      setIndexFiltersHeight(height2);
    }
    computeDimensions();
    let debouncedComputeDimensions = debounce(computeDimensions, DEBOUNCE_PERIOD, {
      trailing: true
    });
    return window.addEventListener("resize", debouncedComputeDimensions), () => window.removeEventListener("resize", debouncedComputeDimensions);
  }, [measurerRef, mode2]), (0, import_react235.useEffect)(() => {
    let observer = observerRef.current;
    if (!observer)
      return;
    let node = intersectionRef.current;
    return node && observer.observe(node), () => {
      observer?.disconnect();
    };
  }, [intersectionRef]), {
    intersectionRef,
    measurerRef,
    isSticky: isSticky && !disabled,
    indexFilteringHeight
  };
}
var import_react235;
var DEBOUNCE_PERIOD;
var init_useIsSticky = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/hooks/useIsSticky/useIsSticky.js"() {
    import_react235 = __toESM(require_react());
    init_debounce();
    DEBOUNCE_PERIOD = 250;
  }
});
function useIsTouchDevice() {
  let [isTouchDevice, setIsTouchDevice] = (0, import_react236.useState)(false), handleTouchStart = (0, import_react236.useCallback)(() => setIsTouchDevice(true), []);
  return useEventListener("touchstart", handleTouchStart), isTouchDevice;
}
var import_react236;
var init_use_is_touch_device = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-is-touch-device.js"() {
    import_react236 = __toESM(require_react());
    init_use_event_listener();
  }
});
function UpdateButtons({
  primaryAction,
  cancelAction,
  viewNames,
  disabled
}) {
  let i18n = useI18n(), [savedViewName, setSavedViewName] = (0, import_react237.useState)(""), [savedViewModalOpen, setSavedViewModalOpen] = (0, import_react237.useState)(false), container = (0, import_react237.useRef)(null), isTouchDevice = useIsTouchDevice();
  (0, import_react237.useEffect)(() => {
    !container.current || isTouchDevice || savedViewModalOpen && focusFirstFocusableNode(container.current);
  }, [savedViewModalOpen, isTouchDevice]);
  async function handleClickSaveButton() {
    primaryAction?.type === "save-as" ? handleOpenModal() : await primaryAction?.onAction("");
  }
  function handleOpenModal() {
    setSavedViewModalOpen(true);
  }
  function handleCloseModal() {
    setSavedViewModalOpen(false);
  }
  function handleChange(value) {
    setSavedViewName(value);
  }
  async function handlePrimaryAction() {
    isPrimaryActionDisabled || (await primaryAction?.onAction(savedViewName), handleCloseModal());
  }
  let buttonText = (0, import_react237.useMemo)(() => {
    switch (primaryAction?.type) {
      case "save":
        return i18n.translate("Polaris.IndexFilters.UpdateButtons.save");
      case "save-as":
      default:
        return i18n.translate("Polaris.IndexFilters.UpdateButtons.saveAs");
    }
  }, [primaryAction?.type, i18n]), saveButton = /* @__PURE__ */ import_react237.default.createElement(Button, {
    size: "micro",
    onClick: handleClickSaveButton,
    disabled: primaryAction?.disabled || disabled
  }, buttonText), hasSameNameError = viewNames.some((name) => name.trim().toLowerCase() === savedViewName.trim().toLowerCase()), isPrimaryActionDisabled = hasSameNameError || !savedViewName || primaryAction?.loading || savedViewName.length > MAX_VIEW_NAME_LENGTH, cancelButtonMarkup = /* @__PURE__ */ import_react237.default.createElement(Button, {
    variant: "tertiary",
    size: "micro",
    onClick: cancelAction.onAction,
    disabled
  }, i18n.translate("Polaris.IndexFilters.UpdateButtons.cancel"));
  return primaryAction ? /* @__PURE__ */ import_react237.default.createElement(InlineStack, {
    align: "start",
    blockAlign: "center",
    gap: "100"
  }, cancelButtonMarkup, primaryAction.type === "save-as" ? /* @__PURE__ */ import_react237.default.createElement(Modal, {
    activator: /* @__PURE__ */ import_react237.default.createElement(InlineStack, null, saveButton),
    open: savedViewModalOpen,
    title: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.title"),
    onClose: handleCloseModal,
    primaryAction: {
      onAction: handlePrimaryAction,
      content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.save"),
      disabled: isPrimaryActionDisabled
    },
    secondaryActions: [{
      onAction: handleCloseModal,
      content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.cancel")
    }]
  }, /* @__PURE__ */ import_react237.default.createElement(Modal.Section, null, /* @__PURE__ */ import_react237.default.createElement(Form2, {
    onSubmit: handlePrimaryAction
  }, /* @__PURE__ */ import_react237.default.createElement(FormLayout, null, /* @__PURE__ */ import_react237.default.createElement("div", {
    ref: container
  }, /* @__PURE__ */ import_react237.default.createElement(TextField, {
    label: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.label"),
    value: savedViewName,
    onChange: handleChange,
    autoComplete: "off",
    maxLength: MAX_VIEW_NAME_LENGTH,
    showCharacterCount: true,
    error: hasSameNameError ? i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.sameName", {
      name: savedViewName
    }) : void 0
  })))))) : saveButton) : cancelButtonMarkup;
}
var import_react237;
var MAX_VIEW_NAME_LENGTH;
var init_UpdateButtons = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/UpdateButtons/UpdateButtons.js"() {
    import_react237 = __toESM(require_react());
    init_focus();
    init_use_is_touch_device();
    init_hooks2();
    init_Button();
    init_InlineStack();
    init_Modal();
    init_Form();
    init_FormLayout();
    init_TextField();
    MAX_VIEW_NAME_LENGTH = 40;
  }
});
var styles84;
var init_DirectionButton_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.scss.js"() {
    styles84 = {
      DirectionButton: "Polaris-SortButton-DirectionButton",
      "DirectionButton-active": "Polaris-SortButton-DirectionButton__DirectionButton--active",
      Label: "Polaris-SortButton-DirectionButton__Label"
    };
  }
});
function DirectionButton({
  onClick,
  active,
  children,
  direction,
  value
}) {
  let classes = classNames(styles84.DirectionButton, active && styles84["DirectionButton-active"]);
  function handleClick() {
    onClick([value]);
  }
  return /* @__PURE__ */ import_react238.default.createElement(UnstyledButton, {
    className: classes,
    onClick: handleClick
  }, /* @__PURE__ */ import_react238.default.createElement(Icon, {
    source: direction === "asc" ? SvgArrowUpMinor : SvgArrowDownMinor,
    tone: "base"
  }), /* @__PURE__ */ import_react238.default.createElement("span", {
    className: styles84.Label
  }, children));
}
var import_react238;
var init_DirectionButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js"() {
    import_react238 = __toESM(require_react());
    init_dist3();
    init_css();
    init_DirectionButton_scss();
    init_UnstyledButton();
    init_Icon();
  }
});
function SortButton({
  choices,
  selected,
  onChange,
  disabled,
  onChangeKey,
  onChangeDirection
}) {
  let i18n = useI18n(), [active, setActive] = (0, import_react239.useState)(false), [selectedValueKey, selectedDirection] = selected[0].split(" ");
  function handleClick() {
    setActive((pastActive) => !pastActive);
  }
  function handleClose() {
    setActive(false);
  }
  function handleChangeChoiceList(sel) {
    if (onChangeKey) {
      let [key] = sel[0].split(" ");
      onChangeKey(key);
    } else
      onChange(sel);
  }
  function handleChangeDirection(sel) {
    if (onChangeDirection) {
      let [, direction] = sel[0].split(" ");
      onChangeDirection(direction);
    } else
      onChange(sel);
  }
  let choiceListChoices = (0, import_react239.useMemo)(() => choices.reduce((acc, curr) => {
    let alreadyExists = acc.some((option) => option.label === curr.label), [, currentValueDirection] = curr.value.split(" "), isSameDirection = currentValueDirection === selectedDirection;
    return alreadyExists ? isSameDirection ? acc.map((option) => option.label === curr.label ? curr : option) : acc : [...acc, curr];
  }, []), [choices, selectedDirection]), selectedChoices = choices.filter((choice) => {
    let [currentKey] = choice.value.split(" ");
    return currentKey === selectedValueKey;
  }), sortButton = /* @__PURE__ */ import_react239.default.createElement(Tooltip, {
    content: i18n.translate("Polaris.IndexFilters.SortButton.tooltip"),
    preferredPosition: "above",
    hoverDelay: 400
  }, /* @__PURE__ */ import_react239.default.createElement(Button, {
    size: "slim",
    icon: SvgSortMinor,
    onClick: handleClick,
    disabled,
    accessibilityLabel: i18n.translate("Polaris.IndexFilters.SortButton.ariaLabel")
  }));
  return /* @__PURE__ */ import_react239.default.createElement(Popover2, {
    active: active && !disabled,
    activator: sortButton,
    autofocusTarget: "first-node",
    onClose: handleClose,
    preferredAlignment: "right",
    fluidContent: true
  }, /* @__PURE__ */ import_react239.default.createElement(Box, {
    minWidth: "148px",
    paddingInlineStart: "300",
    paddingInlineEnd: "300",
    paddingBlockStart: "200",
    paddingBlockEnd: "200",
    borderBlockEndWidth: "025",
    borderColor: "border-secondary"
  }, /* @__PURE__ */ import_react239.default.createElement(ChoiceList, {
    title: i18n.translate("Polaris.IndexFilters.SortButton.title"),
    choices: choiceListChoices,
    selected,
    onChange: handleChangeChoiceList
  })), /* @__PURE__ */ import_react239.default.createElement(Box, {
    paddingInlineStart: "150",
    paddingInlineEnd: "150",
    paddingBlockStart: "200",
    paddingBlockEnd: "200"
  }, /* @__PURE__ */ import_react239.default.createElement(DirectionButton, {
    direction: "asc",
    active: selectedDirection === SortButtonDirection.Asc,
    onClick: handleChangeDirection,
    value: selectedChoices?.[0]?.value
  }, selectedChoices?.[0]?.directionLabel), /* @__PURE__ */ import_react239.default.createElement(DirectionButton, {
    direction: "desc",
    active: selectedDirection === SortButtonDirection.Desc,
    onClick: handleChangeDirection,
    value: selectedChoices?.[1]?.value
  }, selectedChoices?.[1]?.directionLabel)));
}
var import_react239;
var SortButtonDirection;
var init_SortButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SortButton/SortButton.js"() {
    import_react239 = __toESM(require_react());
    init_dist3();
    init_ChoiceList();
    init_DirectionButton();
    init_hooks2();
    init_Tooltip();
    init_Button();
    init_Popover();
    init_Box();
    (function(SortButtonDirection2) {
      SortButtonDirection2.Asc = "asc", SortButtonDirection2.Desc = "desc";
    })(SortButtonDirection || (SortButtonDirection = {}));
  }
});
var styles85;
var init_Container_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/Container/Container.scss.js"() {
    styles85 = {
      Container: "Polaris-IndexFilters-Container"
    };
  }
});
var import_react240;
var Container;
var init_Container = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/Container/Container.js"() {
    import_react240 = __toESM(require_react());
    init_Container_scss();
    Container = ({
      children
    }) => /* @__PURE__ */ import_react240.default.createElement("div", {
      className: styles85.Container
    }, children);
  }
});
function usePrevious(value) {
  let ref = (0, import_react241.useRef)();
  return (0, import_react241.useEffect)(() => {
    ref.current = value;
  }, [value]), ref.current;
}
var import_react241;
var init_use_previous = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/use-previous.js"() {
    import_react241 = __toESM(require_react());
  }
});
function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
  let sumTabWidths = tabWidths.reduce((sum, width2) => sum + width2, 0), arrayOfTabIndices = tabs.map((_, index) => index), visibleTabs = [], hiddenTabs = [];
  if (containerWidth > sumTabWidths)
    visibleTabs.push(...arrayOfTabIndices);
  else {
    visibleTabs.push(selected);
    let tabListWidth = tabWidths[selected];
    arrayOfTabIndices.forEach((currentTabIndex) => {
      if (currentTabIndex !== selected) {
        let currentTabWidth = tabWidths[currentTabIndex];
        if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
          hiddenTabs.push(currentTabIndex);
          return;
        }
        visibleTabs.push(currentTabIndex), tabListWidth += currentTabWidth;
      }
    });
  }
  return {
    visibleTabs,
    hiddenTabs
  };
}
var init_utilities7 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/utilities.js"() {
  }
});
var styles86;
var init_Tabs_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/Tabs.scss.js"() {
    styles86 = {
      Outer: "Polaris-Tabs__Outer",
      Wrapper: "Polaris-Tabs__Wrapper",
      WrapperWithNewButton: "Polaris-Tabs__WrapperWithNewButton",
      ButtonWrapper: "Polaris-Tabs__ButtonWrapper",
      Tabs: "Polaris-Tabs",
      Tab: "Polaris-Tabs__Tab",
      "Tab-active": "Polaris-Tabs__Tab--active",
      "Tab-hasActions": "Polaris-Tabs__Tab--hasActions",
      "Tab-iconOnly": "Polaris-Tabs__Tab--iconOnly",
      fillSpace: "Polaris-Tabs--fillSpace",
      TabContainer: "Polaris-Tabs__TabContainer",
      fitted: "Polaris-Tabs--fitted",
      titleWithIcon: "Polaris-Tabs--titleWithIcon",
      List: "Polaris-Tabs__List",
      Item: "Polaris-Tabs__Item",
      DisclosureTab: "Polaris-Tabs__DisclosureTab",
      "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
      DisclosureActivator: "Polaris-Tabs__DisclosureActivator",
      TabsMeasurer: "Polaris-Tabs__TabsMeasurer",
      NewTab: "Polaris-Tabs__NewTab",
      ActionListWrap: "Polaris-Tabs__ActionListWrap",
      Panel: "Polaris-Tabs__Panel",
      "Panel-hidden": "Polaris-Tabs__Panel--hidden"
    };
  }
});
function DuplicateModal({
  open,
  isModalLoading,
  name,
  onClose,
  onClickPrimaryAction,
  onClickSecondaryAction,
  helpText,
  viewNames
}) {
  let i18n = useI18n(), [value, setValue] = (0, import_react242.useState)(name), container = (0, import_react242.useRef)(null), hasSameNameError = viewNames?.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = isModalLoading || hasSameNameError || !value || value.length > MAX_VIEW_NAME_LENGTH2;
  (0, import_react242.useEffect)(() => {
    container.current && open && focusFirstFocusableNode(container.current);
  }, [open]), (0, import_react242.useEffect)(() => {
    open && setValue(name.slice(0, MAX_VIEW_NAME_LENGTH2));
  }, [name, open]);
  let handleChange = (0, import_react242.useCallback)((newValue) => {
    setValue(newValue);
  }, []);
  async function handlePrimaryAction() {
    isPrimaryActionDisabled || (await onClickPrimaryAction(value), setValue(""), onClose());
  }
  function handleSecondaryAction() {
    onClickSecondaryAction?.(), setValue(name), onClose();
  }
  return /* @__PURE__ */ import_react242.default.createElement(Modal, {
    open,
    onClose,
    title: i18n.translate("Polaris.Tabs.DuplicateModal.title"),
    primaryAction: {
      content: i18n.translate("Polaris.Tabs.DuplicateModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.Tabs.DuplicateModal.cancel"),
      onAction: handleSecondaryAction
    }],
    instant: true
  }, /* @__PURE__ */ import_react242.default.createElement(Modal.Section, null, /* @__PURE__ */ import_react242.default.createElement(Form2, {
    onSubmit: handlePrimaryAction
  }, /* @__PURE__ */ import_react242.default.createElement(FormLayout, null, /* @__PURE__ */ import_react242.default.createElement("div", {
    ref: container
  }, /* @__PURE__ */ import_react242.default.createElement(TextField, {
    label: i18n.translate("Polaris.Tabs.DuplicateModal.label"),
    value,
    onChange: handleChange,
    autoComplete: "off",
    helpText,
    maxLength: MAX_VIEW_NAME_LENGTH2,
    showCharacterCount: true,
    error: hasSameNameError ? i18n.translate("Polaris.Tabs.DuplicateModal.errors.sameName", {
      name: value
    }) : void 0
  }))))));
}
var import_react242;
var MAX_VIEW_NAME_LENGTH2;
var init_DuplicateModal = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/components/Tab/components/DuplicateModal/DuplicateModal.js"() {
    import_react242 = __toESM(require_react());
    init_focus();
    init_hooks2();
    init_Modal();
    init_Form();
    init_FormLayout();
    init_TextField();
    MAX_VIEW_NAME_LENGTH2 = 40;
  }
});
function RenameModal({
  open,
  isModalLoading,
  name,
  onClose,
  onClickPrimaryAction,
  onClickSecondaryAction,
  helpText,
  viewNames
}) {
  let i18n = useI18n(), [value, setValue] = (0, import_react243.useState)(name), container = (0, import_react243.useRef)(null), hasSameNameError = viewNames?.filter((viewName) => viewName !== name).some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = isModalLoading || hasSameNameError || value === name || !value;
  (0, import_react243.useEffect)(() => {
    container.current && open && focusFirstFocusableNode(container.current);
  }, [open]), (0, import_react243.useEffect)(() => {
    open && setValue(name);
  }, [name, open]);
  let handleChange = (0, import_react243.useCallback)((newValue) => {
    setValue(newValue);
  }, []);
  async function handlePrimaryAction() {
    isPrimaryActionDisabled || (await onClickPrimaryAction(value), setValue(""), onClose());
  }
  function handleSecondaryAction() {
    onClickSecondaryAction?.(), setValue(name), onClose();
  }
  return /* @__PURE__ */ import_react243.default.createElement(Modal, {
    open,
    onClose,
    title: i18n.translate("Polaris.Tabs.RenameModal.title"),
    primaryAction: {
      content: i18n.translate("Polaris.Tabs.RenameModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.Tabs.RenameModal.cancel"),
      onAction: handleSecondaryAction
    }],
    instant: true
  }, /* @__PURE__ */ import_react243.default.createElement(Modal.Section, null, /* @__PURE__ */ import_react243.default.createElement(Form2, {
    onSubmit: handlePrimaryAction
  }, /* @__PURE__ */ import_react243.default.createElement(FormLayout, null, /* @__PURE__ */ import_react243.default.createElement("div", {
    ref: container
  }, /* @__PURE__ */ import_react243.default.createElement(TextField, {
    label: i18n.translate("Polaris.Tabs.RenameModal.label"),
    value,
    onChange: handleChange,
    autoComplete: "off",
    helpText,
    maxLength: 40,
    showCharacterCount: true,
    error: hasSameNameError ? i18n.translate("Polaris.Tabs.RenameModal.errors.sameName", {
      name: value
    }) : void 0
  }))))));
}
var import_react243;
var init_RenameModal = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/components/Tab/components/RenameModal/RenameModal.js"() {
    import_react243 = __toESM(require_react());
    init_focus();
    init_Form();
    init_FormLayout();
    init_hooks2();
    init_Modal();
    init_TextField();
  }
});
function focusPanelID(panelID) {
  let panel = document.getElementById(panelID);
  panel && panel.focus({
    preventScroll: true
  });
}
function mergeRefs2(refs) {
  return (node) => {
    for (let ref of refs)
      ref != null && (ref.current = node);
  };
}
var import_react244;
var Tab;
var init_Tab = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/components/Tab/Tab.js"() {
    import_react244 = __toESM(require_react());
    init_dist3();
    init_css();
    init_focus();
    init_breakpoints2();
    init_Tabs_scss();
    init_DuplicateModal();
    init_RenameModal();
    init_hooks2();
    init_Icon();
    init_Modal();
    init_Popover();
    init_ActionList();
    init_InlineStack();
    init_Text();
    init_UnstyledLink();
    init_UnstyledButton();
    init_Badge();
    Tab = /* @__PURE__ */ (0, import_react244.forwardRef)(({
      content,
      accessibilityLabel,
      badge,
      id,
      panelID,
      url,
      onAction,
      actions,
      disabled,
      isModalLoading,
      icon,
      siblingTabHasFocus,
      measuring,
      focused,
      selected,
      onToggleModal,
      onTogglePopover,
      viewNames,
      tabIndexOverride,
      onFocus
    }, ref) => {
      let i18n = useI18n(), [popoverActive, setPopoverActive] = (0, import_react244.useState)(false), [activeModalType, setActiveModalType] = (0, import_react244.useState)(null), {
        mdDown
      } = useBreakpoints(), wasSelected = (0, import_react244.useRef)(selected), panelFocused = (0, import_react244.useRef)(false), node = (0, import_react244.useRef)(null);
      (0, import_react244.useEffect)(() => {
        onTogglePopover(popoverActive);
      }, [popoverActive, onTogglePopover]), (0, import_react244.useEffect)(() => {
        onToggleModal(Boolean(activeModalType));
      }, [activeModalType, onToggleModal]), (0, import_react244.useEffect)(() => () => {
        onToggleModal(false), onTogglePopover(false);
      }, [onToggleModal, onTogglePopover]), (0, import_react244.useEffect)(() => {
        if (measuring)
          return;
        (focused || document.activeElement && document.activeElement.id === id) && selected && panelID != null && !panelFocused.current && (focusPanelID(panelID), panelFocused.current = true), selected && !wasSelected.current && panelID != null ? focusPanelID(panelID) : focused && node.current != null && activeModalType == null && !disabled && focusFirstFocusableNode(node.current), wasSelected.current = selected;
      }, [focused, id, content, measuring, panelID, selected, activeModalType, disabled]);
      let tabIndex;
      selected && !siblingTabHasFocus && !measuring || focused && !measuring ? tabIndex = 0 : tabIndex = -1, tabIndexOverride != null && (tabIndex = tabIndexOverride);
      let renameAction = actions?.find((action4) => action4.type === "rename"), duplicateAction = actions?.find((action4) => action4.type === "duplicate"), deleteAction = actions?.find((action4) => action4.type === "delete"), togglePopoverActive = (0, import_react244.useCallback)(() => {
        actions?.length && setPopoverActive((popoverActive2) => !popoverActive2);
      }, [actions]), handleClick = (0, import_react244.useCallback)(() => {
        disabled || (selected ? togglePopoverActive() : onAction?.());
      }, [selected, onAction, togglePopoverActive, disabled]), handleModalOpen = (type) => {
        setActiveModalType(type);
      }, handleModalClose = () => {
        setActiveModalType(null);
      }, handleSaveRenameModal = (0, import_react244.useCallback)(async (value) => {
        await renameAction?.onPrimaryAction?.(value), setTimeout(() => {
          node.current && focusFirstFocusableNode(node.current);
        }, 250);
      }, [renameAction]), handleConfirmDeleteView = (0, import_react244.useCallback)(async () => {
        await deleteAction?.onPrimaryAction?.(content), handleModalClose();
      }, [deleteAction, content]), handleSaveDuplicateModal = (0, import_react244.useCallback)(async (duplicateName) => {
        await duplicateAction?.onPrimaryAction?.(duplicateName);
      }, [duplicateAction]), actionContent = {
        rename: {
          icon: SvgInfoMinor,
          content: i18n.translate("Polaris.Tabs.Tab.rename")
        },
        duplicate: {
          icon: SvgDuplicateMinor,
          content: i18n.translate("Polaris.Tabs.Tab.duplicate")
        },
        edit: {
          icon: SvgEditMinor,
          content: i18n.translate("Polaris.Tabs.Tab.edit")
        },
        "edit-columns": {
          icon: SvgColumns3Minor,
          content: i18n.translate("Polaris.Tabs.Tab.editColumns")
        },
        delete: {
          icon: SvgDeleteMinor,
          content: i18n.translate("Polaris.Tabs.Tab.delete"),
          destructive: true
        }
      }, formattedActions = actions?.map(({
        type,
        onAction: onAction2,
        onPrimaryAction,
        ...additionalOptions
      }) => {
        let isModalActivator = !type.includes("edit");
        return {
          ...actionContent[type],
          ...additionalOptions,
          onAction: () => {
            onAction2?.(content), togglePopoverActive(), isModalActivator && handleModalOpen(type);
          }
        };
      }), handleKeyDown5 = (0, import_react244.useCallback)((event) => {
        event.key === " " && (event.preventDefault(), handleClick());
      }, [handleClick]), tabContainerClassNames = classNames(styles86.TabContainer, selected && styles86.Underline), urlIfNotDisabledOrSelected = disabled || selected ? void 0 : url, BaseComponent = urlIfNotDisabledOrSelected ? UnstyledLink : UnstyledButton, tabClassName = classNames(styles86.Tab, icon && styles86["Tab-iconOnly"], popoverActive && styles86["Tab-popoverActive"], selected && styles86["Tab-active"], selected && actions?.length && styles86["Tab-hasActions"]), badgeMarkup = badge ? /* @__PURE__ */ import_react244.default.createElement(Badge, {
        tone: selected ? void 0 : "new"
      }, badge) : null, disclosureMarkup = selected && actions?.length ? /* @__PURE__ */ import_react244.default.createElement("div", {
        className: classNames(styles86.IconWrap)
      }, /* @__PURE__ */ import_react244.default.createElement(Icon, {
        source: SvgChevronDownMinor
      })) : null, activator = /* @__PURE__ */ import_react244.default.createElement(BaseComponent, {
        id,
        className: tabClassName,
        tabIndex,
        "aria-selected": selected,
        "aria-controls": panelID,
        "aria-label": accessibilityLabel,
        role: tabIndexOverride == null ? "tab" : void 0,
        disabled,
        url: urlIfNotDisabledOrSelected,
        onFocus,
        onMouseUp: handleMouseUpByBlurring,
        onClick: handleClick,
        onKeyDown: handleKeyDown5
      }, /* @__PURE__ */ import_react244.default.createElement(InlineStack, {
        gap: "200",
        align: "center",
        blockAlign: "center",
        wrap: false
      }, /* @__PURE__ */ import_react244.default.createElement(Text, {
        as: "span",
        variant: mdDown ? "bodyLg" : "bodySm",
        fontWeight: "medium"
      }, icon ?? content), badgeMarkup), disclosureMarkup), isPlainButton = !selected || !actions?.length, renameModal = renameAction ? /* @__PURE__ */ import_react244.default.createElement(RenameModal, {
        name: content,
        open: activeModalType === "rename",
        onClose: handleModalClose,
        onClickPrimaryAction: handleSaveRenameModal,
        isModalLoading,
        viewNames
      }) : null, duplicateModal = duplicateAction ? /* @__PURE__ */ import_react244.default.createElement(DuplicateModal, {
        open: activeModalType === "duplicate",
        name: i18n.translate("Polaris.Tabs.Tab.copy", {
          name: content
        }),
        onClose: handleModalClose,
        onClickPrimaryAction: handleSaveDuplicateModal,
        isModalLoading,
        viewNames: viewNames || []
      }) : null, deleteModal = deleteAction ? /* @__PURE__ */ import_react244.default.createElement(Modal, {
        open: activeModalType === "delete",
        onClose: handleModalClose,
        primaryAction: {
          content: i18n.translate("Polaris.Tabs.Tab.deleteModal.delete"),
          onAction: handleConfirmDeleteView,
          destructive: true,
          disabled: isModalLoading
        },
        secondaryActions: [{
          content: i18n.translate("Polaris.Tabs.Tab.deleteModal.cancel"),
          onAction: handleModalClose
        }],
        title: i18n.translate("Polaris.Tabs.Tab.deleteModal.title"),
        instant: true
      }, /* @__PURE__ */ import_react244.default.createElement(Modal.Section, null, i18n.translate("Polaris.Tabs.Tab.deleteModal.description", {
        viewName: content
      }))) : null, markup = isPlainButton || disabled ? activator : /* @__PURE__ */ import_react244.default.createElement(import_react244.default.Fragment, null, /* @__PURE__ */ import_react244.default.createElement(Popover2, {
        active: popoverActive,
        activator,
        autofocusTarget: "first-node",
        onClose: togglePopoverActive
      }, /* @__PURE__ */ import_react244.default.createElement("div", {
        className: styles86.ActionListWrap
      }, /* @__PURE__ */ import_react244.default.createElement(ActionList, {
        actionRole: "menuitem",
        items: formattedActions
      }))), renameModal, duplicateModal, deleteModal);
      return icon ? markup : /* @__PURE__ */ import_react244.default.createElement("li", {
        className: tabContainerClassNames,
        ref: mergeRefs2([node, ref]),
        role: "presentation"
      }, markup);
    });
    Tab.displayName = "Tab";
  }
});
function noop11() {
}
var import_react245;
var TabMeasurer;
var init_TabMeasurer = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/components/TabMeasurer/TabMeasurer.js"() {
    import_react245 = __toESM(require_react());
    init_css();
    init_use_component_did_mount();
    init_use_event_listener();
    init_Tabs_scss();
    init_Tab();
    TabMeasurer = /* @__PURE__ */ (0, import_react245.memo)(function({
      selected,
      tabs,
      activator,
      tabToFocus,
      siblingTabHasFocus,
      handleMeasurement: handleMeasurementProp
    }) {
      let containerNode = (0, import_react245.useRef)(null), animationFrame = (0, import_react245.useRef)(null), handleMeasurement = (0, import_react245.useCallback)(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!containerNode.current)
            return;
          let containerWidth = containerNode.current.offsetWidth - 20 - 28, hiddenTabNodes = containerNode.current.children, hiddenTabWidths = Array.from(hiddenTabNodes).map((node) => Math.ceil(node.getBoundingClientRect().width) + 4), disclosureWidth = hiddenTabWidths.pop() || 0;
          handleMeasurementProp({
            containerWidth,
            disclosureWidth,
            hiddenTabWidths
          });
        });
      }, [handleMeasurementProp]);
      (0, import_react245.useEffect)(() => {
        handleMeasurement();
      }, [handleMeasurement, tabs]), useComponentDidMount(() => {
        setTimeout(handleMeasurement, 0);
      });
      let tabsMarkup = tabs.map((tab, index) => /* @__PURE__ */ import_react245.default.createElement(Tab, {
        measuring: true,
        key: `$${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        url: tab.url,
        content: tab.content,
        onTogglePopover: noop11,
        onToggleModal: noop11
      })), classname = classNames(styles86.Tabs, styles86.TabsMeasurer);
      return useEventListener("resize", handleMeasurement), /* @__PURE__ */ import_react245.default.createElement("div", {
        className: classname,
        ref: containerNode
      }, tabsMarkup, activator);
    });
  }
});
function Panel({
  hidden,
  id,
  tabID,
  children
}) {
  let className = classNames(styles86.Panel, hidden && styles86["Panel-hidden"]);
  return /* @__PURE__ */ import_react246.default.createElement("div", {
    className,
    id,
    role: "tabpanel",
    "aria-labelledby": tabID,
    tabIndex: -1
  }, children);
}
var import_react246;
var init_Panel = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/components/Panel/Panel.js"() {
    import_react246 = __toESM(require_react());
    init_css();
    init_Tabs_scss();
  }
});
function noop12() {
}
var import_react247;
var Item6;
var init_Item6 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/components/Item/Item.js"() {
    import_react247 = __toESM(require_react());
    init_css();
    init_Tabs_scss();
    init_UnstyledLink();
    Item6 = /* @__PURE__ */ (0, import_react247.memo)(function({
      id,
      focused,
      children,
      url,
      accessibilityLabel,
      onClick = noop12
    }) {
      let focusedNode = (0, import_react247.useRef)(null);
      (0, import_react247.useEffect)(() => {
        focusedNode.current && focusedNode.current instanceof HTMLElement && focused && focusedNode.current.focus();
      }, [focusedNode, focused]);
      let classname = classNames(styles86.Item), sharedProps = {
        id,
        ref: focusedNode,
        onClick,
        className: classname,
        "aria-selected": false,
        "aria-label": accessibilityLabel
      }, markup = url ? /* @__PURE__ */ import_react247.default.createElement(UnstyledLink, Object.assign({}, sharedProps, {
        url
      }), children) : /* @__PURE__ */ import_react247.default.createElement("button", Object.assign({}, sharedProps, {
        ref: focusedNode,
        type: "button"
      }), children);
      return /* @__PURE__ */ import_react247.default.createElement("li", null, markup);
    });
  }
});
function List({
  focusIndex,
  disclosureTabs,
  onClick = noop13,
  onKeyPress = noop13
}) {
  let tabs = disclosureTabs.map(({
    id,
    content,
    ...tabProps
  }, index) => /* @__PURE__ */ import_react248.default.createElement(Item6, Object.assign({
    key: id
  }, tabProps, {
    id,
    focused: index === focusIndex,
    onClick: onClick.bind(null, id)
  }), content));
  return /* @__PURE__ */ import_react248.default.createElement("ul", {
    className: styles86.List,
    onKeyDown: handleKeyDown2,
    onKeyUp: onKeyPress
  }, tabs);
}
function noop13() {
}
function handleKeyDown2(event) {
  let {
    key
  } = event;
  (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
}
var import_react248;
var init_List = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/components/List/List.js"() {
    import_react248 = __toESM(require_react());
    init_Tabs_scss();
    init_Item6();
  }
});
function CreateViewModal({
  activator,
  open,
  onClose,
  onClickPrimaryAction,
  onClickSecondaryAction,
  viewNames
}) {
  let i18n = useI18n(), [value, setValue] = (0, import_react249.useState)(""), [loading, setLoading] = (0, import_react249.useState)(false), container = (0, import_react249.useRef)(null), isTouchDevice = useIsTouchDevice(), hasSameNameError = viewNames.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase()), isPrimaryActionDisabled = !value || hasSameNameError || loading || value.length > MAX_VIEW_NAME_LENGTH3;
  (0, import_react249.useEffect)(() => {
    if (!(!container.current || isTouchDevice) && open) {
      focusFirstFocusableNode(container.current);
      let timeout2 = setTimeout(() => {
        container.current && focusFirstFocusableNode(container.current);
      }, 50);
      return () => clearTimeout(timeout2);
    }
  }, [open, isTouchDevice]);
  let handleChange = (0, import_react249.useCallback)((newValue) => {
    setValue(newValue);
  }, []);
  async function handlePrimaryAction() {
    hasSameNameError || isPrimaryActionDisabled || (setLoading(true), await onClickPrimaryAction(value), setLoading(false), setValue(""), onClose());
  }
  function handleSecondaryAction() {
    onClickSecondaryAction?.(), setValue(""), onClose();
  }
  return /* @__PURE__ */ import_react249.default.createElement(Modal, {
    activator,
    open,
    onClose,
    title: i18n.translate("Polaris.Tabs.CreateViewModal.title"),
    primaryAction: {
      content: i18n.translate("Polaris.Tabs.CreateViewModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.Tabs.CreateViewModal.cancel"),
      onAction: handleSecondaryAction
    }]
  }, /* @__PURE__ */ import_react249.default.createElement(Modal.Section, null, /* @__PURE__ */ import_react249.default.createElement(Form2, {
    onSubmit: handlePrimaryAction
  }, /* @__PURE__ */ import_react249.default.createElement(FormLayout, null, /* @__PURE__ */ import_react249.default.createElement("div", {
    ref: container
  }, /* @__PURE__ */ import_react249.default.createElement(TextField, {
    label: i18n.translate("Polaris.Tabs.CreateViewModal.label"),
    value,
    onChange: handleChange,
    autoComplete: "off",
    maxLength: MAX_VIEW_NAME_LENGTH3,
    showCharacterCount: true,
    error: hasSameNameError ? i18n.translate("Polaris.Tabs.CreateViewModal.errors.sameName", {
      name: value
    }) : void 0
  }))))));
}
var import_react249;
var MAX_VIEW_NAME_LENGTH3;
var init_CreateViewModal = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/components/CreateViewModal/CreateViewModal.js"() {
    import_react249 = __toESM(require_react());
    init_use_is_touch_device();
    init_focus();
    init_hooks2();
    init_Modal();
    init_Form();
    init_FormLayout();
    init_TextField();
    MAX_VIEW_NAME_LENGTH3 = 40;
  }
});
var import_react250;
var CREATE_NEW_VIEW_ID;
var Tabs;
var init_Tabs = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tabs/Tabs.js"() {
    import_react250 = __toESM(require_react());
    init_dist3();
    init_css();
    init_breakpoints2();
    init_use_previous();
    init_utilities7();
    init_Tabs_scss();
    init_Tab();
    init_TabMeasurer();
    init_Panel();
    init_List();
    init_CreateViewModal();
    init_hooks2();
    init_Text();
    init_Icon();
    init_UnstyledButton();
    init_Box();
    init_Popover();
    init_Tooltip();
    CREATE_NEW_VIEW_ID = "create-new-view", Tabs = ({
      tabs,
      children,
      selected,
      newViewAccessibilityLabel,
      canCreateNewView,
      disabled,
      onCreateNewView,
      onSelect,
      fitted,
      disclosureText
    }) => {
      let i18n = useI18n(), {
        mdDown
      } = useBreakpoints(), scrollRef = (0, import_react250.useRef)(null), wrapRef = (0, import_react250.useRef)(null), selectedTabRef = (0, import_react250.useRef)(null), [state, setState] = (0, import_react250.useReducer)((data, partialData) => ({
        ...data,
        ...partialData
      }), {
        disclosureWidth: 0,
        containerWidth: 1 / 0,
        tabWidths: [],
        visibleTabs: [],
        hiddenTabs: [],
        showDisclosure: false,
        tabToFocus: -1,
        isNewViewModalActive: false,
        modalSubmitted: false,
        isTabsFocused: false,
        isTabPopoverOpen: false,
        isTabModalOpen: false
      }), {
        tabToFocus,
        visibleTabs,
        hiddenTabs,
        showDisclosure,
        isNewViewModalActive,
        modalSubmitted,
        disclosureWidth,
        tabWidths,
        containerWidth,
        isTabsFocused,
        isTabModalOpen,
        isTabPopoverOpen
      } = state, prevModalOpen = usePrevious(isTabModalOpen), prevPopoverOpen = usePrevious(isTabPopoverOpen);
      (0, import_react250.useEffect)(() => {
        prevModalOpen && !isTabModalOpen ? setState({
          isTabsFocused: true,
          tabToFocus: selected
        }) : prevPopoverOpen && !isTabPopoverOpen && !isTabModalOpen && setState({
          isTabsFocused: true,
          tabToFocus: selected
        });
      }, [prevPopoverOpen, isTabPopoverOpen, prevModalOpen, isTabModalOpen, selected, tabToFocus]);
      let handleTogglePopover = (0, import_react250.useCallback)((isOpen) => setState({
        isTabPopoverOpen: isOpen
      }), []), handleToggleModal = (0, import_react250.useCallback)((isOpen) => setState({
        isTabModalOpen: isOpen
      }), []), handleCloseNewViewModal = () => {
        setState({
          isNewViewModalActive: false
        });
      }, handleSaveNewViewModal = async (value) => {
        if (!onCreateNewView)
          return false;
        let hasExecuted = await onCreateNewView?.(value);
        return hasExecuted && setState({
          modalSubmitted: true
        }), hasExecuted;
      }, handleClickNewTab = () => {
        setState({
          isNewViewModalActive: true
        });
      }, handleTabClick = (0, import_react250.useCallback)((id) => {
        let tab = tabs.find((aTab) => aTab.id === id);
        if (tab == null)
          return null;
        let selectedIndex = tabs.indexOf(tab);
        onSelect?.(selectedIndex);
      }, [tabs, onSelect]), renderTabMarkup = (0, import_react250.useCallback)((tab, index) => {
        let handleClick = () => {
          handleTabClick(tab.id), tab.onAction?.();
        }, viewNames2 = tabs.map(({
          content
        }) => content), tabPanelID = tab.panelID || `${tab.id}-panel`;
        return /* @__PURE__ */ import_react250.default.createElement(Tab, Object.assign({}, tab, {
          key: `${index}-${tab.id}`,
          id: tab.id,
          panelID: children ? tabPanelID : void 0,
          disabled: disabled || tab.disabled,
          siblingTabHasFocus: tabToFocus > -1,
          focused: index === tabToFocus,
          selected: index === selected,
          onAction: handleClick,
          accessibilityLabel: tab.accessibilityLabel,
          url: tab.url,
          content: tab.content,
          onToggleModal: handleToggleModal,
          onTogglePopover: handleTogglePopover,
          viewNames: viewNames2,
          ref: index === selected ? selectedTabRef : null
        }));
      }, [disabled, handleTabClick, tabs, children, selected, tabToFocus, handleToggleModal, handleTogglePopover]), handleFocus = (0, import_react250.useCallback)((event) => {
        let target = event.target, isItem = target.classList.contains(styles86.Item), isInNaturalDOMOrder = target.closest("[data-tabs-focus-catchment]") || isItem;
        target.classList.contains(styles86.DisclosureActivator) || !isInNaturalDOMOrder || setState({
          isTabsFocused: true
        });
      }, []), handleBlur = (0, import_react250.useCallback)((event) => {
        let target = event.target, relatedTarget = event.relatedTarget, isInNaturalDOMOrder = relatedTarget?.closest?.(`.${styles86.Tabs}`), targetIsATab = target?.classList?.contains?.(styles86.Tab), focusReceiverIsAnItem = relatedTarget?.classList.contains(styles86.Item);
        if (!relatedTarget && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
          setState({
            tabToFocus: -1
          });
          return;
        }
        if (!isInNaturalDOMOrder && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
          setState({
            tabToFocus: -1
          });
          return;
        }
        setState({
          isTabsFocused: false
        });
      }, [isTabModalOpen]), handleKeyDown5 = (event) => {
        if (isTabPopoverOpen || isTabModalOpen || isNewViewModalActive)
          return;
        let {
          key
        } = event;
        (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
      };
      (0, import_react250.useEffect)(() => {
        let {
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        } = getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
        setState({
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        });
      }, [containerWidth, disclosureWidth, tabs, selected, tabWidths, setState]);
      let moveToSelectedTab = (0, import_react250.useCallback)(() => {
        let activeButton = selectedTabRef.current?.querySelector(`.${styles86["Tab-active"]}`);
        activeButton && moveToActiveTab(activeButton.offsetLeft);
      }, []);
      (0, import_react250.useEffect)(() => {
        mdDown && moveToSelectedTab();
      }, [moveToSelectedTab, selected, mdDown]), (0, import_react250.useEffect)(() => {
        isTabsFocused && !showDisclosure && setState({
          tabToFocus: selected
        });
      }, [isTabsFocused, selected, setState, showDisclosure]);
      let handleKeyPress = (event) => {
        let {
          showDisclosure: showDisclosure2,
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2,
          tabToFocus: tabToFocus2,
          isNewViewModalActive: isNewViewModalActive2
        } = state;
        if (isTabModalOpen || isTabPopoverOpen || isNewViewModalActive2)
          return;
        let key = event.key, tabsArrayInOrder = showDisclosure2 || mdDown ? visibleTabs2.concat(hiddenTabs2) : [...visibleTabs2], newFocus = tabsArrayInOrder.indexOf(tabToFocus2);
        key === "ArrowRight" && (newFocus += 1, newFocus === tabsArrayInOrder.length && (newFocus = 0)), key === "ArrowLeft" && (newFocus === -1 || newFocus === 0 ? newFocus = tabsArrayInOrder.length - 1 : newFocus -= 1);
        let buttonToFocus = tabsArrayInOrder[newFocus];
        buttonToFocus != null && setState({
          tabToFocus: buttonToFocus
        });
      }, handleDisclosureActivatorClick = () => {
        setState({
          showDisclosure: !showDisclosure,
          tabToFocus: hiddenTabs[0]
        });
      }, handleClose = () => {
        setState({
          showDisclosure: false
        });
      }, handleMeasurement = (0, import_react250.useCallback)((measurements) => {
        let {
          hiddenTabWidths: tabWidths2,
          containerWidth: containerWidth2,
          disclosureWidth: disclosureWidth2
        } = measurements, {
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2
        } = getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth2, tabWidths2, containerWidth2);
        setState({
          visibleTabs: visibleTabs2,
          hiddenTabs: hiddenTabs2,
          disclosureWidth: disclosureWidth2,
          containerWidth: containerWidth2,
          tabWidths: tabWidths2
        });
      }, [tabs, selected, setState]), handleListTabClick = (id) => {
        handleTabClick(id), handleClose(), setState({
          isTabsFocused: true
        });
      }, moveToActiveTab = (offsetLeft) => {
        setTimeout(() => {
          if (scrollRef.current && typeof scrollRef.current.scroll == "function") {
            let scrollRefOffset = wrapRef?.current?.offsetLeft || 0;
            scrollRef?.current?.scroll({
              left: offsetLeft - scrollRefOffset
            });
          }
        }, 0);
      }, createViewA11yLabel = newViewAccessibilityLabel || i18n.translate("Polaris.Tabs.newViewAccessibilityLabel"), tabsToShow = mdDown ? [...visibleTabs, ...hiddenTabs] : visibleTabs, tabsMarkup = tabsToShow.sort((tabA, tabB) => tabA - tabB).filter((tabIndex) => tabs[tabIndex]).map((tabIndex) => renderTabMarkup(tabs[tabIndex], tabIndex)), disclosureActivatorVisible = visibleTabs.length < tabs.length && !mdDown, classname = classNames(styles86.Tabs, fitted && styles86.fitted, disclosureActivatorVisible && styles86.fillSpace), wrapperClassNames = classNames(styles86.Wrapper, canCreateNewView && styles86.WrapperWithNewButton), disclosureTabClassName = classNames(styles86.DisclosureTab, disclosureActivatorVisible && styles86["DisclosureTab-visible"]), disclosureButtonClassName = classNames(styles86.DisclosureActivator), disclosureButtonContent = /* @__PURE__ */ import_react250.default.createElement(import_react250.default.Fragment, null, /* @__PURE__ */ import_react250.default.createElement(Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel")), /* @__PURE__ */ import_react250.default.createElement("div", {
        className: classNames(styles86.IconWrap, disclosureActivatorVisible && showDisclosure && styles86["IconWrap-open"])
      }, /* @__PURE__ */ import_react250.default.createElement(Icon, {
        source: SvgChevronDownMinor,
        tone: "subdued"
      }))), activator = /* @__PURE__ */ import_react250.default.createElement(UnstyledButton, {
        type: "button",
        className: disclosureButtonClassName,
        onClick: handleDisclosureActivatorClick,
        "aria-label": disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel"),
        disabled
      }, disclosureButtonContent), disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]), viewNames = tabs.map(({
        content
      }) => content), tabMeasurer = /* @__PURE__ */ import_react250.default.createElement(TabMeasurer, {
        tabToFocus,
        activator,
        selected,
        tabs,
        siblingTabHasFocus: tabToFocus > -1,
        handleMeasurement
      }), newTab = /* @__PURE__ */ import_react250.default.createElement(Tab, {
        id: CREATE_NEW_VIEW_ID,
        content: createViewA11yLabel,
        actions: [],
        onAction: handleClickNewTab,
        onFocus: () => {
          modalSubmitted && setState({
            tabToFocus: selected,
            modalSubmitted: false
          });
        },
        icon: /* @__PURE__ */ import_react250.default.createElement(Icon, {
          source: SvgPlusMinor,
          accessibilityLabel: createViewA11yLabel
        }),
        disabled,
        onTogglePopover: handleTogglePopover,
        onToggleModal: handleToggleModal,
        tabIndexOverride: 0
      }), panelMarkup = children ? tabs.map((_tab, index) => selected === index ? /* @__PURE__ */ import_react250.default.createElement(Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id
      }, children) : /* @__PURE__ */ import_react250.default.createElement(Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id,
        hidden: true
      })) : null;
      return /* @__PURE__ */ import_react250.default.createElement("div", {
        className: styles86.Outer
      }, /* @__PURE__ */ import_react250.default.createElement(Box, {
        padding: {
          md: "200"
        }
      }, tabMeasurer, /* @__PURE__ */ import_react250.default.createElement("div", {
        className: wrapperClassNames,
        ref: scrollRef
      }, /* @__PURE__ */ import_react250.default.createElement("div", {
        className: styles86.ButtonWrapper,
        ref: wrapRef
      }, /* @__PURE__ */ import_react250.default.createElement("ul", {
        role: tabsMarkup.length > 0 ? "tablist" : void 0,
        className: classname,
        onFocus: handleFocus,
        onBlur: handleBlur,
        onKeyDown: handleKeyDown5,
        onKeyUp: handleKeyPress,
        "data-tabs-focus-catchment": true
      }, tabsMarkup, mdDown || tabsToShow.length === 0 ? null : /* @__PURE__ */ import_react250.default.createElement("li", {
        className: disclosureTabClassName,
        role: "presentation"
      }, /* @__PURE__ */ import_react250.default.createElement(Popover2, {
        preferredPosition: "below",
        preferredAlignment: "left",
        activator,
        active: disclosureActivatorVisible && showDisclosure,
        onClose: handleClose,
        autofocusTarget: "first-node"
      }, /* @__PURE__ */ import_react250.default.createElement(List, {
        focusIndex: hiddenTabs.indexOf(tabToFocus),
        disclosureTabs,
        onClick: handleListTabClick,
        onKeyPress: handleKeyPress
      })))), canCreateNewView && tabsToShow.length > 0 ? /* @__PURE__ */ import_react250.default.createElement("div", {
        className: styles86.NewTab
      }, /* @__PURE__ */ import_react250.default.createElement(CreateViewModal, {
        open: isNewViewModalActive,
        onClose: handleCloseNewViewModal,
        onClickPrimaryAction: handleSaveNewViewModal,
        viewNames,
        activator: disabled ? newTab : /* @__PURE__ */ import_react250.default.createElement("div", null, /* @__PURE__ */ import_react250.default.createElement(Tooltip, {
          content: i18n.translate("Polaris.Tabs.newViewTooltip"),
          preferredPosition: "above",
          hoverDelay: 400
        }, newTab))
      })) : null))), panelMarkup);
    };
  }
});
function SearchFilterButton({
  onClick,
  label,
  disabled,
  tooltipContent,
  style,
  hideFilters,
  hideQueryField
}) {
  let iconMarkup = /* @__PURE__ */ import_react251.default.createElement(InlineStack, {
    gap: "0"
  }, hideQueryField ? null : /* @__PURE__ */ import_react251.default.createElement(Icon, {
    source: SvgSearchMinor,
    tone: "base"
  }), hideFilters ? null : /* @__PURE__ */ import_react251.default.createElement(Icon, {
    source: SvgFilterMinor,
    tone: "base"
  })), activator = /* @__PURE__ */ import_react251.default.createElement("div", {
    style
  }, /* @__PURE__ */ import_react251.default.createElement(Button, {
    size: "slim",
    onClick,
    disabled,
    icon: iconMarkup,
    accessibilityLabel: label
  })), content = /* @__PURE__ */ import_react251.default.createElement(Text, {
    as: "span",
    variant: "bodyMd",
    alignment: "center"
  }, tooltipContent);
  return /* @__PURE__ */ import_react251.default.createElement(Tooltip, {
    content,
    preferredPosition: "above",
    hoverDelay: 400
  }, activator);
}
var import_react251;
var init_SearchFilterButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SearchFilterButton/SearchFilterButton.js"() {
    import_react251 = __toESM(require_react());
    init_dist3();
    init_Tooltip();
    init_Button();
    init_Text();
    init_InlineStack();
    init_Icon();
  }
});
function EditColumnsButton({
  onClick,
  disabled
}) {
  let i18n = useI18n(), tooltipContent = /* @__PURE__ */ import_react252.default.createElement(Text, {
    as: "span",
    variant: "bodyMd",
    alignment: "center"
  }, i18n.translate("Polaris.IndexFilters.EditColumnsButton.tooltip"));
  return /* @__PURE__ */ import_react252.default.createElement(Tooltip, {
    content: tooltipContent,
    preferredPosition: "above",
    hoverDelay: 400
  }, /* @__PURE__ */ import_react252.default.createElement(Button, {
    size: "slim",
    onClick,
    disabled,
    icon: SvgColumns3Minor,
    accessibilityLabel: i18n.translate("Polaris.IndexFilters.EditColumnsButton.accessibilityLabel")
  }));
}
var import_react252;
var init_EditColumnsButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/EditColumnsButton/EditColumnsButton.js"() {
    import_react252 = __toESM(require_react());
    init_dist3();
    init_hooks2();
    init_Text();
    init_Tooltip();
    init_Button();
  }
});
function IndexFilters({
  tabs,
  selected,
  onSelect,
  onSort,
  onSortKeyChange,
  onSortDirectionChange,
  onAddFilterClick,
  sortOptions,
  sortSelected,
  queryValue = "",
  queryPlaceholder,
  primaryAction,
  cancelAction,
  filters,
  appliedFilters,
  onClearAll,
  onQueryChange,
  onQueryFocus,
  onQueryClear,
  onEditStart,
  disabled,
  disableQueryField,
  hideFilters,
  loading,
  mode: mode2,
  setMode,
  disableStickyMode,
  isFlushWhenSticky = false,
  canCreateNewView = true,
  onCreateNewView,
  filteringAccessibilityLabel,
  filteringAccessibilityTooltip,
  hideQueryField,
  closeOnChildOverlayClick,
  disableKeyboardShortcuts,
  showEditColumnsButton
}) {
  let i18n = useI18n(), {
    mdDown
  } = useBreakpoints(), defaultRef = (0, import_react253.useRef)(null), filteringRef = (0, import_react253.useRef)(null), {
    value: filtersFocused,
    setFalse: setFiltersUnFocused,
    setTrue: setFiltersFocused
  } = useToggle(mode2 === IndexFiltersMode.Filtering);
  useOnValueChange(mode2, (newMode) => {
    newMode === IndexFiltersMode.Filtering ? setFiltersFocused() : setFiltersUnFocused();
  }), useEventListener("keydown", (event) => {
    if (disableKeyboardShortcuts)
      return;
    let {
      key
    } = event, tag = document?.activeElement?.tagName;
    if (mode2 !== IndexFiltersMode.Default && event.key === "Escape" && onPressEscape(), key === "f" && mode2 === IndexFiltersMode.Default) {
      if (tag && DEFAULT_IGNORED_TAGS.includes(tag))
        return;
      onPressF(), event.preventDefault();
    }
  });
  let {
    intersectionRef,
    measurerRef,
    indexFilteringHeight,
    isSticky
  } = useIsSticky(mode2, Boolean(disableStickyMode), isFlushWhenSticky), viewNames = tabs.map(({
    content
  }) => content), handleChangeSortButton = (0, import_react253.useCallback)((value) => {
    onSort?.(value);
  }, [onSort]), handleChangeSearch = (0, import_react253.useCallback)((value) => {
    onQueryChange(value);
  }, [onQueryChange]), onExecutedPrimaryAction = ((action4, afterEffect) => (0, import_react253.useCallback)(async (name) => {
    await action4?.(name) && (setMode(IndexFiltersMode.Default), afterEffect?.());
  }, [action4, afterEffect]))(primaryAction?.onAction), onExecutedCancelAction = (0, import_react253.useCallback)(() => {
    cancelAction.onAction?.(), setMode(IndexFiltersMode.Default);
  }, [cancelAction, setMode]), enhancedPrimaryAction = (0, import_react253.useMemo)(() => primaryAction ? {
    ...primaryAction,
    onAction: onExecutedPrimaryAction
  } : void 0, [onExecutedPrimaryAction, primaryAction]), enhancedCancelAction = (0, import_react253.useMemo)(() => ({
    ...cancelAction,
    onAction: onExecutedCancelAction
  }), [cancelAction, onExecutedCancelAction]), beginEdit = (0, import_react253.useCallback)((mode3) => {
    setMode(mode3), onEditStart?.(mode3);
  }, [onEditStart, setMode]), updateButtonsMarkup = (0, import_react253.useMemo)(() => /* @__PURE__ */ import_react253.default.createElement(UpdateButtons, {
    primaryAction: enhancedPrimaryAction,
    cancelAction: enhancedCancelAction,
    viewNames,
    disabled
  }), [enhancedPrimaryAction, enhancedCancelAction, disabled, viewNames]), sortMarkup = (0, import_react253.useMemo)(() => sortOptions?.length ? /* @__PURE__ */ import_react253.default.createElement(SortButton, {
    choices: sortOptions,
    selected: sortSelected,
    onChange: handleChangeSortButton,
    onChangeKey: onSortKeyChange,
    onChangeDirection: onSortDirectionChange,
    disabled
  }) : null, [handleChangeSortButton, onSortDirectionChange, onSortKeyChange, sortOptions, sortSelected, disabled]);
  function handleClickEditColumnsButon() {
    beginEdit(IndexFiltersMode.EditingColumns);
  }
  let editColumnsMarkup = showEditColumnsButton ? /* @__PURE__ */ import_react253.default.createElement(EditColumnsButton, {
    onClick: handleClickEditColumnsButon,
    disabled
  }) : null, isActionLoading = primaryAction?.loading || cancelAction?.loading;
  function handleClickFilterButton() {
    beginEdit(IndexFiltersMode.Filtering);
  }
  let searchFilterTooltipLabelId = disableKeyboardShortcuts ? "Polaris.IndexFilters.searchFilterTooltip" : "Polaris.IndexFilters.searchFilterTooltipWithShortcut", searchFilterTooltip = filteringAccessibilityTooltip || i18n.translate(searchFilterTooltipLabelId), searchFilterAriaLabel = filteringAccessibilityLabel || i18n.translate("Polaris.IndexFilters.searchFilterAccessibilityLabel"), isLoading = loading || isActionLoading;
  function onPressEscape() {
    cancelAction?.onAction(), setMode(IndexFiltersMode.Default);
  }
  function handleClearSearch() {
    onQueryClear?.();
  }
  function handleQueryBlur() {
    setFiltersUnFocused();
  }
  function handleQueryFocus() {
    setFiltersFocused(), onQueryFocus?.();
  }
  function onPressF() {
    mode2 === IndexFiltersMode.Default && beginEdit(IndexFiltersMode.Filtering);
  }
  return /* @__PURE__ */ import_react253.default.createElement("div", {
    className: styles83.IndexFiltersWrapper,
    style: {
      height: indexFilteringHeight
    }
  }, /* @__PURE__ */ import_react253.default.createElement("div", {
    ref: intersectionRef
  }), /* @__PURE__ */ import_react253.default.createElement("div", {
    className: classNames(styles83.IndexFilters, isSticky && styles83.IndexFiltersSticky, isSticky && isFlushWhenSticky && styles83.IndexFiltersStickyFlush),
    ref: measurerRef
  }, /* @__PURE__ */ import_react253.default.createElement(Transition_default, {
    nodeRef: defaultRef,
    in: mode2 !== IndexFiltersMode.Filtering,
    timeout: TRANSITION_DURATION2
  }, (state) => /* @__PURE__ */ import_react253.default.createElement("div", {
    ref: defaultRef
  }, mode2 !== IndexFiltersMode.Filtering ? /* @__PURE__ */ import_react253.default.createElement(Container, null, /* @__PURE__ */ import_react253.default.createElement(InlineStack, {
    align: "start",
    blockAlign: "center",
    gap: {
      xs: "0",
      md: "200"
    },
    wrap: false
  }, /* @__PURE__ */ import_react253.default.createElement("div", {
    className: classNames(styles83.TabsWrapper, mdDown && styles83.SmallScreenTabsWrapper, isLoading && styles83.TabsWrapperLoading)
  }, /* @__PURE__ */ import_react253.default.createElement("div", {
    className: styles83.TabsInner,
    style: {
      ...defaultStyle2,
      ...transitionStyles2[state]
    }
  }, /* @__PURE__ */ import_react253.default.createElement(Tabs, {
    tabs,
    selected,
    onSelect,
    disabled: Boolean(mode2 !== IndexFiltersMode.Default || disabled),
    canCreateNewView,
    onCreateNewView
  })), isLoading && mdDown && /* @__PURE__ */ import_react253.default.createElement("div", {
    className: styles83.TabsLoading
  }, /* @__PURE__ */ import_react253.default.createElement(Spinner, {
    size: "small"
  }))), /* @__PURE__ */ import_react253.default.createElement("div", {
    className: styles83.ActionWrap
  }, isLoading && !mdDown && /* @__PURE__ */ import_react253.default.createElement(Spinner, {
    size: "small"
  }), mode2 === IndexFiltersMode.Default ? /* @__PURE__ */ import_react253.default.createElement(import_react253.default.Fragment, null, hideFilters && hideQueryField ? null : /* @__PURE__ */ import_react253.default.createElement(SearchFilterButton, {
    onClick: handleClickFilterButton,
    label: searchFilterAriaLabel,
    tooltipContent: searchFilterTooltip,
    disabled,
    hideFilters,
    hideQueryField,
    style: {
      ...defaultStyle2,
      ...transitionStyles2[state]
    }
  }), editColumnsMarkup, sortMarkup) : null, mode2 === IndexFiltersMode.EditingColumns ? updateButtonsMarkup : null))) : null)), /* @__PURE__ */ import_react253.default.createElement(Transition_default, {
    nodeRef: filteringRef,
    in: mode2 === IndexFiltersMode.Filtering,
    timeout: TRANSITION_DURATION2
  }, (state) => /* @__PURE__ */ import_react253.default.createElement("div", {
    ref: filteringRef
  }, mode2 === IndexFiltersMode.Filtering ? /* @__PURE__ */ import_react253.default.createElement(Filters, {
    queryValue,
    queryPlaceholder,
    onQueryChange: handleChangeSearch,
    onQueryClear: handleClearSearch,
    onQueryFocus: handleQueryFocus,
    onQueryBlur: handleQueryBlur,
    onAddFilterClick,
    filters,
    appliedFilters,
    onClearAll,
    disableFilters: disabled,
    hideFilters,
    hideQueryField,
    disableQueryField: disabled || disableQueryField,
    loading: loading || isActionLoading,
    focused: filtersFocused,
    mountedState: mdDown ? void 0 : state,
    borderlessQueryField: true,
    closeOnChildOverlayClick
  }, /* @__PURE__ */ import_react253.default.createElement("div", {
    className: styles83.ButtonWrap
  }, /* @__PURE__ */ import_react253.default.createElement(InlineStack, {
    gap: "200",
    align: "start",
    blockAlign: "center"
  }, /* @__PURE__ */ import_react253.default.createElement("div", {
    style: {
      ...defaultStyle2,
      ...transitionStyles2[state]
    }
  }, updateButtonsMarkup), sortMarkup))) : null))));
}
var import_react253;
var DEFAULT_IGNORED_TAGS;
var TRANSITION_DURATION2;
var defaultStyle2;
var transitionStyles2;
var init_IndexFilters = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/IndexFilters.js"() {
    import_react253 = __toESM(require_react());
    init_esm4();
    init_css();
    init_use_event_listener();
    init_use_toggle();
    init_use_on_value_change();
    init_breakpoints2();
    init_types3();
    init_IndexFilters_scss();
    init_useIsSticky();
    init_UpdateButtons();
    init_SortButton();
    init_Container();
    init_Tabs();
    init_SearchFilterButton();
    init_Filters();
    init_EditColumnsButton();
    init_hooks2();
    init_InlineStack();
    init_Spinner();
    DEFAULT_IGNORED_TAGS = ["INPUT", "SELECT", "TEXTAREA"], TRANSITION_DURATION2 = 150, defaultStyle2 = {
      transition: `opacity ${TRANSITION_DURATION2}ms var(--p-motion-ease)`,
      opacity: 0
    }, transitionStyles2 = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      },
      unmounted: {
        opacity: 0
      }
    };
  }
});
function useSetIndexFiltersMode(defaultMode = IndexFiltersMode.Default) {
  let [mode2, setMode] = (0, import_react254.useState)(defaultMode);
  return {
    mode: mode2,
    setMode
  };
}
var import_react254;
var init_useSetIndexFiltersMode = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexFilters/hooks/useSetIndexFiltersMode/useSetIndexFiltersMode.js"() {
    import_react254 = __toESM(require_react());
    init_types3();
  }
});
var styles87;
var init_IndexTable_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/IndexTable.scss.js"() {
    styles87 = {
      IndexTable: "Polaris-IndexTable",
      IndexTableWrapper: "Polaris-IndexTable__IndexTableWrapper",
      "IndexTableWrapper-scrollBarHidden": "Polaris-IndexTable__IndexTableWrapper--scrollBarHidden",
      IndexTableWrapperWithBulkActions: "Polaris-IndexTable__IndexTableWrapperWithBulkActions",
      "LoadingContainer-enter": "Polaris-IndexTable__LoadingContainer--enter",
      "LoadingContainer-enter-active": "Polaris-IndexTable--loadingContainerEnterActive",
      "LoadingContainer-exit": "Polaris-IndexTable__LoadingContainer--exit",
      "LoadingContainer-exit-active": "Polaris-IndexTable--loadingContainerExitActive",
      LoadingPanel: "Polaris-IndexTable__LoadingPanel",
      LoadingPanelRow: "Polaris-IndexTable__LoadingPanelRow",
      LoadingPanelText: "Polaris-IndexTable__LoadingPanelText",
      Table: "Polaris-IndexTable__Table",
      "Table-scrolling": "Polaris-IndexTable__Table--scrolling",
      "TableCell-first": "Polaris-IndexTable__TableCell--first",
      TableCell: "Polaris-IndexTable__TableCell",
      "TableHeading-first": "Polaris-IndexTable__TableHeading--first",
      "TableHeading-second": "Polaris-IndexTable__TableHeading--second",
      "Table-sticky": "Polaris-IndexTable__Table--sticky",
      "Table-unselectable": "Polaris-IndexTable__Table--unselectable",
      TableRow: "Polaris-IndexTable__TableRow",
      "TableRow-unclickable": "Polaris-IndexTable__TableRow--unclickable",
      toneSuccess: "Polaris-IndexTable--toneSuccess",
      "TableRow-child": "Polaris-IndexTable__TableRow--child",
      toneWarning: "Polaris-IndexTable--toneWarning",
      toneCritical: "Polaris-IndexTable--toneCritical",
      toneSubdued: "Polaris-IndexTable--toneSubdued",
      "TableRow-subheader": "Polaris-IndexTable__TableRow--subheader",
      "TableRow-selected": "Polaris-IndexTable__TableRow--selected",
      "TableRow-hovered": "Polaris-IndexTable__TableRow--hovered",
      "TableRow-disabled": "Polaris-IndexTable__TableRow--disabled",
      ZebraStriping: "Polaris-IndexTable__ZebraStriping",
      TableHeading: "Polaris-IndexTable__TableHeading",
      "TableHeading-flush": "Polaris-IndexTable__TableHeading--flush",
      "TableHeading-align-center": "Polaris-IndexTable--tableHeadingAlignCenter",
      "TableHeading-align-end": "Polaris-IndexTable--tableHeadingAlignEnd",
      "TableHeading-sortable": "Polaris-IndexTable__TableHeading--sortable",
      TableHeadingSortButton: "Polaris-IndexTable__TableHeadingSortButton",
      TableHeadingSortIcon: "Polaris-IndexTable__TableHeadingSortIcon",
      "TableHeadingSortButton-heading-align-end": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEnd",
      "TableHeadingSortButton-heading-align-end-currently-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndCurrentlySorted",
      "TableHeadingSortIcon-heading-align-end": "Polaris-IndexTable--tableHeadingSortIconHeadingAlignEnd",
      "TableHeadingSortButton-heading-align-end-previously-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndPreviouslySorted",
      "right-aligned-sort-button-slide-out": "Polaris-IndexTable--rightAlignedSortButtonSlideOut",
      "reveal-right-aligned-sort-button-icon": "Polaris-IndexTable--revealRightAlignedSortButtonIcon",
      TableHeadingUnderline: "Polaris-IndexTable__TableHeadingUnderline",
      TableHeadingTooltipUnderlinePlaceholder: "Polaris-IndexTable__TableHeadingTooltipUnderlinePlaceholder",
      "TableHeadingSortIcon-visible": "Polaris-IndexTable__TableHeadingSortIcon--visible",
      TableHeadingSortSvg: "Polaris-IndexTable__TableHeadingSortSvg",
      SortableTableHeadingWithCustomMarkup: "Polaris-IndexTable__SortableTableHeadingWithCustomMarkup",
      SortableTableHeaderWrapper: "Polaris-IndexTable__SortableTableHeaderWrapper",
      ColumnHeaderCheckboxWrapper: "Polaris-IndexTable__ColumnHeaderCheckboxWrapper",
      FirstStickyHeaderElement: "Polaris-IndexTable__FirstStickyHeaderElement",
      "TableHeading-unselectable": "Polaris-IndexTable__TableHeading--unselectable",
      "TableCell-flush": "Polaris-IndexTable__TableCell--flush",
      "Table-sticky-scrolling": "Polaris-IndexTable--tableStickyScrolling",
      "TableHeading-last": "Polaris-IndexTable__TableHeading--last",
      "Table-sticky-last": "Polaris-IndexTable--tableStickyLast",
      "Table-sortable": "Polaris-IndexTable__Table--sortable",
      StickyTable: "Polaris-IndexTable__StickyTable",
      StickyTableHeader: "Polaris-IndexTable__StickyTableHeader",
      "StickyTableHeader-isSticky": "Polaris-IndexTable__StickyTableHeader--isSticky",
      StickyTableColumnHeader: "Polaris-IndexTable__StickyTableColumnHeader",
      StickyTableHeadings: "Polaris-IndexTable__StickyTableHeadings",
      "StickyTableHeading-second": "Polaris-IndexTable__StickyTableHeading--second",
      unselectable: "Polaris-IndexTable--unselectable",
      "StickyTableHeading-second-scrolling": "Polaris-IndexTable--stickyTableHeadingSecondScrolling",
      ScrollLeft: "Polaris-IndexTable__ScrollLeft",
      ScrollRight: "Polaris-IndexTable__ScrollRight",
      "ScrollRight-onboarding": "Polaris-IndexTable__ScrollRight--onboarding",
      BulkActionsWrapper: "Polaris-IndexTable__BulkActionsWrapper",
      BulkActionsWrapperSticky: "Polaris-IndexTable__BulkActionsWrapperSticky",
      SelectAllActionsWrapper: "Polaris-IndexTable__SelectAllActionsWrapper",
      ScrollBarContainer: "Polaris-IndexTable__ScrollBarContainer",
      scrollBarContainerCondensed: "Polaris-IndexTable--scrollBarContainerCondensed",
      scrollBarContainerHidden: "Polaris-IndexTable--scrollBarContainerHidden",
      ScrollBar: "Polaris-IndexTable__ScrollBar",
      disableTextSelection: "Polaris-IndexTable--disableTextSelection",
      selectMode: "Polaris-IndexTable--selectMode",
      EmptySearchResultWrapper: "Polaris-IndexTable__EmptySearchResultWrapper",
      condensedRow: "Polaris-IndexTable--condensedRow",
      CondensedList: "Polaris-IndexTable__CondensedList",
      HeaderWrapper: "Polaris-IndexTable__HeaderWrapper",
      "StickyTable-condensed": "Polaris-IndexTable__StickyTable--condensed",
      "StickyTableHeader-condensed": "Polaris-IndexTable__StickyTableHeader--condensed",
      ScrollBarContent: "Polaris-IndexTable__ScrollBarContent"
    };
  }
});
var SELECT_ALL_ITEMS;
var SelectionType2;
var init_types4 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/index-provider/types.js"() {
    SELECT_ALL_ITEMS = "All";
    (function(SelectionType3) {
      SelectionType3.All = "all", SelectionType3.Page = "page", SelectionType3.Multi = "multi", SelectionType3.Single = "single", SelectionType3.Range = "range";
    })(SelectionType2 || (SelectionType2 = {}));
  }
});
var import_react255;
var IndexContext;
var IndexSelectionChangeContext;
var IndexRowContext;
var init_context17 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/index-provider/context.js"() {
    import_react255 = __toESM(require_react()), IndexContext = /* @__PURE__ */ (0, import_react255.createContext)(void 0), IndexSelectionChangeContext = /* @__PURE__ */ (0, import_react255.createContext)(void 0), IndexRowContext = /* @__PURE__ */ (0, import_react255.createContext)(void 0);
  }
});
function useIndexSelectionChange() {
  let onSelectionChange = (0, import_react256.useContext)(IndexSelectionChangeContext);
  if (!onSelectionChange)
    throw new Error("Missing IndexProvider context");
  return onSelectionChange;
}
function useIndexRow() {
  let indexRow = (0, import_react256.useContext)(IndexRowContext);
  if (!indexRow)
    throw new Error("Missing IndexProvider context");
  return indexRow;
}
function useIndexValue() {
  let index = (0, import_react256.useContext)(IndexContext);
  if (!index)
    throw new Error("Missing IndexProvider context");
  return index;
}
function useBulkSelectionData({
  selectedItemsCount,
  itemCount,
  hasMoreItems,
  resourceName: passedResourceName
}) {
  let i18n = useI18n(), selectable = Boolean(selectedItemsCount), selectMode = selectedItemsCount === "All" || selectedItemsCount > 0, defaultResourceName = {
    singular: i18n.translate("Polaris.IndexProvider.defaultItemSingular"),
    plural: i18n.translate("Polaris.IndexProvider.defaultItemPlural")
  }, resourceName = passedResourceName || defaultResourceName, paginatedSelectAllText = getPaginatedSelectAllText(), bulkActionsLabel = getBulkActionsLabel(), bulkActionsAccessibilityLabel = getBulkActionsAccessibilityLabel(), bulkSelectState = "indeterminate";
  return !selectedItemsCount || selectedItemsCount === 0 ? bulkSelectState = void 0 : (selectedItemsCount === SELECT_ALL_ITEMS || selectedItemsCount === itemCount) && (bulkSelectState = true), {
    paginatedSelectAllText,
    bulkActionsLabel,
    bulkActionsAccessibilityLabel,
    resourceName,
    selectMode,
    bulkSelectState,
    selectable
  };
  function getPaginatedSelectAllText() {
    if (!(!selectable || !hasMoreItems) && selectedItemsCount === SELECT_ALL_ITEMS)
      return i18n.translate("Polaris.IndexProvider.allItemsSelected", {
        itemsLength: itemCount,
        resourceNamePlural: resourceName.plural.toLocaleLowerCase()
      });
  }
  function getBulkActionsLabel() {
    let selectedItemsCountLabel = selectedItemsCount === SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount;
    return i18n.translate("Polaris.IndexProvider.selected", {
      selectedItemsCount: selectedItemsCountLabel
    });
  }
  function getBulkActionsAccessibilityLabel() {
    let totalItemsCount = itemCount, allSelected = selectedItemsCount === totalItemsCount;
    return totalItemsCount === 1 && allSelected ? i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllSingle", {
      resourceNameSingular: resourceName.singular
    }) : totalItemsCount === 1 ? i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllSingle", {
      resourceNameSingular: resourceName.singular
    }) : allSelected ? i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple", {
      itemsLength: itemCount,
      resourceNamePlural: resourceName.plural
    }) : i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllMultiple", {
      itemsLength: itemCount,
      resourceNamePlural: resourceName.plural
    });
  }
}
function useHandleBulkSelection({
  onSelectionChange = () => {
  }
}) {
  let lastSelected = (0, import_react256.useRef)(null);
  return (0, import_react256.useCallback)((selectionType, toggleType, selection, sortOrder) => {
    let prevSelected = lastSelected.current;
    if (SelectionType2.Multi && typeof sortOrder == "number" && (lastSelected.current = sortOrder), selectionType === SelectionType2.Single || selectionType === SelectionType2.Multi && (typeof prevSelected != "number" || typeof sortOrder != "number"))
      onSelectionChange(SelectionType2.Single, toggleType, selection);
    else if (selectionType === SelectionType2.Multi) {
      let min = Math.min(prevSelected, sortOrder), max = Math.max(prevSelected, sortOrder);
      onSelectionChange(selectionType, toggleType, [min, max]);
    } else
      selectionType === SelectionType2.Page || selectionType === SelectionType2.All ? onSelectionChange(selectionType, toggleType) : selectionType === SelectionType2.Range && onSelectionChange(SelectionType2.Range, toggleType, selection);
  }, [onSelectionChange]);
}
var import_react256;
var init_hooks13 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/index-provider/hooks.js"() {
    import_react256 = __toESM(require_react());
    init_types4();
    init_context17();
    init_hooks2();
  }
});
function IndexProvider({
  children,
  resourceName: passedResourceName,
  loading,
  onSelectionChange,
  selectedItemsCount = 0,
  itemCount,
  hasMoreItems,
  condensed,
  selectable: isSelectableIndex = true
}) {
  let {
    paginatedSelectAllText,
    bulkActionsLabel,
    bulkActionsAccessibilityLabel,
    resourceName,
    selectMode,
    bulkSelectState
  } = useBulkSelectionData({
    selectedItemsCount,
    itemCount,
    hasMoreItems,
    resourceName: passedResourceName
  }), handleSelectionChange = useHandleBulkSelection({
    onSelectionChange
  }), contextValue = (0, import_react257.useMemo)(() => ({
    itemCount,
    selectMode: selectMode && isSelectableIndex,
    selectable: isSelectableIndex,
    resourceName,
    loading,
    paginatedSelectAllText,
    hasMoreItems,
    bulkActionsLabel,
    bulkActionsAccessibilityLabel,
    bulkSelectState,
    selectedItemsCount,
    condensed
  }), [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]), rowContextValue = (0, import_react257.useMemo)(() => ({
    selectable: isSelectableIndex,
    selectMode: selectMode && isSelectableIndex,
    condensed
  }), [condensed, selectMode, isSelectableIndex]);
  return /* @__PURE__ */ import_react257.default.createElement(IndexContext.Provider, {
    value: contextValue
  }, /* @__PURE__ */ import_react257.default.createElement(IndexRowContext.Provider, {
    value: rowContextValue
  }, /* @__PURE__ */ import_react257.default.createElement(IndexSelectionChangeContext.Provider, {
    value: handleSelectionChange
  }, children)));
}
var import_react257;
var init_IndexProvider = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexProvider/IndexProvider.js"() {
    import_react257 = __toESM(require_react());
    init_hooks13();
    init_context17();
  }
});
var import_react258;
var Cell3;
var init_Cell3 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Cell/Cell.js"() {
    import_react258 = __toESM(require_react());
    init_css();
    init_IndexTable_scss();
    Cell3 = /* @__PURE__ */ (0, import_react258.memo)(function({
      children,
      className: customClassName,
      flush,
      colSpan,
      headers: headers2,
      scope,
      as = "td",
      id
    }) {
      let className = classNames(customClassName, styles87.TableCell, flush && styles87["TableCell-flush"]);
      return /* @__PURE__ */ import_react258.default.createElement(as, {
        id,
        colSpan,
        headers: headers2,
        scope,
        className
      }, children);
    });
  }
});
var styles88;
var init_Checkbox_scss2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Checkbox/Checkbox.scss.js"() {
    styles88 = {
      TableCellContentContainer: "Polaris-IndexTable-Checkbox__TableCellContentContainer",
      Wrapper: "Polaris-IndexTable-Checkbox__Wrapper"
    };
  }
});
var import_react259;
var RowContext;
var RowHoveredContext;
var scrollDefaultContext;
var ScrollContext;
var init_context18 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/index-table/context.js"() {
    import_react259 = __toESM(require_react()), RowContext = /* @__PURE__ */ (0, import_react259.createContext)({}), RowHoveredContext = /* @__PURE__ */ (0, import_react259.createContext)(void 0), scrollDefaultContext = {
      scrollableContainer: null,
      canScrollLeft: false,
      canScrollRight: false
    }, ScrollContext = /* @__PURE__ */ (0, import_react259.createContext)(scrollDefaultContext);
  }
});
function CheckboxWrapper({
  children
}) {
  let {
    position
  } = (0, import_react260.useContext)(RowContext), checkboxNode = (0, import_react260.useRef)(null), handleResize = (0, import_react260.useCallback)(debounce(() => {
    if (position !== 0 || !checkboxNode.current)
      return;
    let {
      width: width2
    } = checkboxNode.current.getBoundingClientRect();
    setRootProperty("--pc-checkbox-offset", `${width2}px`);
  }), [position]);
  (0, import_react260.useEffect)(() => {
    handleResize();
  }, [handleResize]), (0, import_react260.useEffect)(() => {
    if (checkboxNode.current)
      return window.addEventListener("resize", handleResize), () => {
        window.removeEventListener("resize", handleResize);
      };
  }, [handleResize]);
  let checkboxClassName = classNames(styles87.TableCell, styles87["TableCell-first"]);
  return /* @__PURE__ */ import_react260.default.createElement("td", {
    className: checkboxClassName,
    ref: checkboxNode
  }, children);
}
function noop14() {
}
var import_react260;
var Checkbox3;
var init_Checkbox2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Checkbox/Checkbox.js"() {
    import_react260 = __toESM(require_react());
    init_debounce();
    init_css();
    init_set_root_property();
    init_IndexTable_scss();
    init_Checkbox_scss2();
    init_hooks13();
    init_context18();
    init_hooks2();
    init_Checkbox();
    Checkbox3 = /* @__PURE__ */ (0, import_react260.memo)(function({
      accessibilityLabel
    }) {
      let i18n = useI18n(), {
        resourceName
      } = useIndexValue(), {
        itemId,
        selected,
        disabled,
        onInteraction
      } = (0, import_react260.useContext)(RowContext), wrapperClassName = classNames(styles88.Wrapper), label = accessibilityLabel || i18n.translate("Polaris.IndexTable.selectItem", {
        resourceName: resourceName.singular
      });
      return /* @__PURE__ */ import_react260.default.createElement(CheckboxWrapper, null, /* @__PURE__ */ import_react260.default.createElement("div", {
        className: styles88.TableCellContentContainer
      }, /* @__PURE__ */ import_react260.default.createElement("div", {
        className: wrapperClassName,
        onClick: onInteraction,
        onKeyUp: noop14
      }, /* @__PURE__ */ import_react260.default.createElement(Checkbox, {
        id: `Select-${itemId}`,
        label,
        labelHidden: true,
        checked: selected,
        disabled
      }))));
    });
  }
});
var import_react261;
var Row;
var init_Row = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Row/Row.js"() {
    import_react261 = __toESM(require_react());
    init_use_toggle();
    init_css();
    init_IndexTable_scss();
    init_hooks13();
    init_types4();
    init_Checkbox2();
    init_context18();
    Row = /* @__PURE__ */ (0, import_react261.memo)(function({
      children,
      selected,
      id,
      position,
      tone,
      disabled,
      selectionRange,
      rowType = "data",
      accessibilityLabel,
      onNavigation,
      onClick
    }) {
      let {
        selectable,
        selectMode,
        condensed
      } = useIndexRow(), onSelectionChange = useIndexSelectionChange(), {
        value: hovered,
        setTrue: setHoverIn,
        setFalse: setHoverOut
      } = useToggle(false), handleInteraction = (0, import_react261.useCallback)((event) => {
        event.stopPropagation();
        let selectionType = SelectionType2.Single;
        if ("key" in event && event.key !== " " || !onSelectionChange)
          return;
        event.nativeEvent.shiftKey ? selectionType = SelectionType2.Multi : selectionRange && (selectionType = SelectionType2.Range), onSelectionChange(selectionType, !selected, selectionRange ?? id, position);
      }, [id, onSelectionChange, selected, selectionRange, position]), contextValue = (0, import_react261.useMemo)(() => ({
        itemId: id,
        selected,
        position,
        onInteraction: handleInteraction,
        disabled
      }), [id, selected, disabled, position, handleInteraction]), primaryLinkElement = (0, import_react261.useRef)(null), isNavigating = (0, import_react261.useRef)(false), tableRowRef = (0, import_react261.useRef)(null), tableRowCallbackRef = (0, import_react261.useCallback)((node) => {
        tableRowRef.current = node;
        let el = node?.querySelector("[data-primary-link]");
        el && (primaryLinkElement.current = el);
      }, []), rowClassName = classNames(styles87.TableRow, rowType === "subheader" && styles87["TableRow-subheader"], rowType === "child" && styles87["TableRow-child"], selectable && condensed && styles87.condensedRow, selected && styles87["TableRow-selected"], hovered && !condensed && styles87["TableRow-hovered"], disabled && styles87["TableRow-disabled"], tone && styles87[variationName("tone", tone)], !selectable && !primaryLinkElement.current && styles87["TableRow-unclickable"]), handleRowClick;
      (!disabled && selectable || primaryLinkElement.current) && (handleRowClick = (event) => {
        if (rowType !== "subheader" && !(!tableRowRef.current || isNavigating.current)) {
          if (event.stopPropagation(), event.preventDefault(), onClick) {
            onClick();
            return;
          }
          if (primaryLinkElement.current && !selectMode) {
            isNavigating.current = true;
            let {
              ctrlKey,
              metaKey
            } = event.nativeEvent;
            if (onNavigation && onNavigation(id), (ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {
              isNavigating.current = false, window.open(primaryLinkElement.current.href, "_blank");
              return;
            }
            primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));
          } else
            isNavigating.current = false, handleInteraction(event);
        }
      });
      let RowWrapper = condensed ? "li" : "tr", checkboxMarkup = selectable ? /* @__PURE__ */ import_react261.default.createElement(Checkbox3, {
        accessibilityLabel
      }) : null;
      return /* @__PURE__ */ import_react261.default.createElement(RowContext.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react261.default.createElement(RowHoveredContext.Provider, {
        value: hovered
      }, /* @__PURE__ */ import_react261.default.createElement(RowWrapper, {
        key: id,
        id,
        className: rowClassName,
        onMouseEnter: setHoverIn,
        onMouseLeave: setHoverOut,
        onClick: handleRowClick,
        ref: tableRowCallbackRef
      }, checkboxMarkup, children)));
    });
  }
});
function useIsBulkActionsSticky(selectMode) {
  let hasIOSupport = typeof window < "u" && Boolean(window.IntersectionObserver), [isBulkActionsSticky, setIsSticky] = (0, import_react262.useState)(false), [bulkActionsAbsoluteOffset, setBulkActionsAbsoluteOffset] = (0, import_react262.useState)(0), [bulkActionsMaxWidth, setBulkActionsMaxWidth] = (0, import_react262.useState)(0), [bulkActionsOffsetLeft, setBulkActionsOffsetLeft] = (0, import_react262.useState)(0), bulkActionsIntersectionRef = (0, import_react262.useRef)(null), tableMeasurerRef = (0, import_react262.useRef)(null), handleIntersect = (entries) => {
    entries.forEach((entry2) => {
      setIsSticky(!entry2.isIntersecting);
    });
  }, options = {
    root: null,
    rootMargin: "-12px",
    threshold: 0
  }, observerRef = (0, import_react262.useRef)(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null), computeTableDimensions = (0, import_react262.useCallback)(() => {
    let node = tableMeasurerRef.current;
    if (!node)
      return {
        maxWidth: 0,
        offsetHeight: 0,
        offsetLeft: 0
      };
    let box = node.getBoundingClientRect(), paddingHeight = selectMode ? PADDING_IN_SELECT_MODE : 0, offsetHeight = box.height - paddingHeight, maxWidth = box.width, offsetLeft = box.left;
    setBulkActionsAbsoluteOffset(offsetHeight), setBulkActionsMaxWidth(maxWidth), setBulkActionsOffsetLeft(offsetLeft);
  }, [selectMode]);
  return (0, import_react262.useEffect)(() => {
    computeTableDimensions();
    let debouncedComputeTableHeight = debounce(computeTableDimensions, DEBOUNCE_PERIOD2, {
      trailing: true
    });
    return window.addEventListener("resize", debouncedComputeTableHeight), () => window.removeEventListener("resize", debouncedComputeTableHeight);
  }, [computeTableDimensions]), (0, import_react262.useEffect)(() => {
    let observer = observerRef.current;
    if (!observer)
      return;
    let node = bulkActionsIntersectionRef.current;
    return node && observer.observe(node), () => {
      observer?.disconnect();
    };
  }, [bulkActionsIntersectionRef]), {
    bulkActionsIntersectionRef,
    tableMeasurerRef,
    isBulkActionsSticky,
    bulkActionsAbsoluteOffset,
    bulkActionsMaxWidth,
    bulkActionsOffsetLeft,
    computeTableDimensions
  };
}
var import_react262;
var DEBOUNCE_PERIOD2;
var PADDING_IN_SELECT_MODE;
var init_use_is_bulk_actions_sticky = __esm({
  "node_modules/@shopify/polaris/build/esm/components/BulkActions/hooks/use-is-bulk-actions-sticky.js"() {
    import_react262 = __toESM(require_react());
    init_debounce();
    DEBOUNCE_PERIOD2 = 250, PADDING_IN_SELECT_MODE = 92;
  }
});
function getTableHeadingsBySelector(wrapperElement, selector) {
  return wrapperElement ? Array.from(wrapperElement.querySelectorAll(selector)) : [];
}
var init_utilities8 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/utilities/utilities.js"() {
  }
});
var styles89;
var init_ScrollContainer_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/components/ScrollContainer/ScrollContainer.scss.js"() {
    styles89 = {
      ScrollContainer: "Polaris-IndexTable-ScrollContainer"
    };
  }
});
function ScrollContainer({
  children,
  scrollableContainerRef,
  onScroll
}) {
  (0, import_react263.useEffect)(() => {
    scrollableContainerRef.current && scrollableContainerRef.current.dispatchEvent(new Event("scroll"));
  }, [scrollableContainerRef]);
  let [containerScroll, setContainerScroll] = (0, import_react263.useState)(scrollDefaultContext), handleScroll = (0, import_react263.useCallback)(debounce(() => {
    if (!scrollableContainerRef.current)
      return;
    let availableScrollAmount = scrollableContainerRef.current.scrollWidth - scrollableContainerRef.current.offsetWidth, canScrollLeft = scrollableContainerRef.current.scrollLeft > 0, canScrollRight = scrollableContainerRef.current.scrollLeft < availableScrollAmount;
    onScroll(canScrollLeft, canScrollRight), setContainerScroll({
      scrollableContainer: scrollableContainerRef.current,
      canScrollLeft,
      canScrollRight
    });
  }, 40, {
    trailing: true,
    leading: true,
    maxWait: 40
  }), [onScroll, scrollableContainerRef]);
  return /* @__PURE__ */ import_react263.default.createElement(ScrollContext.Provider, {
    value: containerScroll
  }, /* @__PURE__ */ import_react263.default.createElement("div", {
    className: styles89.ScrollContainer,
    ref: scrollableContainerRef,
    onScroll: handleScroll
  }, children));
}
var import_react263;
var init_ScrollContainer = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/components/ScrollContainer/ScrollContainer.js"() {
    import_react263 = __toESM(require_react());
    init_debounce();
    init_ScrollContainer_scss();
    init_context18();
  }
});
var styles90;
var init_SelectAllActions_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SelectAllActions/SelectAllActions.scss.js"() {
    styles90 = {
      SelectAllActions: "Polaris-SelectAllActions",
      "SelectAllActions-entering": "Polaris-SelectAllActions__SelectAllActions--entering",
      "SelectAllActions-exiting": "Polaris-SelectAllActions__SelectAllActions--exiting",
      "SelectAllActions-entered": "Polaris-SelectAllActions__SelectAllActions--entered",
      "SelectAllActions-exited": "Polaris-SelectAllActions__SelectAllActions--exited",
      PaginatedSelectAll: "Polaris-SelectAllActions__PaginatedSelectAll",
      AllAction: "Polaris-SelectAllActions__AllAction"
    };
  }
});
var styles91;
var init_CheckableButton_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/CheckableButton/CheckableButton.scss.js"() {
    styles91 = {
      CheckableButton: "Polaris-CheckableButton",
      Checkbox: "Polaris-CheckableButton__Checkbox",
      Label: "Polaris-CheckableButton__Label"
    };
  }
});
var import_react264;
var CheckableButton;
var init_CheckableButton = __esm({
  "node_modules/@shopify/polaris/build/esm/components/CheckableButton/CheckableButton.js"() {
    import_react264 = __toESM(require_react());
    init_css();
    init_CheckableButton_scss();
    init_Checkbox();
    CheckableButton = /* @__PURE__ */ (0, import_react264.forwardRef)(function({
      accessibilityLabel,
      label = "",
      onToggleAll,
      selected,
      disabled,
      ariaLive
    }, ref) {
      let checkBoxRef = (0, import_react264.useRef)(null);
      function focus() {
        checkBoxRef?.current?.focus();
      }
      (0, import_react264.useImperativeHandle)(ref, () => ({
        focus
      }));
      let className = classNames(styles91.CheckableButton);
      return /* @__PURE__ */ import_react264.default.createElement("div", {
        className,
        onClick: onToggleAll
      }, /* @__PURE__ */ import_react264.default.createElement("div", {
        className: styles91.Checkbox
      }, /* @__PURE__ */ import_react264.default.createElement(Checkbox, {
        label: accessibilityLabel,
        labelHidden: true,
        checked: selected,
        disabled,
        onChange: onToggleAll,
        ref: checkBoxRef
      })), /* @__PURE__ */ import_react264.default.createElement("span", {
        className: styles91.Label,
        "aria-live": ariaLive
      }, label));
    });
  }
});
var import_react265;
var SelectAllActions;
var init_SelectAllActions = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SelectAllActions/SelectAllActions.js"() {
    import_react265 = __toESM(require_react());
    init_esm4();
    init_css();
    init_SelectAllActions_scss();
    init_CheckableButton();
    init_UnstyledButton();
    SelectAllActions = /* @__PURE__ */ (0, import_react265.forwardRef)(function({
      accessibilityLabel,
      label,
      selected,
      selectMode,
      paginatedSelectAllText,
      paginatedSelectAllAction,
      disabled,
      onToggleAll
    }, ref) {
      let paginatedSelectAllActionMarkup = paginatedSelectAllAction ? /* @__PURE__ */ import_react265.default.createElement(UnstyledButton, {
        className: styles90.AllAction,
        onClick: paginatedSelectAllAction.onAction,
        size: "slim",
        disabled
      }, paginatedSelectAllAction.content) : null, hasTextAndAction = paginatedSelectAllText && paginatedSelectAllAction, paginatedSelectAllMarkup = paginatedSelectAllActionMarkup ? /* @__PURE__ */ import_react265.default.createElement("div", {
        className: styles90.PaginatedSelectAll
      }, paginatedSelectAllActionMarkup) : null, checkableButtonProps = {
        accessibilityLabel,
        label: hasTextAndAction ? paginatedSelectAllText : label,
        selected,
        onToggleAll,
        disabled,
        ariaLive: hasTextAndAction ? "polite" : void 0,
        ref
      };
      return /* @__PURE__ */ import_react265.default.createElement(Transition_default, {
        timeout: 0,
        in: selectMode,
        key: "markup"
      }, (status) => {
        let wrapperClasses = classNames(styles90.SelectAllActions, styles90[`SelectAllActions-${status}`]);
        return /* @__PURE__ */ import_react265.default.createElement("div", {
          className: wrapperClasses
        }, /* @__PURE__ */ import_react265.default.createElement(CheckableButton, checkableButtonProps), paginatedSelectAllMarkup);
      });
    });
  }
});
function IndexTableBase({
  headings,
  bulkActions = [],
  promotedBulkActions = [],
  children,
  emptyState,
  sort,
  paginatedSelectAllActionText,
  lastColumnSticky = false,
  sortable,
  sortDirection,
  defaultSortDirection = "descending",
  sortColumnIndex,
  onSort,
  sortToggleLabels,
  hasZebraStriping,
  ...restProps
}) {
  let theme = useTheme(), {
    loading,
    bulkSelectState,
    resourceName,
    bulkActionsAccessibilityLabel,
    selectMode,
    selectable = restProps.selectable,
    paginatedSelectAllText,
    itemCount,
    hasMoreItems,
    selectedItemsCount,
    condensed
  } = useIndexValue(), handleSelectionChange = useIndexSelectionChange(), i18n = useI18n(), {
    value: hasMoreLeftColumns,
    toggle: toggleHasMoreLeftColumns
  } = useToggle(false), tablePosition = (0, import_react266.useRef)({
    top: 0,
    left: 0
  }), tableHeadingRects = (0, import_react266.useRef)([]), scrollableContainerElement = (0, import_react266.useRef)(null), tableElement = (0, import_react266.useRef)(null), condensedListElement = (0, import_react266.useRef)(null), loadingElement = (0, import_react266.useRef)(null), [tableInitialized, setTableInitialized] = (0, import_react266.useState)(false), [stickyWrapper, setStickyWrapper] = (0, import_react266.useState)(null), [hideScrollContainer, setHideScrollContainer] = (0, import_react266.useState)(false), tableHeadings = (0, import_react266.useRef)([]), stickyTableHeadings = (0, import_react266.useRef)([]), stickyHeaderWrapperElement = (0, import_react266.useRef)(null), firstStickyHeaderElement = (0, import_react266.useRef)(null), stickyHeaderElement = (0, import_react266.useRef)(null), scrollBarElement = (0, import_react266.useRef)(null), scrollContainerElement = (0, import_react266.useRef)(null), scrollingWithBar = (0, import_react266.useRef)(false), scrollingContainer = (0, import_react266.useRef)(false), lastSortedColumnIndex = (0, import_react266.useRef)(sortColumnIndex), renderAfterSelectEvent = (0, import_react266.useRef)(false), lastSelectedItemsCount = (0, import_react266.useRef)(0), hasSelected = (0, import_react266.useRef)(false);
  selectedItemsCount !== lastSelectedItemsCount.current && (renderAfterSelectEvent.current = true, lastSelectedItemsCount.current = selectedItemsCount), !hasSelected.current && selectedItemsCount !== 0 && (hasSelected.current = true);
  let {
    bulkActionsIntersectionRef,
    tableMeasurerRef,
    isBulkActionsSticky,
    bulkActionsAbsoluteOffset,
    bulkActionsMaxWidth,
    bulkActionsOffsetLeft,
    computeTableDimensions
  } = useIsBulkActionsSticky(selectMode);
  (0, import_react266.useEffect)(() => {
    computeTableDimensions();
  }, [computeTableDimensions, itemCount]);
  let tableBodyRef = (0, import_react266.useCallback)((node) => {
    node !== null && !tableInitialized && setTableInitialized(true);
  }, [tableInitialized]), handleSelectAllItemsInStore = (0, import_react266.useCallback)(() => {
    handleSelectionChange(selectedItemsCount === SELECT_ALL_ITEMS ? SelectionType2.Page : SelectionType2.All, true);
  }, [handleSelectionChange, selectedItemsCount]), calculateFirstHeaderOffset = (0, import_react266.useCallback)(() => selectable ? condensed ? tableHeadingRects.current[0].offsetWidth : tableHeadingRects.current[0].offsetWidth + tableHeadingRects.current[1].offsetWidth : tableHeadingRects.current[0].offsetWidth, [condensed, selectable]), resizeTableHeadings = (0, import_react266.useMemo)(() => debounce(() => {
    if (!tableElement.current || !scrollableContainerElement.current)
      return;
    let boundingRect = scrollableContainerElement.current.getBoundingClientRect();
    tablePosition.current = {
      top: boundingRect.top,
      left: boundingRect.left
    }, tableHeadingRects.current = tableHeadings.current.map((heading) => ({
      offsetWidth: heading.offsetWidth || 0,
      offsetLeft: heading.offsetLeft || 0
    })), tableHeadings.current.length !== 0 && (selectable && tableHeadings.current.length > 1 && (tableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`), stickyTableHeadings.current.forEach((heading, index) => {
      let minWidth = 0;
      index === 0 && (!isBreakpointsXS() || !selectable) ? minWidth = calculateFirstHeaderOffset() : selectable && tableHeadingRects.current.length > index ? minWidth = tableHeadingRects.current[index]?.offsetWidth || 0 : !selectable && tableHeadingRects.current.length >= index && (minWidth = tableHeadingRects.current[index - 1]?.offsetWidth || 0), heading.style.minWidth = `${minWidth}px`;
    }));
  }), [calculateFirstHeaderOffset, selectable]), resizeTableScrollBar = (0, import_react266.useCallback)(() => {
    scrollBarElement.current && tableElement.current && tableInitialized && (scrollBarElement.current.style.setProperty("--pc-index-table-scroll-bar-content-width", `${tableElement.current.offsetWidth - SCROLL_BAR_PADDING}px`), setHideScrollContainer(scrollContainerElement.current?.offsetWidth === tableElement.current?.offsetWidth));
  }, [tableInitialized]), debounceResizeTableScrollbar = (0, import_react266.useCallback)(debounce(resizeTableScrollBar, SCROLL_BAR_DEBOUNCE_PERIOD, {
    trailing: true
  }), [resizeTableScrollBar]), [canScrollRight, setCanScrollRight] = (0, import_react266.useState)(true), handleCanScrollRight = (0, import_react266.useCallback)(debounce(() => {
    if (!lastColumnSticky || !tableElement.current || !scrollableContainerElement.current)
      return;
    let tableRect = tableElement.current.getBoundingClientRect(), scrollableRect = scrollableContainerElement.current.getBoundingClientRect();
    setCanScrollRight(tableRect.width > scrollableRect.width);
  }), [lastColumnSticky]);
  (0, import_react266.useEffect)(() => {
    handleCanScrollRight();
  }, [handleCanScrollRight]);
  let [canFitStickyColumn, setCanFitStickyColumn] = (0, import_react266.useState)(true), handleCanFitStickyColumn = (0, import_react266.useCallback)(() => {
    if (!scrollableContainerElement.current || !tableHeadings.current.length)
      return;
    let scrollableRect = scrollableContainerElement.current.getBoundingClientRect(), checkboxColumnWidth = selectable ? tableHeadings.current[0].getBoundingClientRect().width : 0, firstStickyColumnWidth = tableHeadings.current[selectable ? 1 : 0].getBoundingClientRect().width, lastColumnIsNotTheFirst = selectable ? tableHeadings.current.length > 2 : 1, lastStickyColumnWidth = lastColumnSticky && lastColumnIsNotTheFirst ? tableHeadings.current[tableHeadings.current.length - 1].getBoundingClientRect().width : 0, restOfContentMinWidth = 100;
    setCanFitStickyColumn(scrollableRect.width > firstStickyColumnWidth + checkboxColumnWidth + lastStickyColumnWidth + restOfContentMinWidth);
  }, [lastColumnSticky, selectable]);
  (0, import_react266.useEffect)(() => {
    tableInitialized && handleCanFitStickyColumn();
  }, [handleCanFitStickyColumn, tableInitialized]);
  let handleResize = (0, import_react266.useCallback)(() => {
    scrollBarElement.current?.style.setProperty("--pc-index-table-scroll-bar-content-width", "0px"), resizeTableHeadings(), debounceResizeTableScrollbar(), handleCanScrollRight(), handleCanFitStickyColumn();
  }, [resizeTableHeadings, debounceResizeTableScrollbar, handleCanScrollRight, handleCanFitStickyColumn]), handleScrollContainerScroll = (0, import_react266.useCallback)((canScrollLeft, canScrollRight2) => {
    !scrollableContainerElement.current || !scrollBarElement.current || (scrollingWithBar.current || (scrollingContainer.current = true, scrollBarElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft), scrollingWithBar.current = false, stickyHeaderElement.current && (stickyHeaderElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft), (canScrollLeft && !hasMoreLeftColumns || !canScrollLeft && hasMoreLeftColumns) && toggleHasMoreLeftColumns(), setCanScrollRight(canScrollRight2));
  }, [hasMoreLeftColumns, toggleHasMoreLeftColumns]), handleScrollBarScroll = (0, import_react266.useCallback)(() => {
    !scrollableContainerElement.current || !scrollBarElement.current || (scrollingContainer.current || (scrollingWithBar.current = true, scrollableContainerElement.current.scrollLeft = scrollBarElement.current.scrollLeft), scrollingContainer.current = false);
  }, []);
  useIsomorphicLayoutEffect2(() => {
    tableHeadings.current = getTableHeadingsBySelector(tableElement.current, "[data-index-table-heading]"), stickyTableHeadings.current = getTableHeadingsBySelector(stickyHeaderWrapperElement.current, "[data-index-table-sticky-heading]"), resizeTableHeadings();
  }, [headings, resizeTableHeadings, firstStickyHeaderElement, tableInitialized]), (0, import_react266.useEffect)(() => {
    resizeTableScrollBar(), setStickyWrapper(condensed ? condensedListElement.current : tableElement.current);
  }, [tableInitialized, resizeTableScrollBar, condensed]);
  let hasBulkActions = Boolean(promotedBulkActions && promotedBulkActions.length > 0 || bulkActions && bulkActions.length > 0), headingsMarkup = headings.map(renderHeading).reduce((acc, heading) => acc.concat(heading), []), bulkActionsSelectable = Boolean(promotedBulkActions.length > 0 || bulkActions.length > 0), stickyColumnHeaderStyle = tableHeadingRects.current && tableHeadingRects.current.length > 0 ? {
    minWidth: calculateFirstHeaderOffset()
  } : void 0, stickyColumnHeader = /* @__PURE__ */ import_react266.default.createElement("div", {
    className: classNames(styles87.TableHeading, selectable && styles87["TableHeading-first"], headings[0].flush && styles87["TableHeading-flush"]),
    key: getHeadingKey(headings[0]),
    style: stickyColumnHeaderStyle,
    "data-index-table-sticky-heading": true
  }, /* @__PURE__ */ import_react266.default.createElement(LegacyStack, {
    spacing: "none",
    wrap: false,
    alignment: "center"
  }, selectable && /* @__PURE__ */ import_react266.default.createElement("div", {
    className: styles87.FirstStickyHeaderElement,
    ref: firstStickyHeaderElement
  }, renderCheckboxContent()), selectable && /* @__PURE__ */ import_react266.default.createElement("div", {
    className: styles87["StickyTableHeading-second-scrolling"]
  }, renderHeadingContent(headings[0], 0)), !selectable && /* @__PURE__ */ import_react266.default.createElement("div", {
    className: classNames(styles87.FirstStickyHeaderElement),
    ref: firstStickyHeaderElement
  }, renderHeadingContent(headings[0], 0)))), stickyHeadingsMarkup = headings.map(renderStickyHeading), selectedItemsCountLabel = selectedItemsCount === SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount, handleTogglePage = (0, import_react266.useCallback)(() => {
    handleSelectionChange(SelectionType2.Page, Boolean(!bulkSelectState || bulkSelectState === "indeterminate"));
  }, [bulkSelectState, handleSelectionChange]), paginatedSelectAllAction = getPaginatedSelectAllAction(), loadingTransitionClassNames = {
    enter: styles87["LoadingContainer-enter"],
    enterActive: styles87["LoadingContainer-enter-active"],
    exit: styles87["LoadingContainer-exit"],
    exitActive: styles87["LoadingContainer-exit-active"]
  }, loadingMarkup = /* @__PURE__ */ import_react266.default.createElement(CSSTransition_default, {
    in: loading,
    classNames: loadingTransitionClassNames,
    timeout: parseInt(theme.motion["motion-duration-100"], 10),
    nodeRef: loadingElement,
    appear: true,
    unmountOnExit: true
  }, /* @__PURE__ */ import_react266.default.createElement("div", {
    className: styles87.LoadingPanel,
    ref: loadingElement
  }, /* @__PURE__ */ import_react266.default.createElement("div", {
    className: styles87.LoadingPanelRow
  }, /* @__PURE__ */ import_react266.default.createElement(Spinner, {
    size: "small"
  }), /* @__PURE__ */ import_react266.default.createElement("span", {
    className: styles87.LoadingPanelText
  }, i18n.translate("Polaris.IndexTable.resourceLoadingAccessibilityLabel", {
    resourceNamePlural: resourceName.plural.toLocaleLowerCase()
  }))))), stickyTableClassNames = classNames(styles87.StickyTable, condensed && styles87["StickyTable-condensed"]), shouldShowBulkActions = bulkActionsSelectable && selectedItemsCount, bulkActionClassNames = classNames(styles87.BulkActionsWrapper, isBulkActionsSticky && styles87.BulkActionsWrapperSticky), shouldShowActions = !condensed || selectedItemsCount, promotedActions = shouldShowActions ? promotedBulkActions : [], actions = shouldShowActions ? bulkActions : [], bulkActionsMarkup = shouldShowBulkActions && !condensed ? /* @__PURE__ */ import_react266.default.createElement("div", {
    className: bulkActionClassNames,
    style: {
      insetBlockStart: isBulkActionsSticky ? void 0 : bulkActionsAbsoluteOffset,
      width: bulkActionsMaxWidth,
      insetInlineStart: isBulkActionsSticky ? bulkActionsOffsetLeft : void 0
    }
  }, /* @__PURE__ */ import_react266.default.createElement(BulkActions, {
    selectMode,
    promotedActions,
    actions,
    onSelectModeToggle: condensed ? handleSelectModeToggle : void 0,
    isSticky: isBulkActionsSticky,
    width: bulkActionsMaxWidth
  })) : null, stickyHeaderMarkup = /* @__PURE__ */ import_react266.default.createElement("div", {
    className: stickyTableClassNames,
    role: "presentation"
  }, /* @__PURE__ */ import_react266.default.createElement(Sticky, {
    boundingElement: stickyWrapper
  }, (isSticky) => {
    let stickyHeaderClassNames = classNames(styles87.StickyTableHeader, isSticky && styles87["StickyTableHeader-isSticky"]), selectAllActionsClassName = classNames(styles87.SelectAllActionsWrapper, condensed && styles87["StickyTableHeader-condensed"], isSticky && styles87["StickyTableHeader-isSticky"]), selectAllActionsMarkup = shouldShowBulkActions && !condensed ? /* @__PURE__ */ import_react266.default.createElement("div", {
      className: selectAllActionsClassName
    }, /* @__PURE__ */ import_react266.default.createElement(SelectAllActions, {
      label: i18n.translate("Polaris.IndexTable.selected", {
        selectedItemsCount: selectedItemsCountLabel
      }),
      accessibilityLabel: bulkActionsAccessibilityLabel,
      selected: bulkSelectState,
      selectMode,
      onToggleAll: handleTogglePage,
      paginatedSelectAllText,
      paginatedSelectAllAction
    }), loadingMarkup) : null, headerMarkup = condensed ? /* @__PURE__ */ import_react266.default.createElement("div", {
      className: classNames(styles87.HeaderWrapper, (!selectable || condensed) && styles87.unselectable)
    }, loadingMarkup, sort) : /* @__PURE__ */ import_react266.default.createElement("div", {
      className: stickyHeaderClassNames,
      ref: stickyHeaderWrapperElement
    }, loadingMarkup, /* @__PURE__ */ import_react266.default.createElement("div", {
      className: styles87.StickyTableColumnHeader
    }, stickyColumnHeader), /* @__PURE__ */ import_react266.default.createElement("div", {
      className: styles87.StickyTableHeadings,
      ref: stickyHeaderElement
    }, stickyHeadingsMarkup));
    return selectAllActionsMarkup ?? headerMarkup;
  }), bulkActionsMarkup), scrollBarWrapperClassNames = classNames(styles87.ScrollBarContainer, condensed && styles87.scrollBarContainerCondensed, hideScrollContainer && styles87.scrollBarContainerHidden), scrollBarClassNames = classNames(tableElement.current && tableInitialized && styles87.ScrollBarContent), scrollBarMarkup = itemCount > 0 ? /* @__PURE__ */ import_react266.default.createElement(AfterInitialMount, {
    onMount: resizeTableScrollBar
  }, /* @__PURE__ */ import_react266.default.createElement("div", {
    className: scrollBarWrapperClassNames,
    ref: scrollContainerElement
  }, /* @__PURE__ */ import_react266.default.createElement("div", {
    onScroll: handleScrollBarScroll,
    className: styles87.ScrollBar,
    ref: scrollBarElement
  }, /* @__PURE__ */ import_react266.default.createElement("div", {
    className: scrollBarClassNames
  })))) : null, isSortable = sortable?.some((value) => value), tableClassNames = classNames(styles87.Table, hasMoreLeftColumns && styles87["Table-scrolling"], selectMode && styles87.disableTextSelection, selectMode && shouldShowBulkActions && styles87.selectMode, !selectable && styles87["Table-unselectable"], canFitStickyColumn && styles87["Table-sticky"], isSortable && styles87["Table-sortable"], canFitStickyColumn && lastColumnSticky && styles87["Table-sticky-last"], canFitStickyColumn && lastColumnSticky && canScrollRight && styles87["Table-sticky-scrolling"], hasZebraStriping && styles87.ZebraStriping), emptyStateMarkup = emptyState || /* @__PURE__ */ import_react266.default.createElement(EmptySearchResult, {
    title: i18n.translate("Polaris.IndexTable.emptySearchTitle", {
      resourceNamePlural: resourceName.plural
    }),
    description: i18n.translate("Polaris.IndexTable.emptySearchDescription"),
    withIllustration: true
  }), sharedMarkup = /* @__PURE__ */ import_react266.default.createElement(import_react266.default.Fragment, null, /* @__PURE__ */ import_react266.default.createElement(EventListener, {
    event: "resize",
    handler: handleResize
  }), /* @__PURE__ */ import_react266.default.createElement(AfterInitialMount, null, stickyHeaderMarkup)), condensedClassNames = classNames(styles87.CondensedList, hasZebraStriping && styles87.ZebraStriping), bodyMarkup = condensed ? /* @__PURE__ */ import_react266.default.createElement(import_react266.default.Fragment, null, sharedMarkup, /* @__PURE__ */ import_react266.default.createElement("ul", {
    "data-selectmode": Boolean(selectMode),
    className: condensedClassNames,
    ref: condensedListElement
  }, children)) : /* @__PURE__ */ import_react266.default.createElement(import_react266.default.Fragment, null, sharedMarkup, /* @__PURE__ */ import_react266.default.createElement(ScrollContainer, {
    scrollableContainerRef: scrollableContainerElement,
    onScroll: handleScrollContainerScroll
  }, /* @__PURE__ */ import_react266.default.createElement("table", {
    ref: tableElement,
    className: tableClassNames
  }, /* @__PURE__ */ import_react266.default.createElement("thead", null, /* @__PURE__ */ import_react266.default.createElement("tr", {
    className: styles87.HeadingRow
  }, headingsMarkup)), /* @__PURE__ */ import_react266.default.createElement("tbody", {
    ref: tableBodyRef
  }, children)))), tableContentMarkup = itemCount > 0 ? bodyMarkup : /* @__PURE__ */ import_react266.default.createElement("div", {
    className: styles87.EmptySearchResultWrapper
  }, emptyStateMarkup), tableWrapperClassNames = classNames(styles87.IndexTableWrapper, hideScrollContainer && styles87["IndexTableWrapper-scrollBarHidden"], Boolean(bulkActionsMarkup) && selectMode && styles87.IndexTableWrapperWithBulkActions);
  return /* @__PURE__ */ import_react266.default.createElement(import_react266.default.Fragment, null, /* @__PURE__ */ import_react266.default.createElement("div", {
    className: styles87.IndexTable
  }, /* @__PURE__ */ import_react266.default.createElement("div", {
    className: tableWrapperClassNames,
    ref: tableMeasurerRef
  }, !shouldShowBulkActions && !condensed && loadingMarkup, tableContentMarkup), /* @__PURE__ */ import_react266.default.createElement("div", {
    ref: bulkActionsIntersectionRef
  })), scrollBarMarkup);
  function renderHeading(heading, index) {
    let isSecond = index === 0, isLast = index === headings.length - 1, hasSortable = sortable?.some((value) => value === true), headingAlignment = heading.alignment || "start", headingContentClassName = classNames(styles87.TableHeading, headingAlignment === "center" && styles87["TableHeading-align-center"], headingAlignment === "end" && styles87["TableHeading-align-end"], hasSortable && styles87["TableHeading-sortable"], isSecond && styles87["TableHeading-second"], isLast && !heading.hidden && styles87["TableHeading-last"], !selectable && styles87["TableHeading-unselectable"], heading.flush && styles87["TableHeading-flush"]), stickyPositioningStyle = selectable !== false && isSecond && tableHeadingRects.current && tableHeadingRects.current.length > 0 ? {
      left: tableHeadingRects.current[0].offsetWidth
    } : void 0, headingContent = /* @__PURE__ */ import_react266.default.createElement("th", {
      id: heading.id,
      className: headingContentClassName,
      key: getHeadingKey(heading),
      "data-index-table-heading": true,
      style: stickyPositioningStyle
    }, renderHeadingContent(heading, index));
    if (index !== 0 || !selectable)
      return headingContent;
    let checkboxClassName = classNames(styles87.TableHeading, hasSortable && styles87["TableHeading-sortable"], index === 0 && styles87["TableHeading-first"]);
    return [/* @__PURE__ */ import_react266.default.createElement("th", {
      className: checkboxClassName,
      key: `${heading}-${index}`,
      "data-index-table-heading": true
    }, renderCheckboxContent()), headingContent];
  }
  function renderCheckboxContent() {
    return /* @__PURE__ */ import_react266.default.createElement("div", {
      className: styles87.ColumnHeaderCheckboxWrapper
    }, /* @__PURE__ */ import_react266.default.createElement(Checkbox, {
      label: i18n.translate("Polaris.IndexTable.selectAllLabel", {
        resourceNamePlural: resourceName.plural
      }),
      labelHidden: true,
      onChange: handleSelectPage,
      checked: bulkSelectState
    }));
  }
  function handleSortHeadingClick(index, direction) {
    renderAfterSelectEvent.current = false, hasSelected.current = false, lastSortedColumnIndex.current = sortColumnIndex, onSort?.(index, direction);
  }
  function renderHeadingContent(heading, index) {
    let headingContent, defaultTooltipProps = {
      width: heading.tooltipWidth ?? "default",
      activatorWrapper: "div",
      dismissOnMouseOut: true,
      persistOnClick: heading.tooltipPersistsOnClick
    }, defaultHeaderTooltipProps = {
      ...defaultTooltipProps,
      padding: "400",
      borderRadius: "200",
      content: heading.tooltipContent,
      preferredPosition: "above"
    };
    if (heading.new ? headingContent = /* @__PURE__ */ import_react266.default.createElement(LegacyStack, {
      wrap: false,
      alignment: "center"
    }, /* @__PURE__ */ import_react266.default.createElement("span", null, heading.title), /* @__PURE__ */ import_react266.default.createElement(Badge, {
      tone: "new"
    }, i18n.translate("Polaris.IndexTable.onboardingBadgeText"))) : heading.hidden ? headingContent = /* @__PURE__ */ import_react266.default.createElement(Text, {
      as: "span",
      visuallyHidden: true
    }, heading.title) : headingContent = heading.title, sortable?.[index]) {
      let isCurrentlySorted = index === sortColumnIndex, isPreviouslySorted = !isCurrentlySorted && index === lastSortedColumnIndex.current, isRenderAfterSelectEvent = renderAfterSelectEvent.current || !hasSelected.current && selectedItemsCount !== 0, isAscending = sortDirection === "ascending", newDirection = heading.defaultSortDirection ?? defaultSortDirection, SourceComponent = newDirection === "ascending" ? SvgSortAscendingMajor : SvgSortDescendingMajor;
      isCurrentlySorted && (newDirection = isAscending ? "descending" : "ascending", SourceComponent = sortDirection === "ascending" ? SvgSortAscendingMajor : SvgSortDescendingMajor);
      let iconMarkup = /* @__PURE__ */ import_react266.default.createElement("span", {
        className: classNames(styles87.TableHeadingSortIcon, heading?.alignment === "end" && styles87["TableHeadingSortIcon-heading-align-end"], isCurrentlySorted && styles87["TableHeadingSortIcon-visible"])
      }, /* @__PURE__ */ import_react266.default.createElement(SourceComponent, {
        focusable: "false",
        "aria-hidden": "true",
        className: styles87.TableHeadingSortSvg
      })), defaultSortButtonProps = {
        onClick: () => handleSortHeadingClick(index, newDirection),
        className: classNames(styles87.TableHeadingSortButton, !isCurrentlySorted && heading?.alignment === "end" && styles87["TableHeadingSortButton-heading-align-end"], isCurrentlySorted && heading?.alignment === "end" && styles87["TableHeadingSortButton-heading-align-end-currently-sorted"], isPreviouslySorted && !isRenderAfterSelectEvent && heading?.alignment === "end" && styles87["TableHeadingSortButton-heading-align-end-previously-sorted"]),
        tabIndex: selectMode ? -1 : 0
      }, sortMarkup = /* @__PURE__ */ import_react266.default.createElement(UnstyledButton, defaultSortButtonProps, iconMarkup, /* @__PURE__ */ import_react266.default.createElement("span", {
        className: classNames(sortToggleLabels && selectMode && heading.tooltipContent && styles87.TableHeadingTooltipUnderlinePlaceholder)
      }, headingContent));
      if (!sortToggleLabels || selectMode)
        return /* @__PURE__ */ import_react266.default.createElement("div", {
          className: styles87.SortableTableHeadingWithCustomMarkup
        }, sortMarkup);
      let tooltipDirection = isCurrentlySorted ? sortDirection : newDirection, sortTooltipContent = sortToggleLabels[index][tooltipDirection];
      if (!heading.tooltipContent)
        return (
          // Regular header with sort icon and sort direction tooltip
          /* @__PURE__ */ import_react266.default.createElement(Tooltip, Object.assign({}, defaultTooltipProps, {
            content: sortTooltipContent,
            preferredPosition: "above"
          }), sortMarkup)
        );
      if (heading.tooltipContent)
        return (
          // Header text and sort icon have separate tooltips
          /* @__PURE__ */ import_react266.default.createElement("div", {
            className: styles87.SortableTableHeadingWithCustomMarkup
          }, /* @__PURE__ */ import_react266.default.createElement(UnstyledButton, defaultSortButtonProps, /* @__PURE__ */ import_react266.default.createElement(Tooltip, defaultHeaderTooltipProps, /* @__PURE__ */ import_react266.default.createElement("span", {
            className: styles87.TableHeadingUnderline
          }, headingContent)), /* @__PURE__ */ import_react266.default.createElement(Tooltip, Object.assign({}, defaultTooltipProps, {
            content: sortTooltipContent,
            preferredPosition: "above"
          }), iconMarkup)))
        );
    }
    return heading.tooltipContent ? (
      // Non-sortable header with tooltip
      /* @__PURE__ */ import_react266.default.createElement(Tooltip, Object.assign({}, defaultHeaderTooltipProps, {
        activatorWrapper: "span"
      }), /* @__PURE__ */ import_react266.default.createElement("span", {
        className: classNames(styles87.TableHeadingUnderline, styles87.SortableTableHeaderWrapper)
      }, headingContent))
    ) : headingContent;
  }
  function handleSelectPage(checked) {
    handleSelectionChange(SelectionType2.Page, checked);
  }
  function renderStickyHeading(heading, index) {
    let position = index + 1, headingStyle = tableHeadingRects.current && tableHeadingRects.current.length > position ? {
      minWidth: tableHeadingRects.current[position].offsetWidth
    } : void 0, headingAlignment = heading.alignment || "start", headingContent = renderHeadingContent(heading, index), stickyHeadingClassName = classNames(styles87.TableHeading, heading.flush && styles87["TableHeading-flush"], headingAlignment === "center" && styles87["TableHeading-align-center"], headingAlignment === "end" && styles87["TableHeading-align-end"], index === 0 && styles87["StickyTableHeading-second"], index === 0 && !selectable && styles87.unselectable);
    return /* @__PURE__ */ import_react266.default.createElement("div", {
      className: stickyHeadingClassName,
      key: getHeadingKey(heading),
      style: headingStyle,
      "data-index-table-sticky-heading": true
    }, headingContent);
  }
  function getPaginatedSelectAllAction() {
    if (!selectable || !hasBulkActions || !hasMoreItems)
      return;
    let customActionText = paginatedSelectAllActionText ?? i18n.translate("Polaris.IndexTable.selectAllItems", {
      itemsLength: itemCount,
      resourceNamePlural: resourceName.plural.toLocaleLowerCase()
    });
    return {
      content: selectedItemsCount === SELECT_ALL_ITEMS ? i18n.translate("Polaris.IndexTable.undo") : customActionText,
      onAction: handleSelectAllItemsInStore
    };
  }
  function handleSelectModeToggle() {
    handleSelectionChange(SelectionType2.All, false);
  }
}
function getHeadingKey(heading) {
  return heading.id ? heading.id : typeof heading.title == "string" ? heading.title : "";
}
function IndexTable({
  children,
  selectable = true,
  itemCount,
  selectedItemsCount = 0,
  resourceName: passedResourceName,
  loading,
  hasMoreItems,
  condensed,
  onSelectionChange,
  pagination,
  ...indexTableBaseProps
}) {
  let paginationMarkup = pagination ? /* @__PURE__ */ import_react266.default.createElement(Pagination, Object.assign({
    type: "table"
  }, pagination)) : null;
  return /* @__PURE__ */ import_react266.default.createElement(import_react266.default.Fragment, null, /* @__PURE__ */ import_react266.default.createElement(IndexProvider, {
    selectable: selectable && !condensed,
    itemCount,
    selectedItemsCount,
    resourceName: passedResourceName,
    loading,
    hasMoreItems,
    condensed,
    onSelectionChange
  }, /* @__PURE__ */ import_react266.default.createElement(IndexTableBase, indexTableBaseProps, children)), paginationMarkup);
}
var import_react266;
var SCROLL_BAR_PADDING;
var SCROLL_BAR_DEBOUNCE_PERIOD;
var isBreakpointsXS;
var init_IndexTable = __esm({
  "node_modules/@shopify/polaris/build/esm/components/IndexTable/IndexTable.js"() {
    import_react266 = __toESM(require_react());
    init_dist3();
    init_esm4();
    init_build();
    init_debounce();
    init_use_toggle();
    init_use_isomorphic_layout_effect();
    init_css();
    init_use_theme();
    init_IndexTable_scss();
    init_IndexProvider();
    init_Cell3();
    init_Row();
    init_use_is_bulk_actions_sticky();
    init_types4();
    init_utilities8();
    init_EmptySearchResult();
    init_ScrollContainer();
    init_BulkActions();
    init_SelectAllActions();
    init_Pagination();
    init_hooks13();
    init_hooks2();
    init_LegacyStack();
    init_Spinner();
    init_AfterInitialMount();
    init_EventListener();
    init_Checkbox();
    init_Badge();
    init_Text();
    init_UnstyledButton();
    init_Tooltip();
    init_Sticky();
    SCROLL_BAR_PADDING = 4, SCROLL_BAR_DEBOUNCE_PERIOD = 300;
    isBreakpointsXS = () => typeof window > "u" ? false : window.innerWidth < parseFloat(toPx(themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    IndexTable.Cell = Cell3;
    IndexTable.Row = Row;
  }
});
var styles92;
var init_InlineCode_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/InlineCode/InlineCode.scss.js"() {
    styles92 = {
      Code: "Polaris-InlineCode__Code"
    };
  }
});
var import_react267;
var InlineCode;
var init_InlineCode = __esm({
  "node_modules/@shopify/polaris/build/esm/components/InlineCode/InlineCode.js"() {
    import_react267 = __toESM(require_react());
    init_InlineCode_scss();
    InlineCode = ({
      children
    }) => /* @__PURE__ */ import_react267.default.createElement("code", {
      className: styles92.Code
    }, children);
  }
});
var styles93;
var init_KeyboardKey_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/KeyboardKey/KeyboardKey.scss.js"() {
    styles93 = {
      KeyboardKey: "Polaris-KeyboardKey",
      small: "Polaris-KeyboardKey--small"
    };
  }
});
function KeyboardKey({
  children = "",
  size: size2
}) {
  let key = !size2 && children.length > 1 ? children.toLowerCase() : children.toUpperCase(), className = classNames(styles93.KeyboardKey, size2 && styles93[size2]);
  return /* @__PURE__ */ import_react268.default.createElement("kbd", {
    className
  }, key);
}
var import_react268;
var init_KeyboardKey = __esm({
  "node_modules/@shopify/polaris/build/esm/components/KeyboardKey/KeyboardKey.js"() {
    import_react268 = __toESM(require_react());
    init_css();
    init_KeyboardKey_scss();
  }
});
var styles94;
var init_Layout_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Layout/Layout.scss.js"() {
    styles94 = {
      Layout: "Polaris-Layout",
      Section: "Polaris-Layout__Section",
      "Section-fullWidth": "Polaris-Layout__Section--fullWidth",
      "Section-oneHalf": "Polaris-Layout__Section--oneHalf",
      "Section-oneThird": "Polaris-Layout__Section--oneThird",
      AnnotatedSection: "Polaris-Layout__AnnotatedSection",
      AnnotationWrapper: "Polaris-Layout__AnnotationWrapper",
      AnnotationContent: "Polaris-Layout__AnnotationContent",
      Annotation: "Polaris-Layout__Annotation"
    };
  }
});
function AnnotatedSection({
  children,
  title,
  description,
  id
}) {
  let descriptionMarkup = typeof description == "string" ? /* @__PURE__ */ import_react269.default.createElement(Text, {
    as: "p",
    variant: "bodyMd"
  }, description) : description;
  return /* @__PURE__ */ import_react269.default.createElement("div", {
    className: styles94.AnnotatedSection
  }, /* @__PURE__ */ import_react269.default.createElement("div", {
    className: styles94.AnnotationWrapper
  }, /* @__PURE__ */ import_react269.default.createElement("div", {
    className: styles94.Annotation
  }, /* @__PURE__ */ import_react269.default.createElement(TextContainer, {
    spacing: "tight"
  }, /* @__PURE__ */ import_react269.default.createElement(Text, {
    id,
    variant: "headingMd",
    as: "h2"
  }, title), descriptionMarkup && /* @__PURE__ */ import_react269.default.createElement(Box, {
    color: "text-secondary"
  }, descriptionMarkup))), /* @__PURE__ */ import_react269.default.createElement("div", {
    className: styles94.AnnotationContent
  }, children)));
}
var import_react269;
var init_AnnotatedSection = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Layout/components/AnnotatedSection/AnnotatedSection.js"() {
    import_react269 = __toESM(require_react());
    init_Layout_scss();
    init_TextContainer();
    init_Text();
    init_Box();
  }
});
function Section6({
  children,
  variant
}) {
  let className = classNames(styles94.Section, styles94[`Section-${variant}`]);
  return /* @__PURE__ */ import_react270.default.createElement("div", {
    className
  }, children);
}
var import_react270;
var init_Section6 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Layout/components/Section/Section.js"() {
    import_react270 = __toESM(require_react());
    init_css();
    init_Layout_scss();
  }
});
var import_react271;
var Layout;
var init_Layout = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Layout/Layout.js"() {
    import_react271 = __toESM(require_react());
    init_Layout_scss();
    init_AnnotatedSection();
    init_Section6();
    Layout = function({
      sectioned,
      children
    }) {
      let content = sectioned ? /* @__PURE__ */ import_react271.default.createElement(Section6, null, children) : children;
      return /* @__PURE__ */ import_react271.default.createElement("div", {
        className: styles94.Layout
      }, content);
    };
    Layout.AnnotatedSection = AnnotatedSection;
    Layout.Section = Section6;
  }
});
var styles95;
var init_LegacyFilters_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyFilters/LegacyFilters.scss.js"() {
    styles95 = {
      LegacyFilters: "Polaris-LegacyFilters",
      LegacyFiltersContainer: "Polaris-LegacyFilters__LegacyFiltersContainer",
      LegacyFiltersContainerHeader: "Polaris-LegacyFilters__LegacyFiltersContainerHeader",
      LegacyFiltersDesktopContainerContent: "Polaris-LegacyFilters__LegacyFiltersDesktopContainerContent",
      LegacyFiltersMobileContainerContent: "Polaris-LegacyFilters__LegacyFiltersMobileContainerContent",
      LegacyFiltersContainerFooter: "Polaris-LegacyFilters__LegacyFiltersContainerFooter",
      LegacyFiltersMobileContainerFooter: "Polaris-LegacyFilters__LegacyFiltersMobileContainerFooter",
      EmptyFooterState: "Polaris-LegacyFilters__EmptyFooterState",
      FilterTriggerContainer: "Polaris-LegacyFilters__FilterTriggerContainer",
      FilterTrigger: "Polaris-LegacyFilters__FilterTrigger",
      FilterTriggerTitle: "Polaris-LegacyFilters__FilterTriggerTitle",
      AppliedFilterBadgeContainer: "Polaris-LegacyFilters__AppliedFilterBadgeContainer",
      open: "Polaris-LegacyFilters--open",
      FilterTriggerLabelContainer: "Polaris-LegacyFilters__FilterTriggerLabelContainer",
      first: "Polaris-LegacyFilters--first",
      last: "Polaris-LegacyFilters--last",
      FilterNodeContainer: "Polaris-LegacyFilters__FilterNodeContainer",
      SearchIcon: "Polaris-LegacyFilters__SearchIcon",
      Backdrop: "Polaris-LegacyFilters__Backdrop",
      HelpText: "Polaris-LegacyFilters__HelpText",
      TagsContainer: "Polaris-LegacyFilters__TagsContainer"
    };
  }
});
var import_react272;
var ResourceListContext;
var init_context19 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/resource-list/context.js"() {
    import_react272 = __toESM(require_react()), ResourceListContext = /* @__PURE__ */ (0, import_react272.createContext)({});
  }
});
var styles96;
var init_ConnectedFilterControl_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.scss.js"() {
    styles96 = {
      ConnectedFilterControl: "Polaris-LegacyFilters-ConnectedFilterControl",
      CenterContainer: "Polaris-LegacyFilters-ConnectedFilterControl__CenterContainer",
      right: "Polaris-LegacyFilters-ConnectedFilterControl--right",
      Item: "Polaris-LegacyFilters-ConnectedFilterControl__Item",
      "Item-focused": "Polaris-LegacyFilters-ConnectedFilterControl__Item--focused",
      ProxyButtonContainer: "Polaris-LegacyFilters-ConnectedFilterControl__ProxyButtonContainer",
      RightContainer: "Polaris-LegacyFilters-ConnectedFilterControl__RightContainer",
      MoreFiltersButtonContainer: "Polaris-LegacyFilters-ConnectedFilterControl__MoreFiltersButtonContainer",
      queryFieldHidden: "Polaris-LegacyFilters-ConnectedFilterControl--queryFieldHidden",
      RightContainerWithoutMoreFilters: "Polaris-LegacyFilters-ConnectedFilterControl__RightContainerWithoutMoreFilters",
      onlyButtonVisible: "Polaris-LegacyFilters-ConnectedFilterControl--onlyButtonVisible",
      Wrapper: "Polaris-LegacyFilters-ConnectedFilterControl__Wrapper",
      AuxiliaryContainer: "Polaris-LegacyFilters-ConnectedFilterControl__AuxiliaryContainer"
    };
  }
});
function Item8({
  children
}) {
  let {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle(false), className = classNames(styles96.Item, focused && styles96["Item-focused"]);
  return /* @__PURE__ */ import_react273.default.createElement("div", {
    onBlur: forceFalseFocused,
    onFocus: forceTrueFocused,
    className
  }, children);
}
var import_react273;
var init_Item7 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyFilters/components/ConnectedFilterControl/components/Item/Item.js"() {
    import_react273 = __toESM(require_react());
    init_css();
    init_use_toggle();
    init_ConnectedFilterControl_scss();
  }
});
var import_react274;
var FILTER_FIELD_MIN_WIDTH;
var ConnectedFilterControl;
var init_ConnectedFilterControl = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyFilters/components/ConnectedFilterControl/ConnectedFilterControl.js"() {
    import_react274 = __toESM(require_react());
    init_debounce();
    init_css();
    init_ConnectedFilterControl_scss();
    init_Item7();
    init_EventListener();
    init_Button();
    init_Popover();
    FILTER_FIELD_MIN_WIDTH = 150, ConnectedFilterControl = class extends import_react274.Component {
      constructor(...args) {
        super(...args), this.state = {
          availableWidth: 0,
          proxyButtonsWidth: {}
        }, this.container = /* @__PURE__ */ (0, import_react274.createRef)(), this.proxyButtonContainer = /* @__PURE__ */ (0, import_react274.createRef)(), this.moreFiltersButtonContainer = /* @__PURE__ */ (0, import_react274.createRef)(), this.handleResize = debounce(() => {
          this.measureProxyButtons(), this.measureAvailableWidth();
        }, 40, {
          leading: true,
          trailing: true,
          maxWait: 40
        });
      }
      componentDidMount() {
        this.handleResize();
      }
      render() {
        let {
          children,
          rightPopoverableActions,
          rightAction,
          auxiliary,
          forceShowMorefiltersButton = true,
          queryFieldHidden
        } = this.props, actionsToRender = rightPopoverableActions != null ? this.getActionsToRender(rightPopoverableActions) : [], className = classNames(styles96.ConnectedFilterControl, rightPopoverableActions && styles96.right), shouldRenderMoreFiltersButton = forceShowMorefiltersButton || rightPopoverableActions && rightPopoverableActions.length !== actionsToRender.length, RightContainerClassName = classNames(styles96.RightContainer, !shouldRenderMoreFiltersButton && styles96.RightContainerWithoutMoreFilters, queryFieldHidden && styles96.queryFieldHidden), rightMarkup = actionsToRender.length > 0 ? /* @__PURE__ */ import_react274.default.createElement("div", {
          className: RightContainerClassName
        }, this.popoverFrom(actionsToRender)) : null, moreFiltersButtonContainerClassname = classNames(styles96.MoreFiltersButtonContainer, actionsToRender.length === 0 && styles96.onlyButtonVisible), rightActionMarkup = rightAction ? /* @__PURE__ */ import_react274.default.createElement("div", {
          ref: this.moreFiltersButtonContainer,
          className: moreFiltersButtonContainerClassname
        }, shouldRenderMoreFiltersButton && /* @__PURE__ */ import_react274.default.createElement(Item8, null, rightAction)) : null, proxyButtonMarkup = rightPopoverableActions ? /* @__PURE__ */ import_react274.default.createElement("div", {
          className: styles96.ProxyButtonContainer,
          ref: this.proxyButtonContainer,
          "aria-hidden": true
        }, rightPopoverableActions.map((action4) => /* @__PURE__ */ import_react274.default.createElement("div", {
          key: action4.key,
          "data-key": action4.key
        }, this.activatorButtonFrom(action4, {
          proxy: true
        })))) : null, auxMarkup = auxiliary ? /* @__PURE__ */ import_react274.default.createElement("div", {
          className: styles96.AuxiliaryContainer
        }, auxiliary) : null;
        return /* @__PURE__ */ import_react274.default.createElement(import_react274.default.Fragment, null, proxyButtonMarkup, /* @__PURE__ */ import_react274.default.createElement("div", {
          className: styles96.Wrapper
        }, /* @__PURE__ */ import_react274.default.createElement("div", {
          className,
          ref: this.container
        }, children ? /* @__PURE__ */ import_react274.default.createElement("div", {
          className: styles96.CenterContainer
        }, /* @__PURE__ */ import_react274.default.createElement(Item8, null, children)) : null, rightMarkup, rightActionMarkup, /* @__PURE__ */ import_react274.default.createElement(EventListener, {
          event: "resize",
          handler: this.handleResize
        })), auxMarkup));
      }
      measureProxyButtons() {
        if (this.proxyButtonContainer.current) {
          let proxyButtonsWidth = {};
          this.proxyButtonContainer.current && Array.from(this.proxyButtonContainer.current.children).forEach((element) => {
            let buttonWidth = element.getBoundingClientRect().width + 78, buttonKey = element instanceof HTMLElement && element.dataset.key;
            buttonKey && (proxyButtonsWidth[buttonKey] = buttonWidth);
          }), this.setState({
            proxyButtonsWidth
          });
        }
      }
      measureAvailableWidth() {
        if (this.container.current && this.moreFiltersButtonContainer.current) {
          let containerWidth = this.container.current.getBoundingClientRect().width, moreFiltersButtonWidth = this.moreFiltersButtonContainer.current.getBoundingClientRect().width, filtersActionWidth = 0, filterFieldMinWidth = this.props.queryFieldHidden ? 0 : FILTER_FIELD_MIN_WIDTH, availableWidth = containerWidth - filterFieldMinWidth - moreFiltersButtonWidth - filtersActionWidth;
          this.setState({
            availableWidth
          });
        }
      }
      getActionsToRender(actions) {
        let remainingWidth = this.state.availableWidth, actionsToReturn = [];
        for (let i = 0; remainingWidth > 0 && i < actions.length; i++) {
          let action4 = actions[i], actionWidth = this.state.proxyButtonsWidth[action4.key];
          if (actionWidth <= remainingWidth)
            actionsToReturn.push(action4), remainingWidth -= actionWidth;
          else
            break;
        }
        return actionsToReturn;
      }
      activatorButtonFrom(action4, options) {
        let id = options?.proxy ? void 0 : `Activator-${action4.key}`;
        return /* @__PURE__ */ import_react274.default.createElement(Button, {
          onClick: action4.onAction,
          disclosure: true,
          disabled: this.props.disabled || action4.disabled,
          id,
          size: "large"
        }, action4.content);
      }
      popoverFrom(actions) {
        return actions.map((action4) => /* @__PURE__ */ import_react274.default.createElement(Item8, {
          key: action4.key
        }, /* @__PURE__ */ import_react274.default.createElement(Popover2, {
          active: action4.popoverOpen,
          activator: this.activatorButtonFrom(action4),
          onClose: action4.onAction,
          preferredAlignment: "left",
          sectioned: true
        }, action4.popoverContent)));
      }
    };
  }
});
function TagsWrapper({
  children,
  hidden
}) {
  return hidden ? /* @__PURE__ */ import_react275.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, children) : /* @__PURE__ */ import_react275.default.createElement(import_react275.default.Fragment, null, children);
}
var import_react275;
var init_TagsWrapper = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyFilters/components/TagsWrapper/TagsWrapper.js"() {
    import_react275 = __toESM(require_react());
    init_Text();
  }
});
var styles97;
var init_Tag_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tag/Tag.scss.js"() {
    styles97 = {
      Tag: "Polaris-Tag",
      disabled: "Polaris-Tag--disabled",
      clickable: "Polaris-Tag--clickable",
      linkable: "Polaris-Tag--linkable",
      removable: "Polaris-Tag--removable",
      TagText: "Polaris-Tag__TagText",
      Button: "Polaris-Tag__Button",
      Link: "Polaris-Tag__Link",
      LinkText: "Polaris-Tag__LinkText",
      segmented: "Polaris-Tag--segmented"
    };
  }
});
function Tag({
  children,
  disabled = false,
  onClick,
  onRemove,
  accessibilityLabel,
  url
}) {
  let i18n = useI18n(), segmented = onRemove && url, className = classNames(styles97.Tag, disabled && styles97.disabled, onClick && styles97.clickable, onRemove && styles97.removable, url && !disabled && styles97.linkable, segmented && styles97.segmented);
  if (onClick)
    return /* @__PURE__ */ import_react276.default.createElement("button", {
      type: "button",
      disabled,
      className,
      onClick
    }, children);
  let tagTitle = accessibilityLabel;
  tagTitle || (tagTitle = typeof children == "string" ? children : void 0);
  let ariaLabel = i18n.translate("Polaris.Tag.ariaLabel", {
    children: tagTitle || ""
  }), removeButton = onRemove ? /* @__PURE__ */ import_react276.default.createElement("button", {
    type: "button",
    "aria-label": ariaLabel,
    className: classNames(styles97.Button, segmented && styles97.segmented),
    onClick: onRemove,
    onMouseUp: handleMouseUpByBlurring,
    disabled
  }, /* @__PURE__ */ import_react276.default.createElement(Icon, {
    source: SvgCancelSmallMinor
  })) : null, tagContent = url && !disabled ? /* @__PURE__ */ import_react276.default.createElement("a", {
    className: classNames(styles97.Link, segmented && styles97.segmented),
    href: url
  }, /* @__PURE__ */ import_react276.default.createElement("span", {
    title: tagTitle,
    className: styles97.LinkText
  }, children)) : /* @__PURE__ */ import_react276.default.createElement("span", {
    title: tagTitle,
    className: styles97.TagText
  }, children);
  return /* @__PURE__ */ import_react276.default.createElement("span", {
    className,
    "aria-disabled": disabled
  }, tagContent, removeButton);
}
var import_react276;
var init_Tag = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Tag/Tag.js"() {
    import_react276 = __toESM(require_react());
    init_dist3();
    init_css();
    init_focus();
    init_Tag_scss();
    init_hooks2();
    init_Icon();
  }
});
var styles98;
var init_Sheet_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Sheet/Sheet.scss.js"() {
    styles98 = {
      Sheet: "Polaris-Sheet",
      Container: "Polaris-Sheet__Container",
      Bottom: "Polaris-Sheet__Bottom",
      enterBottom: "Polaris-Sheet--enterBottom",
      enterBottomActive: "Polaris-Sheet--enterBottomActive",
      exitBottom: "Polaris-Sheet--exitBottom",
      exitBottomActive: "Polaris-Sheet--exitBottomActive",
      Right: "Polaris-Sheet__Right",
      enterRight: "Polaris-Sheet--enterRight",
      enterRightActive: "Polaris-Sheet--enterRightActive",
      exitRight: "Polaris-Sheet--exitRight",
      exitRightActive: "Polaris-Sheet--exitRightActive"
    };
  }
});
function Sheet({
  children,
  open,
  onClose,
  onEntered,
  onExit,
  accessibilityLabel,
  activator
}) {
  let theme = useTheme(), {
    isNavigationCollapsed
  } = useMediaQuery(), container = (0, import_react277.useRef)(null), activatorRef = (0, import_react277.useRef)(null), handleClose = (0, import_react277.useCallback)(() => {
    onClose();
    let activatorElement = activator && isRef3(activator) ? activator && activator.current : activatorRef.current;
    activatorElement && requestAnimationFrame(() => focusFirstFocusableNode(activatorElement));
  }, [activator, onClose]);
  (0, import_react277.useEffect)(() => {
    console.warn("Deprecation: <Sheet /> is deprecated. This component might be removed in a future major version of Polaris. Use <Modal /> instead or avoid modal patterns all together.");
  }, []);
  let activatorMarkup = activator && !isRef3(activator) ? /* @__PURE__ */ import_react277.default.createElement("div", {
    ref: activatorRef
  }, activator) : null;
  return /* @__PURE__ */ import_react277.default.createElement(import_react277.default.Fragment, null, activatorMarkup, /* @__PURE__ */ import_react277.default.createElement(Portal, {
    idPrefix: "sheet"
  }, /* @__PURE__ */ import_react277.default.createElement(CSSTransition_default, {
    nodeRef: container,
    classNames: isNavigationCollapsed ? BOTTOM_CLASS_NAMES : RIGHT_CLASS_NAMES,
    timeout: parseInt(theme.motion["motion-duration-300"], 10),
    in: open,
    mountOnEnter: true,
    unmountOnExit: true,
    onEntered,
    onExit
  }, /* @__PURE__ */ import_react277.default.createElement("div", Object.assign({
    className: styles98.Container
  }, layer.props, overlay.props, {
    ref: container
  }), /* @__PURE__ */ import_react277.default.createElement(TrapFocus, {
    trapping: open
  }, /* @__PURE__ */ import_react277.default.createElement("div", {
    role: "dialog",
    "aria-modal": true,
    tabIndex: -1,
    className: styles98.Sheet,
    "aria-label": accessibilityLabel
  }, children)))), /* @__PURE__ */ import_react277.default.createElement(KeypressListener, {
    keyCode: Key.Escape,
    handler: handleClose
  }), open && /* @__PURE__ */ import_react277.default.createElement(Backdrop, {
    transparent: true,
    onClick: handleClose
  })));
}
function isRef3(ref) {
  return Object.prototype.hasOwnProperty.call(ref, "current");
}
var import_react277;
var BOTTOM_CLASS_NAMES;
var RIGHT_CLASS_NAMES;
var init_Sheet = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Sheet/Sheet.js"() {
    import_react277 = __toESM(require_react());
    init_esm4();
    init_focus();
    init_css();
    init_types();
    init_shared();
    init_use_theme();
    init_Sheet_scss();
    init_hooks11();
    init_Portal();
    init_TrapFocus();
    init_KeypressListener();
    init_Backdrop();
    BOTTOM_CLASS_NAMES = {
      enter: classNames(styles98.Bottom, styles98.enterBottom),
      enterActive: classNames(styles98.Bottom, styles98.enterBottomActive),
      exit: classNames(styles98.Bottom, styles98.exitBottom),
      exitActive: classNames(styles98.Bottom, styles98.exitBottomActive)
    }, RIGHT_CLASS_NAMES = {
      enter: classNames(styles98.Right, styles98.enterRight),
      enterActive: classNames(styles98.Right, styles98.enterRightActive),
      exit: classNames(styles98.Right, styles98.exitRight),
      exitActive: classNames(styles98.Right, styles98.exitRightActive)
    };
  }
});
function getShortcutFilters(filters) {
  return filters.filter((filter) => filter.shortcut === true);
}
function LegacyFilters(props) {
  let i18n = useI18n(), mediaQuery = useMediaQuery();
  return /* @__PURE__ */ import_react278.default.createElement(LegacyFiltersInner, Object.assign({}, props, {
    i18n,
    mediaQuery
  }));
}
var import_react278;
var Suffix;
var LegacyFiltersInner;
var init_LegacyFilters = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyFilters/LegacyFilters.js"() {
    import_react278 = __toESM(require_react());
    init_dist3();
    init_css();
    init_focus();
    init_within_filter_context();
    init_types();
    init_LegacyFilters_scss();
    init_context19();
    init_Collapsible();
    init_ConnectedFilterControl();
    init_TagsWrapper();
    init_Tag();
    init_Sheet();
    init_hooks2();
    init_hooks11();
    init_ScrollLock();
    init_Badge();
    init_Text();
    init_Icon();
    init_Focus();
    init_Button();
    init_TextField();
    init_Scrollable();
    init_KeypressListener();
    init_LegacyStack();
    (function(Suffix2) {
      Suffix2.Filter = "Filter", Suffix2.Shortcut = "Shortcut";
    })(Suffix || (Suffix = {}));
    LegacyFiltersInner = class extends import_react278.Component {
      constructor(...args) {
        super(...args), this.state = {
          open: false,
          readyForFocus: false
        }, this.moreFiltersButtonContainer = /* @__PURE__ */ (0, import_react278.createRef)(), this.moreFiltersDoneButtonContainer = /* @__PURE__ */ (0, import_react278.createRef)(), this.focusNode = /* @__PURE__ */ (0, import_react278.createRef)(), this.closeFilters = () => {
          this.setState({
            open: false
          }, () => {
            this.moreFiltersButtonContainer.current && focusFirstFocusableNode(this.moreFiltersButtonContainer.current, false);
          });
        }, this.toggleFilters = () => {
          this.state.open === true ? this.closeFilters() : this.openFilters();
        }, this.setReadyForFocus = (newState) => () => {
          this.setState({
            readyForFocus: newState
          });
        }, this.handleClearAll = () => {
          this.props.onClearAll(), this.moreFiltersDoneButtonContainer.current && focusFirstFocusableNode(this.moreFiltersDoneButtonContainer.current, false);
        };
      }
      render() {
        let {
          filters,
          queryValue,
          onQueryBlur,
          onQueryChange,
          onQueryFocus,
          focused,
          onClearAll,
          appliedFilters,
          onQueryClear,
          queryPlaceholder,
          children,
          disabled = false,
          helpText,
          hideTags,
          hideQueryField,
          disableQueryField = false,
          i18n,
          mediaQuery: {
            isNavigationCollapsed
          }
        } = this.props, {
          resourceName
        } = this.context, {
          open,
          readyForFocus
        } = this.state, backdropMarkup = open ? /* @__PURE__ */ import_react278.default.createElement(import_react278.default.Fragment, null, /* @__PURE__ */ import_react278.default.createElement(ScrollLock, null), /* @__PURE__ */ import_react278.default.createElement("div", {
          className: styles95.Backdrop,
          onClick: this.closeFilters
        })) : null, filtersContentMarkup = filters.map((filter, index) => {
          let filterIsOpen = this.state[`${filter.key}${Suffix.Filter}`] === true, icon = filterIsOpen ? SvgChevronUpMinor : SvgChevronDownMinor, className = classNames(styles95.FilterTriggerContainer, filterIsOpen && styles95.open, index === 0 && styles95.first, filters.length !== 1 && index === filters.length - 1 && styles95.last), appliedFilterContent = this.getAppliedFilterContent(filter.key), appliedFilterBadgeMarkup = appliedFilterContent ? /* @__PURE__ */ import_react278.default.createElement("div", {
            className: styles95.AppliedFilterBadgeContainer
          }, /* @__PURE__ */ import_react278.default.createElement(Badge, {
            tone: "new"
          }, appliedFilterContent)) : null, collapsibleID = `${filter.key}Collapsible`, buttonClassName = classNames(styles95.FilterTrigger);
          return /* @__PURE__ */ import_react278.default.createElement("div", {
            key: filter.key,
            className
          }, /* @__PURE__ */ import_react278.default.createElement("button", {
            onClick: () => this.toggleFilter(filter.key),
            className: buttonClassName,
            id: `${filter.key}ToggleButton`,
            type: "button",
            "aria-controls": collapsibleID,
            "aria-expanded": filterIsOpen
          }, /* @__PURE__ */ import_react278.default.createElement("div", {
            className: styles95.FilterTriggerLabelContainer
          }, /* @__PURE__ */ import_react278.default.createElement("h3", {
            className: styles95.FilterTriggerTitle
          }, /* @__PURE__ */ import_react278.default.createElement(Text, {
            as: "span",
            tone: this.props.disabled || filter.disabled ? "subdued" : void 0
          }, filter.label)), /* @__PURE__ */ import_react278.default.createElement("span", {
            className: styles95.FilterTriggerIcon
          }, /* @__PURE__ */ import_react278.default.createElement(Icon, {
            source: icon,
            tone: "base"
          }))), appliedFilterBadgeMarkup), /* @__PURE__ */ import_react278.default.createElement(Collapsible, {
            id: collapsibleID,
            open: filterIsOpen,
            onAnimationEnd: this.setReadyForFocus(true)
          }, /* @__PURE__ */ import_react278.default.createElement("div", {
            className: styles95.FilterNodeContainer
          }, /* @__PURE__ */ import_react278.default.createElement(Focus, {
            disabled: !filterIsOpen || !readyForFocus || !open,
            root: this.focusNode
          }, this.generateFilterMarkup(filter)))));
        }), appliedFiltersCount = appliedFilters ? appliedFilters.length : 0, moreFiltersLabel = hideTags && appliedFiltersCount > 0 ? i18n.translate("Polaris.Filters.moreFiltersWithCount", {
          count: appliedFiltersCount
        }) : i18n.translate("Polaris.Filters.moreFilters"), rightActionMarkup = filters.length ? /* @__PURE__ */ import_react278.default.createElement("div", {
          ref: this.moreFiltersButtonContainer
        }, /* @__PURE__ */ import_react278.default.createElement(Button, {
          onClick: this.toggleFilters,
          disabled,
          size: "large"
        }, moreFiltersLabel)) : null, filterResourceName = resourceName || {
          singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
          plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
        }, transformedFilters = this.transformFilters(filters), filtersControlMarkup = /* @__PURE__ */ import_react278.default.createElement(ConnectedFilterControl, {
          rightPopoverableActions: transformedFilters,
          rightAction: rightActionMarkup,
          auxiliary: children,
          disabled,
          forceShowMorefiltersButton: filters.length > transformedFilters.length,
          queryFieldHidden: hideQueryField
        }, hideQueryField ? null : /* @__PURE__ */ import_react278.default.createElement(TextField, {
          placeholder: queryPlaceholder || i18n.translate("Polaris.Filters.filter", {
            resourceName: filterResourceName.plural
          }),
          onChange: onQueryChange,
          onBlur: onQueryBlur,
          onFocus: onQueryFocus,
          value: queryValue,
          focused,
          label: queryPlaceholder || i18n.translate("Polaris.Filters.filter", {
            resourceName: filterResourceName.plural
          }),
          labelHidden: true,
          prefix: /* @__PURE__ */ import_react278.default.createElement("span", {
            className: styles95.SearchIcon
          }, /* @__PURE__ */ import_react278.default.createElement(Icon, {
            source: SvgSearchMinor
          })),
          clearButton: true,
          onClearButtonClick: onQueryClear,
          disabled: disabled || disableQueryField,
          autoComplete: "off"
        })), filtersContainerHeaderClassname = classNames(styles95.LegacyFiltersContainerHeader), filtersDesktopHeaderMarkup = /* @__PURE__ */ import_react278.default.createElement("div", {
          className: filtersContainerHeaderClassname
        }, /* @__PURE__ */ import_react278.default.createElement(Text, {
          variant: "headingLg",
          as: "h3"
        }, moreFiltersLabel), /* @__PURE__ */ import_react278.default.createElement(Button, {
          icon: SvgCancelSmallMinor,
          variant: "plain",
          accessibilityLabel: i18n.translate("Polaris.Filters.cancel"),
          onClick: this.closeFilters
        })), filtersMobileHeaderMarkup = /* @__PURE__ */ import_react278.default.createElement("div", {
          className: filtersContainerHeaderClassname
        }, /* @__PURE__ */ import_react278.default.createElement(Button, {
          icon: SvgCancelSmallMinor,
          variant: "plain",
          accessibilityLabel: i18n.translate("Polaris.Filters.cancel"),
          onClick: this.closeFilters
        }), /* @__PURE__ */ import_react278.default.createElement(Text, {
          variant: "headingLg",
          as: "h3"
        }, moreFiltersLabel), /* @__PURE__ */ import_react278.default.createElement(Button, {
          onClick: this.closeFilters,
          variant: "primary"
        }, i18n.translate("Polaris.Filters.done"))), filtersDesktopFooterClassname = classNames(styles95.LegacyFiltersContainerFooter), filtersDesktopFooterMarkup = /* @__PURE__ */ import_react278.default.createElement("div", {
          className: filtersDesktopFooterClassname
        }, /* @__PURE__ */ import_react278.default.createElement(Button, {
          onClick: this.handleClearAll,
          disabled: !this.hasAppliedFilters()
        }, i18n.translate("Polaris.Filters.clearAllFilters")), /* @__PURE__ */ import_react278.default.createElement("div", {
          ref: this.moreFiltersDoneButtonContainer
        }, /* @__PURE__ */ import_react278.default.createElement(Button, {
          onClick: this.closeFilters,
          variant: "primary"
        }, i18n.translate("Polaris.Filters.done")))), filtersMobileFooterMarkup = /* @__PURE__ */ import_react278.default.createElement("div", {
          className: styles95.LegacyFiltersMobileContainerFooter
        }, this.hasAppliedFilters() ? /* @__PURE__ */ import_react278.default.createElement(Button, {
          onClick: onClearAll,
          fullWidth: true
        }, i18n.translate("Polaris.Filters.clearAllFilters")) : /* @__PURE__ */ import_react278.default.createElement("div", {
          className: styles95.EmptyFooterState
        }, /* @__PURE__ */ import_react278.default.createElement(Text, {
          tone: "subdued",
          as: "span"
        }, /* @__PURE__ */ import_react278.default.createElement("p", null, i18n.translate("Polaris.Filters.noFiltersApplied"))))), shouldHideTagsContainer = !appliedFilters || appliedFilters.length < 1, tagsMarkup = hideTags ? null : /* @__PURE__ */ import_react278.default.createElement(TagsWrapper, {
          hidden: shouldHideTagsContainer
        }, /* @__PURE__ */ import_react278.default.createElement("div", {
          className: styles95.TagsContainer,
          "aria-live": "polite"
        }, (appliedFilters || []).map((filter) => /* @__PURE__ */ import_react278.default.createElement(Tag, {
          key: filter.key,
          onRemove: () => {
            filter.onRemove(filter.key);
          },
          disabled
        }, filter.label)))), filtersMobileContainerContentClassName = classNames(styles95.LegacyFiltersMobileContainerContent), filtersDesktopContainerContentClassName = classNames(styles95.LegacyFiltersDesktopContainerContent), filtersContainerMarkup = isNavigationCollapsed ? /* @__PURE__ */ import_react278.default.createElement(Sheet, {
          accessibilityLabel: moreFiltersLabel,
          open,
          onClose: this.closeFilters,
          onEntered: this.setReadyForFocus(true),
          onExit: this.setReadyForFocus(false)
        }, filtersMobileHeaderMarkup, /* @__PURE__ */ import_react278.default.createElement(Scrollable, {
          className: filtersMobileContainerContentClassName,
          shadow: true
        }, filtersContentMarkup, filtersMobileFooterMarkup)) : /* @__PURE__ */ import_react278.default.createElement(Sheet, {
          accessibilityLabel: moreFiltersLabel,
          open,
          onClose: this.closeFilters,
          onEntered: this.setReadyForFocus(true),
          onExit: this.setReadyForFocus(false)
        }, /* @__PURE__ */ import_react278.default.createElement("div", {
          className: styles95.LegacyFiltersContainer
        }, filtersDesktopHeaderMarkup, /* @__PURE__ */ import_react278.default.createElement(Scrollable, {
          className: filtersDesktopContainerContentClassName,
          shadow: true
        }, filtersContentMarkup), filtersDesktopFooterMarkup)), helpTextMarkup = helpText ? /* @__PURE__ */ import_react278.default.createElement("div", {
          id: "FiltersHelpText",
          className: styles95.HelpText
        }, /* @__PURE__ */ import_react278.default.createElement(Text, {
          tone: "subdued",
          as: "span"
        }, helpText)) : null;
        return /* @__PURE__ */ import_react278.default.createElement(WithinFilterContext.Provider, {
          value: true
        }, /* @__PURE__ */ import_react278.default.createElement("div", {
          className: styles95.LegacyFilters
        }, filtersControlMarkup, filtersContainerMarkup, tagsMarkup, helpTextMarkup, backdropMarkup, /* @__PURE__ */ import_react278.default.createElement(KeypressListener, {
          keyCode: Key.Escape,
          handler: this.closeFilters
        })));
      }
      hasAppliedFilters() {
        let {
          appliedFilters,
          queryValue
        } = this.props, filtersApplied = Boolean(appliedFilters && appliedFilters.length > 0), queryApplied = Boolean(queryValue && queryValue !== "");
        return filtersApplied || queryApplied;
      }
      getAppliedFilterContent(key) {
        let {
          appliedFilters
        } = this.props;
        if (!appliedFilters)
          return;
        let filter = appliedFilters.find((filter2) => filter2.key === key);
        return filter?.label;
      }
      getAppliedFilterRemoveHandler(key) {
        let {
          appliedFilters
        } = this.props;
        if (!appliedFilters)
          return;
        let filter = appliedFilters.find((filter2) => filter2.key === key);
        return filter?.onRemove;
      }
      openFilters() {
        this.setState({
          open: true
        });
      }
      toggleFilter(key) {
        this.state[`${key}${Suffix.Filter}`] === true ? this.setState({
          readyForFocus: false,
          [`${key}${Suffix.Filter}`]: false
        }) : this.setState({
          readyForFocus: false,
          [`${key}${Suffix.Filter}`]: true
        });
      }
      openFilterShortcut(key) {
        this.setState({
          [`${key}${Suffix.Shortcut}`]: true
        });
      }
      closeFilterShortcut(key) {
        this.setState({
          [`${key}${Suffix.Shortcut}`]: false
        });
      }
      toggleFilterShortcut(key) {
        this.state[`${key}${Suffix.Shortcut}`] === true ? this.closeFilterShortcut(key) : this.openFilterShortcut(key);
      }
      transformFilters(filters) {
        let transformedActions = [];
        return getShortcutFilters(filters).forEach((filter) => {
          let {
            key,
            label,
            disabled
          } = filter;
          transformedActions.push({
            popoverContent: this.generateFilterMarkup(filter),
            popoverOpen: Boolean(this.state[`${key}${Suffix.Shortcut}`]),
            key,
            content: label,
            disabled,
            onAction: () => this.toggleFilterShortcut(key)
          });
        }), transformedActions;
      }
      generateFilterMarkup(filter) {
        let i18n = this.props.i18n, removeCallback = this.getAppliedFilterRemoveHandler(filter.key), removeHandler = removeCallback == null ? void 0 : () => {
          removeCallback(filter.key);
        }, clearButtonMarkup = !filter.hideClearButton && /* @__PURE__ */ import_react278.default.createElement(Button, {
          variant: "plain",
          disabled: removeHandler == null,
          onClick: removeHandler,
          accessibilityLabel: i18n.translate("Polaris.Filters.clearLabel", {
            filterName: filter.label
          })
        }, i18n.translate("Polaris.Filters.clear"));
        return /* @__PURE__ */ import_react278.default.createElement("div", {
          ref: this.focusNode
        }, /* @__PURE__ */ import_react278.default.createElement(LegacyStack, {
          vertical: true,
          spacing: "tight"
        }, filter.filter, clearButtonMarkup));
      }
    };
    LegacyFiltersInner.contextType = ResourceListContext;
  }
});
function getVisibleAndHiddenTabIndices2(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
  let sumTabWidths = tabWidths.reduce((sum, width2) => sum + width2, 0), arrayOfTabIndices = tabs.map((_, index) => index), visibleTabs = [], hiddenTabs = [];
  if (containerWidth > sumTabWidths)
    visibleTabs.push(...arrayOfTabIndices);
  else {
    visibleTabs.push(selected);
    let tabListWidth = tabWidths[selected];
    arrayOfTabIndices.forEach((currentTabIndex) => {
      if (currentTabIndex !== selected) {
        let currentTabWidth = tabWidths[currentTabIndex];
        if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
          hiddenTabs.push(currentTabIndex);
          return;
        }
        visibleTabs.push(currentTabIndex), tabListWidth += currentTabWidth;
      }
    });
  }
  return {
    visibleTabs,
    hiddenTabs
  };
}
var init_utilities9 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyTabs/utilities.js"() {
  }
});
var styles99;
var init_LegacyTabs_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyTabs/LegacyTabs.scss.js"() {
    styles99 = {
      LegacyTabs: "Polaris-LegacyTabs",
      fitted: "Polaris-LegacyTabs--fitted",
      TabContainer: "Polaris-LegacyTabs__TabContainer",
      Title: "Polaris-LegacyTabs__Title",
      fillSpace: "Polaris-LegacyTabs--fillSpace",
      Tab: "Polaris-LegacyTabs__Tab",
      "Tab-selected": "Polaris-LegacyTabs__Tab--selected",
      titleWithIcon: "Polaris-LegacyTabs--titleWithIcon",
      Panel: "Polaris-LegacyTabs__Panel",
      "Panel-hidden": "Polaris-LegacyTabs__Panel--hidden",
      Item: "Polaris-LegacyTabs__Item",
      DisclosureTab: "Polaris-LegacyTabs__DisclosureTab",
      "DisclosureTab-visible": "Polaris-LegacyTabs__DisclosureTab--visible",
      DisclosureActivator: "Polaris-LegacyTabs__DisclosureActivator",
      TabMeasurer: "Polaris-LegacyTabs__TabMeasurer"
    };
  }
});
function Panel2({
  hidden,
  id,
  tabID,
  children
}) {
  let className = classNames(styles99.Panel, hidden && styles99["Panel-hidden"]);
  return /* @__PURE__ */ import_react279.default.createElement("div", {
    className,
    id,
    role: "tabpanel",
    "aria-labelledby": tabID,
    tabIndex: -1
  }, children);
}
var import_react279;
var init_Panel2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyTabs/components/Panel/Panel.js"() {
    import_react279 = __toESM(require_react());
    init_css();
    init_LegacyTabs_scss();
  }
});
function Tab2({
  id,
  focused,
  siblingTabHasFocus,
  children,
  onClick,
  selected,
  url,
  panelID,
  measuring,
  accessibilityLabel
}) {
  let wasSelected = (0, import_react280.useRef)(selected), panelFocused = (0, import_react280.useRef)(false), node = (0, import_react280.useRef)(null);
  (0, import_react280.useEffect)(() => {
    if (measuring)
      return;
    (focused || document.activeElement && document.activeElement.id === id) && selected && panelID != null && !panelFocused.current && (focusPanelID2(panelID), panelFocused.current = true), selected && !wasSelected.current && panelID != null ? focusPanelID2(panelID) : focused && node.current != null && focusFirstFocusableNode(node.current), wasSelected.current = selected;
  }, [focused, id, measuring, panelID, selected]);
  let handleClick = onClick && onClick.bind(null, id), className = classNames(styles99.Tab, selected && styles99["Tab-selected"]), tabIndex;
  selected && !siblingTabHasFocus && !measuring || focused && !measuring ? tabIndex = 0 : tabIndex = -1;
  let tabContainerClassNames = classNames(styles99.TabContainer, selected && styles99.Underline), markup = url ? /* @__PURE__ */ import_react280.default.createElement(UnstyledLink, {
    id,
    url,
    role: "tab",
    tabIndex,
    onClick: handleClick,
    className,
    "aria-selected": selected,
    "aria-controls": panelID,
    "aria-label": accessibilityLabel,
    onMouseUp: handleMouseUpByBlurring
  }, /* @__PURE__ */ import_react280.default.createElement("span", {
    className: styles99.Title
  }, children)) : /* @__PURE__ */ import_react280.default.createElement("button", {
    id,
    role: "tab",
    type: "button",
    tabIndex,
    className,
    onClick: handleClick,
    "aria-selected": selected,
    "aria-controls": panelID,
    "aria-label": accessibilityLabel,
    onMouseUp: handleMouseUpByBlurring
  }, /* @__PURE__ */ import_react280.default.createElement("span", {
    className: styles99.Title
  }, children));
  return /* @__PURE__ */ import_react280.default.createElement("li", {
    className: tabContainerClassNames,
    ref: node,
    role: "presentation"
  }, markup);
}
function focusPanelID2(panelID) {
  let panel = document.getElementById(panelID);
  panel && panel.focus({
    preventScroll: true
  });
}
var import_react280;
var init_Tab2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyTabs/components/Tab/Tab.js"() {
    import_react280 = __toESM(require_react());
    init_css();
    init_focus();
    init_LegacyTabs_scss();
    init_UnstyledLink();
  }
});
function noop15() {
}
var import_react281;
var TabMeasurer3;
var init_TabMeasurer2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyTabs/components/TabMeasurer/TabMeasurer.js"() {
    import_react281 = __toESM(require_react());
    init_css();
    init_use_component_did_mount();
    init_LegacyTabs_scss();
    init_Tab2();
    init_EventListener();
    TabMeasurer3 = /* @__PURE__ */ (0, import_react281.memo)(function({
      selected,
      tabs,
      activator,
      tabToFocus,
      siblingTabHasFocus,
      handleMeasurement: handleMeasurementProp
    }) {
      let containerNode = (0, import_react281.useRef)(null), animationFrame = (0, import_react281.useRef)(null), handleMeasurement = (0, import_react281.useCallback)(() => {
        animationFrame.current && cancelAnimationFrame(animationFrame.current), animationFrame.current = requestAnimationFrame(() => {
          if (!containerNode.current)
            return;
          let containerWidth = containerNode.current.offsetWidth, hiddenTabNodes = containerNode.current.children, hiddenTabWidths = Array.from(hiddenTabNodes).map((node) => Math.ceil(node.getBoundingClientRect().width)), disclosureWidth = hiddenTabWidths.pop() || 0;
          handleMeasurementProp({
            containerWidth,
            disclosureWidth,
            hiddenTabWidths
          });
        });
      }, [handleMeasurementProp]);
      (0, import_react281.useEffect)(() => {
        handleMeasurement();
      }, [handleMeasurement, tabs]), useComponentDidMount(() => {
        setTimeout(handleMeasurement, 0);
      });
      let tabsMarkup = tabs.map((tab, index) => /* @__PURE__ */ import_react281.default.createElement(Tab2, {
        measuring: true,
        key: `${index}${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        onClick: noop15,
        url: tab.url
      }, tab.content)), classname = classNames(styles99.LegacyTabs, styles99.TabMeasurer);
      return /* @__PURE__ */ import_react281.default.createElement("div", {
        className: classname,
        ref: containerNode
      }, /* @__PURE__ */ import_react281.default.createElement(EventListener, {
        event: "resize",
        handler: handleMeasurement
      }), tabsMarkup, activator);
    });
  }
});
function noop16() {
}
var import_react282;
var Item9;
var init_Item8 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyTabs/components/Item/Item.js"() {
    import_react282 = __toESM(require_react());
    init_css();
    init_LegacyTabs_scss();
    init_UnstyledLink();
    init_context();
    Item9 = class extends import_react282.PureComponent {
      constructor(...args) {
        super(...args), this.focusedNode = null, this.setFocusedNode = (node) => {
          this.focusedNode = node;
        };
      }
      componentDidMount() {
        let {
          focusedNode
        } = this, {
          focused
        } = this.props;
        focusedNode && focusedNode instanceof HTMLElement && focused && focusedNode.focus();
      }
      componentDidUpdate() {
        let {
          focusedNode
        } = this, {
          focused
        } = this.props;
        focusedNode && focusedNode instanceof HTMLElement && focused && focusedNode.focus();
      }
      render() {
        let {
          id,
          panelID,
          children,
          url,
          accessibilityLabel,
          onClick = noop16
        } = this.props, classname = classNames(styles99.Item), sharedProps = {
          id,
          ref: this.setFocusedNode,
          onClick,
          className: classname,
          "aria-controls": panelID,
          "aria-selected": false,
          "aria-label": accessibilityLabel
        }, markup = url ? /* @__PURE__ */ import_react282.default.createElement(UnstyledLink, Object.assign({}, sharedProps, {
          url
        }), children) : /* @__PURE__ */ import_react282.default.createElement("button", Object.assign({}, sharedProps, {
          type: "button"
        }), children);
        return /* @__PURE__ */ import_react282.default.createElement("li", null, markup);
      }
    };
    Item9.contextType = FeaturesContext;
  }
});
function List2({
  focusIndex,
  disclosureTabs,
  onClick = noop17,
  onKeyPress = noop17
}) {
  let tabs = disclosureTabs.map(({
    id,
    content,
    ...tabProps
  }, index) => /* @__PURE__ */ import_react283.default.createElement(Item9, Object.assign({
    key: id
  }, tabProps, {
    id,
    focused: index === focusIndex,
    onClick: onClick.bind(null, id)
  }), content));
  return /* @__PURE__ */ import_react283.default.createElement("div", {
    onKeyDown: handleKeyDown3,
    onKeyUp: onKeyPress
  }, /* @__PURE__ */ import_react283.default.createElement(Box, {
    as: "ul",
    padding: "200"
  }, tabs));
}
function noop17() {
}
function handleKeyDown3(event) {
  let {
    key
  } = event;
  (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
}
var import_react283;
var init_List2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyTabs/components/List/List.js"() {
    import_react283 = __toESM(require_react());
    init_Item8();
    init_Box();
  }
});
function noop18() {
}
function handleKeyDown4(event) {
  let {
    key
  } = event;
  (key === "ArrowLeft" || key === "ArrowRight") && (event.preventDefault(), event.stopPropagation());
}
function LegacyTabs(props) {
  let i18n = useI18n();
  return /* @__PURE__ */ import_react284.default.createElement(TabsInner, Object.assign({}, props, {
    i18n
  }));
}
var import_react284;
var TabsInner;
var init_LegacyTabs = __esm({
  "node_modules/@shopify/polaris/build/esm/components/LegacyTabs/LegacyTabs.js"() {
    import_react284 = __toESM(require_react());
    init_dist3();
    init_css();
    init_utilities9();
    init_LegacyTabs_scss();
    init_Panel2();
    init_TabMeasurer2();
    init_List2();
    init_hooks2();
    init_Tab2();
    init_Icon();
    init_Box();
    init_Popover();
    TabsInner = class extends import_react284.PureComponent {
      constructor(...args) {
        super(...args), this.state = {
          disclosureWidth: 0,
          containerWidth: 1 / 0,
          tabWidths: [],
          visibleTabs: [],
          hiddenTabs: [],
          showDisclosure: false,
          tabToFocus: -1
        }, this.handleKeyPress = (event) => {
          let {
            tabToFocus,
            visibleTabs,
            hiddenTabs,
            showDisclosure
          } = this.state, key = event.key, tabsArrayInOrder = showDisclosure ? visibleTabs.concat(hiddenTabs) : [...visibleTabs], newFocus = tabsArrayInOrder.indexOf(tabToFocus);
          key === "ArrowRight" && (newFocus += 1, newFocus === tabsArrayInOrder.length && (newFocus = 0)), key === "ArrowLeft" && (newFocus === -1 || newFocus === 0 ? newFocus = tabsArrayInOrder.length - 1 : newFocus -= 1), this.setState({
            tabToFocus: tabsArrayInOrder[newFocus]
          });
        }, this.renderTabMarkup = (tab, index) => {
          let {
            selected,
            children
          } = this.props, {
            tabToFocus
          } = this.state, tabPanelID = tab.panelID || `${tab.id}-panel`;
          return /* @__PURE__ */ import_react284.default.createElement(Tab2, {
            key: `${index}-${tab.id}`,
            id: tab.id,
            siblingTabHasFocus: tabToFocus > -1,
            focused: index === tabToFocus,
            selected: index === selected,
            onClick: this.handleTabClick,
            panelID: children ? tabPanelID : void 0,
            accessibilityLabel: tab.accessibilityLabel,
            url: tab.url
          }, tab.content);
        }, this.handleFocus = (event) => {
          let {
            selected,
            tabs
          } = this.props, target = event.target;
          if (target.classList.contains(styles99.Tab) || target.classList.contains(styles99.Item)) {
            let tabToFocus = -1;
            tabs.every((tab, index) => tab.id === target.id ? (tabToFocus = index, false) : true), this.setState({
              tabToFocus
            });
            return;
          }
          if (target.classList.contains(styles99.DisclosureActivator))
            return;
          if (!event.relatedTarget) {
            this.setState({
              tabToFocus: selected
            });
            return;
          }
          let relatedTarget = event.relatedTarget;
          relatedTarget instanceof HTMLElement && !relatedTarget.classList.contains(styles99.Tab) && !relatedTarget.classList.contains(styles99.Item) && !relatedTarget.classList.contains(styles99.DisclosureActivator) && this.setState({
            tabToFocus: selected
          });
        }, this.handleBlur = (event) => {
          if (event.relatedTarget == null) {
            this.setState({
              tabToFocus: -1
            });
            return;
          }
          let target = event.relatedTarget;
          target instanceof HTMLElement && !target.classList.contains(styles99.Tab) && !target.classList.contains(styles99.Item) && this.setState({
            tabToFocus: -1
          });
        }, this.handleDisclosureActivatorClick = () => {
          this.setState(({
            showDisclosure
          }) => ({
            showDisclosure: !showDisclosure
          }));
        }, this.handleClose = () => {
          this.setState({
            showDisclosure: false
          });
        }, this.handleMeasurement = (measurements) => {
          let {
            tabs,
            selected
          } = this.props, {
            tabToFocus
          } = this.state, {
            hiddenTabWidths: tabWidths,
            containerWidth,
            disclosureWidth
          } = measurements, {
            visibleTabs,
            hiddenTabs
          } = getVisibleAndHiddenTabIndices2(tabs, selected, disclosureWidth, tabWidths, containerWidth);
          this.setState({
            tabToFocus: tabToFocus === -1 ? -1 : selected,
            visibleTabs,
            hiddenTabs,
            disclosureWidth,
            containerWidth,
            tabWidths
          });
        }, this.handleTabClick = (id) => {
          let {
            tabs,
            onSelect = noop18
          } = this.props, tab = tabs.find((aTab) => aTab.id === id);
          if (tab == null)
            return;
          let selectedIndex = tabs.indexOf(tab);
          onSelect(selectedIndex);
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let {
          disclosureWidth,
          tabWidths,
          containerWidth
        } = prevState, {
          visibleTabs,
          hiddenTabs
        } = getVisibleAndHiddenTabIndices2(nextProps.tabs, nextProps.selected, disclosureWidth, tabWidths, containerWidth);
        return {
          visibleTabs,
          hiddenTabs,
          selected: nextProps.selected
        };
      }
      render() {
        let {
          tabs,
          selected,
          fitted,
          children,
          i18n,
          disclosureText
        } = this.props, {
          tabToFocus,
          visibleTabs,
          hiddenTabs,
          showDisclosure
        } = this.state, disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]), panelMarkup = children ? tabs.map((_tab, index) => selected === index ? /* @__PURE__ */ import_react284.default.createElement(Panel2, {
          id: tabs[index].panelID || `${tabs[index].id}-panel`,
          tabID: tabs[index].id,
          key: tabs[index].id
        }, children) : /* @__PURE__ */ import_react284.default.createElement(Panel2, {
          id: tabs[index].panelID || `${tabs[index].id}-panel`,
          tabID: tabs[index].id,
          key: tabs[index].id,
          hidden: true
        })) : null, tabsMarkup = visibleTabs.sort((tabA, tabB) => tabA - tabB).map((tabIndex) => this.renderTabMarkup(tabs[tabIndex], tabIndex)), disclosureActivatorVisible = visibleTabs.length < tabs.length, hasCustomDisclosure = Boolean(disclosureText), classname = classNames(styles99.LegacyTabs, fitted && styles99.fitted, disclosureActivatorVisible && styles99.fillSpace), disclosureTabClassName = classNames(styles99.DisclosureTab, disclosureActivatorVisible && styles99["DisclosureTab-visible"]), disclosureButtonClassName = classNames(styles99.DisclosureActivator, hasCustomDisclosure && styles99.Tab), disclosureButtonContentWrapperClassName = classNames(styles99.Title, hasCustomDisclosure && styles99.titleWithIcon), disclosureButtonContent = hasCustomDisclosure ? /* @__PURE__ */ import_react284.default.createElement(import_react284.default.Fragment, null, disclosureText, /* @__PURE__ */ import_react284.default.createElement(Icon, {
          source: SvgChevronDownMinor,
          tone: "subdued"
        })) : /* @__PURE__ */ import_react284.default.createElement(Icon, {
          source: SvgHorizontalDotsMinor,
          tone: "subdued"
        }), disclosureButton = /* @__PURE__ */ import_react284.default.createElement("button", {
          type: "button",
          className: disclosureButtonClassName,
          onClick: this.handleDisclosureActivatorClick,
          "aria-label": i18n.translate("Polaris.Tabs.toggleTabsLabel")
        }, /* @__PURE__ */ import_react284.default.createElement("span", {
          className: disclosureButtonContentWrapperClassName
        }, disclosureButtonContent)), activator = disclosureText ? /* @__PURE__ */ import_react284.default.createElement("div", {
          className: styles99.TabContainer
        }, disclosureButton) : disclosureButton;
        return /* @__PURE__ */ import_react284.default.createElement("div", null, /* @__PURE__ */ import_react284.default.createElement(Box, {
          borderBlockEndWidth: "025",
          borderColor: "border-secondary",
          paddingInlineStart: "200",
          paddingInlineEnd: "200"
        }, /* @__PURE__ */ import_react284.default.createElement(TabMeasurer3, {
          tabToFocus,
          activator,
          selected,
          tabs,
          siblingTabHasFocus: tabToFocus > -1,
          handleMeasurement: this.handleMeasurement
        }), /* @__PURE__ */ import_react284.default.createElement("ul", {
          role: "tablist",
          className: classname,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyDown: handleKeyDown4,
          onKeyUp: this.handleKeyPress
        }, tabsMarkup, /* @__PURE__ */ import_react284.default.createElement("li", {
          className: disclosureTabClassName,
          role: "presentation"
        }, /* @__PURE__ */ import_react284.default.createElement(Popover2, {
          preferredPosition: "below",
          activator,
          active: disclosureActivatorVisible && showDisclosure,
          onClose: this.handleClose,
          autofocusTarget: "first-node"
        }, /* @__PURE__ */ import_react284.default.createElement(List2, {
          focusIndex: hiddenTabs.indexOf(tabToFocus),
          disclosureTabs,
          onClick: this.handleTabClick,
          onKeyPress: this.handleKeyPress
        }))))), panelMarkup);
      }
      // eslint-disable-next-line @shopify/react-no-multiple-render-methods
    };
  }
});
var styles100;
var init_Link_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Link/Link.scss.js"() {
    styles100 = {
      Link: "Polaris-Link",
      monochrome: "Polaris-Link--monochrome",
      removeUnderline: "Polaris-Link--removeUnderline"
    };
  }
});
function Link3({
  url,
  children,
  onClick,
  external,
  target,
  id,
  monochrome,
  removeUnderline,
  accessibilityLabel,
  dataPrimaryLink
}) {
  return /* @__PURE__ */ import_react285.default.createElement(BannerContext.Consumer, null, (BannerContext2) => {
    let shouldBeMonochrome = monochrome || BannerContext2, className = classNames(styles100.Link, shouldBeMonochrome && styles100.monochrome, removeUnderline && styles100.removeUnderline);
    return url ? /* @__PURE__ */ import_react285.default.createElement(UnstyledLink, {
      onClick,
      className,
      url,
      external,
      target,
      id,
      "aria-label": accessibilityLabel,
      "data-primary-link": dataPrimaryLink
    }, children) : /* @__PURE__ */ import_react285.default.createElement("button", {
      type: "button",
      onClick,
      className,
      id,
      "aria-label": accessibilityLabel,
      "data-primary-link": dataPrimaryLink
    }, children);
  });
}
var import_react285;
var init_Link = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Link/Link.js"() {
    import_react285 = __toESM(require_react());
    init_banner_context();
    init_css();
    init_Link_scss();
    init_UnstyledLink();
  }
});
var styles101;
var init_List_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/List/List.scss.js"() {
    styles101 = {
      List: "Polaris-List",
      typeNumber: "Polaris-List--typeNumber",
      Item: "Polaris-List__Item",
      spacingLoose: "Polaris-List--spacingLoose"
    };
  }
});
function Item10({
  children
}) {
  return /* @__PURE__ */ import_react286.default.createElement("li", {
    className: styles101.Item
  }, children);
}
var import_react286;
var init_Item9 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/List/components/Item/Item.js"() {
    import_react286 = __toESM(require_react());
    init_List_scss();
  }
});
var import_react287;
var List3;
var init_List3 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/List/List.js"() {
    import_react287 = __toESM(require_react());
    init_css();
    init_List_scss();
    init_Item9();
    List3 = function({
      children,
      gap = "loose",
      type = "bullet"
    }) {
      let className = classNames(styles101.List, gap && styles101[variationName("spacing", gap)], type && styles101[variationName("type", type)]), ListElement = type === "bullet" ? "ul" : "ol";
      return /* @__PURE__ */ import_react287.default.createElement(ListElement, {
        className
      }, children);
    };
    List3.Item = Item10;
  }
});
var import_react288;
var Loading3;
var init_Loading3 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Loading/Loading.js"() {
    import_react288 = __toESM(require_react());
    init_hooks9();
    Loading3 = /* @__PURE__ */ (0, import_react288.memo)(function() {
      let {
        startLoading,
        stopLoading
      } = useFrame();
      return (0, import_react288.useEffect)(() => (startLoading(), () => {
        stopLoading();
      }), [startLoading, stopLoading]), null;
    });
  }
});
var styles102;
var init_MediaCard_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/MediaCard/MediaCard.scss.js"() {
    styles102 = {
      MediaCard: "Polaris-MediaCard",
      portrait: "Polaris-MediaCard--portrait",
      MediaContainer: "Polaris-MediaCard__MediaContainer",
      sizeSmall: "Polaris-MediaCard--sizeSmall",
      InfoContainer: "Polaris-MediaCard__InfoContainer",
      ActionContainer: "Polaris-MediaCard__ActionContainer",
      Description: "Polaris-MediaCard__Description"
    };
  }
});
function MediaCard({
  title,
  children,
  primaryAction,
  secondaryAction,
  description,
  popoverActions = [],
  portrait = false,
  size: size2 = "medium",
  onDismiss
}) {
  let i18n = useI18n(), {
    value: popoverActive,
    toggle: togglePopoverActive
  } = useToggle(false), headerMarkup = null;
  if (title) {
    let headerContent = typeof title == "string" ? /* @__PURE__ */ import_react289.default.createElement(Text, {
      variant: "headingSm",
      as: "h2"
    }, title) : title;
    headerMarkup = /* @__PURE__ */ import_react289.default.createElement("div", null, headerContent);
  }
  let dismissButtonMarkup = onDismiss ? /* @__PURE__ */ import_react289.default.createElement(Button, {
    icon: SvgCancelMinor,
    onClick: onDismiss,
    size: "slim",
    accessibilityLabel: i18n.translate("Polaris.MediaCard.dismissButton"),
    variant: "tertiary"
  }) : null, popoverActivator = /* @__PURE__ */ import_react289.default.createElement(InlineStack, {
    blockAlign: "center"
  }, /* @__PURE__ */ import_react289.default.createElement(Button, {
    icon: SvgHorizontalDotsMinor,
    onClick: togglePopoverActive,
    size: "slim",
    accessibilityLabel: i18n.translate("Polaris.MediaCard.popoverButton"),
    variant: "tertiary"
  })), popoverActionsMarkup = popoverActions.length > 0 ? /* @__PURE__ */ import_react289.default.createElement(Popover2, {
    active: popoverActive,
    activator: popoverActivator,
    onClose: togglePopoverActive,
    preferredAlignment: "left",
    preferredPosition: "below"
  }, /* @__PURE__ */ import_react289.default.createElement(ActionList, {
    items: popoverActions,
    onActionAnyItem: togglePopoverActive
  })) : null, primaryActionMarkup = primaryAction ? /* @__PURE__ */ import_react289.default.createElement("div", null, buttonFrom(primaryAction)) : null, secondaryActionMarkup = secondaryAction ? /* @__PURE__ */ import_react289.default.createElement("div", null, buttonFrom(secondaryAction)) : null, actionClassName = classNames(styles102.ActionContainer, portrait && styles102.portrait), actionMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ import_react289.default.createElement("div", {
    className: actionClassName
  }, /* @__PURE__ */ import_react289.default.createElement(ButtonGroup, null, primaryActionMarkup, secondaryActionMarkup)) : null, mediaCardClassName = classNames(styles102.MediaCard, portrait && styles102.portrait), mediaContainerClassName = classNames(styles102.MediaContainer, portrait && styles102.portrait, size2 === "small" && styles102.sizeSmall), infoContainerClassName = classNames(styles102.InfoContainer, portrait && styles102.portrait, size2 === "small" && styles102.sizeSmall), popoverOrDismissMarkup = popoverActionsMarkup || dismissButtonMarkup ? /* @__PURE__ */ import_react289.default.createElement(Box, {
    position: "absolute",
    insetInlineEnd: "500",
    zIndex: "var(--p-z-index-2)"
  }, /* @__PURE__ */ import_react289.default.createElement(InlineStack, {
    gap: "100",
    wrap: false
  }, popoverActionsMarkup, dismissButtonMarkup)) : null;
  return /* @__PURE__ */ import_react289.default.createElement(LegacyCard, null, /* @__PURE__ */ import_react289.default.createElement("div", {
    className: mediaCardClassName
  }, /* @__PURE__ */ import_react289.default.createElement("div", {
    className: mediaContainerClassName
  }, children), /* @__PURE__ */ import_react289.default.createElement("div", {
    className: infoContainerClassName
  }, /* @__PURE__ */ import_react289.default.createElement(Box, {
    padding: "500"
  }, /* @__PURE__ */ import_react289.default.createElement(BlockStack, {
    gap: "200"
  }, /* @__PURE__ */ import_react289.default.createElement(InlineStack, {
    wrap: false,
    align: "space-between",
    gap: "200"
  }, headerMarkup, popoverOrDismissMarkup), /* @__PURE__ */ import_react289.default.createElement("p", {
    className: styles102.Description
  }, description), actionMarkup)))));
}
var import_react289;
var init_MediaCard = __esm({
  "node_modules/@shopify/polaris/build/esm/components/MediaCard/MediaCard.js"() {
    import_react289 = __toESM(require_react());
    init_dist3();
    init_use_toggle();
    init_css();
    init_MediaCard_scss();
    init_hooks2();
    init_Button();
    init_InlineStack();
    init_Popover();
    init_ActionList();
    init_utils4();
    init_LegacyCard();
    init_Box();
    init_BlockStack();
    init_ButtonGroup();
    init_Text();
  }
});
var import_react290;
var NavigationContext2;
var init_context20 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Navigation/context.js"() {
    import_react290 = __toESM(require_react()), NavigationContext2 = /* @__PURE__ */ (0, import_react290.createContext)({
      location: ""
    });
  }
});
var styles103;
var init_Navigation_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Navigation/Navigation.scss.js"() {
    styles103 = {
      Navigation: "Polaris-Navigation",
      UserMenu: "Polaris-Navigation__UserMenu",
      ContextControl: "Polaris-Navigation__ContextControl",
      PrimaryNavigation: "Polaris-Navigation__PrimaryNavigation",
      LogoContainer: "Polaris-Navigation__LogoContainer",
      hasLogoSuffix: "Polaris-Navigation--hasLogoSuffix",
      Logo: "Polaris-Navigation__Logo",
      LogoLink: "Polaris-Navigation__LogoLink",
      Item: "Polaris-Navigation__Item",
      "Icon-resized": "Polaris-Navigation__Icon--resized",
      Badge: "Polaris-Navigation__Badge",
      ItemInnerWrapper: "Polaris-Navigation__ItemInnerWrapper",
      ItemWrapper: "Polaris-Navigation__ItemWrapper",
      ItemInnerDisabled: "Polaris-Navigation__ItemInnerDisabled",
      "ItemInnerWrapper-display-actions-on-hover": "Polaris-Navigation--itemInnerWrapperDisplayActionsOnHover",
      SecondaryActions: "Polaris-Navigation__SecondaryActions",
      "ItemInnerWrapper-selected": "Polaris-Navigation__ItemInnerWrapper--selected",
      Text: "Polaris-Navigation__Text",
      "ItemInnerWrapper-open": "Polaris-Navigation__ItemInnerWrapper--open",
      "Item-selected": "Polaris-Navigation__Item--selected",
      "Item-child-active": "Polaris-Navigation--itemChildActive",
      "Item-disabled": "Polaris-Navigation__Item--disabled",
      Icon: "Polaris-Navigation__Icon",
      "ListItem-hasAction": "Polaris-Navigation__ListItem--hasAction",
      subNavigationActive: "Polaris-Navigation--subNavigationActive",
      ListItem: "Polaris-Navigation__ListItem",
      RollupSection: "Polaris-Navigation__RollupSection",
      SecondaryNavigation: "Polaris-Navigation__SecondaryNavigation",
      "Text-truncated": "Polaris-Navigation__Text--truncated",
      ItemWithFloatingActions: "Polaris-Navigation__ItemWithFloatingActions",
      SecondaryAction: "Polaris-Navigation__SecondaryAction",
      List: "Polaris-Navigation__List",
      "Item-line": "Polaris-Navigation__Item--line",
      "Item-hover-line": "Polaris-Navigation--itemHoverLine",
      "Item-line-pointer": "Polaris-Navigation--itemLinePointer",
      "Item-hover-pointer": "Polaris-Navigation--itemHoverPointer",
      "SecondaryNavigation-noIcon": "Polaris-Navigation__SecondaryNavigation--noIcon",
      Section: "Polaris-Navigation__Section",
      "Section-fill": "Polaris-Navigation__Section--fill",
      "Section-withSeparator": "Polaris-Navigation__Section--withSeparator",
      SectionHeading: "Polaris-Navigation__SectionHeading",
      Action: "Polaris-Navigation__Action",
      RollupToggle: "Polaris-Navigation__RollupToggle",
      Indicator: "Polaris-Navigation__Indicator",
      SecondaryNavigationOpen: "Polaris-Navigation__SecondaryNavigationOpen",
      "snappy-grow": "Polaris-Navigation__snappy--grow"
    };
  }
});
var MatchState;
var init_types5 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Navigation/types.js"() {
    (function(MatchState2) {
      MatchState2[MatchState2.MatchForced = 0] = "MatchForced", MatchState2[MatchState2.MatchUrl = 1] = "MatchUrl", MatchState2[MatchState2.MatchPaths = 2] = "MatchPaths", MatchState2[MatchState2.Excluded = 3] = "Excluded", MatchState2[MatchState2.NoMatch = 4] = "NoMatch";
    })(MatchState || (MatchState = {}));
  }
});
function SecondaryNavigation({
  ItemComponent,
  icon,
  longestMatch,
  subNavigationItems,
  showExpanded,
  truncateText,
  secondaryNavigationId
}) {
  let uid = (0, import_react291.useId)(), {
    onNavigationDismiss
  } = (0, import_react291.useContext)(NavigationContext2), [hoveredItem, setHoveredItem] = (0, import_react291.useState)(), matchedItemPosition = subNavigationItems.findIndex((item) => (0, import_react_fast_compare3.default)(item, longestMatch)), hoveredItemPosition = subNavigationItems.findIndex((item) => (0, import_react_fast_compare3.default)(item, hoveredItem));
  return /* @__PURE__ */ import_react291.default.createElement("div", {
    className: classNames(styles103.SecondaryNavigation, showExpanded && styles103.SecondaryNavigationOpen, !icon && styles103["SecondaryNavigation-noIcon"])
  }, /* @__PURE__ */ import_react291.default.createElement(Collapsible, {
    id: secondaryNavigationId || uid,
    open: showExpanded,
    transition: false
  }, /* @__PURE__ */ import_react291.default.createElement("ul", {
    className: styles103.List
  }, subNavigationItems.map((item, index) => {
    let {
      label,
      ...rest
    } = item, onClick = () => {
      onNavigationDismiss?.(), item.onClick && item.onClick !== onNavigationDismiss && item.onClick();
    }, shouldShowVerticalLine = index < matchedItemPosition;
    return /* @__PURE__ */ import_react291.default.createElement(ItemComponent, Object.assign({
      key: label
    }, rest, {
      label,
      showVerticalLine: shouldShowVerticalLine,
      showVerticalHoverPointer: index === hoveredItemPosition,
      onMouseEnter: item.disabled ? void 0 : () => setHoveredItem(item),
      onMouseLeave: item.disabled ? void 0 : () => setHoveredItem(void 0),
      matches: (0, import_react_fast_compare3.default)(item, longestMatch),
      onClick,
      truncateText
    }));
  }))));
}
var import_react291;
var import_react_fast_compare3;
var init_SecondaryNavigation = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Navigation/components/Item/components/SecondaryNavigation/SecondaryNavigation.js"() {
    import_react291 = __toESM(require_react()), import_react_fast_compare3 = __toESM(require_react_fast_compare());
    init_css();
    init_context20();
    init_Navigation_scss();
    init_Collapsible();
  }
});
function Item11({
  url,
  icon: baseIcon,
  matchedItemIcon,
  label,
  subNavigationItems = [],
  secondaryAction,
  secondaryActions,
  displayActionsOnHover,
  disabled,
  onClick,
  accessibilityLabel,
  selected: selectedOverride,
  badge,
  new: isNew,
  matches: matches2,
  exactMatch,
  matchPaths,
  excludePaths,
  external,
  onToggleExpandedState,
  expanded,
  shouldResizeIcon,
  truncateText,
  showVerticalLine,
  showVerticalHoverPointer,
  onMouseEnter,
  onMouseLeave
}) {
  let i18n = useI18n(), {
    isNavigationCollapsed
  } = useMediaQuery(), secondaryNavigationId = (0, import_react292.useId)(), {
    location,
    onNavigationDismiss
  } = (0, import_react292.useContext)(NavigationContext2), navTextRef = (0, import_react292.useRef)(null), [isTruncated, setIsTruncated] = (0, import_react292.useState)(false);
  (0, import_react292.useEffect)(() => {
    !isNavigationCollapsed && expanded && onToggleExpandedState?.();
  }, [expanded, isNavigationCollapsed, onToggleExpandedState]), useIsomorphicLayoutEffect2(() => {
    let navTextNode = navTextRef.current;
    truncateText && navTextNode && setIsTruncated(navTextNode.scrollHeight > navTextNode.clientHeight);
  }, [truncateText]);
  let tabIndex = disabled ? -1 : 0, indicatorMarkup = subNavigationItems.filter((subNavigationItem) => subNavigationItem.new).length > 0 ? /* @__PURE__ */ import_react292.default.createElement("span", {
    className: styles103.Indicator
  }, /* @__PURE__ */ import_react292.default.createElement(Indicator, {
    pulse: true
  })) : null, matchState = matchStateForItem({
    url,
    matches: matches2,
    exactMatch,
    matchPaths,
    excludePaths
  }, location), matchingSubNavigationItems = subNavigationItems.filter((item) => {
    let subMatchState = matchStateForItem(item, location);
    return subMatchState === MatchState.MatchForced || subMatchState === MatchState.MatchUrl || subMatchState === MatchState.MatchPaths;
  }), childIsActive = matchingSubNavigationItems.length > 0, selected = selectedOverride ?? (matchState === MatchState.MatchForced || matchState === MatchState.MatchUrl || matchState === MatchState.MatchPaths), icon = selected || childIsActive ? matchedItemIcon ?? baseIcon : baseIcon, iconMarkup = icon ? /* @__PURE__ */ import_react292.default.createElement("div", {
    className: classNames(styles103.Icon, shouldResizeIcon && styles103["Icon-resized"])
  }, /* @__PURE__ */ import_react292.default.createElement(Icon, {
    source: icon
  })) : null, badgeMarkup = null;
  isNew ? badgeMarkup = /* @__PURE__ */ import_react292.default.createElement(Badge, {
    tone: "new"
  }, i18n.translate("Polaris.Badge.TONE_LABELS.new")) : typeof badge == "string" ? badgeMarkup = /* @__PURE__ */ import_react292.default.createElement(Badge, {
    tone: "new"
  }, badge) : badgeMarkup = badge;
  let wrappedBadgeMarkup = badgeMarkup == null ? null : /* @__PURE__ */ import_react292.default.createElement("div", {
    className: styles103.Badge
  }, badgeMarkup), itemLabelMarkup = /* @__PURE__ */ import_react292.default.createElement("span", {
    className: classNames(styles103.Text, truncateText && styles103["Text-truncated"]),
    ref: navTextRef
  }, label, indicatorMarkup);
  if (url == null) {
    let className2 = classNames(styles103.Item, disabled && styles103["Item-disabled"], selectedOverride && styles103["Item-selected"]);
    return /* @__PURE__ */ import_react292.default.createElement("li", {
      className: styles103.ListItem
    }, /* @__PURE__ */ import_react292.default.createElement("div", {
      className: styles103.ItemWrapper
    }, /* @__PURE__ */ import_react292.default.createElement("div", {
      className: classNames(styles103.ItemInnerWrapper, disabled && styles103.ItemInnerDisabled, selectedOverride && styles103["ItemInnerWrapper-selected"])
    }, /* @__PURE__ */ import_react292.default.createElement("button", {
      type: "button",
      className: className2,
      disabled,
      "aria-disabled": disabled,
      "aria-label": accessibilityLabel,
      onClick: getClickHandler(onClick)
    }, iconMarkup, itemLabelMarkup, wrappedBadgeMarkup))));
  }
  secondaryAction && console.warn("Deprecation: The `secondaryAction` prop on the `Navigation.Item` has been deprecated. Use `secondaryActions` instead.");
  let actions = secondaryActions || secondaryAction && [secondaryAction];
  actions && actions.length > MAX_SECONDARY_ACTIONS && (actions.length = MAX_SECONDARY_ACTIONS, console.warn(`secondaryActions must have a maximum of ${MAX_SECONDARY_ACTIONS} actions. Only the first ${MAX_SECONDARY_ACTIONS} actions will be rendered.`));
  let secondaryActionMarkup = actions?.length ? /* @__PURE__ */ import_react292.default.createElement("span", {
    className: styles103.SecondaryActions
  }, actions.map((action4) => /* @__PURE__ */ import_react292.default.createElement(ItemSecondaryAction, Object.assign({
    key: action4.accessibilityLabel
  }, action4, {
    tabIndex,
    disabled
  })))) : null, itemContentMarkup = /* @__PURE__ */ import_react292.default.createElement(import_react292.default.Fragment, null, iconMarkup, itemLabelMarkup, secondaryActionMarkup ? null : wrappedBadgeMarkup), outerContentMarkup = /* @__PURE__ */ import_react292.default.createElement(import_react292.default.Fragment, null, secondaryActionMarkup ? wrappedBadgeMarkup : null), showExpanded = selected || expanded || childIsActive, itemClassName = classNames(styles103.Item, disabled && styles103["Item-disabled"], (selected || childIsActive) && styles103["Item-selected"], showExpanded && styles103.subNavigationActive, childIsActive && styles103["Item-child-active"], showVerticalLine && styles103["Item-line"], matches2 && styles103["Item-line-pointer"], showVerticalHoverPointer && styles103["Item-hover-pointer"]), secondaryNavigationMarkup = null;
  if (subNavigationItems.length > 0) {
    let longestMatch = matchingSubNavigationItems.sort(({
      url: firstUrl
    }, {
      url: secondUrl
    }) => secondUrl.length - firstUrl.length)[0];
    secondaryNavigationMarkup = /* @__PURE__ */ import_react292.default.createElement(SecondaryNavigation, {
      ItemComponent: Item11,
      icon,
      longestMatch,
      subNavigationItems,
      showExpanded,
      truncateText,
      secondaryNavigationId
    });
  }
  let className = classNames(styles103.ListItem, Boolean(actions && actions.length) && styles103["ListItem-hasAction"]), itemLinkMarkup = () => {
    let linkMarkup = /* @__PURE__ */ import_react292.default.createElement(UnstyledLink, Object.assign({
      url,
      className: itemClassName,
      external,
      tabIndex,
      "aria-disabled": disabled,
      "aria-label": accessibilityLabel,
      onClick: getClickHandler(onClick)
    }, normalizeAriaAttributes(secondaryNavigationId, subNavigationItems.length > 0, showExpanded)), itemContentMarkup);
    return isTruncated ? /* @__PURE__ */ import_react292.default.createElement(Tooltip, {
      hoverDelay: TOOLTIP_HOVER_DELAY,
      content: label,
      preferredPosition: "above"
    }, linkMarkup) : linkMarkup;
  };
  return /* @__PURE__ */ import_react292.default.createElement("li", {
    className,
    onMouseEnter: () => {
      onMouseEnter?.(label);
    },
    onMouseLeave
  }, /* @__PURE__ */ import_react292.default.createElement("div", {
    className: styles103.ItemWrapper
  }, /* @__PURE__ */ import_react292.default.createElement("div", {
    className: classNames(styles103.ItemInnerWrapper, selected && childIsActive && styles103["ItemInnerWrapper-open"] || selected && !childIsActive && styles103["ItemInnerWrapper-selected"], displayActionsOnHover && styles103["ItemInnerWrapper-display-actions-on-hover"], disabled && styles103.ItemInnerDisabled)
  }, displayActionsOnHover && secondaryActionMarkup && wrappedBadgeMarkup ? /* @__PURE__ */ import_react292.default.createElement("span", {
    className: styles103.ItemWithFloatingActions
  }, itemLinkMarkup(), secondaryActionMarkup) : /* @__PURE__ */ import_react292.default.createElement(import_react292.default.Fragment, null, itemLinkMarkup(), secondaryActionMarkup), outerContentMarkup)), secondaryNavigationMarkup);
  function getClickHandler(onClick2) {
    return (event) => {
      let {
        currentTarget
      } = event;
      if (currentTarget.getAttribute("href") === location && event.preventDefault(), subNavigationItems && subNavigationItems.length > 0 && isNavigationCollapsed)
        event.preventDefault(), onToggleExpandedState?.();
      else if (onNavigationDismiss) {
        onNavigationDismiss(), onClick2 && onClick2 !== onNavigationDismiss && onClick2();
        return;
      }
      onClick2 && onClick2();
    };
  }
}
function ItemSecondaryAction({
  url,
  icon,
  accessibilityLabel,
  tooltip,
  onClick,
  disabled,
  tabIndex
}) {
  let markup = url ? /* @__PURE__ */ import_react292.default.createElement(UnstyledLink, {
    external: true,
    url,
    className: styles103.SecondaryAction,
    tabIndex,
    "aria-disabled": disabled,
    "aria-label": accessibilityLabel,
    onClick
  }, /* @__PURE__ */ import_react292.default.createElement(Icon, {
    source: icon
  })) : /* @__PURE__ */ import_react292.default.createElement(UnstyledButton, {
    className: styles103.SecondaryAction,
    tabIndex,
    disabled,
    accessibilityLabel,
    onClick
  }, /* @__PURE__ */ import_react292.default.createElement(Icon, {
    source: icon
  }));
  return tooltip ? /* @__PURE__ */ import_react292.default.createElement(Tooltip, tooltip, " ", markup, " ") : markup;
}
function isNavigationItemActive(navigationItem, currentPath) {
  let matchState = matchStateForItem(navigationItem, currentPath), matchingSubNavigationItems = navigationItem.subNavigationItems && navigationItem.subNavigationItems.filter((item) => {
    let subMatchState = matchStateForItem(item, currentPath);
    return subMatchState === MatchState.MatchForced || subMatchState === MatchState.MatchUrl || subMatchState === MatchState.MatchPaths;
  }), childIsActive = matchingSubNavigationItems && matchingSubNavigationItems.length > 0;
  return matchState === MatchState.MatchForced || matchState === MatchState.MatchUrl || matchState === MatchState.MatchPaths || childIsActive;
}
function normalizePathname2(pathname) {
  let barePathname = pathname.split("?")[0].split("#")[0];
  return barePathname.endsWith("/") ? barePathname : `${barePathname}/`;
}
function safeEqual(location, path) {
  return normalizePathname2(location) === normalizePathname2(path);
}
function safeStartsWith(location, path) {
  return normalizePathname2(location).startsWith(normalizePathname2(path));
}
function matchStateForItem({
  url,
  matches: matches2,
  exactMatch,
  matchPaths,
  excludePaths
}, location) {
  return url == null ? MatchState.NoMatch : matches2 ? MatchState.MatchForced : matches2 === false || excludePaths && excludePaths.some((path) => safeStartsWith(location, path)) ? MatchState.Excluded : matchPaths && matchPaths.some((path) => safeStartsWith(location, path)) ? MatchState.MatchPaths : (exactMatch ? safeEqual(location, url) : safeStartsWith(location, url)) ? MatchState.MatchUrl : MatchState.NoMatch;
}
function normalizeAriaAttributes(controlId, hasSubMenu, expanded) {
  return hasSubMenu ? {
    "aria-expanded": expanded,
    "aria-controls": controlId
  } : void 0;
}
var import_react292;
var MAX_SECONDARY_ACTIONS;
var TOOLTIP_HOVER_DELAY;
var init_Item10 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Navigation/components/Item/Item.js"() {
    import_react292 = __toESM(require_react());
    init_use_isomorphic_layout_effect();
    init_css();
    init_context20();
    init_Navigation_scss();
    init_types5();
    init_SecondaryNavigation();
    init_hooks2();
    init_hooks11();
    init_Indicator();
    init_Icon();
    init_Badge();
    init_UnstyledLink();
    init_UnstyledButton();
    init_Tooltip();
    MAX_SECONDARY_ACTIONS = 2, TOOLTIP_HOVER_DELAY = 1e3;
  }
});
function Section7({
  title,
  fill,
  action: action4,
  items,
  rollup,
  separator
}) {
  let {
    value: expanded,
    toggle: toggleExpanded,
    setFalse: setExpandedFalse
  } = useToggle(false), animationFrame = (0, import_react293.useRef)(null), {
    isNavigationCollapsed
  } = useMediaQuery(), [expandedIndex, setExpandedIndex] = (0, import_react293.useState)(), handleClick = (onClick, hasSubNavItems) => () => {
    onClick && onClick(), animationFrame.current && cancelAnimationFrame(animationFrame.current), (!hasSubNavItems || !isNavigationCollapsed) && (animationFrame.current = requestAnimationFrame(setExpandedFalse));
  };
  (0, import_react293.useEffect)(() => () => {
    animationFrame.current && cancelAnimationFrame(animationFrame.current);
  });
  let className = classNames(styles103.Section, separator && styles103["Section-withSeparator"], fill && styles103["Section-fill"]), buttonMarkup = action4 && /* @__PURE__ */ import_react293.default.createElement("button", {
    type: "button",
    className: styles103.Action,
    "aria-label": action4.accessibilityLabel,
    onClick: action4.onClick
  }, /* @__PURE__ */ import_react293.default.createElement(Icon, {
    source: action4.icon
  })), actionMarkup = action4 && (action4.tooltip ? /* @__PURE__ */ import_react293.default.createElement(Tooltip, action4.tooltip, buttonMarkup) : buttonMarkup), sectionHeadingMarkup = title && /* @__PURE__ */ import_react293.default.createElement("li", {
    className: styles103.SectionHeading
  }, /* @__PURE__ */ import_react293.default.createElement(Text, {
    as: "span",
    variant: "bodySm",
    fontWeight: "medium",
    tone: "subdued"
  }, title), actionMarkup), itemsMarkup = items.map((item, index) => {
    let {
      onClick,
      label,
      subNavigationItems,
      ...rest
    } = item, hasSubNavItems = subNavigationItems != null && subNavigationItems.length > 0, handleToggleExpandedState = () => {
      setExpandedIndex(expandedIndex === index ? -1 : index);
    };
    return /* @__PURE__ */ import_react293.default.createElement(Item11, Object.assign({
      key: label
    }, rest, {
      label,
      subNavigationItems,
      onClick: handleClick(onClick, hasSubNavItems),
      onToggleExpandedState: handleToggleExpandedState,
      expanded: expandedIndex === index
    }));
  }), toggleClassName = classNames(styles103.Item, styles103.RollupToggle), ariaLabel = rollup && (expanded ? rollup.hide : rollup.view), toggleRollup = rollup && items.length > rollup.after && /* @__PURE__ */ import_react293.default.createElement("div", {
    className: styles103.ListItem,
    key: "List Item"
  }, /* @__PURE__ */ import_react293.default.createElement("div", {
    className: styles103.ItemWrapper
  }, /* @__PURE__ */ import_react293.default.createElement("div", {
    className: styles103.ItemInnerWrapper
  }, /* @__PURE__ */ import_react293.default.createElement("button", {
    type: "button",
    className: toggleClassName,
    onClick: toggleExpanded,
    "aria-label": ariaLabel
  }, /* @__PURE__ */ import_react293.default.createElement("span", {
    className: styles103.Icon
  }, /* @__PURE__ */ import_react293.default.createElement(Icon, {
    source: SvgHorizontalDotsMinor
  })))))), activeItemIndex = items.findIndex((item) => rollup ? rollup.activePath === item.url || item.url && rollup.activePath.startsWith(item.url) || (item.subNavigationItems ? item.subNavigationItems.some(({
    url: itemUrl
  }) => rollup.activePath.startsWith(itemUrl)) : false) : false), sectionItems = rollup ? itemsMarkup.slice(0, rollup.after) : itemsMarkup, additionalItems = rollup ? itemsMarkup.slice(rollup.after) : [];
  rollup && activeItemIndex !== -1 && activeItemIndex > rollup.after - 1 && sectionItems.push(...additionalItems.splice(activeItemIndex - rollup.after, 1));
  let additionalItemsId = (0, import_react293.useId)(), activeItemsMarkup = rollup && additionalItems.length > 0 && /* @__PURE__ */ import_react293.default.createElement("li", {
    className: styles103.RollupSection
  }, /* @__PURE__ */ import_react293.default.createElement(Collapsible, {
    id: additionalItemsId,
    open: expanded
  }, /* @__PURE__ */ import_react293.default.createElement("ul", {
    className: styles103.List
  }, additionalItems)), toggleRollup);
  return /* @__PURE__ */ import_react293.default.createElement("ul", {
    className
  }, sectionHeadingMarkup, sectionItems, activeItemsMarkup);
}
var import_react293;
var init_Section7 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Navigation/components/Section/Section.js"() {
    import_react293 = __toESM(require_react());
    init_dist3();
    init_css();
    init_use_toggle();
    init_Navigation_scss();
    init_Item10();
    init_hooks11();
    init_Icon();
    init_Tooltip();
    init_Text();
    init_Collapsible();
  }
});
var import_react294;
var Navigation2;
var init_Navigation2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Navigation/Navigation.js"() {
    import_react294 = __toESM(require_react());
    init_within_content_context();
    init_css();
    init_get_width();
    init_context20();
    init_Navigation_scss();
    init_Section7();
    init_hooks9();
    init_UnstyledLink();
    init_Image();
    init_Scrollable();
    init_Item10();
    Navigation2 = function({
      children,
      contextControl,
      location,
      onDismiss,
      ariaLabelledBy,
      logoSuffix
    }) {
      let {
        logo
      } = useFrame(), width2 = getWidth(logo, 104), logoMarkup = logo ? /* @__PURE__ */ import_react294.default.createElement("div", {
        className: classNames(styles103.LogoContainer, logoSuffix && styles103.hasLogoSuffix)
      }, /* @__PURE__ */ import_react294.default.createElement(UnstyledLink, {
        url: logo.url || "",
        className: styles103.LogoLink,
        style: {
          width: width2
        }
      }, /* @__PURE__ */ import_react294.default.createElement(Image, {
        source: logo.topBarSource || "",
        alt: logo.accessibilityLabel || "",
        className: styles103.Logo,
        style: {
          width: width2
        }
      })), logoSuffix) : null, mediaMarkup = contextControl ? /* @__PURE__ */ import_react294.default.createElement("div", {
        className: styles103.ContextControl
      }, contextControl) : logoMarkup, context = (0, import_react294.useMemo)(() => ({
        location,
        onNavigationDismiss: onDismiss
      }), [location, onDismiss]);
      return /* @__PURE__ */ import_react294.default.createElement(NavigationContext2.Provider, {
        value: context
      }, /* @__PURE__ */ import_react294.default.createElement(WithinContentContext.Provider, {
        value: true
      }, /* @__PURE__ */ import_react294.default.createElement("nav", {
        className: styles103.Navigation,
        "aria-labelledby": ariaLabelledBy
      }, mediaMarkup, /* @__PURE__ */ import_react294.default.createElement(Scrollable, {
        className: styles103.PrimaryNavigation
      }, children))));
    };
    Navigation2.Item = Item11;
    Navigation2.Section = Section7;
  }
});
function arraysAreEqual(firstArray, secondArray, comparator) {
  return firstArray.length !== secondArray.length ? false : firstArray.every((firstItem, index) => {
    let secondItem = secondArray[index];
    return comparator != null ? comparator(firstItem, secondItem) : firstItem === secondItem;
  });
}
var init_arrays = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/arrays.js"() {
  }
});
var styles104;
var init_Option_scss2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/OptionList/components/Option/Option.scss.js"() {
    styles104 = {
      Option: "Polaris-OptionList-Option",
      SingleSelectOption: "Polaris-OptionList-Option__SingleSelectOption",
      focused: "Polaris-OptionList-Option--focused",
      active: "Polaris-OptionList-Option--active",
      disabled: "Polaris-OptionList-Option--disabled",
      select: "Polaris-OptionList-Option--select",
      Media: "Polaris-OptionList-Option__Media",
      Label: "Polaris-OptionList-Option__Label",
      MultiSelectOption: "Polaris-OptionList-Option__MultiSelectOption",
      CheckboxLabel: "Polaris-OptionList-Option__CheckboxLabel",
      verticalAlignTop: "Polaris-OptionList-Option--verticalAlignTop",
      verticalAlignCenter: "Polaris-OptionList-Option--verticalAlignCenter",
      verticalAlignBottom: "Polaris-OptionList-Option--verticalAlignBottom",
      Icon: "Polaris-OptionList-Option__Icon",
      Checkbox: "Polaris-OptionList-Option__Checkbox"
    };
  }
});
function Option3({
  label,
  value,
  id,
  select,
  active,
  allowMultiple,
  disabled,
  media,
  onClick,
  section,
  index,
  verticalAlign,
  onPointerEnter,
  onFocus
}) {
  let {
    value: focused,
    toggle: toggleFocused
  } = useToggle(false), handleClick = (0, import_react295.useCallback)(() => {
    disabled || onClick(section, index);
  }, [disabled, index, onClick, section]), handlePointerEnter = (0, import_react295.useCallback)(() => {
    disabled || onPointerEnter(section, index);
  }, [disabled, onPointerEnter, section, index]), handleFocus = (0, import_react295.useCallback)(() => {
    toggleFocused(), onFocus(section, index);
  }, [toggleFocused, onFocus, section, index]), mediaMarkup = media ? /* @__PURE__ */ import_react295.default.createElement("div", {
    className: styles104.Media
  }, media) : null, singleSelectClassName = classNames(styles104.SingleSelectOption, focused && styles104.focused, disabled && styles104.disabled, select && styles104.select, active && styles104.active, verticalAlign && styles104[variationName("verticalAlign", verticalAlign)]), multiSelectClassName = classNames(styles104.Label, disabled && styles104.disabled, active && styles104.active, select && styles104.select, verticalAlign && styles104[variationName("verticalAlign", verticalAlign)], allowMultiple && styles104.CheckboxLabel, allowMultiple && styles104.MultiSelectOption), optionMarkup = allowMultiple ? /* @__PURE__ */ import_react295.default.createElement("label", {
    htmlFor: id,
    className: multiSelectClassName
  }, /* @__PURE__ */ import_react295.default.createElement("div", {
    className: styles104.Checkbox
  }, /* @__PURE__ */ import_react295.default.createElement(Checkbox, {
    id,
    label: "",
    ariaDescribedBy: `${id}-label`,
    value,
    checked: select,
    disabled,
    onChange: handleClick
  })), mediaMarkup, /* @__PURE__ */ import_react295.default.createElement("span", {
    id: `${id}-label`
  }, label)) : /* @__PURE__ */ import_react295.default.createElement("button", {
    id,
    type: "button",
    className: singleSelectClassName,
    onClick: handleClick,
    disabled,
    onFocus: handleFocus,
    onBlur: toggleFocused,
    "aria-pressed": active || select
  }, /* @__PURE__ */ import_react295.default.createElement(import_react295.default.Fragment, null, /* @__PURE__ */ import_react295.default.createElement(InlineStack, {
    wrap: false,
    blockAlign: verticalAlignToBlockAlign(verticalAlign)
  }, mediaMarkup, label), (select || active) && /* @__PURE__ */ import_react295.default.createElement("span", {
    className: styles104.Icon
  }, /* @__PURE__ */ import_react295.default.createElement(Icon, {
    source: SvgTickMinor
  })))), scrollMarkup = active ? /* @__PURE__ */ import_react295.default.createElement(Scrollable.ScrollTo, null) : null;
  return /* @__PURE__ */ import_react295.default.createElement("li", {
    key: id,
    className: styles104.Option,
    tabIndex: -1,
    onPointerEnter: handlePointerEnter
  }, scrollMarkup, optionMarkup);
}
function verticalAlignToBlockAlign(verticalAlign) {
  switch (verticalAlign) {
    case "top":
      return "start";
    case "center":
      return "center";
    case "bottom":
      return "end";
    default:
      return "start";
  }
}
var import_react295;
var init_Option2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/OptionList/components/Option/Option.js"() {
    import_react295 = __toESM(require_react());
    init_dist3();
    init_use_toggle();
    init_css();
    init_Option_scss2();
    init_Checkbox();
    init_InlineStack();
    init_Icon();
    init_Scrollable();
  }
});
function OptionList({
  options,
  sections,
  title,
  selected,
  allowMultiple,
  role,
  verticalAlign,
  onChange,
  id: idProp,
  onPointerEnterOption,
  onFocusOption
}) {
  let [normalizedOptions, setNormalizedOptions] = (0, import_react296.useState)(createNormalizedOptions(options, sections, title)), uniqId = (0, import_react296.useId)(), id = idProp ?? uniqId;
  useDeepEffect(() => {
    setNormalizedOptions(createNormalizedOptions(options || [], sections || [], title));
  }, [options, sections, title], optionArraysAreEqual);
  let handleClick = (0, import_react296.useCallback)((sectionIndex, optionIndex) => {
    let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value, foundIndex = selected.indexOf(selectedValue);
    if (allowMultiple) {
      let newSelection = foundIndex === -1 ? [selectedValue, ...selected] : [...selected.slice(0, foundIndex), ...selected.slice(foundIndex + 1, selected.length)];
      onChange(newSelection);
      return;
    }
    onChange([selectedValue]);
  }, [normalizedOptions, selected, allowMultiple, onChange]), handlePointerEnter = (0, import_react296.useCallback)((sectionIndex, optionIndex) => {
    if (!onPointerEnterOption)
      return;
    let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
    onPointerEnterOption(selectedValue);
  }, [normalizedOptions, onPointerEnterOption]), handleFocus = (0, import_react296.useCallback)((sectionIndex, optionIndex) => {
    if (!onFocusOption)
      return;
    let selectedValue = normalizedOptions[sectionIndex].options[optionIndex].value;
    onFocusOption(selectedValue);
  }, [normalizedOptions, onFocusOption]), optionsMarkup = normalizedOptions.length > 0 ? normalizedOptions.map(({
    title: title2,
    options: options2
  }, sectionIndex) => {
    let isFirstOption = sectionIndex === 0, titleLevel = isFirstOption ? "h2" : "h3", titleMarkup = title2 ? /* @__PURE__ */ import_react296.default.createElement(Box, {
      paddingBlockStart: isFirstOption ? "050" : "300",
      paddingInlineStart: "150",
      paddingBlockEnd: "100",
      paddingInlineEnd: "150",
      borderColor: "border-secondary"
    }, /* @__PURE__ */ import_react296.default.createElement(Text, {
      as: titleLevel,
      variant: "headingSm"
    }, title2)) : null, optionsMarkup2 = options2 && options2.map((option2, optionIndex) => {
      let isSelected2 = selected.includes(option2.value), optionId = option2.id || `${id}-${sectionIndex}-${optionIndex}`;
      return /* @__PURE__ */ import_react296.default.createElement(Option3, Object.assign({
        key: optionId
      }, option2, {
        id: optionId,
        section: sectionIndex,
        index: optionIndex,
        onClick: handleClick,
        select: isSelected2,
        allowMultiple,
        verticalAlign,
        onPointerEnter: handlePointerEnter,
        onFocus: handleFocus
      }));
    }), option = /* @__PURE__ */ import_react296.default.createElement(Box, {
      as: "ul",
      id: `${id}-${sectionIndex}`,
      role
    }, optionsMarkup2), blockStartPadding = isFirstOption ? title2 ? "100" : "0" : title2 ? "050" : "0";
    return /* @__PURE__ */ import_react296.default.createElement(Box, {
      key: title2 || `noTitle-${sectionIndex}`,
      as: "li",
      paddingBlockStart: blockStartPadding
    }, /* @__PURE__ */ import_react296.default.createElement(BlockStack, {
      gap: isFirstOption && sections ? void 0 : "0"
    }, titleMarkup, option));
  }) : null;
  return /* @__PURE__ */ import_react296.default.createElement(Box, {
    as: "ul",
    role,
    padding: "150"
  }, optionsMarkup);
}
function createNormalizedOptions(options, sections, title) {
  if (options == null) {
    let section = {
      options: [],
      title
    };
    return sections == null ? [] : [section, ...sections];
  }
  return sections == null ? [{
    title,
    options
  }] : [{
    title,
    options
  }, ...sections];
}
function optionArraysAreEqual(firstArray, secondArray) {
  return isSection(firstArray) && isSection(secondArray) ? arraysAreEqual(firstArray, secondArray, testSectionsPropEquality) : arraysAreEqual(firstArray, secondArray);
}
function testSectionsPropEquality(previousSection, currentSection) {
  let {
    options: previousOptions
  } = previousSection, {
    options: currentOptions
  } = currentSection, optionsAreEqual = arraysAreEqual(previousOptions, currentOptions), titlesAreEqual = previousSection.title === currentSection.title;
  return optionsAreEqual && titlesAreEqual;
}
var import_react296;
var init_OptionList = __esm({
  "node_modules/@shopify/polaris/build/esm/components/OptionList/OptionList.js"() {
    import_react296 = __toESM(require_react());
    init_options();
    init_arrays();
    init_use_deep_effect();
    init_Option2();
    init_Box();
    init_BlockStack();
    init_Text();
  }
});
function isInterface(x) {
  return !/* @__PURE__ */ (0, import_react297.isValidElement)(x) && x !== void 0;
}
var import_react297;
var init_is_interface = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/is-interface.js"() {
    import_react297 = __toESM(require_react());
  }
});
function isReactElement(x) {
  return /* @__PURE__ */ (0, import_react298.isValidElement)(x) && x !== void 0;
}
var import_react298;
var init_is_react_element = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/is-react-element.js"() {
    import_react298 = __toESM(require_react());
  }
});
var styles105;
var init_Page_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Page/Page.scss.js"() {
    styles105 = {
      Page: "Polaris-Page",
      fullWidth: "Polaris-Page--fullWidth",
      narrowWidth: "Polaris-Page--narrowWidth",
      Content: "Polaris-Page__Content"
    };
  }
});
var styles106;
var init_Header_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Page/components/Header/Header.scss.js"() {
    styles106 = {
      TitleWrapper: "Polaris-Page-Header__TitleWrapper",
      BreadcrumbWrapper: "Polaris-Page-Header__BreadcrumbWrapper",
      PaginationWrapper: "Polaris-Page-Header__PaginationWrapper",
      PrimaryActionWrapper: "Polaris-Page-Header__PrimaryActionWrapper",
      Row: "Polaris-Page-Header__Row",
      mobileView: "Polaris-Page-Header--mobileView",
      RightAlign: "Polaris-Page-Header__RightAlign",
      noBreadcrumbs: "Polaris-Page-Header--noBreadcrumbs",
      AdditionalMetaData: "Polaris-Page-Header__AdditionalMetaData",
      Actions: "Polaris-Page-Header__Actions",
      longTitle: "Polaris-Page-Header--longTitle",
      mediumTitle: "Polaris-Page-Header--mediumTitle",
      isSingleRow: "Polaris-Page-Header--isSingleRow"
    };
  }
});
var styles107;
var init_Title_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Page/components/Header/components/Title/Title.scss.js"() {
    styles107 = {
      Title: "Polaris-Header-Title",
      TitleWithSubtitle: "Polaris-Header-Title__TitleWithSubtitle",
      TitleWrapper: "Polaris-Header-Title__TitleWrapper",
      SubTitle: "Polaris-Header-Title__SubTitle",
      SubtitleCompact: "Polaris-Header-Title__SubtitleCompact"
    };
  }
});
function Title({
  title,
  subtitle,
  titleMetadata,
  compactTitle
}) {
  let className = classNames(styles107.Title, subtitle && styles107.TitleWithSubtitle), titleMarkup = title ? /* @__PURE__ */ import_react299.default.createElement("h1", {
    className
  }, title) : null, titleMetadataMarkup = titleMetadata ? /* @__PURE__ */ import_react299.default.createElement(Bleed, {
    marginBlock: "100"
  }, titleMetadata) : null, wrappedTitleMarkup = /* @__PURE__ */ import_react299.default.createElement("div", {
    className: styles107.TitleWrapper
  }, titleMarkup, titleMetadataMarkup), subtitleMarkup = subtitle ? /* @__PURE__ */ import_react299.default.createElement("div", {
    className: classNames(styles107.SubTitle, compactTitle && styles107.SubtitleCompact)
  }, /* @__PURE__ */ import_react299.default.createElement(Text, {
    as: "p",
    variant: "bodySm"
  }, subtitle)) : null;
  return /* @__PURE__ */ import_react299.default.createElement(import_react299.default.Fragment, null, wrappedTitleMarkup, subtitleMarkup);
}
var import_react299;
var init_Title = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Page/components/Header/components/Title/Title.js"() {
    import_react299 = __toESM(require_react());
    init_css();
    init_Title_scss();
    init_Text();
    init_Bleed();
  }
});
function Header4({
  title,
  subtitle,
  pageReadyAccessibilityLabel,
  titleMetadata,
  additionalMetadata,
  titleHidden = false,
  primaryAction,
  pagination,
  filterActions,
  backAction,
  secondaryActions = [],
  actionGroups = [],
  compactTitle = false,
  onActionRollup
}) {
  let i18n = useI18n(), {
    isNavigationCollapsed
  } = useMediaQuery(), isSingleRow = !primaryAction && !pagination && (isInterface(secondaryActions) && !secondaryActions.length || isReactElement(secondaryActions)) && !actionGroups.length, breadcrumbMarkup = backAction ? /* @__PURE__ */ import_react300.default.createElement("div", {
    className: styles106.BreadcrumbWrapper
  }, /* @__PURE__ */ import_react300.default.createElement(Box, {
    maxWidth: "100%",
    paddingInlineEnd: "100",
    printHidden: true
  }, /* @__PURE__ */ import_react300.default.createElement(Breadcrumbs, {
    backAction
  }))) : null, paginationMarkup = pagination && !isNavigationCollapsed ? /* @__PURE__ */ import_react300.default.createElement("div", {
    className: styles106.PaginationWrapper
  }, /* @__PURE__ */ import_react300.default.createElement(Box, {
    printHidden: true
  }, /* @__PURE__ */ import_react300.default.createElement(Pagination, Object.assign({}, pagination, {
    hasPrevious: pagination.hasPrevious,
    hasNext: pagination.hasNext
  })))) : null, pageTitleMarkup = /* @__PURE__ */ import_react300.default.createElement("div", {
    className: styles106.TitleWrapper
  }, /* @__PURE__ */ import_react300.default.createElement(Title, {
    title,
    subtitle,
    titleMetadata,
    compactTitle
  })), labelForPageReadyAccessibilityLabel = pageReadyAccessibilityLabel || title, pageReadyAccessibilityLabelMarkup = labelForPageReadyAccessibilityLabel ? /* @__PURE__ */ import_react300.default.createElement("div", {
    role: "status"
  }, /* @__PURE__ */ import_react300.default.createElement(Text, {
    visuallyHidden: true,
    as: "p"
  }, i18n.translate("Polaris.Page.Header.pageReadyAccessibilityLabel", {
    title: labelForPageReadyAccessibilityLabel
  }))) : void 0, primaryActionMarkup = primaryAction ? /* @__PURE__ */ import_react300.default.createElement(PrimaryActionMarkup, {
    primaryAction
  }) : null, actionMenuMarkup = null;
  isInterface(secondaryActions) && (secondaryActions.length > 0 || hasGroupsWithActions(actionGroups)) ? actionMenuMarkup = /* @__PURE__ */ import_react300.default.createElement(ActionMenu, {
    actions: secondaryActions,
    groups: actionGroups,
    rollup: isNavigationCollapsed,
    rollupActionsLabel: title ? i18n.translate("Polaris.Page.Header.rollupActionsLabel", {
      title
    }) : void 0,
    onActionRollup
  }) : isReactElement(secondaryActions) && (actionMenuMarkup = /* @__PURE__ */ import_react300.default.createElement(import_react300.default.Fragment, null, secondaryActions));
  let navigationMarkup = breadcrumbMarkup || paginationMarkup ? /* @__PURE__ */ import_react300.default.createElement(Box, {
    printHidden: true,
    paddingBlockEnd: "100",
    paddingInlineEnd: actionMenuMarkup && isNavigationCollapsed ? "1000" : void 0
  }, /* @__PURE__ */ import_react300.default.createElement(InlineStack, {
    gap: "400",
    align: "space-between",
    blockAlign: "center"
  }, breadcrumbMarkup, paginationMarkup)) : null, additionalMetadataMarkup = additionalMetadata ? /* @__PURE__ */ import_react300.default.createElement("div", {
    className: styles106.AdditionalMetaData
  }, /* @__PURE__ */ import_react300.default.createElement(Text, {
    tone: "subdued",
    as: "span",
    variant: "bodySm"
  }, additionalMetadata)) : null, headerClassNames = classNames(isSingleRow && styles106.isSingleRow, navigationMarkup && styles106.hasNavigation, actionMenuMarkup && styles106.hasActionMenu, isNavigationCollapsed && styles106.mobileView, !backAction && styles106.noBreadcrumbs, title && title.length < LONG_TITLE && styles106.mediumTitle, title && title.length > LONG_TITLE && styles106.longTitle), {
    slot1,
    slot2,
    slot3,
    slot4,
    slot5
  } = determineLayout({
    actionMenuMarkup,
    additionalMetadataMarkup,
    breadcrumbMarkup,
    isNavigationCollapsed,
    pageTitleMarkup,
    paginationMarkup,
    primaryActionMarkup,
    title
  });
  return /* @__PURE__ */ import_react300.default.createElement(Box, {
    position: "relative",
    paddingBlockStart: {
      xs: "400",
      md: "600"
    },
    paddingBlockEnd: {
      xs: "400",
      md: "600"
    },
    paddingInlineStart: {
      xs: "400",
      sm: "0"
    },
    paddingInlineEnd: {
      xs: "400",
      sm: "0"
    },
    visuallyHidden: titleHidden
  }, pageReadyAccessibilityLabelMarkup, /* @__PURE__ */ import_react300.default.createElement("div", {
    className: headerClassNames
  }, /* @__PURE__ */ import_react300.default.createElement(FilterActionsProvider, {
    filterActions: Boolean(filterActions)
  }, /* @__PURE__ */ import_react300.default.createElement(ConditionalRender, {
    condition: [slot1, slot2, slot3, slot4].some(notNull)
  }, /* @__PURE__ */ import_react300.default.createElement("div", {
    className: styles106.Row
  }, slot1, slot2, /* @__PURE__ */ import_react300.default.createElement(ConditionalRender, {
    condition: [slot3, slot4].some(notNull)
  }, /* @__PURE__ */ import_react300.default.createElement("div", {
    className: styles106.RightAlign
  }, /* @__PURE__ */ import_react300.default.createElement(ConditionalWrapper, {
    condition: [slot3, slot4].every(notNull),
    wrapper: (children) => /* @__PURE__ */ import_react300.default.createElement("div", {
      className: styles106.Actions
    }, children)
  }, slot3, slot4))))), /* @__PURE__ */ import_react300.default.createElement(ConditionalRender, {
    condition: [slot5].some(notNull)
  }, /* @__PURE__ */ import_react300.default.createElement("div", {
    className: styles106.Row
  }, /* @__PURE__ */ import_react300.default.createElement(InlineStack, {
    gap: "400"
  }, slot5))))));
}
function PrimaryActionMarkup({
  primaryAction
}) {
  let {
    isNavigationCollapsed
  } = useMediaQuery(), actionMarkup;
  if (isInterface(primaryAction)) {
    let {
      primary: isPrimary,
      helpText
    } = primaryAction, primary = isPrimary === void 0 ? true : isPrimary, content = buttonFrom(shouldShowIconOnly(isNavigationCollapsed, primaryAction), {
      variant: primary ? "primary" : void 0
    });
    actionMarkup = helpText ? /* @__PURE__ */ import_react300.default.createElement(Tooltip, {
      content: helpText
    }, content) : content;
  } else
    actionMarkup = primaryAction;
  return /* @__PURE__ */ import_react300.default.createElement("div", {
    className: styles106.PrimaryActionWrapper
  }, /* @__PURE__ */ import_react300.default.createElement(Box, {
    printHidden: true
  }, actionMarkup));
}
function shouldShowIconOnly(isMobile, action4) {
  let {
    content,
    accessibilityLabel,
    icon
  } = action4;
  return icon == null ? {
    ...action4,
    icon: void 0
  } : (isMobile ? (accessibilityLabel = accessibilityLabel || content, content = void 0) : icon = void 0, {
    ...action4,
    content,
    accessibilityLabel,
    icon
  });
}
function notNull(value) {
  return value != null;
}
function determineLayout({
  actionMenuMarkup,
  additionalMetadataMarkup,
  breadcrumbMarkup,
  isNavigationCollapsed,
  pageTitleMarkup,
  paginationMarkup,
  primaryActionMarkup,
  title
}) {
  let layouts = {
    mobileCompact: {
      slots: {
        slot1: null,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetadataMarkup
      },
      condition: isNavigationCollapsed && breadcrumbMarkup == null && title != null && title.length <= REALLY_SHORT_TITLE
    },
    mobileDefault: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetadataMarkup
      },
      condition: isNavigationCollapsed
    },
    desktopCompact: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetadataMarkup
      },
      condition: !isNavigationCollapsed && paginationMarkup == null && actionMenuMarkup == null && title != null && title.length <= SHORT_TITLE
    },
    desktopDefault: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: /* @__PURE__ */ import_react300.default.createElement(import_react300.default.Fragment, null, actionMenuMarkup, primaryActionMarkup),
        slot4: paginationMarkup,
        slot5: additionalMetadataMarkup
      },
      condition: !isNavigationCollapsed
    }
  };
  return (Object.values(layouts).find((layout2) => layout2.condition) || layouts.desktopDefault).slots;
}
var import_react300;
var SHORT_TITLE;
var REALLY_SHORT_TITLE;
var LONG_TITLE;
var init_Header4 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Page/components/Header/Header.js"() {
    import_react300 = __toESM(require_react());
    init_css();
    init_components2();
    init_is_interface();
    init_is_react_element();
    init_Header_scss();
    init_Breadcrumbs();
    init_Title();
    init_ActionMenu();
    init_FilterActionsProvider();
    init_hooks2();
    init_hooks11();
    init_Box();
    init_Pagination();
    init_Text();
    init_InlineStack();
    init_utils4();
    init_Tooltip();
    SHORT_TITLE = 20, REALLY_SHORT_TITLE = 8, LONG_TITLE = 34;
  }
});
function Page({
  children,
  fullWidth,
  narrowWidth,
  ...rest
}) {
  let pageClassName = classNames(styles105.Page, fullWidth && styles105.fullWidth, narrowWidth && styles105.narrowWidth), hasHeaderContent = rest.title != null && rest.title !== "" || rest.subtitle != null && rest.subtitle !== "" || rest.primaryAction != null || rest.secondaryActions != null && (isInterface(rest.secondaryActions) && rest.secondaryActions.length > 0 || isReactElement(rest.secondaryActions)) || rest.actionGroups != null && rest.actionGroups.length > 0 || rest.backAction != null, contentClassName = classNames(!hasHeaderContent && styles105.Content), headerMarkup = hasHeaderContent ? /* @__PURE__ */ import_react301.default.createElement(Header4, Object.assign({
    filterActions: true
  }, rest)) : null;
  return /* @__PURE__ */ import_react301.default.createElement("div", {
    className: pageClassName
  }, headerMarkup, /* @__PURE__ */ import_react301.default.createElement("div", {
    className: contentClassName
  }, children));
}
var import_react301;
var init_Page = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Page/Page.js"() {
    import_react301 = __toESM(require_react());
    init_css();
    init_is_interface();
    init_is_react_element();
    init_Page_scss();
    init_Header4();
  }
});
var styles108;
var init_PageActions_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/PageActions/PageActions.scss.js"() {
    styles108 = {
      PageActions: "Polaris-PageActions"
    };
  }
});
function PageActions({
  primaryAction,
  secondaryActions
}) {
  let primaryActionMarkup = null;
  isReactElement(primaryAction) ? primaryActionMarkup = /* @__PURE__ */ import_react302.default.createElement(import_react302.default.Fragment, null, primaryAction) : primaryAction && (primaryActionMarkup = buttonsFrom(primaryAction, {
    variant: "primary"
  }));
  let secondaryActionsMarkup = null;
  return isInterface(secondaryActions) && secondaryActions.length > 0 ? secondaryActionsMarkup = /* @__PURE__ */ import_react302.default.createElement(ButtonGroup, null, buttonsFrom(secondaryActions)) : isReactElement(secondaryActions) && (secondaryActionsMarkup = /* @__PURE__ */ import_react302.default.createElement(import_react302.default.Fragment, null, secondaryActions)), /* @__PURE__ */ import_react302.default.createElement("div", {
    className: styles108.PageActions
  }, /* @__PURE__ */ import_react302.default.createElement(LegacyStack, {
    distribution: "trailing",
    spacing: "tight"
  }, secondaryActionsMarkup, primaryActionMarkup));
}
var import_react302;
var init_PageActions = __esm({
  "node_modules/@shopify/polaris/build/esm/components/PageActions/PageActions.js"() {
    import_react302 = __toESM(require_react());
    init_is_interface();
    init_is_react_element();
    init_PageActions_scss();
    init_utils4();
    init_ButtonGroup();
    init_LegacyStack();
  }
});
function PolarisTestProvider({
  strict,
  children,
  i18n,
  link,
  mediaQuery,
  features,
  frame,
  theme = themeNameDefault
}) {
  let Wrapper = strict ? import_react303.StrictMode : import_react303.Fragment, intl = (0, import_react303.useMemo)(() => new I18n(i18n || {}), [i18n]), scrollLockManager = (0, import_react303.useMemo)(() => new ScrollLockManager(), []), stickyManager = (0, import_react303.useMemo)(() => new StickyManager(), []), mergedFrame = createFrameContext(frame), mergedMediaQuery = merge(defaultMediaQuery, mediaQuery);
  return /* @__PURE__ */ import_react303.default.createElement(Wrapper, null, /* @__PURE__ */ import_react303.default.createElement(ThemeContext.Provider, {
    value: getTheme(theme)
  }, /* @__PURE__ */ import_react303.default.createElement(FeaturesContext.Provider, {
    value: features
  }, /* @__PURE__ */ import_react303.default.createElement(I18nContext.Provider, {
    value: intl
  }, /* @__PURE__ */ import_react303.default.createElement(ScrollLockManagerContext.Provider, {
    value: scrollLockManager
  }, /* @__PURE__ */ import_react303.default.createElement(StickyManagerContext.Provider, {
    value: stickyManager
  }, /* @__PURE__ */ import_react303.default.createElement(LinkContext.Provider, {
    value: link
  }, /* @__PURE__ */ import_react303.default.createElement(MediaQueryContext.Provider, {
    value: mergedMediaQuery
  }, /* @__PURE__ */ import_react303.default.createElement(PortalsManager, null, /* @__PURE__ */ import_react303.default.createElement(FocusManager, null, /* @__PURE__ */ import_react303.default.createElement(EphemeralPresenceManager, null, /* @__PURE__ */ import_react303.default.createElement(FrameContext.Provider, {
    value: mergedFrame
  }, children))))))))))));
}
function noop19() {
}
function createFrameContext({
  logo = void 0,
  showToast = noop19,
  hideToast = noop19,
  toastMessages = [],
  setContextualSaveBar = noop19,
  removeContextualSaveBar = noop19,
  startLoading = noop19,
  stopLoading = noop19
} = {}) {
  return {
    logo,
    showToast,
    hideToast,
    toastMessages,
    setContextualSaveBar,
    removeContextualSaveBar,
    startLoading,
    stopLoading
  };
}
var import_react303;
var defaultMediaQuery;
var init_PolarisTestProvider = __esm({
  "node_modules/@shopify/polaris/build/esm/components/PolarisTestProvider/PolarisTestProvider.js"() {
    import_react303 = __toESM(require_react());
    init_build();
    init_merge();
    init_use_theme();
    init_I18n();
    init_scroll_lock_manager();
    init_sticky_manager();
    init_context();
    init_context2();
    init_context3();
    init_context4();
    init_context5();
    init_context6();
    init_PortalsManager();
    init_FocusManager();
    init_EphemeralPresenceManager();
    init_context15();
    defaultMediaQuery = {
      isNavigationCollapsed: false
    };
  }
});
var styles109;
var init_ProgressBar_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ProgressBar/ProgressBar.scss.js"() {
    styles109 = {
      ProgressBar: "Polaris-ProgressBar",
      sizeSmall: "Polaris-ProgressBar--sizeSmall",
      sizeMedium: "Polaris-ProgressBar--sizeMedium",
      sizeLarge: "Polaris-ProgressBar--sizeLarge",
      toneHighlight: "Polaris-ProgressBar--toneHighlight",
      tonePrimary: "Polaris-ProgressBar--tonePrimary",
      toneSuccess: "Polaris-ProgressBar--toneSuccess",
      toneCritical: "Polaris-ProgressBar--toneCritical",
      Indicator: "Polaris-ProgressBar__Indicator",
      IndicatorAppearActive: "Polaris-ProgressBar__IndicatorAppearActive",
      IndicatorAppearDone: "Polaris-ProgressBar__IndicatorAppearDone",
      Progress: "Polaris-ProgressBar__Progress",
      Label: "Polaris-ProgressBar__Label"
    };
  }
});
function ProgressBar({
  progress = 0,
  size: size2 = "medium",
  tone = "highlight",
  animated: hasAppearAnimation = true,
  ariaLabelledBy
}) {
  let theme = useTheme(), i18n = useI18n(), indicatorRef = (0, import_react304.useRef)(null), className = classNames(styles109.ProgressBar, size2 && styles109[variationName("size", size2)], tone && styles109[variationName("tone", tone)]), warningMessage = i18n.translate(progress < 0 ? "Polaris.ProgressBar.negativeWarningMessage" : "Polaris.ProgressBar.exceedWarningMessage", {
    progress
  }), parsedProgress = parseProgress(progress, warningMessage), progressBarDuration = hasAppearAnimation ? theme.motion["motion-duration-500"] : theme.motion["motion-duration-0"];
  return /* @__PURE__ */ import_react304.default.createElement("div", {
    className
  }, /* @__PURE__ */ import_react304.default.createElement("progress", {
    "aria-labelledby": ariaLabelledBy,
    className: styles109.Progress,
    value: parsedProgress,
    max: "100"
  }), /* @__PURE__ */ import_react304.default.createElement(CSSTransition_default, {
    in: true,
    appear: true,
    timeout: parseInt(progressBarDuration, 10),
    nodeRef: indicatorRef,
    classNames: {
      appearActive: styles109.IndicatorAppearActive,
      appearDone: styles109.IndicatorAppearDone
    }
  }, /* @__PURE__ */ import_react304.default.createElement("div", {
    ref: indicatorRef,
    className: styles109.Indicator,
    style: {
      "--pc-progress-bar-duration": progressBarDuration,
      "--pc-progress-bar-percent": parsedProgress / 100
    }
  }, /* @__PURE__ */ import_react304.default.createElement("span", {
    className: styles109.Label
  }, parsedProgress, "%"))));
}
function parseProgress(progress, warningMessage) {
  let progressWidth;
  return progress < 0 ? (console.warn(warningMessage), progressWidth = 0) : progress > 100 ? (console.warn(warningMessage), progressWidth = 100) : progressWidth = progress, progressWidth;
}
var import_react304;
var init_ProgressBar = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ProgressBar/ProgressBar.js"() {
    import_react304 = __toESM(require_react());
    init_esm4();
    init_css();
    init_use_theme();
    init_ProgressBar_scss();
    init_hooks2();
  }
});
var sharedStyles;
var init_RangeSlider_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RangeSlider/RangeSlider.scss.js"() {
    sharedStyles = {
      RangeSlider: "Polaris-RangeSlider"
    };
  }
});
var styles110;
var init_DualThumb_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/DualThumb/DualThumb.scss.js"() {
    styles110 = {
      DualThumb: "Polaris-RangeSlider-DualThumb",
      TrackWrapper: "Polaris-RangeSlider-DualThumb__TrackWrapper",
      disabled: "Polaris-RangeSlider-DualThumb--disabled",
      Track: "Polaris-RangeSlider-DualThumb__Track",
      error: "Polaris-RangeSlider-DualThumb--error",
      "Track--dashed": "Polaris-RangeSlider-DualThumb--trackDashed",
      Thumbs: "Polaris-RangeSlider-DualThumb__Thumbs",
      Prefix: "Polaris-RangeSlider-DualThumb__Prefix",
      Suffix: "Polaris-RangeSlider-DualThumb__Suffix",
      Output: "Polaris-RangeSlider-DualThumb__Output",
      OutputBubble: "Polaris-RangeSlider-DualThumb__OutputBubble"
    };
  }
});
function registerMouseMoveHandler(handler) {
  document.addEventListener("mousemove", handler), document.addEventListener("mouseup", () => {
    document.removeEventListener("mousemove", handler);
  }, {
    once: true
  });
}
function registerTouchMoveHandler(handler) {
  let removeHandler = () => {
    document.removeEventListener("touchmove", handler), document.removeEventListener("touchend", removeHandler), document.removeEventListener("touchcancel", removeHandler);
  };
  document.addEventListener("touchmove", handler, {
    passive: false
  }), document.addEventListener("touchend", removeHandler, {
    once: true
  }), document.addEventListener("touchcancel", removeHandler, {
    once: true
  });
}
function sanitizeValue(value, min, max, step, control = Control.Upper) {
  let upperValue = inBoundsUpper(roundedToStep(value[1])), lowerValue = inBoundsLower(roundedToStep(value[0])), maxLowerValue = upperValue - step, minUpperValue = lowerValue + step;
  return control === Control.Upper && lowerValue > maxLowerValue ? lowerValue = maxLowerValue : control === Control.Lower && upperValue < minUpperValue && (upperValue = minUpperValue), [lowerValue, upperValue];
  function inBoundsUpper(value2) {
    let lowerMin = min + step;
    return value2 < lowerMin ? lowerMin : value2 > max ? max : value2;
  }
  function inBoundsLower(value2) {
    let upperMax = max - step;
    return value2 < min ? min : value2 > upperMax ? upperMax : value2;
  }
  function roundedToStep(value2) {
    return Math.round(value2 / step) * step;
  }
}
function isTupleEqual(a, b) {
  return a == null || b == null ? false : a[0] === b[0] && a[1] === b[1];
}
var import_react305;
var Control;
var DualThumb;
var init_DualThumb = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/DualThumb/DualThumb.js"() {
    import_react305 = __toESM(require_react());
    init_debounce();
    init_css();
    init_types();
    init_RangeSlider_scss();
    init_DualThumb_scss();
    init_Text();
    init_Labelled();
    init_Label();
    init_EventListener();
    init_context();
    (function(Control2) {
      Control2[Control2.Lower = 0] = "Lower", Control2[Control2.Upper = 1] = "Upper";
    })(Control || (Control = {}));
    DualThumb = class extends import_react305.Component {
      constructor(...args) {
        super(...args), this.state = {
          value: sanitizeValue(this.props.value, this.props.min, this.props.max, this.props.step),
          trackWidth: 0,
          trackLeft: 0
        }, this.track = /* @__PURE__ */ (0, import_react305.createRef)(), this.trackWrapper = /* @__PURE__ */ (0, import_react305.createRef)(), this.thumbLower = /* @__PURE__ */ (0, import_react305.createRef)(), this.thumbUpper = /* @__PURE__ */ (0, import_react305.createRef)(), this.setTrackPosition = debounce(() => {
          if (this.track.current) {
            let {
              width: width2,
              left
            } = this.track.current.getBoundingClientRect(), adjustedTrackWidth = width2 - 16, adjustedTrackLeft = left + 16 / 2, range = this.props.max - this.props.min, minValuePosition = this.props.min / range * adjustedTrackWidth;
            this.setState({
              trackWidth: adjustedTrackWidth,
              trackLeft: adjustedTrackLeft - minValuePosition
            });
          }
        }, 40, {
          leading: true,
          trailing: true,
          maxWait: 40
        }), this.handleMouseDownThumbLower = (event) => {
          event.button !== 0 || this.props.disabled || (registerMouseMoveHandler(this.handleMouseMoveThumbLower), event.stopPropagation());
        }, this.handleMouseMoveThumbLower = (event) => {
          let valueUpper = this.state.value[1];
          this.setValue([this.actualXPosition(event.clientX), valueUpper], Control.Upper);
        }, this.handleTouchStartThumbLower = (event) => {
          this.props.disabled || (registerTouchMoveHandler(this.handleTouchMoveThumbLower), event.stopPropagation());
        }, this.handleTouchMoveThumbLower = (event) => {
          event.preventDefault();
          let valueUpper = this.state.value[1];
          this.setValue([this.actualXPosition(event.touches[0].clientX), valueUpper], Control.Upper);
        }, this.handleMouseDownThumbUpper = (event) => {
          event.button !== 0 || this.props.disabled || (registerMouseMoveHandler(this.handleMouseMoveThumbUpper), event.stopPropagation());
        }, this.handleMouseMoveThumbUpper = (event) => {
          let valueLower = this.state.value[0];
          this.setValue([valueLower, this.actualXPosition(event.clientX)], Control.Lower);
        }, this.handleTouchStartThumbUpper = (event) => {
          this.props.disabled || (registerTouchMoveHandler(this.handleTouchMoveThumbUpper), event.stopPropagation());
        }, this.handleTouchMoveThumbUpper = (event) => {
          event.preventDefault();
          let valueLower = this.state.value[0];
          this.setValue([valueLower, this.actualXPosition(event.touches[0].clientX)], Control.Lower);
        }, this.handleKeypressLower = (event) => {
          if (this.props.disabled)
            return;
          let {
            incrementValueLower,
            decrementValueLower
          } = this, handler = {
            [Key.UpArrow]: incrementValueLower,
            [Key.RightArrow]: incrementValueLower,
            [Key.DownArrow]: decrementValueLower,
            [Key.LeftArrow]: decrementValueLower
          }[event.keyCode];
          handler != null && (event.preventDefault(), event.stopPropagation(), handler());
        }, this.handleKeypressUpper = (event) => {
          if (this.props.disabled)
            return;
          let {
            incrementValueUpper,
            decrementValueUpper
          } = this, handler = {
            [Key.UpArrow]: incrementValueUpper,
            [Key.RightArrow]: incrementValueUpper,
            [Key.DownArrow]: decrementValueUpper,
            [Key.LeftArrow]: decrementValueUpper
          }[event.keyCode];
          handler != null && (event.preventDefault(), event.stopPropagation(), handler());
        }, this.incrementValueLower = () => {
          this.setValue([this.state.value[0] + this.props.step, this.state.value[1]], Control.Upper);
        }, this.decrementValueLower = () => {
          this.setValue([this.state.value[0] - this.props.step, this.state.value[1]], Control.Upper);
        }, this.incrementValueUpper = () => {
          this.setValue([this.state.value[0], this.state.value[1] + this.props.step], Control.Lower);
        }, this.decrementValueUpper = () => {
          this.setValue([this.state.value[0], this.state.value[1] - this.props.step], Control.Lower);
        }, this.dispatchValue = () => {
          let {
            onChange,
            id
          } = this.props, {
            value
          } = this.state;
          onChange(value, id);
        }, this.setValue = (dirtyValue, control) => {
          let {
            props: {
              min,
              max,
              step
            },
            state: {
              value
            }
          } = this, sanitizedValue = sanitizeValue(dirtyValue, min, max, step, control);
          isTupleEqual(sanitizedValue, value) === false && this.setState({
            value: sanitizedValue
          }, this.dispatchValue);
        }, this.handleMouseDownTrack = (event) => {
          if (event.button !== 0 || this.props.disabled)
            return;
          event.preventDefault();
          let clickXPosition = this.actualXPosition(event.clientX), {
            value
          } = this.state, distanceFromLowerThumb = Math.abs(value[0] - clickXPosition), distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
          distanceFromLowerThumb <= distanceFromUpperThumb ? (this.setValue([clickXPosition, value[1]], Control.Upper), registerMouseMoveHandler(this.handleMouseMoveThumbLower), this.thumbLower.current != null && this.thumbLower.current.focus()) : (this.setValue([value[0], clickXPosition], Control.Lower), registerMouseMoveHandler(this.handleMouseMoveThumbUpper), this.thumbUpper.current != null && this.thumbUpper.current.focus());
        }, this.handleTouchStartTrack = (event) => {
          if (this.props.disabled)
            return;
          event.preventDefault();
          let clickXPosition = this.actualXPosition(event.touches[0].clientX), {
            value
          } = this.state, distanceFromLowerThumb = Math.abs(value[0] - clickXPosition), distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
          distanceFromLowerThumb <= distanceFromUpperThumb ? (this.setValue([clickXPosition, value[1]], Control.Upper), registerTouchMoveHandler(this.handleTouchMoveThumbLower), this.thumbLower.current != null && this.thumbLower.current.focus()) : (this.setValue([value[0], clickXPosition], Control.Lower), registerTouchMoveHandler(this.handleTouchMoveThumbUpper), this.thumbUpper.current != null && this.thumbUpper.current.focus());
        }, this.actualXPosition = (dirtyXPosition) => {
          if (this.track.current) {
            let {
              min,
              max
            } = this.props, {
              trackLeft,
              trackWidth
            } = this.state;
            return (dirtyXPosition - trackLeft) / trackWidth * (max - min);
          } else
            return 0;
        };
      }
      static getDerivedStateFromProps(props, state) {
        let {
          min,
          step,
          max,
          value,
          onChange,
          id
        } = props, {
          prevValue
        } = state;
        if (isTupleEqual(prevValue, value))
          return null;
        let sanitizedValue = sanitizeValue(value, min, max, step);
        return isTupleEqual(value, sanitizedValue) || onChange(sanitizedValue, id), {
          prevValue: value,
          value: sanitizedValue
        };
      }
      componentDidMount() {
        this.setTrackPosition(), this.trackWrapper.current != null && this.trackWrapper.current.addEventListener("touchstart", this.handleTouchStartTrack, {
          passive: false
        });
      }
      componentWillUnmount() {
        this.trackWrapper.current != null && this.trackWrapper.current.removeEventListener("touchstart", this.handleTouchStartTrack);
      }
      render() {
        let {
          id,
          min,
          max,
          prefix,
          suffix,
          disabled,
          output,
          error,
          onFocus,
          onBlur,
          label,
          labelAction,
          labelHidden,
          helpText
        } = this.props, {
          value
        } = this.state, idLower = id, idUpper = `${id}Upper`, describedBy = [];
        error && describedBy.push(`${id}Error`);
        let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, trackWrapperClassName = classNames(styles110.TrackWrapper, error && styles110.error, disabled && styles110.disabled), thumbLowerClassName = classNames(styles110.Thumbs, styles110.ThumbLower, disabled && styles110.disabled), thumbUpperClassName = classNames(styles110.Thumbs, styles110.ThumbUpper, disabled && styles110.disabled), trackWidth = this.state.trackWidth, range = max - min, minValuePosition = min / range * trackWidth, leftPositionThumbLower = value[0] / range * trackWidth - minValuePosition, leftPositionThumbUpper = value[1] / range * trackWidth - minValuePosition, outputLowerClassName = classNames(styles110.Output, styles110.OutputLower), outputMarkupLower = !disabled && output ? /* @__PURE__ */ import_react305.default.createElement("output", {
          htmlFor: idLower,
          className: outputLowerClassName,
          style: {
            left: `${leftPositionThumbLower}px`
          }
        }, /* @__PURE__ */ import_react305.default.createElement("div", {
          className: styles110.OutputBubble
        }, /* @__PURE__ */ import_react305.default.createElement(Text, {
          as: "span",
          variant: "headingSm",
          alignment: "center"
        }, value[0]))) : null, outputUpperClassName = classNames(styles110.Output, styles110.OutputUpper), outputMarkupUpper = !disabled && output ? /* @__PURE__ */ import_react305.default.createElement("output", {
          htmlFor: idUpper,
          className: outputUpperClassName,
          style: {
            left: `${leftPositionThumbUpper}px`
          }
        }, /* @__PURE__ */ import_react305.default.createElement("div", {
          className: styles110.OutputBubble
        }, /* @__PURE__ */ import_react305.default.createElement(Text, {
          as: "span",
          variant: "headingSm",
          alignment: "center"
        }, value[1]))) : null, cssVars = {
          "--pc-range-slider-progress-lower": `${leftPositionThumbLower}px`,
          "--pc-range-slider-progress-upper": `${leftPositionThumbUpper}px`
        }, prefixMarkup = prefix && /* @__PURE__ */ import_react305.default.createElement("div", {
          className: styles110.Prefix
        }, prefix), suffixMarkup = suffix && /* @__PURE__ */ import_react305.default.createElement("div", {
          className: styles110.Suffix
        }, suffix);
        return /* @__PURE__ */ import_react305.default.createElement(import_react305.default.Fragment, null, /* @__PURE__ */ import_react305.default.createElement(Labelled, {
          id,
          label,
          error,
          action: labelAction,
          labelHidden,
          helpText
        }, /* @__PURE__ */ import_react305.default.createElement("div", {
          className: classNames(styles110.DualThumb, sharedStyles.RangeSlider)
        }, prefixMarkup, /* @__PURE__ */ import_react305.default.createElement("div", {
          className: trackWrapperClassName,
          onMouseDown: this.handleMouseDownTrack,
          ref: this.trackWrapper
        }, /* @__PURE__ */ import_react305.default.createElement("div", {
          className: styles110.Track,
          style: cssVars,
          ref: this.track
        }), /* @__PURE__ */ import_react305.default.createElement("div", {
          className: styles110["Track--dashed"]
        }), /* @__PURE__ */ import_react305.default.createElement("div", {
          id: idLower,
          className: thumbLowerClassName,
          style: {
            left: `${leftPositionThumbLower}px`
          },
          role: "slider",
          "aria-disabled": disabled,
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-valuenow": value[0],
          "aria-invalid": Boolean(error),
          "aria-describedby": ariaDescribedBy,
          "aria-labelledby": labelID(id),
          onFocus,
          onBlur,
          tabIndex: 0,
          onKeyDown: this.handleKeypressLower,
          onMouseDown: this.handleMouseDownThumbLower,
          onTouchStart: this.handleTouchStartThumbLower,
          ref: this.thumbLower
        }), outputMarkupLower, /* @__PURE__ */ import_react305.default.createElement("div", {
          id: idUpper,
          className: thumbUpperClassName,
          style: {
            left: `${leftPositionThumbUpper}px`
          },
          role: "slider",
          "aria-disabled": disabled,
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-valuenow": value[1],
          "aria-invalid": Boolean(error),
          "aria-describedby": ariaDescribedBy,
          "aria-labelledby": labelID(id),
          onFocus,
          onBlur,
          tabIndex: 0,
          onKeyDown: this.handleKeypressUpper,
          onMouseDown: this.handleMouseDownThumbUpper,
          onTouchStart: this.handleTouchStartThumbUpper,
          ref: this.thumbUpper
        }), outputMarkupUpper), suffixMarkup)), /* @__PURE__ */ import_react305.default.createElement(EventListener, {
          event: "resize",
          handler: this.setTrackPosition
        }));
      }
    };
    DualThumb.contextType = FeaturesContext;
  }
});
var styles111;
var init_SingleThumb_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/SingleThumb/SingleThumb.scss.js"() {
    styles111 = {
      SingleThumb: "Polaris-RangeSlider-SingleThumb",
      disabled: "Polaris-RangeSlider-SingleThumb--disabled",
      InputWrapper: "Polaris-RangeSlider-SingleThumb__InputWrapper",
      Prefix: "Polaris-RangeSlider-SingleThumb__Prefix",
      Suffix: "Polaris-RangeSlider-SingleThumb__Suffix",
      Input: "Polaris-RangeSlider-SingleThumb__Input",
      error: "Polaris-RangeSlider-SingleThumb--error",
      Output: "Polaris-RangeSlider-SingleThumb__Output",
      OutputBubble: "Polaris-RangeSlider-SingleThumb__OutputBubble"
    };
  }
});
function invertNumber(number) {
  return Math.sign(number) === 1 ? -Math.abs(number) : Math.sign(number) === -1 ? Math.abs(number) : 0;
}
var init_invertNumber = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RangeSlider/utilities/invertNumber.js"() {
  }
});
function SingleThumb(props) {
  let {
    id,
    error,
    helpText,
    value,
    min,
    max,
    disabled,
    output,
    prefix,
    suffix,
    label,
    labelAction,
    labelHidden,
    step,
    onBlur,
    onFocus
  } = props, clampedValue = clamp(value, min, max), describedBy = [];
  error && describedBy.push(`${id}Error`), helpText && describedBy.push(helpTextID(id));
  let ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0, sliderProgress = (clampedValue - min) * 100 / (max - min), outputFactor = invertNumber((sliderProgress - 50) / 100), cssVars = {
    "--pc-range-slider-min": min,
    "--pc-range-slider-max": max,
    "--pc-range-slider-current": clampedValue,
    "--pc-range-slider-progress": `${sliderProgress}%`,
    "--pc-range-slider-output-factor": `${outputFactor}`
  }, outputMarkup = !disabled && output && /* @__PURE__ */ import_react306.default.createElement("output", {
    htmlFor: id,
    className: styles111.Output
  }, /* @__PURE__ */ import_react306.default.createElement("div", {
    className: styles111.OutputBubble
  }, /* @__PURE__ */ import_react306.default.createElement(Text, {
    as: "span",
    variant: "headingSm",
    alignment: "center"
  }, clampedValue))), prefixMarkup = prefix && /* @__PURE__ */ import_react306.default.createElement("div", {
    className: styles111.Prefix
  }, prefix), suffixMarkup = suffix && /* @__PURE__ */ import_react306.default.createElement("div", {
    className: styles111.Suffix
  }, suffix), className = classNames(styles111.SingleThumb, sharedStyles.RangeSlider, error && styles111.error, disabled && styles111.disabled);
  return /* @__PURE__ */ import_react306.default.createElement(Labelled, {
    id,
    label,
    error,
    action: labelAction,
    labelHidden,
    helpText
  }, /* @__PURE__ */ import_react306.default.createElement("div", {
    className,
    style: cssVars
  }, prefixMarkup, /* @__PURE__ */ import_react306.default.createElement("div", {
    className: styles111.InputWrapper
  }, /* @__PURE__ */ import_react306.default.createElement("input", {
    type: "range",
    className: styles111.Input,
    id,
    name: id,
    min,
    max,
    step,
    value: clampedValue,
    disabled,
    onChange: handleChange,
    onFocus,
    onBlur,
    "aria-valuemin": min,
    "aria-valuemax": max,
    "aria-valuenow": clampedValue,
    "aria-invalid": Boolean(error),
    "aria-describedby": ariaDescribedBy
  }), outputMarkup), suffixMarkup));
  function handleChange(event) {
    let {
      onChange
    } = props;
    onChange && onChange(parseFloat(event.currentTarget.value), id);
  }
}
var import_react306;
var init_SingleThumb = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/SingleThumb/SingleThumb.js"() {
    import_react306 = __toESM(require_react());
    init_css();
    init_clamp();
    init_RangeSlider_scss();
    init_SingleThumb_scss();
    init_invertNumber();
    init_Text();
    init_Labelled();
  }
});
function RangeSlider({
  min = 0,
  max = 100,
  step = 1,
  value,
  ...rest
}) {
  let sharedProps = {
    id: (0, import_react307.useId)(),
    min,
    max,
    step,
    ...rest
  };
  return isDualThumb(value) ? /* @__PURE__ */ import_react307.default.createElement(DualThumb, Object.assign({
    value
  }, sharedProps)) : /* @__PURE__ */ import_react307.default.createElement(SingleThumb, Object.assign({
    value
  }, sharedProps));
}
function isDualThumb(value) {
  return Array.isArray(value);
}
var import_react307;
var init_RangeSlider = __esm({
  "node_modules/@shopify/polaris/build/esm/components/RangeSlider/RangeSlider.js"() {
    import_react307 = __toESM(require_react());
    init_DualThumb();
    init_SingleThumb();
  }
});
var styles112;
var init_ResourceItem_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ResourceItem/ResourceItem.scss.js"() {
    styles112 = {
      ResourceItem: "Polaris-ResourceItem",
      Actions: "Polaris-ResourceItem__Actions",
      ItemWrapper: "Polaris-ResourceItem__ItemWrapper",
      CheckboxWrapper: "Polaris-ResourceItem__CheckboxWrapper",
      focusedInner: "Polaris-ResourceItem--focusedInner",
      focused: "Polaris-ResourceItem--focused",
      selected: "Polaris-ResourceItem--selected",
      Link: "Polaris-ResourceItem__Link",
      Button: "Polaris-ResourceItem__Button",
      selectable: "Polaris-ResourceItem--selectable",
      ListItem: "Polaris-ResourceItem__ListItem",
      hasBulkActions: "Polaris-ResourceItem--hasBulkActions"
    };
  }
});
var SELECT_ALL_ITEMS2;
var init_types6 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/resource-list/types.js"() {
    SELECT_ALL_ITEMS2 = "All";
  }
});
function noop20() {
}
function stopPropagation2(event) {
  event.stopPropagation();
}
function isSelected(id, selectedItems) {
  return Boolean(selectedItems && (Array.isArray(selectedItems) && selectedItems.includes(id) || selectedItems === SELECT_ALL_ITEMS2));
}
function ResourceItem(props) {
  let breakpoints2 = useBreakpoints();
  return /* @__PURE__ */ import_react308.default.createElement(BaseResourceItem, Object.assign({}, props, {
    breakpoints: breakpoints2,
    context: (0, import_react308.useContext)(ResourceListContext),
    i18n: useI18n()
  }));
}
function getAlignment(alignment) {
  switch (alignment) {
    case "leading":
      return "start";
    case "trailing":
      return "end";
    case "center":
      return "center";
    case "fill":
      return "stretch";
    case "baseline":
      return "baseline";
    default:
      return "start";
  }
}
function UseId(props) {
  let id = (0, import_react308.useId)();
  return props.children(id);
}
var import_react308;
var import_react_fast_compare4;
var BaseResourceItem;
var init_ResourceItem = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ResourceItem/ResourceItem.js"() {
    import_react308 = __toESM(require_react());
    init_dist3();
    import_react_fast_compare4 = __toESM(require_react_fast_compare());
    init_breakpoints2();
    init_css();
    init_ResourceItem_scss();
    init_types6();
    init_context19();
    init_hooks2();
    init_Checkbox();
    init_ButtonGroup();
    init_utils4();
    init_Popover();
    init_Button();
    init_ActionList();
    init_Box();
    init_InlineGrid();
    init_InlineStack();
    init_UnstyledLink();
    BaseResourceItem = class extends import_react308.Component {
      constructor(...args) {
        super(...args), this.state = {
          actionsMenuVisible: false,
          focused: false,
          focusedInner: false,
          selected: isSelected(this.props.id, this.props.context.selectedItems)
        }, this.node = null, this.overlayRef = /* @__PURE__ */ (0, import_react308.createRef)(), this.buttonOverlay = /* @__PURE__ */ (0, import_react308.createRef)(), this.setNode = (node) => {
          this.node = node;
        }, this.handleFocus = (event) => {
          event.target === this.buttonOverlay.current || this.node && event.target === this.overlayRef.current ? this.setState({
            focused: true,
            focusedInner: false
          }) : this.node && this.node.contains(event.target) && this.setState({
            focused: true,
            focusedInner: true
          });
        }, this.handleBlur = ({
          relatedTarget
        }) => {
          this.node && relatedTarget instanceof Element && this.node.contains(relatedTarget) || this.setState({
            focused: false,
            focusedInner: false
          });
        }, this.handleMouseOut = () => {
          this.state.focused && this.setState({
            focused: false,
            focusedInner: false
          }), this.props.onMouseOut && this.props.onMouseOut();
        }, this.handleLargerSelectionArea = (event) => {
          stopPropagation2(event), this.handleSelection(!this.state.selected, event.nativeEvent.shiftKey);
        }, this.handleSelection = (value, shiftKey) => {
          let {
            id,
            sortOrder,
            context: {
              onSelectionChange
            }
          } = this.props;
          id == null || onSelectionChange == null || (this.setState({
            focused: value,
            focusedInner: value
          }), onSelectionChange(value, id, sortOrder, shiftKey));
        }, this.handleClick = (event) => {
          stopPropagation2(event);
          let {
            id,
            onClick,
            url,
            context: {
              selectMode
            }
          } = this.props, {
            ctrlKey,
            metaKey
          } = event.nativeEvent, anchor = this.node && this.node.querySelector("a");
          if (selectMode) {
            this.handleLargerSelectionArea(event);
            return;
          }
          if (anchor !== event.target) {
            if (onClick && onClick(id), url && (ctrlKey || metaKey)) {
              window.open(url, "_blank");
              return;
            }
            url && anchor && anchor.click();
          }
        }, this.handleKeyUp = (event) => {
          let {
            onClick = noop20,
            context: {
              selectMode
            }
          } = this.props, {
            key
          } = event;
          key === "Enter" && this.props.url && !selectMode && onClick();
        }, this.handleActionsClick = () => {
          this.setState(({
            actionsMenuVisible
          }) => ({
            actionsMenuVisible: !actionsMenuVisible
          }));
        }, this.handleCloseRequest = () => {
          this.setState({
            actionsMenuVisible: false
          });
        };
      }
      static getDerivedStateFromProps(nextProps, prevState) {
        let selected = isSelected(nextProps.id, nextProps.context.selectedItems);
        return prevState.selected === selected ? null : {
          selected
        };
      }
      shouldComponentUpdate(nextProps, nextState) {
        let {
          children: nextChildren,
          context: {
            selectedItems: nextSelectedItems,
            ...restNextContext
          },
          ...restNextProps
        } = nextProps, {
          children,
          context: {
            selectedItems,
            ...restContext
          },
          ...restProps
        } = this.props, nextSelectMode = nextProps.context.selectMode;
        return !(0, import_react_fast_compare4.default)(this.state, nextState) || this.props.context.selectMode !== nextSelectMode || !nextProps.context.selectMode && (!(0, import_react_fast_compare4.default)(restProps, restNextProps) || !(0, import_react_fast_compare4.default)(restContext, restNextContext));
      }
      render() {
        let {
          children,
          url,
          external,
          media,
          shortcutActions,
          ariaControls,
          ariaExpanded,
          persistActions = false,
          accessibilityLabel,
          name,
          context: {
            selectable,
            selectMode,
            hasBulkActions,
            loading,
            resourceName
          },
          i18n,
          verticalAlignment,
          dataHref,
          breakpoints: breakpoints2,
          onMouseOver
        } = this.props, {
          actionsMenuVisible,
          focused,
          focusedInner,
          selected
        } = this.state, ownedMarkup = null, handleMarkup = null;
        if (selectable) {
          let checkboxAccessibilityLabel = name || accessibilityLabel || i18n.translate("Polaris.Common.checkbox");
          handleMarkup = /* @__PURE__ */ import_react308.default.createElement("div", {
            className: styles112.CheckboxWrapper,
            onClick: stopPropagation2,
            onChange: this.handleLargerSelectionArea
          }, /* @__PURE__ */ import_react308.default.createElement(UseId, null, (id) => /* @__PURE__ */ import_react308.default.createElement(Checkbox, {
            id,
            label: checkboxAccessibilityLabel,
            labelHidden: true,
            checked: selected,
            disabled: loading,
            bleedInlineStart: "300",
            bleedInlineEnd: "300",
            bleedBlockStart: "300",
            bleedBlockEnd: "300",
            fill: true,
            labelClassName: styles112.CheckboxLabel
          })));
        }
        (media || selectable) && (ownedMarkup = /* @__PURE__ */ import_react308.default.createElement(InlineStack, {
          gap: "300",
          blockAlign: media && selectable ? "center" : getAlignment(verticalAlignment)
        }, handleMarkup, media));
        let className = classNames(styles112.ResourceItem, focused && styles112.focused, selectable && styles112.selectable, selected && styles112.selected, selectMode && styles112.selectMode, persistActions && styles112.persistActions, focusedInner && styles112.focusedInner), listItemClassName = classNames(styles112.ListItem, focused && !focusedInner && styles112.focused, hasBulkActions && styles112.hasBulkActions, selected && styles112.selected, selectable && styles112.selectable), actionsMarkup = null, disclosureMarkup = null;
        if (shortcutActions && !loading)
          if (persistActions) {
            actionsMarkup = breakpoints2?.lgUp ? /* @__PURE__ */ import_react308.default.createElement("div", {
              className: styles112.Actions,
              onClick: stopPropagation2
            }, /* @__PURE__ */ import_react308.default.createElement(ButtonGroup, null, buttonsFrom(shortcutActions, {
              variant: "tertiary"
            }))) : null;
            let disclosureAccessibilityLabel = name ? i18n.translate("Polaris.ResourceList.Item.actionsDropdownLabel", {
              accessibilityLabel: name
            }) : i18n.translate("Polaris.ResourceList.Item.actionsDropdown");
            disclosureMarkup = !selectMode && breakpoints2?.lgDown ? /* @__PURE__ */ import_react308.default.createElement("div", {
              onClick: stopPropagation2
            }, /* @__PURE__ */ import_react308.default.createElement(Popover2, {
              activator: /* @__PURE__ */ import_react308.default.createElement(Button, {
                accessibilityLabel: disclosureAccessibilityLabel,
                onClick: this.handleActionsClick,
                variant: "tertiary",
                icon: SvgHorizontalDotsMinor
              }),
              onClose: this.handleCloseRequest,
              active: actionsMenuVisible
            }, /* @__PURE__ */ import_react308.default.createElement(ActionList, {
              items: shortcutActions
            }))) : null;
          } else
            breakpoints2?.lgUp && (actionsMarkup = /* @__PURE__ */ import_react308.default.createElement("div", {
              className: styles112.Actions,
              onClick: stopPropagation2
            }, /* @__PURE__ */ import_react308.default.createElement(Box, {
              position: "absolute",
              insetBlockStart: "400",
              insetInlineEnd: "500"
            }, /* @__PURE__ */ import_react308.default.createElement(ButtonGroup, {
              variant: "segmented"
            }, buttonsFrom(shortcutActions, {
              size: "slim"
            })))));
        let containerMarkup = /* @__PURE__ */ import_react308.default.createElement(Box, {
          id: this.props.id,
          position: "relative",
          paddingInlineStart: "300",
          paddingInlineEnd: "300",
          paddingBlockStart: "300",
          paddingBlockEnd: "300",
          zIndex: "var(--pc-resource-item-content-stacking-order)"
        }, /* @__PURE__ */ import_react308.default.createElement(InlineGrid, {
          columns: {
            xs: "1fr auto"
          }
        }, /* @__PURE__ */ import_react308.default.createElement(InlineGrid, {
          columns: {
            xs: media || selectable ? "auto 1fr" : "1fr"
          },
          gap: "300"
        }, ownedMarkup, /* @__PURE__ */ import_react308.default.createElement(InlineStack, {
          blockAlign: getAlignment(verticalAlignment)
        }, /* @__PURE__ */ import_react308.default.createElement(Box, {
          width: "100%",
          padding: "0"
        }, children))), actionsMarkup, disclosureMarkup)), tabIndex = loading ? -1 : 0, ariaLabel = accessibilityLabel || i18n.translate("Polaris.ResourceList.Item.viewItem", {
          itemName: name || resourceName && resourceName.singular || ""
        }), accessibleMarkup = url ? /* @__PURE__ */ import_react308.default.createElement(UseId, null, (id) => /* @__PURE__ */ import_react308.default.createElement(UnstyledLink, {
          "aria-describedby": this.props.id,
          "aria-label": ariaLabel,
          className: styles112.Link,
          url,
          external,
          tabIndex,
          id,
          ref: this.overlayRef
        })) : /* @__PURE__ */ import_react308.default.createElement("button", {
          className: styles112.Button,
          "aria-label": ariaLabel,
          "aria-controls": ariaControls,
          "aria-expanded": ariaExpanded,
          onClick: this.handleClick,
          tabIndex,
          ref: this.buttonOverlay
        });
        return /* @__PURE__ */ import_react308.default.createElement("li", {
          className: listItemClassName,
          "data-href": dataHref
        }, /* @__PURE__ */ import_react308.default.createElement("div", {
          className: styles112.ItemWrapper
        }, /* @__PURE__ */ import_react308.default.createElement("div", {
          ref: this.setNode,
          className,
          onClick: this.handleClick,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyUp: this.handleKeyUp,
          onMouseOver,
          onMouseOut: this.handleMouseOut,
          "data-href": url
        }, accessibleMarkup, containerMarkup)));
      }
      // This fires onClick when there is a URL on the item
    };
  }
});
var styles113;
var init_ResourceList_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ResourceList/ResourceList.scss.js"() {
    styles113 = {
      FiltersWrapper: "Polaris-ResourceList__FiltersWrapper",
      ResourceList: "Polaris-ResourceList",
      HeaderOuterWrapper: "Polaris-ResourceList__HeaderOuterWrapper",
      BulkActionsWrapper: "Polaris-ResourceList__BulkActionsWrapper",
      "HeaderWrapper-disabled": "Polaris-ResourceList__HeaderWrapper--disabled",
      "HeaderWrapper-overlay": "Polaris-ResourceList__HeaderWrapper--overlay",
      HeaderWrapper: "Polaris-ResourceList__HeaderWrapper",
      "HeaderWrapper-isSticky": "Polaris-ResourceList__HeaderWrapper--isSticky",
      HeaderContentWrapper: "Polaris-ResourceList__HeaderContentWrapper",
      "HeaderWrapper-inSelectMode": "Polaris-ResourceList__HeaderWrapper--inSelectMode",
      SortWrapper: "Polaris-ResourceList__SortWrapper",
      AlternateToolWrapper: "Polaris-ResourceList__AlternateToolWrapper",
      "HeaderWrapper-hasSelect": "Polaris-ResourceList__HeaderWrapper--hasSelect",
      "HeaderWrapper-hasAlternateTool": "Polaris-ResourceList__HeaderWrapper--hasAlternateTool",
      "HeaderWrapper-hasSort": "Polaris-ResourceList__HeaderWrapper--hasSort",
      HeaderTitleWrapper: "Polaris-ResourceList__HeaderTitleWrapper",
      BulkActionsWrapperSticky: "Polaris-ResourceList__BulkActionsWrapperSticky",
      SelectAllActionsWrapper: "Polaris-ResourceList__SelectAllActionsWrapper",
      CheckableButtonWrapper: "Polaris-ResourceList__CheckableButtonWrapper",
      SelectButtonWrapper: "Polaris-ResourceList__SelectButtonWrapper",
      EmptySearchResultWrapper: "Polaris-ResourceList__EmptySearchResultWrapper",
      ResourceListWrapper: "Polaris-ResourceList__ResourceListWrapper",
      ResourceListWrapperWithBulkActions: "Polaris-ResourceList__ResourceListWrapperWithBulkActions",
      ItemWrapper: "Polaris-ResourceList__ItemWrapper",
      "ItemWrapper-isLoading": "Polaris-ResourceList__ItemWrapper--isLoading",
      SpinnerContainer: "Polaris-ResourceList__SpinnerContainer",
      LoadingOverlay: "Polaris-ResourceList__LoadingOverlay",
      DisabledPointerEvents: "Polaris-ResourceList__DisabledPointerEvents",
      disableTextSelection: "Polaris-ResourceList--disableTextSelection"
    };
  }
});
var styles114;
var init_Select_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Select/Select.scss.js"() {
    styles114 = {
      Select: "Polaris-Select",
      disabled: "Polaris-Select--disabled",
      error: "Polaris-Select--error",
      Backdrop: "Polaris-Select__Backdrop",
      Input: "Polaris-Select__Input",
      Content: "Polaris-Select__Content",
      InlineLabel: "Polaris-Select__InlineLabel",
      Icon: "Polaris-Select__Icon",
      SelectedOption: "Polaris-Select__SelectedOption",
      Prefix: "Polaris-Select__Prefix",
      hover: "Polaris-Select--hover",
      toneMagic: "Polaris-Select--toneMagic"
    };
  }
});
function Select({
  options: optionsProp,
  label,
  labelAction,
  labelHidden: labelHiddenProp,
  labelInline,
  disabled,
  helpText,
  placeholder,
  id: idProp,
  name,
  value = PLACEHOLDER_VALUE,
  error,
  onChange,
  onFocus,
  onBlur,
  requiredIndicator,
  tone
}) {
  let {
    value: focused,
    toggle: toggleFocused
  } = useToggle(false), uniqId = (0, import_react309.useId)(), id = idProp ?? uniqId, labelHidden = labelInline ? true : labelHiddenProp, className = classNames(styles114.Select, error && styles114.error, tone && styles114[variationName("tone", tone)], disabled && styles114.disabled), handleFocus = (0, import_react309.useCallback)((event) => {
    toggleFocused(), onFocus?.(event);
  }, [onFocus, toggleFocused]), handleBlur = (0, import_react309.useCallback)((event) => {
    toggleFocused(), onBlur?.(event);
  }, [onBlur, toggleFocused]), handleChange = onChange ? (event) => onChange(event.currentTarget.value, id) : void 0, describedBy = [];
  helpText && describedBy.push(helpTextID(id)), error && describedBy.push(`${id}Error`);
  let normalizedOptions = (optionsProp || []).map(normalizeOption);
  placeholder && (normalizedOptions = [{
    label: placeholder,
    value: PLACEHOLDER_VALUE,
    disabled: true
  }, ...normalizedOptions]);
  let inlineLabelMarkup = labelInline && /* @__PURE__ */ import_react309.default.createElement(Box, {
    paddingInlineEnd: "100"
  }, /* @__PURE__ */ import_react309.default.createElement(Text, {
    as: "span",
    tone: tone && tone === "magic" && !focused ? "magic-subdued" : "subdued",
    truncate: true
  }, label)), selectedOption = getSelectedOption(normalizedOptions, value), prefixMarkup = selectedOption.prefix && /* @__PURE__ */ import_react309.default.createElement("div", {
    className: styles114.Prefix
  }, selectedOption.prefix), contentMarkup = /* @__PURE__ */ import_react309.default.createElement("div", {
    className: styles114.Content,
    "aria-hidden": true,
    "aria-disabled": disabled
  }, inlineLabelMarkup, prefixMarkup, /* @__PURE__ */ import_react309.default.createElement("span", {
    className: styles114.SelectedOption
  }, selectedOption.label), /* @__PURE__ */ import_react309.default.createElement("span", {
    className: styles114.Icon
  }, /* @__PURE__ */ import_react309.default.createElement(Icon, {
    source: SvgSelectMinor
  }))), optionsMarkup = normalizedOptions.map(renderOption);
  return /* @__PURE__ */ import_react309.default.createElement(Labelled, {
    id,
    label,
    error,
    action: labelAction,
    labelHidden,
    helpText,
    requiredIndicator,
    disabled
  }, /* @__PURE__ */ import_react309.default.createElement("div", {
    className
  }, /* @__PURE__ */ import_react309.default.createElement("select", {
    id,
    name,
    value,
    className: styles114.Input,
    disabled,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onChange: handleChange,
    "aria-invalid": Boolean(error),
    "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
    "aria-required": requiredIndicator
  }, optionsMarkup), contentMarkup, /* @__PURE__ */ import_react309.default.createElement("div", {
    className: styles114.Backdrop
  })));
}
function isString(option) {
  return typeof option == "string";
}
function isGroup(option) {
  return typeof option == "object" && "options" in option && option.options != null;
}
function normalizeStringOption(option) {
  return {
    label: option,
    value: option
  };
}
function normalizeOption(option) {
  if (isString(option))
    return normalizeStringOption(option);
  if (isGroup(option)) {
    let {
      title,
      options
    } = option;
    return {
      title,
      options: options.map((option2) => isString(option2) ? normalizeStringOption(option2) : option2)
    };
  }
  return option;
}
function getSelectedOption(options, value) {
  let flatOptions = flattenOptions(options), selectedOption = flatOptions.find((option) => value === option.value);
  return selectedOption === void 0 && (selectedOption = flatOptions.find((option) => !option.hidden)), selectedOption || {
    value: "",
    label: ""
  };
}
function flattenOptions(options) {
  let flatOptions = [];
  return options.forEach((optionOrGroup) => {
    isGroup(optionOrGroup) ? flatOptions = flatOptions.concat(optionOrGroup.options) : flatOptions.push(optionOrGroup);
  }), flatOptions;
}
function renderSingleOption(option) {
  let {
    value,
    label,
    prefix: _prefix,
    key,
    ...rest
  } = option;
  return /* @__PURE__ */ import_react309.default.createElement("option", Object.assign({
    key: key ?? value,
    value
  }, rest), label);
}
function renderOption(optionOrGroup) {
  if (isGroup(optionOrGroup)) {
    let {
      title,
      options
    } = optionOrGroup;
    return /* @__PURE__ */ import_react309.default.createElement("optgroup", {
      label: title,
      key: title
    }, options.map(renderSingleOption));
  }
  return renderSingleOption(optionOrGroup);
}
var import_react309;
var PLACEHOLDER_VALUE;
var init_Select = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Select/Select.js"() {
    import_react309 = __toESM(require_react());
    init_dist3();
    init_css();
    init_use_toggle();
    init_Select_scss();
    init_Icon();
    init_Labelled();
    init_Box();
    init_Text();
    PLACEHOLDER_VALUE = "";
  }
});
function getAllItemsOnPage(items, idForItem) {
  return items.map((item, index) => idForItem(item, index));
}
function defaultIdForItem(item, index) {
  return Object.prototype.hasOwnProperty.call(item, "id") ? item.id : index.toString();
}
function ResourceList({
  items,
  filterControl,
  flushFilters,
  emptyState,
  emptySearchState,
  resourceName: resourceNameProp,
  promotedBulkActions,
  bulkActions,
  selectedItems = [],
  isFiltered,
  selectable,
  hasMoreItems,
  loading,
  headerContent,
  showHeader,
  totalItemsCount,
  sortValue,
  sortOptions,
  alternateTool,
  onSortChange,
  onSelectionChange,
  renderItem,
  idForItem = defaultIdForItem,
  resolveItemId,
  pagination
}) {
  let i18n = useI18n(), [selectMode, setSelectMode] = (0, import_react310.useState)(Boolean(selectedItems && selectedItems.length > 0)), [loadingPosition, setLoadingPositionState] = (0, import_react310.useState)(0), [lastSelected, setLastSelected] = (0, import_react310.useState)(), [smallScreen, setSmallScreen] = (0, import_react310.useState)(isBreakpointsXS2()), forceUpdate = (0, import_react310.useReducer)((x = 0) => x + 1, 0)[1], checkableButtonRef = (0, import_react310.useRef)(null), {
    bulkActionsIntersectionRef,
    tableMeasurerRef,
    isBulkActionsSticky,
    bulkActionsAbsoluteOffset,
    bulkActionsMaxWidth,
    bulkActionsOffsetLeft,
    computeTableDimensions
  } = useIsBulkActionsSticky(selectMode);
  (0, import_react310.useEffect)(() => {
    computeTableDimensions();
  }, [computeTableDimensions, items.length]);
  let defaultResourceName = useLazyRef(() => ({
    singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
    plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
  })), listRef = (0, import_react310.useRef)(null), handleSelectMode = (selectMode2) => {
    setSelectMode(selectMode2), !selectMode2 && onSelectionChange && onSelectionChange([]);
  }, handleResize = debounce(() => {
    let newSmallScreen = isBreakpointsXS2();
    selectedItems && selectedItems.length === 0 && selectMode && !newSmallScreen && handleSelectMode(false), smallScreen !== newSmallScreen && setSmallScreen(newSmallScreen);
  }, 50, {
    leading: true,
    trailing: true,
    maxWait: 50
  });
  useEventListener("resize", handleResize);
  let isSelectable = Boolean(promotedBulkActions && promotedBulkActions.length > 0 || bulkActions && bulkActions.length > 0 || selectable) && !smallScreen, selectAllSelectState = () => {
    let selectState = "indeterminate";
    return !selectedItems || Array.isArray(selectedItems) && selectedItems.length === 0 ? selectState = false : (selectedItems === SELECT_ALL_ITEMS2 || Array.isArray(selectedItems) && selectedItems.length === items.length) && (selectState = true), selectState;
  }, resourceName = resourceNameProp || defaultResourceName.current, headerTitle = () => {
    let itemsCount = items.length, resource = !loading && (!totalItemsCount && itemsCount === 1 || totalItemsCount === 1) ? resourceName.singular : resourceName.plural;
    return loading ? i18n.translate("Polaris.ResourceList.loading", {
      resource
    }) : totalItemsCount ? i18n.translate("Polaris.ResourceList.showingTotalCount", {
      itemsCount,
      totalItemsCount,
      resource
    }) : headerContent || i18n.translate("Polaris.ResourceList.showing", {
      itemsCount,
      resource
    });
  }, selectAllActionsLabel = () => {
    let selectedItemsCount = selectedItems === SELECT_ALL_ITEMS2 ? `${items.length}+` : selectedItems.length;
    return i18n.translate("Polaris.ResourceList.selected", {
      selectedItemsCount
    });
  }, selectAllActionsAccessibilityLabel = () => {
    let selectedItemsCount = selectedItems.length, totalItemsCount2 = items.length, allSelected = selectedItemsCount === totalItemsCount2;
    return totalItemsCount2 === 1 && allSelected ? i18n.translate("Polaris.ResourceList.a11yCheckboxDeselectAllSingle", {
      resourceNameSingular: resourceName.singular
    }) : totalItemsCount2 === 1 ? i18n.translate("Polaris.ResourceList.a11yCheckboxSelectAllSingle", {
      resourceNameSingular: resourceName.singular
    }) : allSelected ? i18n.translate("Polaris.ResourceList.a11yCheckboxDeselectAllMultiple", {
      itemsLength: items.length,
      resourceNamePlural: resourceName.plural
    }) : i18n.translate("Polaris.ResourceList.a11yCheckboxSelectAllMultiple", {
      itemsLength: items.length,
      resourceNamePlural: resourceName.plural
    });
  }, paginatedSelectAllText = () => {
    if (!(!isSelectable || !hasMoreItems) && selectedItems === SELECT_ALL_ITEMS2)
      return i18n.translate(isFiltered ? "Polaris.ResourceList.allFilteredItemsSelected" : "Polaris.ResourceList.allItemsSelected", {
        itemsLength: items.length,
        resourceNamePlural: resourceName.plural
      });
  }, paginatedSelectAllAction = () => !isSelectable || !hasMoreItems ? void 0 : {
    content: selectedItems === SELECT_ALL_ITEMS2 ? i18n.translate("Polaris.Common.undo") : i18n.translate(isFiltered ? "Polaris.ResourceList.selectAllFilteredItems" : "Polaris.ResourceList.selectAllItems", {
      itemsLength: items.length,
      resourceNamePlural: resourceName.plural
    }),
    onAction: handleSelectAllItemsInStore
  }, emptySearchResultText = {
    title: i18n.translate("Polaris.ResourceList.emptySearchResultTitle", {
      resourceNamePlural: resourceName.plural
    }),
    description: i18n.translate("Polaris.ResourceList.emptySearchResultDescription")
  }, handleSelectAllItemsInStore = () => {
    let newlySelectedItems = selectedItems === SELECT_ALL_ITEMS2 ? getAllItemsOnPage(items, idForItem) : SELECT_ALL_ITEMS2;
    onSelectionChange && onSelectionChange(newlySelectedItems);
  }, setLoadingPosition = (0, import_react310.useCallback)(() => {
    if (listRef.current != null) {
      if (typeof window > "u")
        return;
      let overlay2 = listRef.current.getBoundingClientRect(), viewportHeight = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0), overflow = viewportHeight - overlay2.height, spinnerHeight = items.length === 1 ? SMALL_SPINNER_HEIGHT : LARGE_SPINNER_HEIGHT, spinnerPosition = overflow > 0 ? (overlay2.height - spinnerHeight) / 2 : (viewportHeight - overlay2.top - spinnerHeight) / 2;
      setLoadingPositionState(spinnerPosition);
    }
  }, [listRef, items.length]), itemsExist = items.length > 0;
  (0, import_react310.useEffect)(() => {
    loading && setLoadingPosition();
  }, [loading, setLoadingPosition]), (0, import_react310.useEffect)(() => {
    selectedItems && selectedItems.length > 0 && !selectMode && setSelectMode(true), (!selectedItems || selectedItems.length === 0) && !isBreakpointsXS2() && setSelectMode(false);
  }, [selectedItems, selectMode]), (0, import_react310.useEffect)(() => {
    forceUpdate();
  }, [forceUpdate, items]);
  let renderItemWithId = (item, index) => {
    let id = idForItem(item, index), itemContent = renderItem(item, id, index);
    return isElementOfType(itemContent, ResourceItem) || console.warn("<ResourceList /> renderItem function should return a <ResourceItem />."), itemContent;
  }, handleMultiSelectionChange = (lastSelected2, currentSelected, resolveItemId2) => {
    let min = Math.min(lastSelected2, currentSelected), max = Math.max(lastSelected2, currentSelected);
    return items.slice(min, max + 1).map(resolveItemId2);
  }, handleSelectionChange = (selected, id, sortOrder, shiftKey) => {
    if (selectedItems == null || onSelectionChange == null)
      return;
    let newlySelectedItems = selectedItems === SELECT_ALL_ITEMS2 ? getAllItemsOnPage(items, idForItem) : [...selectedItems];
    sortOrder !== void 0 && setLastSelected(sortOrder);
    let lastSelectedFromState = lastSelected, selectedIds = [id];
    if (shiftKey && lastSelectedFromState != null && sortOrder !== void 0 && resolveItemId && (selectedIds = handleMultiSelectionChange(lastSelectedFromState, sortOrder, resolveItemId)), newlySelectedItems = [.../* @__PURE__ */ new Set([...newlySelectedItems, ...selectedIds])], !selected)
      for (let selectedId of selectedIds)
        newlySelectedItems.splice(newlySelectedItems.indexOf(selectedId), 1);
    newlySelectedItems.length === 0 && !isBreakpointsXS2() ? handleSelectMode(false) : newlySelectedItems.length > 0 && handleSelectMode(true), onSelectionChange && onSelectionChange(newlySelectedItems);
  }, handleToggleAll = () => {
    let newlySelectedItems;
    Array.isArray(selectedItems) && selectedItems.length === items.length || selectedItems === SELECT_ALL_ITEMS2 ? newlySelectedItems = [] : newlySelectedItems = items.map((item, index) => idForItem(item, index)), newlySelectedItems.length === 0 && !isBreakpointsXS2() ? handleSelectMode(false) : newlySelectedItems.length > 0 && handleSelectMode(true), onSelectionChange && onSelectionChange(newlySelectedItems), setTimeout(() => {
      checkableButtonRef?.current?.focus();
    }, 0);
  }, selectAllActionsMarkup = isSelectable ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113.SelectAllActionsWrapper
  }, /* @__PURE__ */ import_react310.default.createElement(SelectAllActions, {
    label: selectAllActionsLabel(),
    accessibilityLabel: selectAllActionsAccessibilityLabel(),
    selected: selectAllSelectState(),
    onToggleAll: handleToggleAll,
    selectMode,
    paginatedSelectAllAction: paginatedSelectAllAction(),
    paginatedSelectAllText: paginatedSelectAllText(),
    disabled: loading,
    ref: checkableButtonRef
  })) : null, bulkActionClassNames = classNames(styles113.BulkActionsWrapper, isBulkActionsSticky && styles113.BulkActionsWrapperSticky), bulkActionsMarkup = isSelectable && selectMode && (bulkActions || promotedBulkActions) ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className: bulkActionClassNames,
    style: {
      top: isBulkActionsSticky ? void 0 : bulkActionsAbsoluteOffset,
      width: bulkActionsMaxWidth,
      left: isBulkActionsSticky ? bulkActionsOffsetLeft : void 0
    }
  }, /* @__PURE__ */ import_react310.default.createElement(BulkActions, {
    selectMode,
    onSelectModeToggle: handleSelectMode,
    promotedActions: promotedBulkActions,
    actions: bulkActions,
    disabled: loading,
    isSticky: isBulkActionsSticky,
    width: bulkActionsMaxWidth
  })) : null, filterControlMarkup = filterControl ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className: classNames(!flushFilters && styles113.FiltersWrapper)
  }, filterControl) : null, sortingSelectMarkup = sortOptions && sortOptions.length > 0 && !alternateTool ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113.SortWrapper
  }, /* @__PURE__ */ import_react310.default.createElement(Select, {
    label: i18n.translate("Polaris.ResourceList.sortingLabel"),
    labelInline: !smallScreen,
    labelHidden: smallScreen,
    options: sortOptions,
    onChange: onSortChange,
    value: sortValue,
    disabled: selectMode
  })) : null, alternateToolMarkup = alternateTool && !sortingSelectMarkup ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113.AlternateToolWrapper
  }, alternateTool) : null, headerTitleMarkup = /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113.HeaderTitleWrapper
  }, headerTitle()), selectButtonMarkup = isSelectable ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113.SelectButtonWrapper
  }, /* @__PURE__ */ import_react310.default.createElement(Button, {
    disabled: selectMode,
    icon: SvgEnableSelectionMinor,
    onClick: () => handleSelectMode(true)
  }, i18n.translate("Polaris.ResourceList.selectButtonText"))) : null, checkableButtonMarkup = isSelectable ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113.CheckableButtonWrapper
  }, /* @__PURE__ */ import_react310.default.createElement(CheckableButton, {
    accessibilityLabel: selectAllActionsAccessibilityLabel(),
    label: headerTitle(),
    onToggleAll: handleToggleAll,
    disabled: loading,
    ref: checkableButtonRef
  })) : null, needsHeader = isSelectable || sortOptions && sortOptions.length > 0 || alternateTool, headerWrapperOverlay = loading ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113["HeaderWrapper-overlay"]
  }) : null, showEmptyState = emptyState && !itemsExist && !loading, showEmptySearchState = !showEmptyState && filterControl && !itemsExist && !loading, headerMarkup = !showEmptyState && showHeader !== false && !showEmptySearchState && (showHeader || needsHeader) && listRef.current && /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113.HeaderOuterWrapper
  }, /* @__PURE__ */ import_react310.default.createElement(Sticky, {
    boundingElement: listRef.current
  }, (isSticky) => {
    let headerClassName = classNames(styles113.HeaderWrapper, sortOptions && sortOptions.length > 0 && !alternateTool && styles113["HeaderWrapper-hasSort"], alternateTool && styles113["HeaderWrapper-hasAlternateTool"], isSelectable && styles113["HeaderWrapper-hasSelect"], loading && styles113["HeaderWrapper-disabled"], isSelectable && selectMode && styles113["HeaderWrapper-inSelectMode"], isSticky && styles113["HeaderWrapper-isSticky"]);
    return /* @__PURE__ */ import_react310.default.createElement("div", {
      className: headerClassName
    }, headerWrapperOverlay, /* @__PURE__ */ import_react310.default.createElement("div", {
      className: styles113.HeaderContentWrapper
    }, headerTitleMarkup, checkableButtonMarkup, alternateToolMarkup, sortingSelectMarkup, selectButtonMarkup), selectAllActionsMarkup);
  })), emptySearchStateMarkup = showEmptySearchState ? emptySearchState || /* @__PURE__ */ import_react310.default.createElement("div", {
    className: styles113.EmptySearchResultWrapper
  }, /* @__PURE__ */ import_react310.default.createElement(EmptySearchResult, Object.assign({}, emptySearchResultText, {
    withIllustration: true
  }))) : null, emptyStateMarkup = showEmptyState ? emptyState : null, defaultTopPadding = 8, spinnerStyle = {
    paddingTop: `${loadingPosition > 0 ? loadingPosition : defaultTopPadding}px`
  }, spinnerSize = items.length < 2 ? "small" : "large", loadingOverlay = loading ? /* @__PURE__ */ import_react310.default.createElement(import_react310.default.Fragment, null, /* @__PURE__ */ import_react310.default.createElement("li", {
    className: styles113.SpinnerContainer,
    style: spinnerStyle
  }, /* @__PURE__ */ import_react310.default.createElement(Spinner, {
    size: spinnerSize,
    accessibilityLabel: "Items are loading"
  })), /* @__PURE__ */ import_react310.default.createElement("li", {
    className: styles113.LoadingOverlay
  })) : null, className = classNames(styles113.ItemWrapper, loading && styles113["ItemWrapper-isLoading"]), loadingWithoutItemsMarkup = loading && !itemsExist ? /* @__PURE__ */ import_react310.default.createElement("div", {
    className,
    tabIndex: -1
  }, loadingOverlay) : null, resourceListClassName = classNames(styles113.ResourceList, loading && styles113.disabledPointerEvents, selectMode && styles113.disableTextSelection), listMarkup = itemsExist ? /* @__PURE__ */ import_react310.default.createElement("ul", {
    className: resourceListClassName,
    ref: listRef,
    "aria-live": "polite",
    "aria-busy": loading
  }, loadingOverlay, import_react310.Children.toArray(items.map(renderItemWithId))) : null, paginationMarkup = pagination ? /* @__PURE__ */ import_react310.default.createElement(Pagination, Object.assign({
    type: "table"
  }, pagination)) : null, context = {
    selectable: isSelectable,
    selectedItems,
    selectMode,
    hasBulkActions: Boolean(bulkActions),
    resourceName,
    loading,
    onSelectionChange: handleSelectionChange
  }, resourceListWrapperClasses = classNames(styles113.ResourceListWrapper, Boolean(bulkActionsMarkup) && selectMode && bulkActions && styles113.ResourceListWrapperWithBulkActions);
  return /* @__PURE__ */ import_react310.default.createElement(ResourceListContext.Provider, {
    value: context
  }, /* @__PURE__ */ import_react310.default.createElement("div", {
    className: resourceListWrapperClasses,
    ref: tableMeasurerRef
  }, filterControlMarkup, headerMarkup, bulkActionsMarkup, listMarkup, emptySearchStateMarkup, emptyStateMarkup, loadingWithoutItemsMarkup, paginationMarkup), /* @__PURE__ */ import_react310.default.createElement("div", {
    ref: bulkActionsIntersectionRef
  }));
}
var import_react310;
var SMALL_SPINNER_HEIGHT;
var LARGE_SPINNER_HEIGHT;
var isBreakpointsXS2;
var init_ResourceList = __esm({
  "node_modules/@shopify/polaris/build/esm/components/ResourceList/ResourceList.js"() {
    import_react310 = __toESM(require_react());
    init_dist3();
    init_build();
    init_debounce();
    init_css();
    init_components2();
    init_use_lazy_ref();
    init_use_event_listener();
    init_ResourceList_scss();
    init_Select();
    init_ResourceItem();
    init_types6();
    init_hooks2();
    init_use_is_bulk_actions_sticky();
    init_SelectAllActions();
    init_Button();
    init_CheckableButton();
    init_Sticky();
    init_EmptySearchResult();
    init_Spinner();
    init_Pagination();
    init_context19();
    init_BulkActions();
    SMALL_SPINNER_HEIGHT = 28, LARGE_SPINNER_HEIGHT = 45;
    isBreakpointsXS2 = () => typeof window > "u" ? false : window.innerWidth < parseFloat(toPx(themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    ResourceList.Item = ResourceItem;
  }
});
function SettingToggle({
  enabled,
  action: action4,
  children
}) {
  let id = (0, import_react311.useId)();
  console.warn(`Deprecation: <SettingToggle /> is deprecated. This component will be removed in a future major version of Polaris. Use the primitive layout and typography components to compose a setting toggle card.
      See the "With primitive components" example in https://polaris.shopify.com/components/deprecated/setting-toggle`);
  let actionMarkup = action4 ? buttonFrom(action4, {
    role: "switch",
    ariaChecked: enabled ? "true" : "false",
    size: "slim"
  }) : null;
  return /* @__PURE__ */ import_react311.default.createElement(LegacyCard, {
    sectioned: true
  }, /* @__PURE__ */ import_react311.default.createElement(SettingAction, {
    action: actionMarkup
  }, /* @__PURE__ */ import_react311.default.createElement("label", {
    htmlFor: id
  }, children)));
}
var import_react311;
var init_SettingToggle = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SettingToggle/SettingToggle.js"() {
    import_react311 = __toESM(require_react());
    init_utils4();
    init_LegacyCard();
    init_SettingAction();
  }
});
var styles115;
var init_SkeletonBodyText_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonBodyText/SkeletonBodyText.scss.js"() {
    styles115 = {
      SkeletonBodyTextContainer: "Polaris-SkeletonBodyText__SkeletonBodyTextContainer",
      SkeletonBodyText: "Polaris-SkeletonBodyText"
    };
  }
});
function SkeletonBodyText({
  lines = 3
}) {
  let bodyTextLines = [];
  for (let i = 0; i < lines; i++)
    bodyTextLines.push(/* @__PURE__ */ import_react312.default.createElement("div", {
      className: styles115.SkeletonBodyText,
      key: i
    }));
  return /* @__PURE__ */ import_react312.default.createElement("div", {
    className: styles115.SkeletonBodyTextContainer
  }, bodyTextLines);
}
var import_react312;
var init_SkeletonBodyText = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonBodyText/SkeletonBodyText.js"() {
    import_react312 = __toESM(require_react());
    init_SkeletonBodyText_scss();
  }
});
var styles116;
var init_SkeletonDisplayText_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonDisplayText/SkeletonDisplayText.scss.js"() {
    styles116 = {
      DisplayText: "Polaris-SkeletonDisplayText__DisplayText",
      sizeSmall: "Polaris-SkeletonDisplayText--sizeSmall",
      sizeMedium: "Polaris-SkeletonDisplayText--sizeMedium",
      sizeLarge: "Polaris-SkeletonDisplayText--sizeLarge",
      sizeExtraLarge: "Polaris-SkeletonDisplayText--sizeExtraLarge"
    };
  }
});
function SkeletonDisplayText({
  size: size2 = "medium",
  maxWidth
}) {
  let className = classNames(styles116.DisplayText, size2 && styles116[variationName("size", size2)]), style = {
    "--pc-skeleton-display-text-max-width": maxWidth ?? void 0
  };
  return /* @__PURE__ */ import_react313.default.createElement("div", {
    className,
    style: sanitizeCustomProperties(style)
  });
}
var import_react313;
var init_SkeletonDisplayText = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonDisplayText/SkeletonDisplayText.js"() {
    import_react313 = __toESM(require_react());
    init_css();
    init_SkeletonDisplayText_scss();
  }
});
var styles117;
var init_SkeletonPage_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonPage/SkeletonPage.scss.js"() {
    styles117 = {
      Title: "Polaris-SkeletonPage__Title",
      SkeletonTitle: "Polaris-SkeletonPage__SkeletonTitle"
    };
  }
});
function SkeletonPage({
  children,
  fullWidth,
  narrowWidth,
  primaryAction,
  title = "",
  backAction
}) {
  let i18n = useI18n(), titleContent = title ? /* @__PURE__ */ import_react314.default.createElement("h1", {
    className: styles117.Title
  }, title) : /* @__PURE__ */ import_react314.default.createElement("div", {
    className: styles117.SkeletonTitle
  }, /* @__PURE__ */ import_react314.default.createElement(Box, {
    background: "bg-fill-tertiary",
    minWidth: "120px",
    minHeight: "28px",
    borderRadius: "100"
  })), primaryActionMarkup = primaryAction ? /* @__PURE__ */ import_react314.default.createElement(Box, {
    id: "SkeletonPage-PrimaryAction",
    borderRadius: "100",
    background: "bg-fill-tertiary",
    minHeight: "2.25rem",
    minWidth: "6.25rem"
  }) : null, backActionMarkup = backAction ? /* @__PURE__ */ import_react314.default.createElement(Box, {
    borderRadius: "100",
    background: "bg-fill-tertiary",
    minHeight: "2.25rem",
    minWidth: "2.25rem",
    maxWidth: "2.25rem"
  }) : null;
  return /* @__PURE__ */ import_react314.default.createElement(BlockStack, {
    gap: "400",
    inlineAlign: "center"
  }, /* @__PURE__ */ import_react314.default.createElement(Box, Object.assign({
    width: "100%",
    padding: "0",
    paddingInlineStart: {
      sm: "600"
    },
    paddingInlineEnd: {
      sm: "600"
    },
    maxWidth: "var(--pc-skeleton-page-max-width)",
    "aria-label": i18n.translate("Polaris.SkeletonPage.loadingLabel"),
    role: "status"
  }, narrowWidth && {
    maxWidth: "var(--pc-skeleton-page-max-width-narrow)"
  }, fullWidth && {
    maxWidth: "none"
  }), /* @__PURE__ */ import_react314.default.createElement(BlockStack, null, /* @__PURE__ */ import_react314.default.createElement(Box, {
    paddingBlockStart: {
      xs: "400",
      md: "500"
    },
    paddingBlockEnd: {
      xs: "400",
      md: "500"
    },
    paddingInlineStart: {
      xs: "400",
      sm: "0"
    },
    paddingInlineEnd: {
      xs: "400",
      sm: "0"
    },
    width: "100%"
  }, /* @__PURE__ */ import_react314.default.createElement(InlineStack, {
    gap: "400",
    align: "space-between",
    blockAlign: "center"
  }, /* @__PURE__ */ import_react314.default.createElement(InlineStack, {
    gap: "400"
  }, backActionMarkup, /* @__PURE__ */ import_react314.default.createElement(Box, {
    paddingBlockStart: "100",
    paddingBlockEnd: "100"
  }, titleContent)), primaryActionMarkup)), /* @__PURE__ */ import_react314.default.createElement(Box, {
    paddingBlockEnd: "200",
    width: "100%"
  }, children))));
}
var import_react314;
var init_SkeletonPage = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonPage/SkeletonPage.js"() {
    import_react314 = __toESM(require_react());
    init_SkeletonPage_scss();
    init_hooks2();
    init_Box();
    init_BlockStack();
    init_InlineStack();
  }
});
var styles118;
var init_SkeletonTabs_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonTabs/SkeletonTabs.scss.js"() {
    styles118 = {
      Tabs: "Polaris-SkeletonTabs__Tabs",
      Tab: "Polaris-SkeletonTabs__Tab",
      "Tab-short": "Polaris-SkeletonTabs__Tab--short",
      "Tab-long": "Polaris-SkeletonTabs__Tab--long"
    };
  }
});
function SkeletonTabs({
  count = 2
}) {
  return /* @__PURE__ */ import_react315.default.createElement("div", {
    className: styles118.Tabs
  }, [...Array(count).keys()].map((key) => {
    let tabWidthClassName = key % 2 === 0 ? styles118["Tab-short"] : styles118["Tab-long"];
    return /* @__PURE__ */ import_react315.default.createElement("div", {
      key,
      className: classNames(styles118.Tab, tabWidthClassName)
    }, /* @__PURE__ */ import_react315.default.createElement(SkeletonBodyText, {
      lines: 1
    }));
  }));
}
var import_react315;
var init_SkeletonTabs = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonTabs/SkeletonTabs.js"() {
    import_react315 = __toESM(require_react());
    init_css();
    init_SkeletonTabs_scss();
    init_SkeletonBodyText();
  }
});
var styles119;
var init_SkeletonThumbnail_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonThumbnail/SkeletonThumbnail.scss.js"() {
    styles119 = {
      SkeletonThumbnail: "Polaris-SkeletonThumbnail",
      sizeExtraSmall: "Polaris-SkeletonThumbnail--sizeExtraSmall",
      sizeSmall: "Polaris-SkeletonThumbnail--sizeSmall",
      sizeMedium: "Polaris-SkeletonThumbnail--sizeMedium",
      sizeLarge: "Polaris-SkeletonThumbnail--sizeLarge"
    };
  }
});
function SkeletonThumbnail({
  size: size2 = "medium"
}) {
  let className = classNames(styles119.SkeletonThumbnail, size2 && styles119[variationName("size", size2)]);
  return /* @__PURE__ */ import_react316.default.createElement("div", {
    className
  });
}
var import_react316;
var init_SkeletonThumbnail = __esm({
  "node_modules/@shopify/polaris/build/esm/components/SkeletonThumbnail/SkeletonThumbnail.js"() {
    import_react316 = __toESM(require_react());
    init_css();
    init_SkeletonThumbnail_scss();
  }
});
var styles120;
var init_Thumbnail_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Thumbnail/Thumbnail.scss.js"() {
    styles120 = {
      Thumbnail: "Polaris-Thumbnail",
      sizeExtraSmall: "Polaris-Thumbnail--sizeExtraSmall",
      sizeSmall: "Polaris-Thumbnail--sizeSmall",
      sizeMedium: "Polaris-Thumbnail--sizeMedium",
      sizeLarge: "Polaris-Thumbnail--sizeLarge",
      transparent: "Polaris-Thumbnail--transparent"
    };
  }
});
function Thumbnail({
  source,
  alt,
  size: size2 = "medium",
  transparent
}) {
  let className = classNames(styles120.Thumbnail, size2 && styles120[variationName("size", size2)], transparent && styles120.transparent), content = typeof source == "string" ? /* @__PURE__ */ import_react317.default.createElement(Image, {
    alt,
    source
  }) : /* @__PURE__ */ import_react317.default.createElement(Icon, {
    accessibilityLabel: alt,
    source
  });
  return /* @__PURE__ */ import_react317.default.createElement("span", {
    className
  }, content);
}
var import_react317;
var init_Thumbnail = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Thumbnail/Thumbnail.js"() {
    import_react317 = __toESM(require_react());
    init_css();
    init_Thumbnail_scss();
    init_Image();
    init_Icon();
  }
});
var import_react318;
var Toast2;
var init_Toast2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/Toast/Toast.js"() {
    import_react318 = __toESM(require_react());
    init_use_deep_effect();
    init_hooks9();
    Toast2 = /* @__PURE__ */ (0, import_react318.memo)(function(props) {
      let id = (0, import_react318.useId)(), {
        showToast,
        hideToast
      } = useFrame();
      return useDeepEffect(() => (showToast({
        id,
        ...props
      }), () => {
        hideToast({
          id
        });
      }), [props]), null;
    });
  }
});
var styles121;
var init_TopBar_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/TopBar.scss.js"() {
    styles121 = {
      TopBar: "Polaris-TopBar",
      Container: "Polaris-TopBar__Container",
      LogoDisplayControl: "Polaris-TopBar__LogoDisplayControl",
      LogoDisplayContainer: "Polaris-TopBar__LogoDisplayContainer",
      LogoContainer: "Polaris-TopBar__LogoContainer",
      hasLogoSuffix: "Polaris-TopBar--hasLogoSuffix",
      Logo: "Polaris-TopBar__Logo",
      LogoLink: "Polaris-TopBar__LogoLink",
      ContextControl: "Polaris-TopBar__ContextControl",
      NavigationIcon: "Polaris-TopBar__NavigationIcon",
      focused: "Polaris-TopBar--focused",
      IconWrapper: "Polaris-TopBar__IconWrapper",
      LeftContent: "Polaris-TopBar__LeftContent",
      Search: "Polaris-TopBar__Search",
      RightContent: "Polaris-TopBar__RightContent",
      SecondaryMenu: "Polaris-TopBar__SecondaryMenu"
    };
  }
});
var styles122;
var init_Search_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/Search/Search.scss.js"() {
    styles122 = {
      Search: "Polaris-TopBar-Search",
      SearchContent: "Polaris-TopBar-Search__SearchContent",
      visible: "Polaris-TopBar-Search--visible",
      Results: "Polaris-TopBar-Search__Results"
    };
  }
});
var styles123;
var init_SearchDismissOverlay_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.scss.js"() {
    styles123 = {
      SearchDismissOverlay: "Polaris-TopBar-SearchDismissOverlay",
      visible: "Polaris-TopBar-SearchDismissOverlay--visible"
    };
  }
});
function SearchDismissOverlay({
  onDismiss,
  visible
}) {
  let node = (0, import_react319.useRef)(null), handleDismiss = (0, import_react319.useCallback)(({
    target
  }) => {
    target === node.current && onDismiss != null && onDismiss();
  }, [onDismiss]);
  return /* @__PURE__ */ import_react319.default.createElement(import_react319.default.Fragment, null, visible ? /* @__PURE__ */ import_react319.default.createElement(ScrollLock, null) : null, /* @__PURE__ */ import_react319.default.createElement("div", {
    ref: node,
    className: classNames(styles123.SearchDismissOverlay, visible && styles123.visible),
    onClick: handleDismiss
  }));
}
var import_react319;
var init_SearchDismissOverlay = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/SearchDismissOverlay/SearchDismissOverlay.js"() {
    import_react319 = __toESM(require_react());
    init_css();
    init_SearchDismissOverlay_scss();
    init_ScrollLock();
  }
});
function Search({
  visible,
  children,
  onDismiss,
  overlayVisible = false
}) {
  if (children == null)
    return null;
  let overlayMarkup = visible ? /* @__PURE__ */ import_react320.default.createElement(SearchDismissOverlay, {
    onDismiss,
    visible: overlayVisible
  }) : null;
  return /* @__PURE__ */ import_react320.default.createElement(import_react320.default.Fragment, null, overlayMarkup, /* @__PURE__ */ import_react320.default.createElement("div", {
    className: classNames(styles122.Search, visible && styles122.visible)
  }, /* @__PURE__ */ import_react320.default.createElement("div", {
    className: styles122.SearchContent
  }, /* @__PURE__ */ import_react320.default.createElement("div", {
    className: styles122.Results
  }, children))));
}
var import_react320;
var init_Search = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/Search/Search.js"() {
    import_react320 = __toESM(require_react());
    init_css();
    init_Search_scss();
    init_SearchDismissOverlay();
  }
});
var styles124;
var init_SearchField_scss2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/SearchField/SearchField.scss.js"() {
    styles124 = {
      SearchField: "Polaris-TopBar-SearchField",
      focused: "Polaris-TopBar-SearchField--focused",
      Input: "Polaris-TopBar-SearchField__Input",
      Backdrop: "Polaris-TopBar-SearchField__Backdrop",
      BackdropShowFocusBorder: "Polaris-TopBar-SearchField__BackdropShowFocusBorder",
      Icon: "Polaris-TopBar-SearchField__Icon",
      Clear: "Polaris-TopBar-SearchField__Clear"
    };
  }
});
function SearchField2({
  value,
  focused,
  active,
  placeholder,
  onChange,
  onFocus,
  onBlur,
  onCancel,
  showFocusBorder
}) {
  let i18n = useI18n(), [forceActive, setForceActive] = (0, import_react321.useState)(false), input = (0, import_react321.useRef)(null), searchId = (0, import_react321.useId)(), handleChange = (0, import_react321.useCallback)(({
    currentTarget
  }) => {
    onChange(currentTarget.value);
  }, [onChange]), handleFocus = (0, import_react321.useCallback)(() => onFocus && onFocus(), [onFocus]), handleBlur = (0, import_react321.useCallback)(() => onBlur && onBlur(), [onBlur]), handleClear = (0, import_react321.useCallback)(() => {
    onCancel && onCancel(), input.current && (input.current.value = "", onChange(""), input.current.focus());
  }, [onCancel, onChange]);
  (0, import_react321.useEffect)(() => {
    input.current && (focused ? input.current.focus() : input.current.blur());
  }, [focused]);
  let clearMarkup = value !== "" && /* @__PURE__ */ import_react321.default.createElement("button", {
    type: "button",
    "aria-label": i18n.translate("Polaris.TopBar.SearchField.clearButtonLabel"),
    className: styles124.Clear,
    onClick: handleClear,
    onBlur: () => {
      setForceActive(false), handleClear();
    },
    onFocus: () => {
      handleFocus(), setForceActive(true);
    }
  }, /* @__PURE__ */ import_react321.default.createElement(Icon, {
    source: SvgCircleCancelMinor
  })), className = classNames(styles124.SearchField, (focused || active || forceActive) && styles124.focused);
  return /* @__PURE__ */ import_react321.default.createElement("div", {
    className,
    onFocus: handleFocus,
    onBlur: handleBlur
  }, /* @__PURE__ */ import_react321.default.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, /* @__PURE__ */ import_react321.default.createElement("label", {
    htmlFor: searchId
  }, i18n.translate("Polaris.TopBar.SearchField.search"))), /* @__PURE__ */ import_react321.default.createElement("input", {
    id: searchId,
    className: styles124.Input,
    placeholder,
    type: "search",
    autoCapitalize: "off",
    autoComplete: "off",
    autoCorrect: "off",
    ref: input,
    value,
    onChange: handleChange,
    onKeyDown: preventDefault
  }), /* @__PURE__ */ import_react321.default.createElement("span", {
    className: styles124.Icon
  }, /* @__PURE__ */ import_react321.default.createElement(Icon, {
    source: SvgSearchMinor
  })), clearMarkup, /* @__PURE__ */ import_react321.default.createElement("div", {
    className: classNames(styles124.Backdrop, showFocusBorder && styles124.BackdropShowFocusBorder)
  }));
}
function preventDefault(event) {
  event.key === "Enter" && event.preventDefault();
}
var import_react321;
var init_SearchField2 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/SearchField/SearchField.js"() {
    import_react321 = __toESM(require_react());
    init_dist3();
    init_css();
    init_SearchField_scss2();
    init_hooks2();
    init_Icon();
    init_Text();
  }
});
var styles125;
var init_UserMenu_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/UserMenu/UserMenu.scss.js"() {
    styles125 = {
      Details: "Polaris-TopBar-UserMenu__Details",
      Message: "Polaris-TopBar-UserMenu__Message"
    };
  }
});
var styles126;
var init_MessageIndicator_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/MessageIndicator/MessageIndicator.scss.js"() {
    styles126 = {
      MessageIndicatorWrapper: "Polaris-MessageIndicator__MessageIndicatorWrapper",
      MessageIndicator: "Polaris-MessageIndicator"
    };
  }
});
function MessageIndicator({
  children,
  active
}) {
  let indicatorMarkup = active && /* @__PURE__ */ import_react322.default.createElement("div", {
    className: styles126.MessageIndicator
  });
  return /* @__PURE__ */ import_react322.default.createElement("div", {
    className: styles126.MessageIndicatorWrapper
  }, indicatorMarkup, children);
}
var import_react322;
var init_MessageIndicator = __esm({
  "node_modules/@shopify/polaris/build/esm/components/MessageIndicator/MessageIndicator.js"() {
    import_react322 = __toESM(require_react());
    init_MessageIndicator_scss();
  }
});
var styles127;
var init_Menu_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/Menu/Menu.scss.js"() {
    styles127 = {
      ActivatorWrapper: "Polaris-TopBar-Menu__ActivatorWrapper",
      Activator: "Polaris-TopBar-Menu__Activator",
      "Activator-userMenu": "Polaris-TopBar-Menu__Activator--userMenu",
      Section: "Polaris-TopBar-Menu__Section"
    };
  }
});
var styles128;
var init_Message_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/Menu/components/Message/Message.scss.js"() {
    styles128 = {
      Section: "Polaris-Menu-Message__Section"
    };
  }
});
function Message({
  title,
  description,
  action: action4,
  link,
  badge
}) {
  let badgeMarkup = badge && /* @__PURE__ */ import_react323.default.createElement(Badge, {
    tone: badge.tone
  }, badge.content), {
    to,
    content: linkContent
  } = link, {
    onClick,
    content: actionContent
  } = action4;
  return /* @__PURE__ */ import_react323.default.createElement("div", {
    className: styles128.Section
  }, /* @__PURE__ */ import_react323.default.createElement(Popover2.Section, null, /* @__PURE__ */ import_react323.default.createElement(LegacyStack, {
    vertical: true,
    spacing: "tight"
  }, /* @__PURE__ */ import_react323.default.createElement(TextContainer, null, /* @__PURE__ */ import_react323.default.createElement(Text, {
    variant: "headingMd",
    as: "h2"
  }, title, badgeMarkup), /* @__PURE__ */ import_react323.default.createElement("p", null, description)), /* @__PURE__ */ import_react323.default.createElement(Link3, {
    url: to
  }, linkContent), /* @__PURE__ */ import_react323.default.createElement(Button, {
    variant: "plain",
    onClick
  }, actionContent))));
}
var import_react323;
var init_Message = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/Menu/components/Message/Message.js"() {
    import_react323 = __toESM(require_react());
    init_Message_scss();
    init_Link();
    init_Badge();
    init_Popover();
    init_LegacyStack();
    init_TextContainer();
    init_Text();
    init_Button();
  }
});
function Menu(props) {
  let {
    actions,
    onOpen,
    onClose,
    open,
    activatorContent,
    message: message2,
    accessibilityLabel,
    customWidth,
    userMenu
  } = props, badgeProps = message2 && message2.badge && {
    content: message2.badge.content,
    tone: message2.badge.tone
  }, messageMarkup = message2 && /* @__PURE__ */ import_react324.default.createElement(Message, {
    title: message2.title,
    description: message2.description,
    action: {
      onClick: message2.action.onClick,
      content: message2.action.content
    },
    link: {
      to: message2.link.to,
      content: message2.link.content
    },
    badge: badgeProps
  });
  return /* @__PURE__ */ import_react324.default.createElement(Popover2, {
    activator: /* @__PURE__ */ import_react324.default.createElement("div", {
      className: styles127.ActivatorWrapper
    }, /* @__PURE__ */ import_react324.default.createElement("button", {
      type: "button",
      className: classNames(styles127.Activator, userMenu && styles127["Activator-userMenu"]),
      onClick: onOpen,
      "aria-label": accessibilityLabel
    }, activatorContent)),
    active: open,
    onClose,
    fixed: true,
    fullHeight: true,
    preferredAlignment: "right"
  }, /* @__PURE__ */ import_react324.default.createElement("div", {
    className: styles127.MenuItems
  }, /* @__PURE__ */ import_react324.default.createElement(Box, {
    width: customWidth
  }, /* @__PURE__ */ import_react324.default.createElement(ActionList, {
    actionRole: "menuitem",
    onActionAnyItem: onClose,
    sections: actions
  }), messageMarkup)));
}
var import_react324;
var init_Menu = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/Menu/Menu.js"() {
    import_react324 = __toESM(require_react());
    init_css();
    init_Menu_scss();
    init_Message();
    init_Popover();
    init_Box();
    init_ActionList();
  }
});
function UserMenu({
  name,
  detail,
  avatar,
  initials,
  actions,
  message: message2,
  onToggle,
  open,
  accessibilityLabel,
  customActivator,
  customWidth
}) {
  let showIndicator = Boolean(message2), activatorContentMarkup = customActivator || /* @__PURE__ */ import_react325.default.createElement(import_react325.default.Fragment, null, /* @__PURE__ */ import_react325.default.createElement("span", {
    className: styles125.Details
  }, /* @__PURE__ */ import_react325.default.createElement(Text, {
    as: "p",
    alignment: "start",
    fontWeight: "medium",
    truncate: true
  }, name), /* @__PURE__ */ import_react325.default.createElement("span", {
    className: styles125.Message
  }, /* @__PURE__ */ import_react325.default.createElement(Text, {
    as: "p",
    variant: "bodySm",
    alignment: "start",
    tone: "subdued",
    truncate: true
  }, detail))), /* @__PURE__ */ import_react325.default.createElement(MessageIndicator, {
    active: showIndicator
  }, /* @__PURE__ */ import_react325.default.createElement(Avatar, {
    size: "md",
    initials: initials && initials.replace(" ", ""),
    source: avatar,
    name
  })));
  return /* @__PURE__ */ import_react325.default.createElement(Menu, {
    activatorContent: activatorContentMarkup,
    open,
    onOpen: onToggle,
    onClose: onToggle,
    actions,
    message: message2,
    accessibilityLabel,
    customWidth,
    userMenu: true
  });
}
var import_react325;
var init_UserMenu = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/components/UserMenu/UserMenu.js"() {
    import_react325 = __toESM(require_react());
    init_UserMenu_scss();
    init_MessageIndicator();
    init_Menu();
    init_Text();
    init_Avatar();
  }
});
var import_react326;
var TopBar;
var init_TopBar = __esm({
  "node_modules/@shopify/polaris/build/esm/components/TopBar/TopBar.js"() {
    import_react326 = __toESM(require_react());
    init_dist3();
    init_css();
    init_get_width();
    init_use_toggle();
    init_TopBar_scss();
    init_Search();
    init_SearchField2();
    init_UserMenu();
    init_hooks2();
    init_hooks9();
    init_Icon();
    init_UnstyledLink();
    init_Image();
    init_Menu();
    TopBar = function({
      showNavigationToggle,
      userMenu,
      searchResults,
      searchField,
      secondaryMenu,
      searchResultsVisible,
      searchResultsOverlayVisible = false,
      onNavigationToggle,
      onSearchResultsDismiss,
      contextControl,
      logoSuffix
    }) {
      let i18n = useI18n(), {
        logo
      } = useFrame(), {
        value: focused,
        setTrue: forceTrueFocused,
        setFalse: forceFalseFocused
      } = useToggle(false), iconClassName = classNames(styles121.NavigationIcon, focused && styles121.focused), navigationButtonMarkup = showNavigationToggle ? /* @__PURE__ */ import_react326.default.createElement("button", {
        type: "button",
        className: iconClassName,
        onClick: onNavigationToggle,
        onFocus: forceTrueFocused,
        onBlur: forceFalseFocused,
        "aria-label": i18n.translate("Polaris.TopBar.toggleMenuLabel")
      }, /* @__PURE__ */ import_react326.default.createElement("div", {
        className: styles121.IconWrapper
      }, /* @__PURE__ */ import_react326.default.createElement(Icon, {
        source: SvgMobileHamburgerMajor
      }))) : null, width2 = getWidth(logo, 104), contextMarkup;
      if (contextControl)
        contextMarkup = /* @__PURE__ */ import_react326.default.createElement("div", {
          className: styles121.ContextControl
        }, contextControl);
      else if (logo) {
        let className = classNames(styles121.LogoContainer, showNavigationToggle || searchField ? styles121.LogoDisplayControl : styles121.LogoDisplayContainer, logoSuffix && styles121.hasLogoSuffix);
        contextMarkup = /* @__PURE__ */ import_react326.default.createElement("div", {
          className
        }, /* @__PURE__ */ import_react326.default.createElement(UnstyledLink, {
          url: logo.url || "",
          className: styles121.LogoLink,
          style: {
            width: width2
          }
        }, /* @__PURE__ */ import_react326.default.createElement(Image, {
          source: logo.topBarSource || "",
          alt: logo.accessibilityLabel || "",
          className: styles121.Logo,
          style: {
            width: width2
          }
        })), logoSuffix);
      }
      let searchMarkup = searchField ? /* @__PURE__ */ import_react326.default.createElement(import_react326.default.Fragment, null, searchField, /* @__PURE__ */ import_react326.default.createElement(Search, {
        visible: searchResultsVisible,
        onDismiss: onSearchResultsDismiss,
        overlayVisible: searchResultsOverlayVisible
      }, searchResults)) : null;
      return /* @__PURE__ */ import_react326.default.createElement("div", {
        className: styles121.TopBar
      }, /* @__PURE__ */ import_react326.default.createElement("div", {
        className: styles121.Container
      }, /* @__PURE__ */ import_react326.default.createElement("div", {
        className: styles121.LeftContent
      }, navigationButtonMarkup, contextMarkup), /* @__PURE__ */ import_react326.default.createElement("div", {
        className: styles121.Search
      }, searchMarkup), /* @__PURE__ */ import_react326.default.createElement("div", {
        className: styles121.RightContent
      }, /* @__PURE__ */ import_react326.default.createElement("div", {
        className: styles121.SecondaryMenu
      }, secondaryMenu), userMenu)));
    };
    TopBar.Menu = Menu;
    TopBar.SearchField = SearchField2;
    TopBar.UserMenu = UserMenu;
  }
});
function unstyledButtonFrom({
  content,
  onAction,
  ...action4
}, overrides, key) {
  return /* @__PURE__ */ import_react327.default.createElement(UnstyledButton, Object.assign({
    key,
    onClick: onAction
  }, action4, overrides), content);
}
var import_react327;
var init_utils7 = __esm({
  "node_modules/@shopify/polaris/build/esm/components/UnstyledButton/utils.js"() {
    import_react327 = __toESM(require_react());
    init_UnstyledButton();
  }
});
function ensureTwoDigits(num) {
  return num > 9 ? String(num) : `0${num}`;
}
function secondsToTimeComponents(seconds) {
  return {
    hours: Math.floor(seconds / 3600),
    minutes: Math.floor(seconds % 3600 / 60),
    seconds: seconds % 60
  };
}
function secondsToTimestamp(numSeconds) {
  let {
    hours,
    minutes,
    seconds
  } = secondsToTimeComponents(numSeconds), hasHours = numSeconds > 3600, hoursText = hasHours ? `${hours}:` : "", minutesText = `${hasHours ? ensureTwoDigits(minutes) : minutes}:`, secondsText = `${ensureTwoDigits(seconds)}`;
  return `${hoursText}${minutesText}${secondsText}`;
}
function secondsToDurationTranslationKey(numSeconds) {
  let {
    hours,
    minutes,
    seconds
  } = secondsToTimeComponents(numSeconds), durationKey = "Polaris.VideoThumbnail.playButtonA11yLabel.duration";
  return hours ? (durationKey += `.hours.${hours > 1 ? "other" : "one"}`, seconds ? minutes > 1 ? durationKey += `${seconds > 1 ? ".minutesAndSeconds" : ".minutesAndSecond"}` : minutes === 1 ? durationKey += `${seconds > 1 ? ".minuteAndSeconds" : ".minuteAndSecond"}` : durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}` : minutes ? durationKey += `${minutes > 1 ? ".andMinutes" : ".andMinute"}` : durationKey += ".only") : minutes ? (durationKey += `.minutes.${minutes > 1 ? "other" : "one"}`, seconds ? durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}` : durationKey += ".only") : seconds && (durationKey += seconds > 1 ? ".seconds.other" : ".seconds.one"), durationKey;
}
var init_duration = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/duration.js"() {
  }
});
var styles129;
var init_VideoThumbnail_scss = __esm({
  "node_modules/@shopify/polaris/build/esm/components/VideoThumbnail/VideoThumbnail.scss.js"() {
    styles129 = {
      Thumbnail: "Polaris-VideoThumbnail__Thumbnail",
      ThumbnailContainer: "Polaris-VideoThumbnail__ThumbnailContainer",
      PlayButton: "Polaris-VideoThumbnail__PlayButton",
      Timestamp: "Polaris-VideoThumbnail__Timestamp",
      PlayIcon: "Polaris-VideoThumbnail__PlayIcon",
      Progress: "Polaris-VideoThumbnail__Progress",
      Indicator: "Polaris-VideoThumbnail__Indicator",
      ProgressBar: "Polaris-VideoThumbnail__ProgressBar",
      Label: "Polaris-VideoThumbnail__Label"
    };
  }
});
function VideoThumbnail({
  thumbnailUrl,
  videoLength = 0,
  videoProgress = 0,
  showVideoProgress = false,
  accessibilityLabel,
  onClick,
  onBeforeStartPlaying
}) {
  let i18n = useI18n(), {
    isNavigationCollapsed
  } = useMediaQuery(), buttonLabel;
  if (accessibilityLabel)
    buttonLabel = accessibilityLabel;
  else if (videoLength) {
    let {
      hours,
      minutes,
      seconds
    } = secondsToTimeComponents(videoLength);
    buttonLabel = i18n.translate("Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration", {
      duration: i18n.translate(secondsToDurationTranslationKey(videoLength), {
        hourCount: hours,
        minuteCount: minutes,
        secondCount: seconds
      })
    });
  } else
    buttonLabel = i18n.translate("Polaris.VideoThumbnail.playButtonA11yLabel.default");
  let timeStampMarkup = videoLength ? /* @__PURE__ */ import_react328.default.createElement("div", {
    className: styles129.Timestamp
  }, /* @__PURE__ */ import_react328.default.createElement(LegacyStack, {
    alignment: "center",
    spacing: "extraTight"
  }, /* @__PURE__ */ import_react328.default.createElement("span", {
    className: styles129.PlayIcon
  }, /* @__PURE__ */ import_react328.default.createElement(Icon, {
    source: SvgPlayMinor
  })), /* @__PURE__ */ import_react328.default.createElement(Text, {
    variant: isNavigationCollapsed ? "bodyLg" : "bodyMd",
    as: "p",
    fontWeight: "semibold"
  }, secondsToTimestamp(videoLength)))) : null, progressMarkup = null;
  if (showVideoProgress) {
    let progressValue = calculateProgress(videoLength, videoProgress), progressValuePercents = Math.round(progressValue * 100);
    progressMarkup = /* @__PURE__ */ import_react328.default.createElement("div", {
      className: styles129.Progress
    }, /* @__PURE__ */ import_react328.default.createElement("progress", {
      className: styles129.ProgressBar,
      value: progressValuePercents,
      max: "100"
    }), /* @__PURE__ */ import_react328.default.createElement("div", {
      className: styles129.Indicator,
      style: {
        transform: `scaleX(${progressValue})`
      }
    }, /* @__PURE__ */ import_react328.default.createElement("span", {
      className: styles129.Label
    }, progressValuePercents, "%")));
  }
  return /* @__PURE__ */ import_react328.default.createElement("div", {
    className: styles129.ThumbnailContainer
  }, /* @__PURE__ */ import_react328.default.createElement("div", {
    className: styles129.Thumbnail,
    style: {
      backgroundImage: `url(${thumbnailUrl})`
    }
  }), /* @__PURE__ */ import_react328.default.createElement("button", {
    type: "button",
    className: styles129.PlayButton,
    "aria-label": buttonLabel,
    onClick,
    onMouseEnter: onBeforeStartPlaying,
    onFocus: onBeforeStartPlaying,
    onTouchStart: onBeforeStartPlaying
  }, timeStampMarkup), progressMarkup);
}
function calculateProgress(videoLength, videoProgress) {
  if (videoProgress > videoLength && console.warn("Value passed to the video progress should not exceed video length. Resetting progress to 100%."), videoProgress > 0 && videoLength > 0) {
    let progress = parseFloat((videoProgress / videoLength).toFixed(2));
    return progress > 1 ? 1 : progress;
  }
  return 0;
}
var import_react328;
var init_VideoThumbnail = __esm({
  "node_modules/@shopify/polaris/build/esm/components/VideoThumbnail/VideoThumbnail.js"() {
    import_react328 = __toESM(require_react());
    init_dist3();
    init_duration();
    init_VideoThumbnail_scss();
    init_hooks2();
    init_hooks11();
    init_LegacyStack();
    init_Icon();
    init_Text();
  }
});
function useRowHovered() {
  return (0, import_react329.useContext)(RowHoveredContext);
}
function useRowSelected() {
  let {
    selected
  } = (0, import_react329.useContext)(RowContext);
  return selected;
}
function useContainerScroll() {
  return (0, import_react329.useContext)(ScrollContext);
}
var import_react329;
var init_hooks14 = __esm({
  "node_modules/@shopify/polaris/build/esm/utilities/index-table/hooks.js"() {
    import_react329 = __toESM(require_react());
    init_context18();
  }
});
var esm_exports4 = {};
__export(esm_exports4, {
  AccountConnection: () => AccountConnection,
  ActionList: () => ActionList,
  ActionMenu: () => ActionMenu,
  AppProvider: () => AppProvider,
  AutoSelection: () => AutoSelection,
  Autocomplete: () => Autocomplete,
  Avatar: () => Avatar,
  Backdrop: () => Backdrop,
  Badge: () => Badge,
  BadgeProgressValue: () => ProgressValue,
  BadgeStatusValue: () => ToneValue,
  Banner: () => Banner,
  Bleed: () => Bleed,
  BlockStack: () => BlockStack,
  Box: () => Box,
  Breadcrumbs: () => Breadcrumbs,
  Button: () => Button,
  ButtonGroup: () => ButtonGroup,
  CalloutCard: () => CalloutCard,
  Card: () => Card,
  Checkbox: () => Checkbox,
  ChoiceList: () => ChoiceList,
  Collapsible: () => Collapsible,
  ColorPicker: () => ColorPicker,
  Combobox: () => Combobox,
  Connected: () => Connected,
  ContextualSaveBar: () => ContextualSaveBar,
  DATA_ATTRIBUTE: () => DATA_ATTRIBUTE,
  DEFAULT_LOCALE: () => DEFAULT_LOCALE,
  DEFAULT_TOAST_DURATION: () => DEFAULT_TOAST_DURATION,
  DEFAULT_TOAST_DURATION_WITH_ACTION: () => DEFAULT_TOAST_DURATION_WITH_ACTION,
  DataTable: () => DataTable,
  DatePicker: () => DatePicker,
  DescriptionList: () => DescriptionList,
  Divider: () => Divider,
  DropZone: () => DropZone,
  EmptySearchResult: () => EmptySearchResult,
  EmptyState: () => EmptyState,
  EventListener: () => EventListener,
  ExceptionList: () => ExceptionList,
  Filters: () => Filters,
  Focus: () => Focus,
  FooterHelp: () => FooterHelp,
  Form: () => Form2,
  FormLayout: () => FormLayout,
  Frame: () => Frame,
  FrameContext: () => FrameContext,
  FullscreenBar: () => FullscreenBar,
  Grid: () => Grid,
  INDEX_TABLE_SELECT_ALL_ITEMS: () => SELECT_ALL_ITEMS,
  Icon: () => Icon,
  Image: () => Image,
  IndexFilters: () => IndexFilters,
  IndexFiltersMode: () => IndexFiltersMode,
  IndexTable: () => IndexTable,
  IndexTableSelectionType: () => SelectionType2,
  Indicator: () => Indicator,
  InlineCode: () => InlineCode,
  InlineError: () => InlineError,
  InlineGrid: () => InlineGrid,
  InlineStack: () => InlineStack,
  Key: () => Key,
  KeyboardKey: () => KeyboardKey,
  KeypressListener: () => KeypressListener,
  Label: () => Label,
  Labelled: () => Labelled,
  Layout: () => Layout,
  LegacyCard: () => LegacyCard,
  LegacyFilters: () => LegacyFilters,
  LegacyStack: () => LegacyStack,
  LegacyTabs: () => LegacyTabs,
  Link: () => Link3,
  List: () => List3,
  Listbox: () => Listbox,
  Loading: () => Loading3,
  MediaCard: () => MediaCard,
  Modal: () => Modal,
  Navigation: () => Navigation2,
  OptionList: () => OptionList,
  Page: () => Page,
  PageActions: () => PageActions,
  Pagination: () => Pagination,
  PolarisTestProvider: () => PolarisTestProvider,
  Popover: () => Popover2,
  PopoverCloseSource: () => PopoverCloseSource,
  Portal: () => Portal,
  PortalsManager: () => PortalsManager,
  PositionedOverlay: () => PositionedOverlay,
  ProgressBar: () => ProgressBar,
  RadioButton: () => RadioButton,
  RangeSlider: () => RangeSlider,
  ResourceItem: () => ResourceItem,
  ResourceList: () => ResourceList,
  SUPPORTED_LOCALES: () => SUPPORTED_LOCALES,
  ScrollLock: () => ScrollLock,
  Scrollable: () => Scrollable,
  Select: () => Select,
  SelectAllActions: () => SelectAllActions,
  SettingToggle: () => SettingToggle,
  Sheet: () => Sheet,
  SkeletonBodyText: () => SkeletonBodyText,
  SkeletonDisplayText: () => SkeletonDisplayText,
  SkeletonPage: () => SkeletonPage,
  SkeletonTabs: () => SkeletonTabs,
  SkeletonThumbnail: () => SkeletonThumbnail,
  Spinner: () => Spinner,
  Sticky: () => Sticky,
  Tabs: () => Tabs,
  Tag: () => Tag,
  Text: () => Text,
  TextContainer: () => TextContainer,
  TextField: () => TextField,
  Thumbnail: () => Thumbnail,
  Toast: () => Toast2,
  Tooltip: () => Tooltip,
  TopBar: () => TopBar,
  TrapFocus: () => TrapFocus,
  Truncate: () => Truncate,
  UnstableBulkActions: () => BulkActions,
  UnstyledButton: () => UnstyledButton,
  UnstyledLink: () => UnstyledLink,
  VideoThumbnail: () => VideoThumbnail,
  _SECRET_INTERNAL_SCROLL_LOCK_MANAGER_CONTEXT: () => ScrollLockManagerContext,
  _SECRET_INTERNAL_WITHIN_CONTENT_CONTEXT: () => WithinContentContext,
  buttonFrom: () => buttonFrom,
  buttonsFrom: () => buttonsFrom,
  errorTextID: () => errorTextID,
  hexToRgb: () => hexToRgb,
  hsbToHex: () => hsbToHex,
  hsbToRgb: () => hsbToRgb,
  hslToRgb: () => hslToRgb,
  isNavigationItemActive: () => isNavigationItemActive,
  labelID: () => labelID,
  rgbString: () => rgbString,
  rgbToHex: () => rgbToHex,
  rgbToHsb: () => rgbToHsb,
  rgbToHsl: () => rgbToHsl,
  rgbaString: () => rgbaString,
  unstyledButtonFrom: () => unstyledButtonFrom,
  useBreakpoints: () => useBreakpoints,
  useEphemeralPresenceManager: () => useReadOnlyEphemeralPresenceManager,
  useEventListener: () => useEventListener,
  useFrame: () => useFrame,
  useIndexResourceState: () => useIndexResourceState,
  useIndexTableContainerScroll: () => useContainerScroll,
  useIndexTableRowHovered: () => useRowHovered,
  useIndexTableRowSelected: () => useRowSelected,
  useSetIndexFiltersMode: () => useSetIndexFiltersMode,
  useTheme: () => useTheme
});
var init_esm5 = __esm({
  "node_modules/@shopify/polaris/build/esm/index.js"() {
    init_configure();
    init_types();
    init_shared();
    init_color_transformers();
    init_within_content_context();
    init_use_event_listener();
    init_use_theme();
    init_use_index_resource_state();
    init_breakpoints2();
    init_AppProvider();
    init_AccountConnection();
    init_ActionList();
    init_ActionMenu();
    init_Autocomplete();
    init_Avatar();
    init_Backdrop();
    init_Badge();
    init_types2();
    init_Banner();
    init_Bleed();
    init_Box();
    init_Breadcrumbs();
    init_BulkActions();
    init_Button();
    init_utils4();
    init_ButtonGroup();
    init_CalloutCard();
    init_Card();
    init_Checkbox();
    init_ChoiceList();
    init_Collapsible();
    init_ColorPicker();
    init_InlineGrid();
    init_Combobox();
    init_Connected();
    init_ContextualSaveBar();
    init_DataTable();
    init_DatePicker();
    init_DescriptionList();
    init_Divider();
    init_DropZone();
    init_EmptySearchResult();
    init_EmptyState();
    init_EventListener();
    init_ExceptionList();
    init_Filters();
    init_Focus();
    init_FooterHelp();
    init_Form();
    init_FormLayout();
    init_Frame();
    init_Toast();
    init_FullscreenBar();
    init_Grid();
    init_Icon();
    init_Image();
    init_IndexFilters();
    init_useSetIndexFiltersMode();
    init_types3();
    init_IndexTable();
    init_Indicator();
    init_InlineStack();
    init_InlineCode();
    init_InlineError();
    init_KeyboardKey();
    init_KeypressListener();
    init_Label();
    init_Labelled();
    init_Layout();
    init_LegacyCard();
    init_LegacyFilters();
    init_LegacyStack();
    init_LegacyTabs();
    init_Link();
    init_List3();
    init_Listbox();
    init_Loading3();
    init_MediaCard();
    init_Modal();
    init_Navigation2();
    init_Item10();
    init_OptionList();
    init_Page();
    init_PageActions();
    init_Pagination();
    init_PolarisTestProvider();
    init_Popover();
    init_PopoverOverlay();
    init_Portal();
    init_PortalsManager();
    init_PositionedOverlay();
    init_ProgressBar();
    init_RadioButton();
    init_RangeSlider();
    init_ResourceItem();
    init_ResourceList();
    init_Scrollable();
    init_ScrollLock();
    init_Select();
    init_SelectAllActions();
    init_SettingToggle();
    init_Sheet();
    init_SkeletonBodyText();
    init_SkeletonDisplayText();
    init_SkeletonPage();
    init_SkeletonTabs();
    init_SkeletonThumbnail();
    init_Spinner();
    init_Sticky();
    init_Tabs();
    init_Tag();
    init_Text();
    init_TextContainer();
    init_TextField();
    init_Thumbnail();
    init_Toast2();
    init_Tooltip();
    init_TopBar();
    init_TrapFocus();
    init_Truncate();
    init_UnstyledButton();
    init_utils7();
    init_UnstyledLink();
    init_BlockStack();
    init_VideoThumbnail();
    init_hooks9();
    init_context15();
    init_context3();
    init_hooks14();
    init_types4();
    init_hooks3();
  }
});
var require_en = __commonJS({
  "node_modules/@shopify/polaris/locales/en.json"(exports, module) {
    module.exports = {
      Polaris: {
        ActionMenu: {
          Actions: {
            moreActions: "More actions"
          },
          RollupActions: {
            rollupButton: "View actions"
          }
        },
        ActionList: {
          SearchField: {
            clearButtonLabel: "Clear",
            search: "Search",
            placeholder: "Search actions"
          }
        },
        Avatar: {
          label: "Avatar",
          labelWithInitials: "Avatar with initials {initials}"
        },
        Autocomplete: {
          spinnerAccessibilityLabel: "Loading",
          ellipsis: "{content}\u2026"
        },
        Badge: {
          PROGRESS_LABELS: {
            incomplete: "Incomplete",
            partiallyComplete: "Partially complete",
            complete: "Complete"
          },
          TONE_LABELS: {
            info: "Info",
            success: "Success",
            warning: "Warning",
            critical: "Critical",
            attention: "Attention",
            new: "New",
            readOnly: "Read-only",
            enabled: "Enabled"
          },
          progressAndTone: "{toneLabel} {progressLabel}"
        },
        Banner: {
          dismissButton: "Dismiss notification"
        },
        Button: {
          spinnerAccessibilityLabel: "Loading"
        },
        Common: {
          checkbox: "checkbox",
          undo: "Undo",
          cancel: "Cancel",
          clear: "Clear",
          close: "Close",
          submit: "Submit",
          more: "More"
        },
        ContextualSaveBar: {
          save: "Save",
          discard: "Discard"
        },
        DataTable: {
          sortAccessibilityLabel: "sort {direction} by",
          navAccessibilityLabel: "Scroll table {direction} one column",
          totalsRowHeading: "Totals",
          totalRowHeading: "Total"
        },
        DatePicker: {
          previousMonth: "Show previous month, {previousMonthName} {showPreviousYear}",
          nextMonth: "Show next month, {nextMonth} {nextYear}",
          today: "Today ",
          start: "Start of range",
          end: "End of range",
          months: {
            january: "January",
            february: "February",
            march: "March",
            april: "April",
            may: "May",
            june: "June",
            july: "July",
            august: "August",
            september: "September",
            october: "October",
            november: "November",
            december: "December"
          },
          days: {
            monday: "Monday",
            tuesday: "Tuesday",
            wednesday: "Wednesday",
            thursday: "Thursday",
            friday: "Friday",
            saturday: "Saturday",
            sunday: "Sunday"
          },
          daysAbbreviated: {
            monday: "Mo",
            tuesday: "Tu",
            wednesday: "We",
            thursday: "Th",
            friday: "Fr",
            saturday: "Sa",
            sunday: "Su"
          }
        },
        DiscardConfirmationModal: {
          title: "Discard all unsaved changes",
          message: "If you discard changes, you\u2019ll delete any edits you made since you last saved.",
          primaryAction: "Discard changes",
          secondaryAction: "Continue editing"
        },
        DropZone: {
          single: {
            overlayTextFile: "Drop file to upload",
            overlayTextImage: "Drop image to upload",
            overlayTextVideo: "Drop video to upload",
            actionTitleFile: "Add file",
            actionTitleImage: "Add image",
            actionTitleVideo: "Add video",
            actionHintFile: "or drop file to upload",
            actionHintImage: "or drop image to upload",
            actionHintVideo: "or drop video to upload",
            labelFile: "Upload file",
            labelImage: "Upload image",
            labelVideo: "Upload video"
          },
          allowMultiple: {
            overlayTextFile: "Drop files to upload",
            overlayTextImage: "Drop images to upload",
            overlayTextVideo: "Drop videos to upload",
            actionTitleFile: "Add files",
            actionTitleImage: "Add images",
            actionTitleVideo: "Add videos",
            actionHintFile: "or drop files to upload",
            actionHintImage: "or drop images to upload",
            actionHintVideo: "or drop videos to upload",
            labelFile: "Upload files",
            labelImage: "Upload images",
            labelVideo: "Upload videos"
          },
          errorOverlayTextFile: "File type is not valid",
          errorOverlayTextImage: "Image type is not valid",
          errorOverlayTextVideo: "Video type is not valid"
        },
        EmptySearchResult: {
          altText: "Empty search results"
        },
        Frame: {
          skipToContent: "Skip to content",
          navigationLabel: "Navigation",
          Navigation: {
            closeMobileNavigationLabel: "Close navigation"
          }
        },
        FullscreenBar: {
          back: "Back",
          accessibilityLabel: "Exit fullscreen mode"
        },
        Filters: {
          moreFilters: "More filters",
          moreFiltersWithCount: "More filters ({count})",
          filter: "Filter {resourceName}",
          noFiltersApplied: "No filters applied",
          cancel: "Cancel",
          done: "Done",
          clearAllFilters: "Clear all filters",
          clear: "Clear",
          clearLabel: "Clear {filterName}",
          addFilter: "Add filter",
          clearFilters: "Clear all"
        },
        FilterPill: {
          clear: "Clear"
        },
        IndexFilters: {
          searchFilterTooltip: "Search and filter",
          searchFilterTooltipWithShortcut: "Search and filter (F)",
          searchFilterAccessibilityLabel: "Search and filter results",
          sort: "Sort your results",
          addView: "Add a new view",
          newView: "Custom search",
          SortButton: {
            ariaLabel: "Sort the results",
            tooltip: "Sort",
            title: "Sort by",
            sorting: {
              asc: "Ascending",
              desc: "Descending",
              az: "A-Z",
              za: "Z-A"
            }
          },
          EditColumnsButton: {
            tooltip: "Edit columns",
            accessibilityLabel: "Customize table column order and visibility"
          },
          UpdateButtons: {
            cancel: "Cancel",
            update: "Update",
            save: "Save",
            saveAs: "Save as",
            modal: {
              title: "Save view as",
              label: "Name",
              sameName: "A view with this name already exists. Please choose a different name.",
              save: "Save",
              cancel: "Cancel"
            }
          }
        },
        IndexProvider: {
          defaultItemSingular: "Item",
          defaultItemPlural: "Items",
          allItemsSelected: "All {itemsLength}+ {resourceNamePlural} are selected",
          selected: "{selectedItemsCount} selected",
          a11yCheckboxDeselectAllSingle: "Deselect {resourceNameSingular}",
          a11yCheckboxSelectAllSingle: "Select {resourceNameSingular}",
          a11yCheckboxDeselectAllMultiple: "Deselect all {itemsLength} {resourceNamePlural}",
          a11yCheckboxSelectAllMultiple: "Select all {itemsLength} {resourceNamePlural}"
        },
        IndexTable: {
          emptySearchTitle: "No {resourceNamePlural} found",
          emptySearchDescription: "Try changing the filters or search term",
          onboardingBadgeText: "New",
          resourceLoadingAccessibilityLabel: "Loading {resourceNamePlural}\u2026",
          selectAllLabel: "Select all {resourceNamePlural}",
          selected: "{selectedItemsCount} selected",
          undo: "Undo",
          selectAllItems: "Select all {itemsLength}+ {resourceNamePlural}",
          selectItem: "Select {resourceName}",
          selectButtonText: "Select",
          sortAccessibilityLabel: "sort {direction} by"
        },
        Loading: {
          label: "Page loading bar"
        },
        Modal: {
          iFrameTitle: "body markup",
          modalWarning: "These required properties are missing from Modal: {missingProps}"
        },
        Page: {
          Header: {
            rollupActionsLabel: "View actions for {title}",
            pageReadyAccessibilityLabel: "{title}. This page is ready"
          }
        },
        Pagination: {
          previous: "Previous",
          next: "Next",
          pagination: "Pagination"
        },
        ProgressBar: {
          negativeWarningMessage: "Values passed to the progress prop shouldn\u2019t be negative. Resetting {progress} to 0.",
          exceedWarningMessage: "Values passed to the progress prop shouldn\u2019t exceed 100. Setting {progress} to 100."
        },
        ResourceList: {
          sortingLabel: "Sort by",
          defaultItemSingular: "item",
          defaultItemPlural: "items",
          showing: "Showing {itemsCount} {resource}",
          showingTotalCount: "Showing {itemsCount} of {totalItemsCount} {resource}",
          loading: "Loading {resource}",
          selected: "{selectedItemsCount} selected",
          allItemsSelected: "All {itemsLength}+ {resourceNamePlural} in your store are selected",
          allFilteredItemsSelected: "All {itemsLength}+ {resourceNamePlural} in this filter are selected",
          selectAllItems: "Select all {itemsLength}+ {resourceNamePlural} in your store",
          selectAllFilteredItems: "Select all {itemsLength}+ {resourceNamePlural} in this filter",
          emptySearchResultTitle: "No {resourceNamePlural} found",
          emptySearchResultDescription: "Try changing the filters or search term",
          selectButtonText: "Select",
          a11yCheckboxDeselectAllSingle: "Deselect {resourceNameSingular}",
          a11yCheckboxSelectAllSingle: "Select {resourceNameSingular}",
          a11yCheckboxDeselectAllMultiple: "Deselect all {itemsLength} {resourceNamePlural}",
          a11yCheckboxSelectAllMultiple: "Select all {itemsLength} {resourceNamePlural}",
          Item: {
            actionsDropdownLabel: "Actions for {accessibilityLabel}",
            actionsDropdown: "Actions dropdown",
            viewItem: "View details for {itemName}"
          },
          BulkActions: {
            actionsActivatorLabel: "Actions",
            moreActionsActivatorLabel: "More actions"
          }
        },
        SkeletonPage: {
          loadingLabel: "Page loading"
        },
        Tabs: {
          newViewAccessibilityLabel: "Create new view",
          newViewTooltip: "Create view",
          toggleTabsLabel: "More views",
          Tab: {
            rename: "Rename view",
            duplicate: "Duplicate view",
            edit: "Edit view",
            editColumns: "Edit columns",
            delete: "Delete view",
            copy: "Copy of {name}",
            deleteModal: {
              title: "Delete view?",
              description: "This can\u2019t be undone. {viewName} view will no longer be available in your admin.",
              cancel: "Cancel",
              delete: "Delete view"
            }
          },
          RenameModal: {
            title: "Rename view",
            label: "Name",
            cancel: "Cancel",
            create: "Save",
            errors: {
              sameName: "A view with this name already exists. Please choose a different name."
            }
          },
          DuplicateModal: {
            title: "Duplicate view",
            label: "Name",
            cancel: "Cancel",
            create: "Create view",
            errors: {
              sameName: "A view with this name already exists. Please choose a different name."
            }
          },
          CreateViewModal: {
            title: "Create new view",
            label: "Name",
            cancel: "Cancel",
            create: "Create view",
            errors: {
              sameName: "A view with this name already exists. Please choose a different name."
            }
          }
        },
        Tag: {
          ariaLabel: "Remove {children}"
        },
        TextField: {
          characterCount: "{count} characters",
          characterCountWithMaxLength: "{count} of {limit} characters used"
        },
        TooltipOverlay: {
          accessibilityLabel: "Tooltip: {label}"
        },
        TopBar: {
          toggleMenuLabel: "Toggle menu",
          SearchField: {
            clearButtonLabel: "Clear",
            search: "Search"
          }
        },
        MediaCard: {
          dismissButton: "Dismiss",
          popoverButton: "Actions"
        },
        VideoThumbnail: {
          playButtonA11yLabel: {
            default: "Play video",
            defaultWithDuration: "Play video of length {duration}",
            duration: {
              hours: {
                other: {
                  only: "{hourCount} hours",
                  andMinutes: "{hourCount} hours and {minuteCount} minutes",
                  andMinute: "{hourCount} hours and {minuteCount} minute",
                  minutesAndSeconds: "{hourCount} hours, {minuteCount} minutes, and {secondCount} seconds",
                  minutesAndSecond: "{hourCount} hours, {minuteCount} minutes, and {secondCount} second",
                  minuteAndSeconds: "{hourCount} hours, {minuteCount} minute, and {secondCount} seconds",
                  minuteAndSecond: "{hourCount} hours, {minuteCount} minute, and {secondCount} second",
                  andSeconds: "{hourCount} hours and {secondCount} seconds",
                  andSecond: "{hourCount} hours and {secondCount} second"
                },
                one: {
                  only: "{hourCount} hour",
                  andMinutes: "{hourCount} hour and {minuteCount} minutes",
                  andMinute: "{hourCount} hour and {minuteCount} minute",
                  minutesAndSeconds: "{hourCount} hour, {minuteCount} minutes, and {secondCount} seconds",
                  minutesAndSecond: "{hourCount} hour, {minuteCount} minutes, and {secondCount} second",
                  minuteAndSeconds: "{hourCount} hour, {minuteCount} minute, and {secondCount} seconds",
                  minuteAndSecond: "{hourCount} hour, {minuteCount} minute, and {secondCount} second",
                  andSeconds: "{hourCount} hour and {secondCount} seconds",
                  andSecond: "{hourCount} hour and {secondCount} second"
                }
              },
              minutes: {
                other: {
                  only: "{minuteCount} minutes",
                  andSeconds: "{minuteCount} minutes and {secondCount} seconds",
                  andSecond: "{minuteCount} minutes and {secondCount} second"
                },
                one: {
                  only: "{minuteCount} minute",
                  andSeconds: "{minuteCount} minute and {secondCount} seconds",
                  andSecond: "{minuteCount} minute and {secondCount} second"
                }
              },
              seconds: {
                other: "{secondCount} seconds",
                one: "{secondCount} second"
              }
            }
          }
        }
      }
    };
  }
});
var require_const2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/react/const.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var APP_BRIDGE_URL = "https://cdn.shopify.com/shopifycloud/app-bridge.js";
    exports.APP_BRIDGE_URL = APP_BRIDGE_URL;
  }
});
var require_RemixPolarisLink = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/react/components/RemixPolarisLink.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var React270 = require_react(), react = (init_esm2(), __toCommonJS(esm_exports2)), jsxRuntime = require_jsx_runtime();
    function _interopDefaultLegacy(e) {
      return e && typeof e == "object" && "default" in e ? e : { default: e };
    }
    var React__default = /* @__PURE__ */ _interopDefaultLegacy(React270), RemixPolarisLink = /* @__PURE__ */ React__default.default.forwardRef((props, ref) => {
      var _props$url;
      return /* @__PURE__ */ jsxRuntime.jsx(react.Link, {
        ...props,
        to: (_props$url = props.url) !== null && _props$url !== void 0 ? _props$url : props.to,
        ref
      });
    });
    exports.RemixPolarisLink = RemixPolarisLink;
  }
});
var require_AppProvider = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/react/components/AppProvider/AppProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var polaris = (init_esm5(), __toCommonJS(esm_exports4)), englishI18n = require_en(), _const = require_const2(), RemixPolarisLink = require_RemixPolarisLink(), jsxRuntime = require_jsx_runtime();
    function _interopDefaultLegacy(e) {
      return e && typeof e == "object" && "default" in e ? e : { default: e };
    }
    var englishI18n__default = /* @__PURE__ */ _interopDefaultLegacy(englishI18n);
    function AppProvider3(props) {
      let {
        children,
        apiKey,
        i18n,
        isEmbeddedApp = true,
        __APP_BRIDGE_URL = _const.APP_BRIDGE_URL,
        ...polarisProps
      } = props;
      return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [isEmbeddedApp && /* @__PURE__ */ jsxRuntime.jsx("script", {
          src: __APP_BRIDGE_URL,
          "data-api-key": apiKey
        }), /* @__PURE__ */ jsxRuntime.jsx(polaris.AppProvider, {
          ...polarisProps,
          linkComponent: RemixPolarisLink.RemixPolarisLink,
          i18n: i18n || englishI18n__default.default,
          children
        })]
      });
    }
    exports.AppProvider = AppProvider3;
  }
});
var require_react2 = __commonJS({
  "node_modules/@shopify/shopify-app-remix/build/cjs/react/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AppProvider3 = require_AppProvider();
    exports.AppProvider = AppProvider3.AppProvider;
  }
});
var import_cloudflare6 = __toESM(require_dist(), 1);
var import_cloudflare = __toESM(require_dist());
function createRequestHandler2({
  build,
  getLoadContext,
  mode: mode2
}) {
  let handleRequest2 = (0, import_cloudflare.createRequestHandler)(build, mode2);
  return async (context) => {
    let loadContext = await getLoadContext?.(context);
    return handleRequest2(context.request, loadContext);
  };
}
function createPagesFunctionHandler({
  build,
  getLoadContext,
  mode: mode2
}) {
  let handleRequest2 = createRequestHandler2({
    build,
    getLoadContext,
    mode: mode2
  }), handleFetch = async (context) => {
    let response;
    context.request.headers.delete("if-none-match");
    try {
      response = await context.env.ASSETS.fetch(context.request.url, context.request.clone()), response = response && response.status >= 200 && response.status < 400 ? new Response(response.body, response) : void 0;
    } catch {
    }
    return response || (response = await handleRequest2(context)), response;
  };
  return async (context) => {
    try {
      return await handleFetch(context);
    } catch (error) {
      return error instanceof Error ? (console.error(error), new Response(error.message || error.toString(), {
        status: 500
      })) : new Response("Internal Error", {
        status: 500
      });
    }
  };
}
var server_build_exports = {};
__export(server_build_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  future: () => future,
  mode: () => mode,
  publicPath: () => publicPath,
  routes: () => routes2
});
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest
});
init_esm2();
function _iterableToArrayLimit(r, l) {
  var t = r == null ? null : typeof Symbol < "u" && r[Symbol.iterator] || r["@@iterator"];
  if (t != null) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, l === 0) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && t.return != null && (u = t.return(), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false, descriptor.configurable = true, "value" in descriptor && (descriptor.writable = true), Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", {
    writable: false
  }), Constructor;
}
function _defineProperty(obj, key, value) {
  return key = _toPropertyKey(key), key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: true,
    configurable: true,
    writable: true
  }) : obj[key] = value, obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (o) {
    if (typeof o == "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
}
function _arrayLikeToArray(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function _toPrimitive(input, hint) {
  if (typeof input != "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res != "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key == "symbol" ? key : String(key);
}
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  return _classApplyDescriptorSet(receiver, descriptor, value), value;
}
function _classExtractFieldDescriptor(receiver, privateMap, action4) {
  if (!privateMap.has(receiver))
    throw new TypeError("attempted to " + action4 + " private field on non-instance");
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet(receiver, descriptor) {
  return descriptor.get ? descriptor.get.call(receiver) : descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set)
    descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable)
      throw new TypeError("attempted to set read only private field");
    descriptor.value = value;
  }
}
function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver))
    throw new TypeError("attempted to get private field on non-instance");
  return fn;
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap), privateMap.set(obj, value);
}
function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet), privateSet.add(obj);
}
var list = [
  " daum[ /]",
  " deusu/",
  " yadirectfetcher",
  "(?:^| )site",
  "(?:^|[^g])news",
  "@[a-z]",
  "\\(at\\)[a-z]",
  "\\(github\\.com/",
  "\\[at\\][a-z]",
  "^12345",
  "^<",
  "^[\\w \\.\\-\\(\\)]+(/v?\\d+(\\.\\d+)?(\\.\\d{1,10})?)?$",
  "^[^ ]{50,}$",
  "^active",
  "^ad muncher",
  "^amaya",
  "^anglesharp/",
  "^anonymous",
  "^avsdevicesdk/",
  "^axios/",
  "^bidtellect/",
  "^biglotron",
  "^btwebclient/",
  "^castro",
  "^clamav[ /]",
  "^client/",
  "^cobweb/",
  "^coccoc",
  "^custom",
  "^ddg[_-]android",
  "^discourse",
  "^dispatch/\\d",
  "^downcast/",
  "^duckduckgo",
  "^facebook",
  "^fdm[ /]\\d",
  "^getright/",
  "^gozilla/",
  "^hatena",
  "^hobbit",
  "^hotzonu",
  "^hwcdn/",
  "^jeode/",
  "^jetty/",
  "^jigsaw",
  "^linkdex",
  "^lwp[-: ]",
  "^metauri",
  "^microsoft bits",
  "^movabletype",
  "^mozilla/\\d\\.\\d \\(compatible;?\\)$",
  "^mozilla/\\d\\.\\d \\w*$",
  "^navermailapp",
  "^netsurf",
  "^offline explorer",
  "^php",
  "^postman",
  "^postrank",
  "^python",
  "^read",
  "^reed",
  "^restsharp/",
  "^snapchat",
  "^space bison",
  "^svn",
  "^swcd ",
  "^taringa",
  "^test certificate info",
  "^thumbor/",
  "^tumblr/",
  "^user-agent:mozilla",
  "^valid",
  "^venus/fedoraplanet",
  "^w3c",
  "^webbandit/",
  "^webcopier",
  "^wget",
  "^whatsapp",
  "^xenu link sleuth",
  "^yahoo",
  "^yandex",
  "^zdm/\\d",
  "^zoom marketplace/",
  "^{{.*}}$",
  "adbeat\\.com",
  "appinsights",
  "archive",
  "ask jeeves/teoma",
  "bit\\.ly/",
  "bluecoat drtr",
  "bot",
  "browsex",
  "burpcollaborator",
  "capture",
  "catch",
  "check",
  "chrome-lighthouse",
  "chromeframe",
  "cloud",
  "crawl",
  "cryptoapi",
  "dareboost",
  "datanyze",
  "dataprovider",
  "dejaclick",
  "dmbrowser",
  "download",
  "evc-batch/",
  "feed",
  "firephp",
  "freesafeip",
  "gomezagent",
  "google",
  "headlesschrome/",
  "http",
  "httrack",
  "hubspot marketing grader",
  "hydra",
  "ibisbrowser",
  "images",
  "inspect",
  "iplabel",
  "ips-agent",
  "java",
  "library",
  "mail\\.ru/",
  "manager",
  "monitor",
  "morningscore/",
  "neustar wpm",
  "nutch",
  "offbyone",
  "optimize",
  "pageburst",
  "pagespeed",
  "perl",
  "phantom",
  "pingdom",
  "powermarks",
  "preview",
  "proxy",
  "ptst[ /]\\d",
  "reader",
  "rexx;",
  "rigor",
  "rss",
  "scan",
  "scrape",
  "search",
  "serp ?reputation ?management",
  "server",
  "sogou",
  "sparkler/",
  "speedcurve",
  "spider",
  "splash",
  "statuscake",
  "stumbleupon\\.com",
  "supercleaner",
  "synapse",
  "synthetic",
  "torrent",
  "tracemyfile",
  "transcoder",
  "trendsmapresolver",
  "twingly recon",
  "url",
  "virtuoso",
  "wappalyzer",
  "webglance",
  "webkit2png",
  "websitemetadataretriever",
  "whatcms/",
  "wordpress",
  "zgrab"
];
function amend(list2) {
  try {
    new RegExp("(?<! cu)bot").test("dangerbot");
  } catch {
    return list2;
  }
  return [
    // Addresses: Cubot device
    ["bot", "(?<! cu)bot"],
    // Addresses: Android webview
    ["google", "(?<! (?:channel/|google/))google(?!(app|/google| pixel))"],
    // Addresses: libhttp browser
    ["http", "(?<!(?:lib))http"],
    // Addresses: java based browsers
    ["java", "java(?!;)"],
    // Addresses: Yandex Search App
    ["search", "(?<! ya(?:yandex)?)search"]
  ].forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), search = _ref2[0], replace = _ref2[1], index = list2.lastIndexOf(search);
    ~index && list2.splice(index, 1, replace);
  }), list2;
}
amend(list);
var flags = "i";
var _list = /* @__PURE__ */ new WeakMap();
var _pattern = /* @__PURE__ */ new WeakMap();
var _update = /* @__PURE__ */ new WeakSet();
var _index = /* @__PURE__ */ new WeakSet();
var Isbot = /* @__PURE__ */ function() {
  function Isbot2(patterns) {
    var _this = this;
    _classCallCheck(this, Isbot2), _classPrivateMethodInitSpec(this, _index), _classPrivateMethodInitSpec(this, _update), _classPrivateFieldInitSpec(this, _list, {
      writable: true,
      value: void 0
    }), _classPrivateFieldInitSpec(this, _pattern, {
      writable: true,
      value: void 0
    }), _classPrivateFieldSet(this, _list, patterns || list.slice()), _classPrivateMethodGet(this, _update, _update2).call(this);
    var isbot2 = function(ua) {
      return _this.test(ua);
    };
    return Object.defineProperties(isbot2, Object.entries(Object.getOwnPropertyDescriptors(Isbot2.prototype)).reduce(function(accumulator, _ref) {
      var _ref2 = _slicedToArray(_ref, 2), prop = _ref2[0], descriptor = _ref2[1];
      return typeof descriptor.value == "function" && Object.assign(accumulator, _defineProperty({}, prop, {
        value: _this[prop].bind(_this)
      })), typeof descriptor.get == "function" && Object.assign(accumulator, _defineProperty({}, prop, {
        get: function() {
          return _this[prop];
        }
      })), accumulator;
    }, {}));
  }
  return _createClass(Isbot2, [{
    key: "pattern",
    get: (
      /**
       * Get a clone of the pattern
       * @type RegExp
       */
      function() {
        return new RegExp(_classPrivateFieldGet(this, _pattern));
      }
    )
    /**
     * Match given string against out pattern
     * @param  {string} ua User Agent string
     * @returns {boolean}
     */
  }, {
    key: "test",
    value: function(ua) {
      return Boolean(ua) && _classPrivateFieldGet(this, _pattern).test(ua);
    }
    /**
     * Get the match for strings' known crawler pattern
     * @param  {string} ua User Agent string
     * @returns {string|null}
     */
  }, {
    key: "find",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", match2 = ua.match(_classPrivateFieldGet(this, _pattern));
      return match2 && match2[0];
    }
    /**
     * Get the patterns that match user agent string if any
     * @param  {string} ua User Agent string
     * @returns {string[]}
     */
  }, {
    key: "matches",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      return _classPrivateFieldGet(this, _list).filter(function(entry2) {
        return new RegExp(entry2, flags).test(ua);
      });
    }
    /**
     * Clear all patterns that match user agent
     * @param  {string} ua User Agent string
     * @returns {void}
     */
  }, {
    key: "clear",
    value: function() {
      var ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      this.exclude(this.matches(ua));
    }
    /**
     * Extent patterns for known crawlers
     * @param  {string[]} filters
     * @returns {void}
     */
  }, {
    key: "extend",
    value: function() {
      var _this2 = this, filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      [].push.apply(_classPrivateFieldGet(this, _list), filters.filter(function(rule) {
        return _classPrivateMethodGet(_this2, _index, _index2).call(_this2, rule) === -1;
      }).map(function(filter) {
        return filter.toLowerCase();
      })), _classPrivateMethodGet(this, _update, _update2).call(this);
    }
    /**
     * Exclude patterns from bot pattern rule
     * @param  {string[]} filters
     * @returns {void}
     */
  }, {
    key: "exclude",
    value: function() {
      for (var filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], length = filters.length; length--; ) {
        var index = _classPrivateMethodGet(this, _index, _index2).call(this, filters[length]);
        index > -1 && _classPrivateFieldGet(this, _list).splice(index, 1);
      }
      _classPrivateMethodGet(this, _update, _update2).call(this);
    }
    /**
     * Create a new Isbot instance using given list or self's list
     * @param  {string[]} [list]
     * @returns {Isbot}
     */
  }, {
    key: "spawn",
    value: function(list2) {
      return new Isbot2(list2 || _classPrivateFieldGet(this, _list));
    }
  }]), Isbot2;
}();
function _update2() {
  _classPrivateFieldSet(this, _pattern, new RegExp(_classPrivateFieldGet(this, _list).join("|"), flags));
}
function _index2(rule) {
  return _classPrivateFieldGet(this, _list).indexOf(rule.toLowerCase());
}
var isbot = new Isbot();
var import_server5 = __toESM(require_server_browser(), 1);
var import__ = __toESM(require__(), 1);
var import_server4 = __toESM(require_server2(), 1);
var import_shopify_app_session_storage_kv = __toESM(require_kv(), 1);
var initShopify = (context) => {
  let shopify2 = (0, import_server4.shopifyApp)({
    apiKey: context.env.SHOPIFY_API_KEY,
    apiSecretKey: context.env.SHOPIFY_API_SECRET || "",
    apiVersion: import_server4.LATEST_API_VERSION,
    scopes: context.env.SCOPES?.split(","),
    appUrl: context.env.SHOPIFY_APP_URL || "",
    authPathPrefix: "/auth",
    sessionStorage: new import_shopify_app_session_storage_kv.KVSessionStorage(context.env.SESSION),
    distribution: import_server4.AppDistribution.AppStore,
    restResources: import__.restResources,
    webhooks: {
      APP_UNINSTALLED: {
        deliveryMethod: import_server4.DeliveryMethod.Http,
        callbackUrl: "/webhooks"
      }
    },
    hooks: {
      afterAuth: async ({ session }) => {
        shopify2.registerWebhooks({ session });
      }
    },
    future: {
      v3_webhookAdminContext: true,
      v3_authenticatePublic: true
    },
    ...context.env.SHOP_CUSTOM_DOMAIN ? { customShopDomains: [context.env.SHOP_CUSTOM_DOMAIN] } : {}
  });
  return shopify2;
};
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime(), 1);
async function handleRequest(request, responseStatusCode, responseHeaders, remixContext, context) {
  (await initShopify(context)).addDocumentResponseHeaders(request, responseHeaders);
  let body = await (0, import_server5.renderToReadableStream)(
    /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(RemixServer, { context: remixContext, url: request.url }, void 0, false, {
      fileName: "app/entry.server.tsx",
      lineNumber: 18,
      columnNumber: 5
    }, this),
    {
      signal: request.signal,
      onError(error) {
        console.error(error), responseStatusCode = 500;
      }
    }
  );
  return isbot(request.headers.get("user-agent")) && await body.allReady, responseHeaders.set("Content-Type", "text/html"), new Response(body, {
    headers: responseHeaders,
    status: responseStatusCode
  });
}
var root_exports = {};
__export(root_exports, {
  default: () => App,
  links: () => links
});
init_esm2();
var import_jsx_dev_runtime2 = __toESM(require_jsx_dev_runtime(), 1);
var links = () => [
  ...void 0 ? [{ rel: "stylesheet", href: void 0 }] : []
];
function App() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("html", { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("meta", { charSet: "utf-8" }, void 0, false, {
        fileName: "app/root.tsx",
        lineNumber: 20,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("meta", { name: "viewport", content: "width=device-width,initial-scale=1" }, void 0, false, {
        fileName: "app/root.tsx",
        lineNumber: 21,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Meta, {}, void 0, false, {
        fileName: "app/root.tsx",
        lineNumber: 22,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Links, {}, void 0, false, {
        fileName: "app/root.tsx",
        lineNumber: 23,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "app/root.tsx",
      lineNumber: 19,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Outlet, {}, void 0, false, {
        fileName: "app/root.tsx",
        lineNumber: 26,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(ScrollRestoration2, {}, void 0, false, {
        fileName: "app/root.tsx",
        lineNumber: 27,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(LiveReload, {}, void 0, false, {
        fileName: "app/root.tsx",
        lineNumber: 28,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Scripts, {}, void 0, false, {
        fileName: "app/root.tsx",
        lineNumber: 29,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "app/root.tsx",
      lineNumber: 25,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "app/root.tsx",
    lineNumber: 18,
    columnNumber: 5
  }, this);
}
var app_additional_exports = {};
__export(app_additional_exports, {
  default: () => AdditionalPage
});
init_esm5();
var import_jsx_dev_runtime3 = __toESM(require_jsx_dev_runtime(), 1);
function AdditionalPage() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Page, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)("ui-title-bar", { title: "Additional page" }, void 0, false, {
      fileName: "app/routes/app.additional.tsx",
      lineNumber: 15,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Layout, { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(BlockStack, { gap: "300", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Text, { as: "p", variant: "bodyMd", children: [
          "The app template comes with an additional page which demonstrates how to create multiple pages within app navigation using",
          " ",
          /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
            Link3,
            {
              url: "https://shopify.dev/docs/apps/tools/app-bridge",
              target: "_blank",
              removeUnderline: true,
              children: "App Bridge"
            },
            void 0,
            false,
            {
              fileName: "app/routes/app.additional.tsx",
              lineNumber: 24,
              columnNumber: 17
            },
            this
          ),
          "."
        ] }, void 0, true, {
          fileName: "app/routes/app.additional.tsx",
          lineNumber: 20,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Text, { as: "p", variant: "bodyMd", children: [
          "To create your own page and have it show up in the app navigation, add a page inside ",
          /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Code, { children: "app/routes" }, void 0, false, {
            fileName: "app/routes/app.additional.tsx",
            lineNumber: 35,
            columnNumber: 47
          }, this),
          ", and a link to it in the ",
          /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Code, { children: "<ui-nav-menu>" }, void 0, false, {
            fileName: "app/routes/app.additional.tsx",
            lineNumber: 36,
            columnNumber: 35
          }, this),
          " component found in ",
          /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Code, { children: "app/routes/app.jsx" }, void 0, false, {
            fileName: "app/routes/app.additional.tsx",
            lineNumber: 37,
            columnNumber: 26
          }, this),
          "."
        ] }, void 0, true, {
          fileName: "app/routes/app.additional.tsx",
          lineNumber: 33,
          columnNumber: 15
        }, this)
      ] }, void 0, true, {
        fileName: "app/routes/app.additional.tsx",
        lineNumber: 19,
        columnNumber: 13
      }, this) }, void 0, false, {
        fileName: "app/routes/app.additional.tsx",
        lineNumber: 18,
        columnNumber: 11
      }, this) }, void 0, false, {
        fileName: "app/routes/app.additional.tsx",
        lineNumber: 17,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Layout.Section, { variant: "oneThird", children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(BlockStack, { gap: "200", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(Text, { as: "h2", variant: "headingMd", children: "Resources" }, void 0, false, {
          fileName: "app/routes/app.additional.tsx",
          lineNumber: 45,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(List3, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(List3.Item, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
          Link3,
          {
            url: "https://shopify.dev/docs/apps/design-guidelines/navigation#app-nav",
            target: "_blank",
            removeUnderline: true,
            children: "App nav best practices"
          },
          void 0,
          false,
          {
            fileName: "app/routes/app.additional.tsx",
            lineNumber: 50,
            columnNumber: 19
          },
          this
        ) }, void 0, false, {
          fileName: "app/routes/app.additional.tsx",
          lineNumber: 49,
          columnNumber: 17
        }, this) }, void 0, false, {
          fileName: "app/routes/app.additional.tsx",
          lineNumber: 48,
          columnNumber: 15
        }, this)
      ] }, void 0, true, {
        fileName: "app/routes/app.additional.tsx",
        lineNumber: 44,
        columnNumber: 13
      }, this) }, void 0, false, {
        fileName: "app/routes/app.additional.tsx",
        lineNumber: 43,
        columnNumber: 11
      }, this) }, void 0, false, {
        fileName: "app/routes/app.additional.tsx",
        lineNumber: 42,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "app/routes/app.additional.tsx",
      lineNumber: 16,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "app/routes/app.additional.tsx",
    lineNumber: 14,
    columnNumber: 5
  }, this);
}
function Code({ children }) {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
    Box,
    {
      as: "span",
      padding: "025",
      paddingInlineStart: "100",
      paddingInlineEnd: "100",
      background: "bg-surface-active",
      borderWidth: "025",
      borderColor: "border",
      borderRadius: "100",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)("code", { children }, void 0, false, {
        fileName: "app/routes/app.additional.tsx",
        lineNumber: 79,
        columnNumber: 7
      }, this)
    },
    void 0,
    false,
    {
      fileName: "app/routes/app.additional.tsx",
      lineNumber: 69,
      columnNumber: 5
    },
    this
  );
}
var app_index_exports = {};
__export(app_index_exports, {
  action: () => action,
  default: () => Index,
  loader: () => loader
});
var import_react330 = __toESM(require_react(), 1);
var import_cloudflare2 = __toESM(require_dist(), 1);
init_esm2();
init_esm5();
var import_jsx_dev_runtime4 = __toESM(require_jsx_dev_runtime(), 1);
var loader = async ({ request, context }) => (await initShopify(context).authenticate.admin(request), null);
var action = async ({ request, context }) => {
  let { admin } = await initShopify(context).authenticate.admin(request), color2 = ["Red", "Orange", "Yellow", "Green"][Math.floor(Math.random() * 4)], responseJson = await (await admin.graphql(
    `#graphql
      mutation populateProduct($input: ProductInput!) {
        productCreate(input: $input) {
          product {
            id
            title
            handle
            status
            variants(first: 10) {
              edges {
                node {
                  id
                  price
                  barcode
                  createdAt
                }
              }
            }
          }
        }
      }`,
    {
      variables: {
        input: {
          title: `${color2} Snowboard`,
          variants: [{ price: Math.random() * 100 }]
        }
      }
    }
  )).json();
  return (0, import_cloudflare2.json)({
    product: responseJson.data.productCreate.product
  });
};
function Index() {
  let nav = useNavigation(), actionData = useActionData2(), submit = useSubmit(), isLoading = ["loading", "submitting"].includes(nav.state) && nav.formMethod === "POST", productId = actionData?.product?.id.replace(
    "gid://shopify/Product/",
    ""
  );
  (0, import_react330.useEffect)(() => {
    productId && shopify.toast.show("Product created");
  }, [productId]);
  let generateProduct = () => submit({}, { replace: true, method: "POST" });
  return /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Page, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("ui-title-bar", { title: "Remix app template", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("button", { variant: "primary", onClick: generateProduct, children: "Generate a product" }, void 0, false, {
      fileName: "app/routes/app._index.tsx",
      lineNumber: 92,
      columnNumber: 9
    }, this) }, void 0, false, {
      fileName: "app/routes/app._index.tsx",
      lineNumber: 91,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BlockStack, { gap: "500", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Layout, { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Layout.Section, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BlockStack, { gap: "500", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BlockStack, { gap: "200", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "h2", variant: "headingMd", children: "Congrats on creating a new Shopify app \u{1F389}" }, void 0, false, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 102,
            columnNumber: 19
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { variant: "bodyMd", as: "p", children: [
            "This embedded app template uses",
            " ",
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
              Link3,
              {
                url: "https://shopify.dev/docs/apps/tools/app-bridge",
                target: "_blank",
                removeUnderline: true,
                children: "App Bridge"
              },
              void 0,
              false,
              {
                fileName: "app/routes/app._index.tsx",
                lineNumber: 107,
                columnNumber: 21
              },
              this
            ),
            " ",
            "interface examples like an",
            " ",
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Link3, { url: "/app/additional", removeUnderline: true, children: "additional page in the app nav" }, void 0, false, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 115,
              columnNumber: 21
            }, this),
            ", as well as an",
            " ",
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
              Link3,
              {
                url: "https://shopify.dev/docs/api/admin-graphql",
                target: "_blank",
                removeUnderline: true,
                children: "Admin GraphQL"
              },
              void 0,
              false,
              {
                fileName: "app/routes/app._index.tsx",
                lineNumber: 119,
                columnNumber: 21
              },
              this
            ),
            " ",
            "mutation demo, to provide a starting point for app development."
          ] }, void 0, true, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 105,
            columnNumber: 19
          }, this)
        ] }, void 0, true, {
          fileName: "app/routes/app._index.tsx",
          lineNumber: 101,
          columnNumber: 17
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BlockStack, { gap: "200", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "h3", variant: "headingMd", children: "Get started with products" }, void 0, false, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 131,
            columnNumber: 19
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "p", variant: "bodyMd", children: [
            "Generate a product with GraphQL and get the JSON output for that product. Learn more about the",
            " ",
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
              Link3,
              {
                url: "https://shopify.dev/docs/api/admin-graphql/latest/mutations/productCreate",
                target: "_blank",
                removeUnderline: true,
                children: "productCreate"
              },
              void 0,
              false,
              {
                fileName: "app/routes/app._index.tsx",
                lineNumber: 137,
                columnNumber: 21
              },
              this
            ),
            " ",
            "mutation in our API references."
          ] }, void 0, true, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 134,
            columnNumber: 19
          }, this)
        ] }, void 0, true, {
          fileName: "app/routes/app._index.tsx",
          lineNumber: 130,
          columnNumber: 17
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(InlineStack, { gap: "300", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Button, { loading: isLoading, onClick: generateProduct, children: "Generate a product" }, void 0, false, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 148,
            columnNumber: 19
          }, this),
          actionData?.product && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
            Button,
            {
              url: `shopify:admin/products/${productId}`,
              target: "_blank",
              variant: "plain",
              children: "View product"
            },
            void 0,
            false,
            {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 152,
              columnNumber: 21
            },
            this
          )
        ] }, void 0, true, {
          fileName: "app/routes/app._index.tsx",
          lineNumber: 147,
          columnNumber: 17
        }, this),
        actionData?.product && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
          Box,
          {
            padding: "400",
            background: "bg-surface-active",
            borderWidth: "025",
            borderRadius: "200",
            borderColor: "border",
            overflowX: "scroll",
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("pre", { style: { margin: 0 }, children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("code", { children: JSON.stringify(actionData.product, null, 2) }, void 0, false, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 171,
              columnNumber: 23
            }, this) }, void 0, false, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 170,
              columnNumber: 21
            }, this)
          },
          void 0,
          false,
          {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 162,
            columnNumber: 19
          },
          this
        )
      ] }, void 0, true, {
        fileName: "app/routes/app._index.tsx",
        lineNumber: 100,
        columnNumber: 15
      }, this) }, void 0, false, {
        fileName: "app/routes/app._index.tsx",
        lineNumber: 99,
        columnNumber: 13
      }, this) }, void 0, false, {
        fileName: "app/routes/app._index.tsx",
        lineNumber: 98,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Layout.Section, { variant: "oneThird", children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BlockStack, { gap: "500", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BlockStack, { gap: "200", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "h2", variant: "headingMd", children: "App template specs" }, void 0, false, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 182,
            columnNumber: 19
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BlockStack, { gap: "200", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "span", variant: "bodyMd", children: "Framework" }, void 0, false, {
                fileName: "app/routes/app._index.tsx",
                lineNumber: 187,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                Link3,
                {
                  url: "https://remix.run",
                  target: "_blank",
                  removeUnderline: true,
                  children: "Remix"
                },
                void 0,
                false,
                {
                  fileName: "app/routes/app._index.tsx",
                  lineNumber: 190,
                  columnNumber: 23
                },
                this
              )
            ] }, void 0, true, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 186,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "span", variant: "bodyMd", children: "Database" }, void 0, false, {
                fileName: "app/routes/app._index.tsx",
                lineNumber: 199,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                Link3,
                {
                  url: "https://www.prisma.io/",
                  target: "_blank",
                  removeUnderline: true,
                  children: "Prisma"
                },
                void 0,
                false,
                {
                  fileName: "app/routes/app._index.tsx",
                  lineNumber: 202,
                  columnNumber: 23
                },
                this
              )
            ] }, void 0, true, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 198,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "span", variant: "bodyMd", children: "Interface" }, void 0, false, {
                fileName: "app/routes/app._index.tsx",
                lineNumber: 211,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)("span", { children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  Link3,
                  {
                    url: "https://polaris.shopify.com",
                    target: "_blank",
                    removeUnderline: true,
                    children: "Polaris"
                  },
                  void 0,
                  false,
                  {
                    fileName: "app/routes/app._index.tsx",
                    lineNumber: 215,
                    columnNumber: 25
                  },
                  this
                ),
                ", ",
                /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                  Link3,
                  {
                    url: "https://shopify.dev/docs/apps/tools/app-bridge",
                    target: "_blank",
                    removeUnderline: true,
                    children: "App Bridge"
                  },
                  void 0,
                  false,
                  {
                    fileName: "app/routes/app._index.tsx",
                    lineNumber: 223,
                    columnNumber: 25
                  },
                  this
                )
              ] }, void 0, true, {
                fileName: "app/routes/app._index.tsx",
                lineNumber: 214,
                columnNumber: 23
              }, this)
            ] }, void 0, true, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 210,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(InlineStack, { align: "space-between", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "span", variant: "bodyMd", children: "API" }, void 0, false, {
                fileName: "app/routes/app._index.tsx",
                lineNumber: 233,
                columnNumber: 23
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                Link3,
                {
                  url: "https://shopify.dev/docs/api/admin-graphql",
                  target: "_blank",
                  removeUnderline: true,
                  children: "GraphQL API"
                },
                void 0,
                false,
                {
                  fileName: "app/routes/app._index.tsx",
                  lineNumber: 236,
                  columnNumber: 23
                },
                this
              )
            ] }, void 0, true, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 232,
              columnNumber: 21
            }, this)
          ] }, void 0, true, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 185,
            columnNumber: 19
          }, this)
        ] }, void 0, true, {
          fileName: "app/routes/app._index.tsx",
          lineNumber: 181,
          columnNumber: 17
        }, this) }, void 0, false, {
          fileName: "app/routes/app._index.tsx",
          lineNumber: 180,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BlockStack, { gap: "200", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(Text, { as: "h2", variant: "headingMd", children: "Next steps" }, void 0, false, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 249,
            columnNumber: 19
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(List3, { children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(List3.Item, { children: [
              "Build an",
              " ",
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                Link3,
                {
                  url: "https://shopify.dev/docs/apps/getting-started/build-app-example",
                  target: "_blank",
                  removeUnderline: true,
                  children: [
                    " ",
                    "example app"
                  ]
                },
                void 0,
                true,
                {
                  fileName: "app/routes/app._index.tsx",
                  lineNumber: 255,
                  columnNumber: 23
                },
                this
              ),
              " ",
              "to get started"
            ] }, void 0, true, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 253,
              columnNumber: 21
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(List3.Item, { children: [
              "Explore Shopify\u2019s API with",
              " ",
              /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
                Link3,
                {
                  url: "https://shopify.dev/docs/apps/tools/graphiql-admin-api",
                  target: "_blank",
                  removeUnderline: true,
                  children: "GraphiQL"
                },
                void 0,
                false,
                {
                  fileName: "app/routes/app._index.tsx",
                  lineNumber: 267,
                  columnNumber: 23
                },
                this
              )
            ] }, void 0, true, {
              fileName: "app/routes/app._index.tsx",
              lineNumber: 265,
              columnNumber: 21
            }, this)
          ] }, void 0, true, {
            fileName: "app/routes/app._index.tsx",
            lineNumber: 252,
            columnNumber: 19
          }, this)
        ] }, void 0, true, {
          fileName: "app/routes/app._index.tsx",
          lineNumber: 248,
          columnNumber: 17
        }, this) }, void 0, false, {
          fileName: "app/routes/app._index.tsx",
          lineNumber: 247,
          columnNumber: 15
        }, this)
      ] }, void 0, true, {
        fileName: "app/routes/app._index.tsx",
        lineNumber: 179,
        columnNumber: 13
      }, this) }, void 0, false, {
        fileName: "app/routes/app._index.tsx",
        lineNumber: 178,
        columnNumber: 11
      }, this)
    ] }, void 0, true, {
      fileName: "app/routes/app._index.tsx",
      lineNumber: 97,
      columnNumber: 9
    }, this) }, void 0, false, {
      fileName: "app/routes/app._index.tsx",
      lineNumber: 96,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "app/routes/app._index.tsx",
    lineNumber: 90,
    columnNumber: 5
  }, this);
}
var route_exports = {};
__export(route_exports, {
  action: () => action2,
  default: () => Auth,
  links: () => links2,
  loader: () => loader2
});
var import_react332 = __toESM(require_react(), 1);
var import_cloudflare3 = __toESM(require_dist(), 1);
init_esm5();
init_esm2();
var styles_default = "/build/_assets/styles-E4R7BK7U.css";
var import_server6 = __toESM(require_server2(), 1);
function loginErrorMessage(loginErrors) {
  return loginErrors?.shop === import_server6.LoginErrorType.MissingShop ? { shop: "Please enter your shop domain to log in" } : loginErrors?.shop === import_server6.LoginErrorType.InvalidShop ? { shop: "Please enter a valid shop domain to log in" } : {};
}
var import_jsx_dev_runtime5 = __toESM(require_jsx_dev_runtime(), 1);
var links2 = () => [{ rel: "stylesheet", href: styles_default }];
var loader2 = async ({ request, context }) => {
  let errors = loginErrorMessage(await initShopify(context).login(request));
  return (0, import_cloudflare3.json)({
    errors,
    polarisTranslations: require_en()
  });
};
var action2 = async ({ request, context }) => {
  let errors = loginErrorMessage(await initShopify(context).login(request));
  return (0, import_cloudflare3.json)({
    errors
  });
};
function Auth() {
  let loaderData = useLoaderData2(), actionData = useActionData2(), [shop, setShop] = (0, import_react332.useState)(""), { errors } = actionData || loaderData;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(AppProvider, { i18n: loaderData.polarisTranslations, children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Page, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Card, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Form, { method: "post", children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(FormLayout, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Text, { variant: "headingMd", as: "h2", children: "Log in" }, void 0, false, {
      fileName: "app/routes/auth.login/route.tsx",
      lineNumber: 52,
      columnNumber: 15
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
      TextField,
      {
        type: "text",
        name: "shop",
        label: "Shop domain",
        helpText: "example.myshopify.com",
        value: shop,
        onChange: setShop,
        autoComplete: "on",
        error: errors.shop
      },
      void 0,
      false,
      {
        fileName: "app/routes/auth.login/route.tsx",
        lineNumber: 55,
        columnNumber: 15
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Button, { submit: true, children: "Log in" }, void 0, false, {
      fileName: "app/routes/auth.login/route.tsx",
      lineNumber: 65,
      columnNumber: 15
    }, this)
  ] }, void 0, true, {
    fileName: "app/routes/auth.login/route.tsx",
    lineNumber: 51,
    columnNumber: 13
  }, this) }, void 0, false, {
    fileName: "app/routes/auth.login/route.tsx",
    lineNumber: 50,
    columnNumber: 11
  }, this) }, void 0, false, {
    fileName: "app/routes/auth.login/route.tsx",
    lineNumber: 49,
    columnNumber: 9
  }, this) }, void 0, false, {
    fileName: "app/routes/auth.login/route.tsx",
    lineNumber: 48,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "app/routes/auth.login/route.tsx",
    lineNumber: 47,
    columnNumber: 5
  }, this);
}
var webhooks_exports = {};
__export(webhooks_exports, {
  action: () => action3
});
var action3 = async ({ request, context }) => {
  let shopify2 = initShopify(context), { topic, session, admin } = await shopify2.authenticate.webhook(request);
  if (!admin)
    throw new Response();
  switch (topic) {
    case "APP_UNINSTALLED":
      session && await shopify2.sessionStorage.deleteSession(session.id);
      break;
    case "CUSTOMERS_DATA_REQUEST":
    case "CUSTOMERS_REDACT":
    case "SHOP_REDACT":
    default:
      throw new Response("Unhandled webhook topic", { status: 404 });
  }
  throw new Response();
};
var route_exports2 = {};
__export(route_exports2, {
  default: () => App2,
  links: () => links3,
  loader: () => loader3
});
var import_cloudflare4 = __toESM(require_dist(), 1);
init_esm2();
var style_default = "/build/_assets/style-M2E3MJNO.css";
var import_jsx_dev_runtime6 = __toESM(require_jsx_dev_runtime(), 1);
var links3 = () => [{ rel: "stylesheet", href: style_default }];
var loader3 = async ({ request, context }) => {
  let url = new URL(request.url);
  if (url.searchParams.get("shop"))
    throw (0, import_cloudflare4.redirect)(`/app?${url.searchParams.toString()}`);
  let shopify2 = initShopify(context);
  return (0, import_cloudflare4.json)({ showForm: Boolean(shopify2.login) });
};
function App2() {
  let { showForm } = useLoaderData2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("div", { className: "index", children: /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("div", { className: "content", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("h1", { children: "A short heading about [your app]" }, void 0, false, {
      fileName: "app/routes/_index/route.tsx",
      lineNumber: 26,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("p", { children: "A tagline about [your app] that describes your value proposition." }, void 0, false, {
      fileName: "app/routes/_index/route.tsx",
      lineNumber: 27,
      columnNumber: 9
    }, this),
    showForm && /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(Form, { method: "post", action: "/auth/login", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("label", { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("span", { children: "Shop domain" }, void 0, false, {
          fileName: "app/routes/_index/route.tsx",
          lineNumber: 31,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("input", { type: "text", name: "shop" }, void 0, false, {
          fileName: "app/routes/_index/route.tsx",
          lineNumber: 32,
          columnNumber: 15
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("span", { children: "e.g: my-shop-domain.myshopify.com" }, void 0, false, {
          fileName: "app/routes/_index/route.tsx",
          lineNumber: 33,
          columnNumber: 15
        }, this)
      ] }, void 0, true, {
        fileName: "app/routes/_index/route.tsx",
        lineNumber: 30,
        columnNumber: 13
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("button", { type: "submit", children: "Log in" }, void 0, false, {
        fileName: "app/routes/_index/route.tsx",
        lineNumber: 35,
        columnNumber: 13
      }, this)
    ] }, void 0, true, {
      fileName: "app/routes/_index/route.tsx",
      lineNumber: 29,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("ul", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("li", { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("strong", { children: "Product feature" }, void 0, false, {
          fileName: "app/routes/_index/route.tsx",
          lineNumber: 40,
          columnNumber: 13
        }, this),
        ". Some detail about your feature and its benefit to your customer."
      ] }, void 0, true, {
        fileName: "app/routes/_index/route.tsx",
        lineNumber: 39,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("li", { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("strong", { children: "Product feature" }, void 0, false, {
          fileName: "app/routes/_index/route.tsx",
          lineNumber: 44,
          columnNumber: 13
        }, this),
        ". Some detail about your feature and its benefit to your customer."
      ] }, void 0, true, {
        fileName: "app/routes/_index/route.tsx",
        lineNumber: 43,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("li", { children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("strong", { children: "Product feature" }, void 0, false, {
          fileName: "app/routes/_index/route.tsx",
          lineNumber: 48,
          columnNumber: 13
        }, this),
        ". Some detail about your feature and its benefit to your customer."
      ] }, void 0, true, {
        fileName: "app/routes/_index/route.tsx",
        lineNumber: 47,
        columnNumber: 11
      }, this)
    ] }, void 0, true, {
      fileName: "app/routes/_index/route.tsx",
      lineNumber: 38,
      columnNumber: 9
    }, this)
  ] }, void 0, true, {
    fileName: "app/routes/_index/route.tsx",
    lineNumber: 25,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "app/routes/_index/route.tsx",
    lineNumber: 24,
    columnNumber: 5
  }, this);
}
var auth_exports = {};
__export(auth_exports, {
  loader: () => loader4
});
var loader4 = async ({ request, context }) => (await initShopify(context).authenticate.admin(request), null);
var app_exports = {};
__export(app_exports, {
  ErrorBoundary: () => ErrorBoundary,
  default: () => App3,
  headers: () => headers,
  links: () => links4,
  loader: () => loader5
});
var import_cloudflare5 = __toESM(require_dist(), 1);
init_esm2();
var import_server7 = __toESM(require_server2(), 1);
var import_react336 = __toESM(require_react2(), 1);
var import_jsx_dev_runtime7 = __toESM(require_jsx_dev_runtime(), 1);
var links4 = () => [{ rel: "stylesheet", href: styles_default }];
var loader5 = async ({ request, context }) => (await initShopify(context).authenticate.admin(request), (0, import_cloudflare5.json)({ apiKey: context.env.SHOPIFY_API_KEY || "" }));
function App3() {
  let { apiKey } = useLoaderData2();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(import_react336.AppProvider, { isEmbeddedApp: true, apiKey, children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)("ui-nav-menu", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(Link2, { to: "/app", rel: "home", children: "Home" }, void 0, false, {
        fileName: "app/routes/app.tsx",
        lineNumber: 26,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(Link2, { to: "/app/additional", children: "Additional page" }, void 0, false, {
        fileName: "app/routes/app.tsx",
        lineNumber: 29,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "app/routes/app.tsx",
      lineNumber: 25,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(Outlet, {}, void 0, false, {
      fileName: "app/routes/app.tsx",
      lineNumber: 31,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "app/routes/app.tsx",
    lineNumber: 24,
    columnNumber: 5
  }, this);
}
function ErrorBoundary() {
  return import_server7.boundary.error(useRouteError());
}
var headers = (headersArgs) => import_server7.boundary.headers(headersArgs);
var assets_manifest_default = { entry: { module: "/build/entry.client-3JOHIKLK.js", imports: ["/build/_shared/chunk-ZWGWGGVF.js", "/build/_shared/chunk-F5Q3HTHX.js", "/build/_shared/chunk-XU7DNSPJ.js", "/build/_shared/chunk-7GFL5NBR.js", "/build/_shared/chunk-UWV35TSL.js", "/build/_shared/chunk-GIAAE3CH.js", "/build/_shared/chunk-BOXFZXVX.js", "/build/_shared/chunk-PNG5AS42.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-T4OD52SH.js", imports: void 0, hasAction: false, hasLoader: false, hasClientAction: false, hasClientLoader: false, hasErrorBoundary: false }, "routes/_index": { id: "routes/_index", parentId: "root", path: void 0, index: true, caseSensitive: void 0, module: "/build/routes/_index-6QKR4Q3E.js", imports: ["/build/_shared/chunk-S6Y3EBRO.js", "/build/_shared/chunk-NFYMXIMP.js"], hasAction: false, hasLoader: true, hasClientAction: false, hasClientLoader: false, hasErrorBoundary: false }, "routes/app": { id: "routes/app", parentId: "root", path: "app", index: void 0, caseSensitive: void 0, module: "/build/routes/app-FZJOCA6Q.js", imports: ["/build/_shared/chunk-NMZL6IDN.js", "/build/_shared/chunk-SU66BP3D.js", "/build/_shared/chunk-Q7U3QTWH.js", "/build/_shared/chunk-37ZC7BYQ.js", "/build/_shared/chunk-NFYMXIMP.js"], hasAction: false, hasLoader: true, hasClientAction: false, hasClientLoader: false, hasErrorBoundary: true }, "routes/app._index": { id: "routes/app._index", parentId: "routes/app", path: void 0, index: true, caseSensitive: void 0, module: "/build/routes/app._index-MUC4IDDH.js", imports: void 0, hasAction: true, hasLoader: true, hasClientAction: false, hasClientLoader: false, hasErrorBoundary: false }, "routes/app.additional": { id: "routes/app.additional", parentId: "routes/app", path: "additional", index: void 0, caseSensitive: void 0, module: "/build/routes/app.additional-7Y4UB7XG.js", imports: void 0, hasAction: false, hasLoader: false, hasClientAction: false, hasClientLoader: false, hasErrorBoundary: false }, "routes/auth.$": { id: "routes/auth.$", parentId: "root", path: "auth/*", index: void 0, caseSensitive: void 0, module: "/build/routes/auth.$-Z6LPBAD4.js", imports: void 0, hasAction: false, hasLoader: true, hasClientAction: false, hasClientLoader: false, hasErrorBoundary: false }, "routes/auth.login": { id: "routes/auth.login", parentId: "root", path: "auth/login", index: void 0, caseSensitive: void 0, module: "/build/routes/auth.login-IVZUYN3L.js", imports: ["/build/_shared/chunk-Q7U3QTWH.js", "/build/_shared/chunk-37ZC7BYQ.js", "/build/_shared/chunk-S6Y3EBRO.js", "/build/_shared/chunk-NFYMXIMP.js"], hasAction: true, hasLoader: true, hasClientAction: false, hasClientLoader: false, hasErrorBoundary: false }, "routes/webhooks": { id: "routes/webhooks", parentId: "root", path: "webhooks", index: void 0, caseSensitive: void 0, module: "/build/routes/webhooks-YCEDH7MD.js", imports: void 0, hasAction: true, hasLoader: false, hasClientAction: false, hasClientLoader: false, hasErrorBoundary: false } }, version: "02e3eb04", hmr: { runtime: "/build/_shared/chunk-7GFL5NBR.js", timestamp: 1704019058584 }, url: "/build/manifest-02E3EB04.js" };
var mode = "development";
var assetsBuildDirectory = "public/build";
var future = { v3_fetcherPersist: false, v3_relativeSplatPath: false };
var publicPath = "/build/";
var entry = { module: entry_server_exports };
var routes2 = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/app.additional": {
    id: "routes/app.additional",
    parentId: "routes/app",
    path: "additional",
    index: void 0,
    caseSensitive: void 0,
    module: app_additional_exports
  },
  "routes/app._index": {
    id: "routes/app._index",
    parentId: "routes/app",
    path: void 0,
    index: true,
    caseSensitive: void 0,
    module: app_index_exports
  },
  "routes/auth.login": {
    id: "routes/auth.login",
    parentId: "root",
    path: "auth/login",
    index: void 0,
    caseSensitive: void 0,
    module: route_exports
  },
  "routes/webhooks": {
    id: "routes/webhooks",
    parentId: "root",
    path: "webhooks",
    index: void 0,
    caseSensitive: void 0,
    module: webhooks_exports
  },
  "routes/_index": {
    id: "routes/_index",
    parentId: "root",
    path: void 0,
    index: true,
    caseSensitive: void 0,
    module: route_exports2
  },
  "routes/auth.$": {
    id: "routes/auth.$",
    parentId: "root",
    path: "auth/*",
    index: void 0,
    caseSensitive: void 0,
    module: auth_exports
  },
  "routes/app": {
    id: "routes/app",
    parentId: "root",
    path: "app",
    index: void 0,
    caseSensitive: void 0,
    module: app_exports
  }
};
(0, import_cloudflare6.logDevReady)(server_build_exports);
var onRequest = createPagesFunctionHandler({
  build: server_build_exports,
  getLoadContext: (context) => ({ env: context.env }),
  mode
});

// ../.wrangler/tmp/pages-zaAUPR/functionsRoutes-0.49921812011370625.mjs
var routes = [
  {
    routePath: "/:path*",
    mountPath: "/",
    method: "",
    middlewares: [],
    modules: [onRequest]
  }
];

// ../node_modules/wrangler/templates/middleware/common.ts
var __facade_middleware__ = [];
function __facade_register__(...args) {
  __facade_middleware__.push(...args.flat());
}
function __facade_invokeChain__(request, env, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env, ctx, middlewareCtx);
}
function __facade_invoke__(request, env, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__(request, env, ctx, dispatch, [
    ...__facade_middleware__,
    finalMiddleware
  ]);
}

// ../node_modules/wrangler/node_modules/path-to-regexp/dist.es2015/index.js
function lexer(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i));
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j));
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j));
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i));
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
function parse(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
  var defaultPattern = "[^".concat(escapeString(options.delimiter || "/#?"), "]+?");
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || defaultPattern,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function match(str, options) {
  var keys = [];
  var re = pathToRegexp(str, keys, options);
  return regexpToFunction(re, keys, options);
}
function regexpToFunction(re, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.decode, decode3 = _a === void 0 ? function(x) {
    return x;
  } : _a;
  return function(pathname) {
    var m = re.exec(pathname);
    if (!m)
      return false;
    var path = m[0], index = m.index;
    var params = /* @__PURE__ */ Object.create(null);
    var _loop_1 = function(i2) {
      if (m[i2] === void 0)
        return "continue";
      var key = keys[i2 - 1];
      if (key.modifier === "*" || key.modifier === "+") {
        params[key.name] = m[i2].split(key.prefix + key.suffix).map(function(value) {
          return decode3(value, key);
        });
      } else {
        params[key.name] = decode3(m[i2], key);
      }
    };
    for (var i = 1; i < m.length; i++) {
      _loop_1(i);
    }
    return { path, index, params };
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags2(options) {
  return options && options.sensitive ? "" : "i";
}
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags2(options));
}
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse(path, options), keys, options);
}
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode3 = _d === void 0 ? function(x) {
    return x;
  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode3(token));
    } else {
      var prefix = escapeString(encode3(token.prefix));
      var suffix = escapeString(encode3(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            route += "((?:".concat(token.pattern, ")").concat(token.modifier, ")");
          } else {
            route += "(".concat(token.pattern, ")").concat(token.modifier);
          }
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags2(options));
}
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}

// ../node_modules/wrangler/templates/pages-template-worker.ts
var escapeRegex = /[.+?^${}()|[\]\\]/g;
function* executeRequest(request) {
  const requestPath = new URL(request.url).pathname;
  for (const route of [...routes].reverse()) {
    if (route.method && route.method !== request.method) {
      continue;
    }
    const routeMatcher = match(route.routePath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const mountMatcher = match(route.mountPath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const matchResult = routeMatcher(requestPath);
    const mountMatchResult = mountMatcher(requestPath);
    if (matchResult && mountMatchResult) {
      for (const handler of route.middlewares.flat()) {
        yield {
          handler,
          params: matchResult.params,
          path: mountMatchResult.path
        };
      }
    }
  }
  for (const route of routes) {
    if (route.method && route.method !== request.method) {
      continue;
    }
    const routeMatcher = match(route.routePath.replace(escapeRegex, "\\$&"), {
      end: true
    });
    const mountMatcher = match(route.mountPath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const matchResult = routeMatcher(requestPath);
    const mountMatchResult = mountMatcher(requestPath);
    if (matchResult && mountMatchResult && route.modules.length) {
      for (const handler of route.modules.flat()) {
        yield {
          handler,
          params: matchResult.params,
          path: matchResult.path
        };
      }
      break;
    }
  }
}
var pages_template_worker_default = {
  async fetch(originalRequest, env, workerContext) {
    let request = originalRequest;
    const handlerIterator = executeRequest(request);
    let data = {};
    let isFailOpen = false;
    const next = async (input, init) => {
      if (input !== void 0) {
        let url = input;
        if (typeof input === "string") {
          url = new URL(input, request.url).toString();
        }
        request = new Request(url, init);
      }
      const result = handlerIterator.next();
      if (result.done === false) {
        const { handler, params, path } = result.value;
        const context = {
          request: new Request(request.clone()),
          functionPath: path,
          next,
          params,
          get data() {
            return data;
          },
          set data(value) {
            if (typeof value !== "object" || value === null) {
              throw new Error("context.data must be an object");
            }
            data = value;
          },
          env,
          waitUntil: workerContext.waitUntil.bind(workerContext),
          passThroughOnException: () => {
            isFailOpen = true;
          }
        };
        const response = await handler(context);
        if (!(response instanceof Response)) {
          throw new Error("Your Pages function should return a Response");
        }
        return cloneResponse(response);
      } else if ("ASSETS") {
        const response = await env["ASSETS"].fetch(request);
        return cloneResponse(response);
      } else {
        const response = await fetch(request);
        return cloneResponse(response);
      }
    };
    try {
      return await next();
    } catch (error) {
      if (isFailOpen) {
        const response = await env["ASSETS"].fetch(request);
        return cloneResponse(response);
      }
      throw error;
    }
  }
};
var cloneResponse = (response) => (
  // https://fetch.spec.whatwg.org/#null-body-status
  new Response(
    [101, 204, 205, 304].includes(response.status) ? null : response.body,
    response
  )
);

// ../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts
function reduceError(e) {
  return {
    name: e?.name,
    message: e?.message ?? String(e),
    stack: e?.stack,
    cause: e?.cause === void 0 ? void 0 : reduceError(e.cause)
  };
}
var jsonError = async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } catch (e) {
    const error = reduceError(e);
    return Response.json(error, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
};
var middleware_miniflare3_json_error_default = jsonError;
var wrap3 = void 0;

// ../.wrangler/tmp/bundle-cT2LcN/middleware-insertion-facade.js
var envWrappers = [wrap3].filter(Boolean);
var facade = {
  ...pages_template_worker_default,
  envWrappers,
  middleware: [
    middleware_miniflare3_json_error_default,
    ...pages_template_worker_default.middleware ? pages_template_worker_default.middleware : []
  ].filter(Boolean)
};
var middleware_insertion_facade_default = facade;

// ../.wrangler/tmp/bundle-cT2LcN/middleware-loader.entry.ts
var __Facade_ScheduledController__ = class {
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof __Facade_ScheduledController__)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
var __facade_modules_fetch__ = function(request, env, ctx) {
  if (middleware_insertion_facade_default.fetch === void 0)
    throw new Error("Handler does not export a fetch() function.");
  return middleware_insertion_facade_default.fetch(request, env, ctx);
};
function getMaskedEnv(rawEnv) {
  let env = rawEnv;
  if (middleware_insertion_facade_default.envWrappers && middleware_insertion_facade_default.envWrappers.length > 0) {
    for (const wrapFn of middleware_insertion_facade_default.envWrappers) {
      env = wrapFn(env);
    }
  }
  return env;
}
var registeredMiddleware = false;
var facade2 = {
  ...middleware_insertion_facade_default.tail && {
    tail: maskHandlerEnv(middleware_insertion_facade_default.tail)
  },
  ...middleware_insertion_facade_default.trace && {
    trace: maskHandlerEnv(middleware_insertion_facade_default.trace)
  },
  ...middleware_insertion_facade_default.scheduled && {
    scheduled: maskHandlerEnv(middleware_insertion_facade_default.scheduled)
  },
  ...middleware_insertion_facade_default.queue && {
    queue: maskHandlerEnv(middleware_insertion_facade_default.queue)
  },
  ...middleware_insertion_facade_default.test && {
    test: maskHandlerEnv(middleware_insertion_facade_default.test)
  },
  ...middleware_insertion_facade_default.email && {
    email: maskHandlerEnv(middleware_insertion_facade_default.email)
  },
  fetch(request, rawEnv, ctx) {
    const env = getMaskedEnv(rawEnv);
    if (middleware_insertion_facade_default.middleware && middleware_insertion_facade_default.middleware.length > 0) {
      if (!registeredMiddleware) {
        registeredMiddleware = true;
        for (const middleware of middleware_insertion_facade_default.middleware) {
          __facade_register__(middleware);
        }
      }
      const __facade_modules_dispatch__ = function(type, init) {
        if (type === "scheduled" && middleware_insertion_facade_default.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__(
            Date.now(),
            init.cron ?? "",
            () => {
            }
          );
          return middleware_insertion_facade_default.scheduled(controller, env, ctx);
        }
      };
      return __facade_invoke__(
        request,
        env,
        ctx,
        __facade_modules_dispatch__,
        __facade_modules_fetch__
      );
    } else {
      return __facade_modules_fetch__(request, env, ctx);
    }
  }
};
function maskHandlerEnv(handler) {
  return (data, env, ctx) => handler(data, getMaskedEnv(env), ctx);
}
var middleware_loader_entry_default = facade2;
export {
  middleware_loader_entry_default as default
};
/*! Bundled license information:

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

@remix-run/server-runtime/dist/esm/warnings.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/cookies.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/formData.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.14.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/mode.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/errors.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/responses.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/entry.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/headers.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/invariant.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/routeMatching.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/data.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/routes.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/markup.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/serverHandoff.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/dev.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/server.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/sessions.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/sessions/cookieStorage.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/sessions/memoryStorage.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/upload/errors.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/upload/memoryUploadHandler.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/esm/index.js:
  (**
   * @remix-run/server-runtime v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/cloudflare/dist/crypto.js:
  (**
   * @remix-run/cloudflare v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/cloudflare/dist/implementations.js:
  (**
   * @remix-run/cloudflare v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/cloudflare/dist/sessions/workersKVStorage.js:
  (**
   * @remix-run/cloudflare v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/cloudflare/dist/index.js:
  (**
   * @remix-run/cloudflare v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.21.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.21.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/invariant.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/routeModules.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/links.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/markup.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/components.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/errorBoundaries.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/errors.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/data.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/fallback.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/routes.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/browser.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/scroll-restoration.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/server.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/esm/index.js:
  (**
   * @remix-run/react v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-dom/cjs/react-dom-server-legacy.browser.development.js:
  (**
   * @license React
   * react-dom-server-legacy.browser.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.browser.development.js:
  (**
   * @license React
   * react-dom-server.browser.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-dev-runtime.development.js:
  (**
   * @license React
   * react-jsx-dev-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

@remix-run/cloudflare-pages/dist/esm/worker.js:
  (**
   * @remix-run/cloudflare-pages v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/cloudflare-pages/dist/esm/index.js:
  (**
   * @remix-run/cloudflare-pages v2.4.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
//# sourceMappingURL=functionsWorker-0.5908403755061624.mjs.map
